items:
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  id: Expression
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.Expression.#ctor
  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.CanReduce
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Constant(System.Object)
  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Default(System.Type)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Empty
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.GetActionType(System.Type[])
  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Label
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Label(System.String)
  - System.Linq.Expressions.Expression.Label(System.Type)
  - System.Linq.Expressions.Expression.Label(System.Type,System.String)
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.New(System.Type)
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NodeType
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Parameter(System.Type)
  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Reduce
  - System.Linq.Expressions.Expression.ReduceAndCheck
  - System.Linq.Expressions.Expression.ReduceExtensions
  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Rethrow
  - System.Linq.Expressions.Expression.Rethrow(System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.SymbolDocument(System.String)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ToString
  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.Type
  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  langs:
  - csharp
  - vb
  name: Expression
  fullName: System.Linq.Expressions.Expression
  type: Class
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Expression
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 309
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: 'public abstract class Expression : object'
    content.vb: >-
      Public MustInherit Class Expression
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Linq.Expressions.Expression.#ctor
  commentId: M:System.Linq.Expressions.Expression.#ctor
  id: '#ctor'
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Expression()
  fullName: System.Linq.Expressions.Expression.Expression()
  type: Constructor
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 71
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: protected Expression()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Linq.Expressions.Expression.CanReduce
  commentId: P:System.Linq.Expressions.Expression.CanReduce
  id: CanReduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: CanReduce
  fullName: System.Linq.Expressions.Expression.CanReduce
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanReduce
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 117
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual bool CanReduce { get; }
    content.vb: Public Overridable ReadOnly Property CanReduce As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.NodeType
  commentId: P:System.Linq.Expressions.Expression.NodeType
  id: NodeType
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Linq.Expressions.Expression.NodeType
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 78
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual ExpressionType NodeType { get; }
    content.vb: Public Overridable ReadOnly Property NodeType As ExpressionType
    parameters: []
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.Type
  commentId: P:System.Linq.Expressions.Expression.Type
  id: Type
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Linq.Expressions.Expression.Type
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Type
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 97
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual Type Type { get; }
    content.vb: Public Overridable ReadOnly Property Type As Type
    parameters: []
    return:
      type: Type
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  id: Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Accept
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 166
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: protected virtual Expression Accept(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function Accept(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: The visitor to visit this node with.
    return:
      type: System.Linq.Expressions.Expression
      description: The result of visiting this node.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Add(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1560
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right)
    content.vb: Public Shared Function Add(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Add\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Add(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 127
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Add(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1597
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.AddAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 129
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 130
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1684
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to \n<xref href=\"ExpressionType.AddAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> \nproperties set to the specified values.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 132
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 133
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddChecked
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1744
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.AddChecked\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AddChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 135
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: And(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2569
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right)
    content.vb: Public Shared Function And(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.And\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: And(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 137
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function And(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAlso(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAlso
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1348
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.AndAlso\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAlso(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAlso
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 139
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2606
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.AndAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 141
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: AndAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 142
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayAccess(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 143
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, Collections.Generic.IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, indexes As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.IndexExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ArrayAccess(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayAccess(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayAccess
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs
    startLine: 168
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, ParamArray indexes As Expression()) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An expression representing the array to index.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array containing expressions used to index the array.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: ArrayAccess(Expression, Expression())
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 145
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, Collections.Generic.IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, indexes As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ArrayIndex(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2950
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ArrayIndex(Expression array, Expression index)
    content.vb: Public Shared Function ArrayIndex(array As Expression, index As Expression) As BinaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An Expression to set the Left property equal to.
    - id: index
      type: System.Linq.Expressions.Expression
      description: An Expression to set the Right property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A BinaryExpression that has the NodeType property equal to ArrayIndex and the Left and Right properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayIndex(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs
    startLine: 1254
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, ParamArray indexes As Expression()) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An array of <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> instances - indexes for the array index operation.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array that contains <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MethodCallExpression.Arguments" data-throw-if-not-resolved="false"></xref> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <xref href="System.Linq.Expressions.BinaryExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ArrayIndex" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> and <xref href="System.Linq.Expressions.BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: ArrayIndex(Expression, Expression())
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  id: ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ArrayLength(Expression)
  fullName: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayLength
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 853
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression ArrayLength(Expression array)
    content.vb: Public Shared Function ArrayLength(array As Expression) As UnaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.ArrayLength" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property equal to <em>array</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Assign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 621
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Assign(Expression left, Expression right)
    content.vb: Public Shared Function Assign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <see ref=\"F:ExpressionType.Assign\"></see> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Bind(Reflection.MemberInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Bind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 150
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberAssignment Bind(Reflection.MemberInfo member, Expression expression)
    content.vb: Public Shared Function Bind(member As Reflection.MemberInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MemberAssignment
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Bind(Reflection.MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Bind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 151
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberAssignment Bind(Reflection.MethodInfo propertyAccessor, Expression expression)
    content.vb: Public Shared Function Bind(propertyAccessor As Reflection.MethodInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MemberAssignment
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 152
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 153
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(variables As Collections.Generic.IEnumerable(Of ParameterExpression), expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 154
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(variables As Collections.Generic.IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  name.vb: Block(Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 731
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 745
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 761
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 779
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: The fifth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  id: Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 795
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(params Expression[] expressions)
    content.vb: Public Shared Function Block(ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <xref href="System.Linq.Expressions.BlockExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression())
  name.vb: Block(Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 160
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 161
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, variables As Collections.Generic.IEnumerable(Of ParameterExpression), expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 162
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, variables As Collections.Generic.IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    - id: expressions
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Block(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 163
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BlockExpression Block(Type type, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
    - id: expressions
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.BlockExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression())
  name.vb: Block(Type, Expression())
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  id: Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 131
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target)
    content.vb: Public Shared Function Break(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Linq.Expressions.GotoExpression" data-throw-if-not-resolved="false"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\nA <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Break, \nthe <xref href=\"GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, and a null value to be passed to the target label upon jumping.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 146
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Linq.Expressions.GotoExpression" data-throw-if-not-resolved="false"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\nA <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Break, \nthe <xref href=\"GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, \nand <em>value</em> to be passed to the target label upon jumping.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 166
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Break(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 167
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 168
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 169
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 170
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 171
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 172
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: Call(Expression, Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Expression, String, Type[], Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 173
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: methodName
      type: System.String
    - id: typeArguments
      type: System.Type[]
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type(), System.Linq.Expressions.Expression())
  name.vb: Call(Expression, String, Type(), Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 174
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Call(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 175
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 176
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 177
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 178
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    - id: arg3
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 179
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arg0
      type: System.Linq.Expressions.Expression
    - id: arg1
      type: System.Linq.Expressions.Expression
    - id: arg2
      type: System.Linq.Expressions.Expression
    - id: arg3
      type: System.Linq.Expressions.Expression
    - id: arg4
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 180
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: Call(Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Call(Type, String, Type[], Expression[])
  fullName: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 181
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(type As Type, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: type
      type: System.Type
    - id: methodName
      type: System.String
    - id: typeArguments
      type: System.Type[]
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.MethodCallExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type(), System.Linq.Expressions.Expression())
  name.vb: Call(Type, String, Type(), Expression())
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(ParameterExpression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/CatchBlock.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/CatchBlock.cs
    startLine: 114
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression" data-throw-if-not-resolved="false"></xref> representing a reference to the <see cref="!:Exception"></see> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <xref href="System.Linq.Expressions.CatchBlock" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/CatchBlock.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/CatchBlock.cs
    startLine: 141
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <xref href="System.Linq.Expressions.ParameterExpression" data-throw-if-not-resolved="false"></xref> representing a reference to the <see cref="!:Exception"></see> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the <see cref="!:Exception"></see> filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <xref href="System.Linq.Expressions.CatchBlock" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(Type, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 184
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body)
    content.vb: Public Shared Function Catch(type As Type, body As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Catch(Type, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Catch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 185
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(type As Type, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: filter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  commentId: M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ClearDebugInfo(SymbolDocumentInfo)
  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/DebugInfoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClearDebugInfo
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/DebugInfoExpression.cs
    startLine: 245
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document)
    content.vb: Public Shared Function ClearDebugInfo(document As SymbolDocumentInfo) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The <xref href="System.Linq.Expressions.SymbolDocumentInfo" data-throw-if-not-resolved="false"></xref> that represents the source file.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of <xref href="System.Linq.Expressions.DebugInfoExpression" data-throw-if-not-resolved="false"></xref> for clearing a sequence point.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Coalesce(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Coalesce
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1459
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A BinaryExpression that has the NodeType property equal to Coalesce and the Left and Right properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Coalesce(Expression, Expression, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Coalesce
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1473
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A LambdaExpression to set the Conversion property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: >
        A BinaryExpression that has the NodeType property equal to Coalesce and the Left, Right and Conversion properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Condition(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Condition
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
    startLine: 160
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.Test" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.IfTrue" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.IfFalse" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: "A <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to \n<xref href=\"ExpressionType.Conditional\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref>, \nand <xref href=\"ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Condition(Expression, Expression, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Condition
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 190
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression, type As Type) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
    - id: ifTrue
      type: System.Linq.Expressions.Expression
    - id: ifFalse
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ConditionalExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object)
  id: Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Constant(Object)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConstantExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Constant
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConstantExpression.cs
    startLine: 93
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConstantExpression Constant(object value)
    content.vb: Public Shared Function Constant(value As Object) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
      description: An <see cref="!:System.Object"></see> to set the <xref href="ConstantExpression.Value" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: "\nA <xref href=\"System.Linq.Expressions.ConstantExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to \n<xref href=\"ExpressionType.Constant\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"Expression.Value\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  id: Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Constant(Object, Type)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Constant
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 192
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConstantExpression Constant(object value, Type type)
    content.vb: Public Shared Function Constant(value As Object, type As Type) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ConstantExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  id: Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Continue(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Continue
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 193
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Continue(LabelTarget target)
    content.vb: Public Shared Function Continue(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Linq.Expressions.GotoExpression" data-throw-if-not-resolved="false"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\nA <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Continue, \nthe <xref href=\"GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, \nand a null value to be passed to the target label upon jumping.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Continue(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Continue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 194
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Continue(LabelTarget target, Type type)
    content.vb: Public Shared Function Continue(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  id: Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Convert(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 195
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Convert(Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 196
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ConvertChecked(Expression, Type)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 197
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ConvertChecked(Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 198
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  fullName: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/DebugInfoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DebugInfo
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/DebugInfoExpression.cs
    startLine: 228
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn)
    content.vb: Public Shared Function DebugInfo(document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The <xref href="System.Linq.Expressions.SymbolDocumentInfo" data-throw-if-not-resolved="false"></xref> that represents the source file.
    - id: startLine
      type: System.Int32
      description: The start line of this <xref href="System.Linq.Expressions.DebugInfoExpression" data-throw-if-not-resolved="false"></xref>. Must be greater than 0.
    - id: startColumn
      type: System.Int32
      description: The start column of this <xref href="System.Linq.Expressions.DebugInfoExpression" data-throw-if-not-resolved="false"></xref>. Must be greater than 0.
    - id: endLine
      type: System.Int32
      description: The end line of this <xref href="System.Linq.Expressions.DebugInfoExpression" data-throw-if-not-resolved="false"></xref>. Must be greater or equal than the start line.
    - id: endColumn
      type: System.Int32
      description: The end column of this <xref href="System.Linq.Expressions.DebugInfoExpression" data-throw-if-not-resolved="false"></xref>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of <xref href="System.Linq.Expressions.DebugInfoExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  id: Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Decrement(Expression)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrement
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 963
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Decrement(Expression expression)
    content.vb: Public Shared Function Decrement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to decrement.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents the decremented expression.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Decrement(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 201
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Decrement(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Decrement(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Default(System.Type)
  id: Default(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Default(Type)
  fullName: System.Linq.Expressions.Expression.Default(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 202
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DefaultExpression Default(Type type)
    content.vb: Public Shared Function Default(type As Type) As DefaultExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.DefaultExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Divide(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1973
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Divide\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Divide(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 204
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2010
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.DivideAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 206
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: DivideAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 207
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 208
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ElementInit ElementInit(Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function ElementInit(addMethod As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.ElementInit
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ElementInit(Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 209
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ElementInit ElementInit(Reflection.MethodInfo addMethod, params Expression[] arguments)
    content.vb: Public Shared Function ElementInit(addMethod As Reflection.MethodInfo, ParamArray arguments As Expression()) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.ElementInit
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: ElementInit(Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Empty
  commentId: M:System.Linq.Expressions.Expression.Empty
  id: Empty
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Empty()
  fullName: System.Linq.Expressions.Expression.Empty()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/DefaultExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/DefaultExpression.cs
    startLine: 60
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static DefaultExpression Empty()
    content.vb: Public Shared Function Empty As DefaultExpression
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: "\nA <xref href=\"System.Linq.Expressions.DefaultExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to \n<xref href=\"ExpressionType.Default\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"Expression.Type\" data-throw-if-not-resolved=\"false\"></xref> property set to <see cref=\"!:System.Void\"></see>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Equal(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equal
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1045
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Equal\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Equal(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equal
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 212
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOr(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOr
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2760
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.ExclusiveOr\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOr(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOr
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 214
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2796
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.ExclusiveOrAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 216
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 217
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, Reflection.FieldInfo)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 218
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Field(Expression expression, Reflection.FieldInfo field)
    content.vb: Public Shared Function Field(expression As Expression, field As Reflection.FieldInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: field
      type: System.Reflection.FieldInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  id: Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
    startLine: 178
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Field(Expression expression, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the field.  This can be null for static fields.
    - id: fieldName
      type: System.String
      description: The field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created <xref href="System.Linq.Expressions.MemberExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Field(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Field
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 220
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Field(Expression expression, Type type, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, type As Type, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: fieldName
      type: System.String
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetActionType(System.Type[])
  id: GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetActionType(Type[])
  fullName: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetActionType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 221
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Type GetActionType(params Type[] typeArgs)
    content.vb: Public Shared Function GetActionType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetActionType(System.Type())
  name.vb: GetActionType(Type())
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  id: GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetDelegateType(Type[])
  fullName: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDelegateType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 222
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Type GetDelegateType(params Type[] typeArgs)
    content.vb: Public Shared Function GetDelegateType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetDelegateType(System.Type())
  name.vb: GetDelegateType(Type())
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  commentId: M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  id: GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GetFuncType(Type[])
  fullName: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFuncType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 223
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Type GetFuncType(params Type[] typeArgs)
    content.vb: Public Shared Function GetFuncType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.GetFuncType(System.Type())
  name.vb: GetFuncType(Type())
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  id: Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 286
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target)
    content.vb: Public Shared Function Goto(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Linq.Expressions.GotoExpression" data-throw-if-not-resolved="false"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\nA <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Goto, \nthe <xref href=\"GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to the specified value, \nand a null value to be passed to the target label upon jumping.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 317
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Linq.Expressions.GotoExpression" data-throw-if-not-resolved="false"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\nA <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Goto, \nthe <xref href=\"GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, \nand <em>value</em> to be passed to the target label upon jumping.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 226
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Goto(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 227
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1191
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.GreaterThan\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 229
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1259
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.GreaterThanOrEqual\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 231
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IfThen(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IfThen
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
    startLine: 225
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression IfThen(Expression test, Expression ifTrue)
    content.vb: Public Shared Function IfThen(test As Expression, ifTrue As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.Test" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.IfTrue" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: "A <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to \n<xref href=\"ExpressionType.Conditional\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref>, \nproperties set to the specified values. The <xref href=\"ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> property is set to default expression and\nthe type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> returned by this method is <see cref=\"!:System.Void\"></see>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IfThenElse(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IfThenElse
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
    startLine: 240
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function IfThenElse(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.Test" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.IfTrue" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ConditionalExpression.IfFalse" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: "A <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to \n<xref href=\"ExpressionType.Conditional\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"ConditionalExpression.Test\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"ConditionalExpression.IfTrue\" data-throw-if-not-resolved=\"false\"></xref>, \nand <xref href=\"ConditionalExpression.IfFalse\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values. The type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\" data-throw-if-not-resolved=\"false\"></xref>\nreturned by this method is <see cref=\"!:System.Void\"></see>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  id: Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Increment(Expression)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 933
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Increment(Expression expression)
    content.vb: Public Shared Function Increment(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to increment.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents the incremented expression.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Increment(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 235
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Increment(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Increment(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Invoke(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 236
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, arguments As Collections.Generic.IEnumerable(Of Expression)) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.InvocationExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Invoke(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Invoke(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/InvocationExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/InvocationExpression.cs
    startLine: 744
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, params Expression[] arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, ParamArray arguments As Expression()) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: "\nAn <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> that represents the delegate\nor lambda expression to be applied.\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\nAn array of <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> objects\nthat represent the arguments that the delegate or lambda expression is applied to.\n"
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: "\nAn <xref href=\"System.Linq.Expressions.InvocationExpression\" data-throw-if-not-resolved=\"false\"></xref> that \napplies the specified delegate or lambda expression to the provided arguments.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: Invoke(Expression, Expression())
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  id: IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsFalse(Expression)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFalse
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 638
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression)
    content.vb: Public Shared Function IsFalse(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsFalse(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFalse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 239
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function IsFalse(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  id: IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsTrue(Expression)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTrue
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 668
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression)
    content.vb: Public Shared Function IsTrue(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: IsTrue(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTrue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 241
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function IsTrue(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label
  commentId: M:System.Linq.Expressions.Expression.Label
  id: Label
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label()
  fullName: System.Linq.Expressions.Expression.Label()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelTarget.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelTarget.cs
    startLine: 58
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label()
    content.vb: Public Shared Function Label As LabelTarget
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  id: Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelExpression.cs
    startLine: 95
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelExpression Label(LabelTarget target)
    content.vb: Public Shared Function Label(target As LabelTarget) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> which this <xref href="System.Linq.Expressions.LabelExpression" data-throw-if-not-resolved="false"></xref> will be associated with.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A <xref href="System.Linq.Expressions.LabelExpression" data-throw-if-not-resolved="false"></xref> with no default value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelExpression.cs
    startLine: 106
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelExpression Label(LabelTarget target, Expression defaultValue)
    content.vb: Public Shared Function Label(target As LabelTarget, defaultValue As Expression) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> which this <xref href="System.Linq.Expressions.LabelExpression" data-throw-if-not-resolved="false"></xref> will be associated with.
    - id: defaultValue
      type: System.Linq.Expressions.Expression
      description: The value of this <xref href="System.Linq.Expressions.LabelExpression" data-throw-if-not-resolved="false"></xref> when the label is reached through normal control flow.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A <xref href="System.Linq.Expressions.LabelExpression" data-throw-if-not-resolved="false"></xref> with the given default value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.String)
  id: Label(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(String)
  fullName: System.Linq.Expressions.Expression.Label(System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelTarget.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelTarget.cs
    startLine: 68
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label(string name)
    content.vb: Public Shared Function Label(name As String) As LabelTarget
    parameters:
    - id: name
      type: System.String
      description: The name of the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type)
  id: Label(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(Type)
  fullName: System.Linq.Expressions.Expression.Label(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 246
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label(Type type)
    content.vb: Public Shared Function Label(type As Type) As LabelTarget
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.LabelTarget
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Label(System.Type,System.String)
  id: Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Label(Type, String)
  fullName: System.Linq.Expressions.Expression.Label(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 247
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LabelTarget Label(Type type, string name)
    content.vb: Public Shared Function Label(type As Type, name As String) As LabelTarget
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Linq.Expressions.LabelTarget
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 248
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 376
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: 'An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="Body" data-throw-if-not-resolved="false"></xref> property equal to. '
    - id: tailCall
      type: System.Boolean
      description: 'A <see cref="!:Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression. '
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: 'An array that contains <xref href="System.Linq.Expressions.ParameterExpression" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="Parameters" data-throw-if-not-resolved="false"></xref> collection. '
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="NodeType" data-throw-if-not-resolved="false"></xref> property equal to Lambda and the <xref href="Body" data-throw-if-not-resolved="false"></xref> and <xref href="Parameters" data-throw-if-not-resolved="false"></xref> properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 250
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 364
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: 'An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="Body" data-throw-if-not-resolved="false"></xref> property equal to. '
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: 'An array that contains <xref href="System.Linq.Expressions.ParameterExpression" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="Parameters" data-throw-if-not-resolved="false"></xref> collection. '
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <xref href="System.Linq.Expressions.LambdaExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="NodeType" data-throw-if-not-resolved="false"></xref> property equal to Lambda and the <xref href="Body" data-throw-if-not-resolved="false"></xref> and <xref href="Parameters" data-throw-if-not-resolved="false"></xref> properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 252
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 253
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 254
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 255
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Type, Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 256
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 257
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Type, Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 258
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda(Type, Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 259
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Type, Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 260
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 298
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: 'An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="Body" data-throw-if-not-resolved="false"></xref> property equal to. '
    - id: tailCall
      type: System.Boolean
      description: 'A <see cref="!:Boolean"></see> that indicates if tail call optimization will be applied when compiling the created expression. '
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: 'An array that contains <xref href="System.Linq.Expressions.ParameterExpression" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="Parameters" data-throw-if-not-resolved="false"></xref> collection. '
    typeParameters:
    - id: TDelegate
      description: 'The delegate type. '
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An <xref href="System.Linq.Expressions.Expression`1" data-throw-if-not-resolved="false"></xref> that has the <xref href="NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="Lambda" data-throw-if-not-resolved="false"></xref> and the <xref href="Body" data-throw-if-not-resolved="false"></xref> and <xref href="Parameters" data-throw-if-not-resolved="false"></xref> properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 262
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 285
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: 'An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="Body" data-throw-if-not-resolved="false"></xref> property equal to. '
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: 'An array that contains <xref href="System.Linq.Expressions.ParameterExpression" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="Parameters" data-throw-if-not-resolved="false"></xref> collection. '
    typeParameters:
    - id: TDelegate
      description: 'The delegate type. '
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An <xref href="System.Linq.Expressions.Expression`1" data-throw-if-not-resolved="false"></xref> that has the <xref href="NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="Lambda" data-throw-if-not-resolved="false"></xref> and the <xref href="Body" data-throw-if-not-resolved="false"></xref> and <xref href="Parameters" data-throw-if-not-resolved="false"></xref> properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  name.vb: Lambda(Of TDelegate)(Expression, ParameterExpression())
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 264
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: tailCall
      type: System.Boolean
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Lambda<TDelegate>(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 265
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: name
      type: System.String
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: Lambda(Of TDelegate)(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShift
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2373
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.LeftShift\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShift(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 267
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2411
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.LeftShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 269
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LeftShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 270
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1225
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.LessThan\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 272
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1293
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.LessThanOrEqual\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 274
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 275
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(member As Reflection.MemberInfo, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
    return:
      type: System.Linq.Expressions.MemberListBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MemberInfo, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 276
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MemberInfo member, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(member As Reflection.MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
    return:
      type: System.Linq.Expressions.MemberListBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit())
  name.vb: ListBind(Reflection.MemberInfo, ElementInit())
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 277
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As Reflection.MethodInfo, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
    return:
      type: System.Linq.Expressions.MemberListBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListBind(Reflection.MethodInfo, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 278
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As Reflection.MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
    return:
      type: System.Linq.Expressions.MemberListBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit())
  name.vb: ListBind(Reflection.MethodInfo, ElementInit())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Collections.Generic.IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 279
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
    return:
      type: System.Linq.Expressions.ListInitExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  name.vb: ListInit(NewExpression, Collections.Generic.IEnumerable(Of ElementInit))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 280
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As Collections.Generic.IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.ListInitExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ListInit(NewExpression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ListInitExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ListInitExpression.cs
    startLine: 201
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As ElementInit()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ListInitExpression.NewExpression" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array that contains <xref href="ElementInit" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers" data-throw-if-not-resolved="false"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: "\nA <xref href=\"System.Linq.Expressions.ListInitExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expressions.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to ListInit \nand the <xref href=\"ListInitExpression.NewExpression\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"ListInitExpression.Initializers\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit())
  name.vb: ListInit(NewExpression, ElementInit())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ListInitExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ListInitExpression.cs
    startLine: 125
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression" data-throw-if-not-resolved="false"></xref> to set the <xref href="ListInitExpression.NewExpression" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="System.Linq.Expressions.ListInitExpression.Initializers" data-throw-if-not-resolved="false"></xref> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <xref href="System.Linq.Expressions.ListInitExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="ListInitExpression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to ListInit and the <xref href="ListInitExpression.NewExpression" data-throw-if-not-resolved="false"></xref> property set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression())
  name.vb: ListInit(NewExpression, Expression())
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 283
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As Reflection.MethodInfo, initializers As Collections.Generic.IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.ListInitExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ListInit(NewExpression, Reflection.MethodInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 284
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As Reflection.MethodInfo, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: addMethod
      type: System.Reflection.MethodInfo
    - id: initializers
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.ListInitExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  name.vb: ListInit(NewExpression, Reflection.MethodInfo, Expression())
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  id: Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
    startLine: 104
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LoopExpression Loop(Expression body)
    content.vb: Public Shared Function Loop(body As Expression) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <xref href="System.Linq.Expressions.LoopExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
    startLine: 115
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <xref href="System.Linq.Expressions.LoopExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Loop(Expression, LabelTarget, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
    startLine: 127
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break, LabelTarget continue)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    - id: continue
      type: System.Linq.Expressions.LabelTarget
      description: The continue target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <xref href="System.Linq.Expressions.LoopExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 917
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The ExpressionType that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An Expression that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An Expression that represents the right operand.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The BinaryExpression that results from calling the appropriate factory method.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 289
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeBinary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 290
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeCatchBlock
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 291
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function MakeCatchBlock(type As Type, variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
    - id: body
      type: System.Linq.Expressions.Expression
    - id: filter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.CatchBlock
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGoto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 292
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function MakeGoto(kind As GotoExpressionKind, target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: kind
      type: System.Linq.Expressions.GotoExpressionKind
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 293
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression MakeIndex(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function MakeIndex(instance As Expression, indexer As Reflection.PropertyInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: indexer
      type: System.Reflection.PropertyInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.IndexExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeMemberAccess(Expression, Reflection.MemberInfo)
  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeMemberAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 294
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression MakeMemberAccess(Expression expression, Reflection.MemberInfo member)
    content.vb: Public Shared Function MakeMemberAccess(expression As Expression, member As Reflection.MemberInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: member
      type: System.Reflection.MemberInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  commentId: M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable<CatchBlock>)
  fullName: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeTry
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 295
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression MakeTry(Type type, Expression body, Expression finally, Expression fault, Collections.Generic.IEnumerable<CatchBlock> handlers)
    content.vb: Public Shared Function MakeTry(type As Type, body As Expression, finally As Expression, fault As Expression, handlers As Collections.Generic.IEnumerable(Of CatchBlock)) As TryExpression
    parameters:
    - id: type
      type: System.Type
    - id: body
      type: System.Linq.Expressions.Expression
    - id: finally
      type: System.Linq.Expressions.Expression
    - id: fault
      type: System.Linq.Expressions.Expression
    - id: handlers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
    return:
      type: System.Linq.Expressions.TryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock))
  name.vb: MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable(Of CatchBlock))
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeUnary(ExpressionType, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeUnary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 296
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
    - id: operand
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MakeUnary(ExpressionType, Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeUnary
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 297
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
    - id: operand
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 298
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(member As Reflection.MemberInfo, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MemberInfo, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 299
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(member As Reflection.MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding())
  name.vb: MemberBind(Reflection.MemberInfo, MemberBinding())
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 300
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As Reflection.MethodInfo, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberBind(Reflection.MethodInfo, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberBind
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 301
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As Reflection.MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
    return:
      type: System.Linq.Expressions.MemberMemberBinding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding())
  name.vb: MemberBind(Reflection.MethodInfo, MemberBinding())
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberInit(NewExpression, Collections.Generic.IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 302
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
    return:
      type: System.Linq.Expressions.MemberInitExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  name.vb: MemberInit(NewExpression, Collections.Generic.IEnumerable(Of MemberBinding))
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MemberInit(NewExpression, MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberInitExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberInit
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberInitExpression.cs
    startLine: 163
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, ParamArray bindings As MemberBinding()) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <xref href="System.Linq.Expressions.NewExpression" data-throw-if-not-resolved="false"></xref> to set the <xref href="System.Linq.Expressions.MemberInitExpression.NewExpression" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of <xref href="System.Linq.Expressions.MemberBinding" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="System.Linq.Expressions.MemberInitExpression.Bindings" data-throw-if-not-resolved="false"></xref> collection.
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: A <xref href="System.Linq.Expressions.MemberInitExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.MemberInit" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.MemberInitExpression.NewExpression" data-throw-if-not-resolved="false"></xref> and <xref href="System.Linq.Expressions.MemberInitExpression.Bindings" data-throw-if-not-resolved="false"></xref> properties set to the specified values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding())
  name.vb: MemberInit(NewExpression, MemberBinding())
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Modulo(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modulo
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2069
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Modulo\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Modulo(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modulo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 305
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2106
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.ModuloAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 307
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ModuloAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 308
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Multiply(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2165
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Multiply\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Multiply(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 310
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2202
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.MultiplyAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 312
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 313
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2261
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.MultiplyAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 315
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 316
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyChecked
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2320
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.MultiplyChecked\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: MultiplyChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 318
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  id: Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Negate(Expression)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 495
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Negate(Expression expression)
    content.vb: Public Shared Function Negate(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="ExpressionType.Negate" data-throw-if-not-resolved="false"></xref> and the <xref href="UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> properties set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Negate(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 320
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Negate(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Negate(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  id: NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NegateChecked(Expression)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateChecked
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 564
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression)
    content.vb: Public Shared Function NegateChecked(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.NegateChecked" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NegateChecked(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 322
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function NegateChecked(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  id: New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 323
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 324
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Collections.Generic.IEnumerable<Reflection.MemberInfo>)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 325
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, Collections.Generic.IEnumerable<Reflection.MemberInfo> members)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression), members As Collections.Generic.IEnumerable(Of Reflection.MemberInfo)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    - id: members
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo))
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Collections.Generic.IEnumerable(Of Reflection.MemberInfo))
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Reflection.MemberInfo[])
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 326
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, params Reflection.MemberInfo[] members)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression), ParamArray members As Reflection.MemberInfo()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    - id: members
      type: System.Reflection.MemberInfo[]
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Reflection.MemberInfo())
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Reflection.MemberInfo())
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Reflection.ConstructorInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 327
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, params Expression[] arguments)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, ParamArray arguments As Expression()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression())
  name.vb: New(Reflection.ConstructorInfo, Expression())
- uid: System.Linq.Expressions.Expression.New(System.Type)
  commentId: M:System.Linq.Expressions.Expression.New(System.Type)
  id: New(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: New(Type)
  fullName: System.Linq.Expressions.Expression.New(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 328
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewExpression New(Type type)
    content.vb: Public Shared Function New(type As Type) As NewExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.NewExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayBounds(Type, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayBounds
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 329
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, Collections.Generic.IEnumerable<Expression> bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, bounds As Collections.Generic.IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: bounds
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.NewArrayExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: NewArrayBounds(Type, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayBounds(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayBounds
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 330
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, ParamArray bounds As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: bounds
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.NewArrayExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression())
  name.vb: NewArrayBounds(Type, Expression())
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayInit(Type, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 331
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, initializers As Collections.Generic.IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.NewArrayExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: NewArrayInit(Type, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NewArrayInit(Type, Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 332
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, ParamArray initializers As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
    - id: initializers
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.NewArrayExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression())
  name.vb: NewArrayInit(Type, Expression())
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  id: Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Not(Expression)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 599
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Not(Expression expression)
    content.vb: Public Shared Function Not(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Not" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Not(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 334
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Not(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Not(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEqual
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1097
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.NotEqual\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: NotEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 336
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: liftToNull
      type: System.Boolean
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  id: OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OnesComplement(Expression)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnesComplement
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 698
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression)
    content.vb: Public Shared Function OnesComplement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OnesComplement(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnesComplement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 338
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function OnesComplement(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Or(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2665
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right)
    content.vb: Public Shared Function Or(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Or\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Or(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 340
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Or(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2702
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.OrAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 342
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 343
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrElse(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrElse
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1402
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.OrElse\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: OrElse(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 345
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type)
  id: Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Parameter(Type)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 346
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Parameter(Type type)
    content.vb: Public Shared Function Parameter(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  id: Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Parameter(Type, String)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 347
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Parameter(Type type, string name)
    content.vb: Public Shared Function Parameter(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  id: PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostDecrementAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 1063
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents the resultant expression.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostDecrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 349
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  id: PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostIncrementAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 1040
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents the resultant expression.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PostIncrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 351
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Power(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Power
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2854
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right)
    content.vb: Public Shared Function Power(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Power\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Power(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Power
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 353
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Power(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2892
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.PowerAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 355
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PowerAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 356
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  id: PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreDecrementAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 1017
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents the resultant expression.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreDecrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 358
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  id: PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreIncrementAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 994
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents the resultant expression.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PreIncrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 360
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 361
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, Reflection.MethodInfo propertyAccessor)
    content.vb: Public Shared Function Property(expression As Expression, propertyAccessor As Reflection.MethodInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.PropertyInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 362
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, Reflection.PropertyInfo property)
    content.vb: Public Shared Function Property(expression As Expression, property As Reflection.PropertyInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: property
      type: System.Reflection.PropertyInfo
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 363
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As Reflection.PropertyInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: indexer
      type: System.Reflection.PropertyInfo
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.IndexExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Reflection.PropertyInfo, Expression[])
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 364
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As Reflection.PropertyInfo, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
    - id: indexer
      type: System.Reflection.PropertyInfo
    - id: arguments
      type: System.Linq.Expressions.Expression[]
    return:
      type: System.Linq.Expressions.IndexExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression())
  name.vb: Property(Expression, Reflection.PropertyInfo, Expression())
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  id: Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
    startLine: 231
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the property.  This can be null for static properties.
    - id: propertyName
      type: System.String
      description: The property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created <xref href="System.Linq.Expressions.MemberExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, String, Expression[])
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs
    startLine: 219
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: propertyName
      type: System.String
      description: The name of the indexer.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <xref href="System.Linq.Expressions.IndexExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression())
  name.vb: Property(Expression, String, Expression())
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Property(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Property
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 367
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression Property(Expression expression, Type type, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, type As Type, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    - id: propertyName
      type: System.String
    return:
      type: System.Linq.Expressions.MemberExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  commentId: M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: PropertyOrField(Expression, String)
  fullName: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyOrField
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
    startLine: 378
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName)
    content.vb: Public Shared Function PropertyOrField(expression As Expression, propertyOrFieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the member.  This can be null for static members.
    - id: propertyOrFieldName
      type: System.String
      description: The member to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created <xref href="System.Linq.Expressions.MemberExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  id: Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Quote(Expression)
  fullName: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Quote
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 872
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Quote(Expression expression)
    content.vb: Public Shared Function Quote(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.Quote" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Reduce
  commentId: M:System.Linq.Expressions.Expression.Reduce
  id: Reduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Reduce()
  fullName: System.Linq.Expressions.Expression.Reduce()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reduce
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 128
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public virtual Expression Reduce()
    content.vb: Public Overridable Function Reduce As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  commentId: M:System.Linq.Expressions.Expression.ReduceAndCheck
  id: ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReduceAndCheck()
  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReduceAndCheck
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 181
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public Expression ReduceAndCheck()
    content.vb: Public Function ReduceAndCheck As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  commentId: M:System.Linq.Expressions.Expression.ReduceExtensions
  id: ReduceExtensions
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReduceExtensions()
  fullName: System.Linq.Expressions.Expression.ReduceExtensions()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReduceExtensions
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 199
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public Expression ReduceExtensions()
    content.vb: Public Function ReduceExtensions As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReferenceEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReferenceEqual
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1079
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ReferenceEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Equal\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ReferenceNotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReferenceNotEqual
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1131
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression ReferenceNotEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceNotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.NotEqual\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Rethrow
  commentId: M:System.Linq.Expressions.Expression.Rethrow
  id: Rethrow
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Rethrow()
  fullName: System.Linq.Expressions.Expression.Rethrow()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rethrow
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 884
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Rethrow()
    content.vb: Public Shared Function Rethrow As UnaryExpression
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents a rethrowing of an exception.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Rethrow(System.Type)
  id: Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Rethrow(Type)
  fullName: System.Linq.Expressions.Expression.Rethrow(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rethrow
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 376
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Rethrow(Type type)
    content.vb: Public Shared Function Rethrow(type As Type) As UnaryExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  id: Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 223
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target)
    content.vb: Public Shared Function Return(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Linq.Expressions.GotoExpression" data-throw-if-not-resolved="false"></xref> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\nA <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Return, \nthe <xref href=\"GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, \nand a null value to be passed to the target label upon jumping.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 254
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <xref href="System.Linq.Expressions.LabelTarget" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Linq.Expressions.GotoExpression" data-throw-if-not-resolved="false"></xref> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: "\nA <xref href=\"System.Linq.Expressions.GotoExpression\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"GotoExpression.Kind\" data-throw-if-not-resolved=\"false\"></xref> equal to Continue, \nthe <xref href=\"GotoExpression.Target\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>target</em>, \nand <em>value</em> to be passed to the target label upon jumping.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 379
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Return(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Return
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 380
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.GotoExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShift
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2471
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.RightShift\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShift(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 382
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2509
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.RightShiftAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 384
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RightShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 385
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeVariables
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 386
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression> variables)
    content.vb: Public Shared Function RuntimeVariables(variables As Collections.Generic.IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: RuntimeVariables(Collections.Generic.IEnumerable(Of ParameterExpression))
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: RuntimeVariables(ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/RuntimeVariablesExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeVariables
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/RuntimeVariablesExpression.cs
    startLine: 87
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables)
    content.vb: Public Shared Function RuntimeVariables(ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <xref href="System.Linq.Expressions.ParameterExpression" data-throw-if-not-resolved="false"></xref> objects to use to populate the <xref href="System.Linq.Expressions.RuntimeVariablesExpression.Variables" data-throw-if-not-resolved="false"></xref> collection.
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: An instance of <xref href="System.Linq.Expressions.RuntimeVariablesExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.RuntimeVariables" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.RuntimeVariablesExpression.Variables" data-throw-if-not-resolved="false"></xref> property set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression())
  name.vb: RuntimeVariables(ParameterExpression())
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Subtract(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1781
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.Subtract\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Subtract(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 389
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1818
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.SubtractAssign\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 391
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 392
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1877
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.SubtractAssignChecked\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 394
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 395
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractChecked
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1936
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Left" data-throw-if-not-resolved="false"></xref> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="BinaryExpression.Right" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: "A <xref href=\"System.Linq.Expressions.BinaryExpression\" data-throw-if-not-resolved=\"false\"></xref> that has the <xref href=\"Expression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property equal to <xref href=\"ExpressionType.SubtractChecked\" data-throw-if-not-resolved=\"false\"></xref> \nand the <xref href=\"BinaryExpression.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"BinaryExpression.Right\" data-throw-if-not-resolved=\"false\"></xref> properties set to the specified values."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SubtractChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 397
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
    - id: right
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.BinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 145
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if no cases are matched.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The valid cases for this switch.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, Expression, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 399
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, cases As Collections.Generic.IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
    return:
      type: System.Linq.Expressions.SwitchExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  name.vb: Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 400
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
    return:
      type: System.Linq.Expressions.SwitchExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Expression, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 133
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The valid cases for this switch.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <xref href="System.Linq.Expressions.SwitchExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Expression, SwitchCase())
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 402
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, cases As Collections.Generic.IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
    return:
      type: System.Linq.Expressions.SwitchExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  name.vb: Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 403
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
    - id: switchValue
      type: System.Linq.Expressions.Expression
    - id: defaultBody
      type: System.Linq.Expressions.Expression
    - id: comparison
      type: System.Reflection.MethodInfo
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
    return:
      type: System.Linq.Expressions.SwitchExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  name.vb: Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase())
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SwitchCase(Expression, Collections.Generic.IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 404
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, Collections.Generic.IEnumerable<Expression> testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, testValues As Collections.Generic.IEnumerable(Of Expression)) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
    return:
      type: System.Linq.Expressions.SwitchCase
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: SwitchCase(Expression, Collections.Generic.IEnumerable(Of Expression))
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SwitchCase(Expression, Expression[])
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SwitchCase
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
    startLine: 78
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, params Expression[] testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, ParamArray testValues As Expression()) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the case.
    - id: testValues
      type: System.Linq.Expressions.Expression[]
      description: The test values of the case.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: The created <xref href="SwitchCase" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  name.vb: SwitchCase(Expression, Expression())
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String)
  id: SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SymbolDocumentInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SymbolDocumentInfo.cs
    startLine: 111
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName)
    content.vb: Public Shared Function SymbolDocument(fileName As String) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> to set the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName" data-throw-if-not-resolved="false"></xref> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <xref href="System.Linq.Expressions.SymbolDocumentInfo" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.SymbolDocumentInfo.FileName" data-throw-if-not-resolved="false"></xref> property set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  id: SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 407
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
    - id: language
      type: System.Guid
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 408
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
    - id: language
      type: System.Guid
    - id: languageVendor
      type: System.Guid
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: SymbolDocument(String, Guid, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymbolDocument
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 409
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
    - id: language
      type: System.Guid
    - id: languageVendor
      type: System.Guid
    - id: documentType
      type: System.Guid
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  id: Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Throw(Expression)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Throw
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 904
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Throw(Expression value)
    content.vb: Public Shared Function Throw(value As Expression) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that represents the exception.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  id: Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Throw(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Throw
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 411
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Throw(Expression value, Type type)
    content.vb: Public Shared Function Throw(value As Expression, type As Type) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.ToString
  commentId: M:System.Linq.Expressions.Expression.ToString
  id: ToString
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Linq.Expressions.Expression.ToString()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 214
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A <see cref="!:String"></see> representation of the Expression.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryCatch(Expression, CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCatch
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 148
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatch(body As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more <xref href="System.Linq.Expressions.CatchBlock" data-throw-if-not-resolved="false"></xref>s representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  name.vb: TryCatch(Expression, CatchBlock())
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  commentId: M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryCatchFinally(Expression, Expression, CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCatchFinally
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 160
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryCatchFinally(Expression body, Expression finally, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatchFinally(body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more <xref href="System.Linq.Expressions.CatchBlock" data-throw-if-not-resolved="false"></xref>s representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  name.vb: TryCatchFinally(Expression, Expression, CatchBlock())
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryFault(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryFault
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 126
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryFault(Expression body, Expression fault)
    content.vb: Public Shared Function TryFault(body As Expression, fault As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: fault
      type: System.Linq.Expressions.Expression
      description: The body of the fault block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryFinally(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryFinally
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 137
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TryExpression TryFinally(Expression body, Expression finally)
    content.vb: Public Shared Function TryFinally(body As Expression, finally As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <xref href="System.Linq.Expressions.TryExpression" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  id: TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryGetActionType(Type[], out Type)
  fullName: System.Linq.Expressions.Expression.TryGetActionType(System.Type[], out System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetActionType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 417
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static bool TryGetActionType(Type[] typeArgs, out Type actionType)
    content.vb: Public Shared Function TryGetActionType(typeArgs As Type(), ByRef actionType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
    - id: actionType
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryGetActionType(System.Type(), ByRef System.Type)
  name.vb: TryGetActionType(Type(), ByRef Type)
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  commentId: M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  id: TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TryGetFuncType(Type[], out Type)
  fullName: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], out System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetFuncType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 418
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static bool TryGetFuncType(Type[] typeArgs, out Type funcType)
    content.vb: Public Shared Function TryGetFuncType(typeArgs As Type(), ByRef funcType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
    - id: funcType
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.Expression.TryGetFuncType(System.Type(), ByRef System.Type)
  name.vb: TryGetFuncType(Type(), ByRef Type)
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  id: TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeAs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeAs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 419
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression TypeAs(Expression expression, Type type)
    content.vb: Public Shared Function TypeAs(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeEqual(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 420
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TypeBinaryExpression TypeEqual(Expression expression, Type type)
    content.vb: Public Shared Function TypeEqual(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  id: TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: TypeIs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeIs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 421
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static TypeBinaryExpression TypeIs(Expression expression, Type type)
    content.vb: Public Shared Function TypeIs(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  id: UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: UnaryPlus(Expression)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryPlus
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 530
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression)
    content.vb: Public Shared Function UnaryPlus(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <xref href="System.Linq.Expressions.Expression" data-throw-if-not-resolved="false"></xref> to set the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <xref href="System.Linq.Expressions.UnaryExpression" data-throw-if-not-resolved="false"></xref> that has the <xref href="System.Linq.Expressions.Expression.NodeType" data-throw-if-not-resolved="false"></xref> property equal to <xref href="System.Linq.Expressions.ExpressionType.UnaryPlus" data-throw-if-not-resolved="false"></xref> and the <xref href="System.Linq.Expressions.UnaryExpression.Operand" data-throw-if-not-resolved="false"></xref> property set to the specified value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: UnaryPlus(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryPlus
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 423
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function UnaryPlus(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: method
      type: System.Reflection.MethodInfo
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  commentId: M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  id: Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Unbox(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unbox
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 424
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static UnaryExpression Unbox(Expression expression, Type type)
    content.vb: Public Shared Function Unbox(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.UnaryExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type)
  id: Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Variable(Type)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Variable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 425
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Variable(Type type)
    content.vb: Public Shared Function Variable(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  id: Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: Variable(Type, String)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Variable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 426
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: public static ParameterExpression Variable(Type type, string name)
    content.vb: Public Shared Function Variable(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  - vb
  name: VisitChildren(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VisitChildren
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 146
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  syntax:
    content: protected virtual Expression VisitChildren(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function VisitChildren(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: An instance of <xref href="System.Linq.Expressions.ExpressionVisitor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Linq.Expressions.Expression
      description: The expression being visited, or an expression which should replace it in the tree.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  name.vb: Collections.Generic.IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.Expressions.Expression[]
  isExternal: false
  name: Expression[]
  fullName: System.Linq.Expressions.Expression[]
  fullname.vb: System.Linq.Expressions.Expression()
  name.vb: Expression()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)
  name.vb: Collections.Generic.IEnumerable(Of ParameterExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: )
    fullName: )
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.ParameterExpression[]
  isExternal: false
  name: ParameterExpression[]
  fullName: System.Linq.Expressions.ParameterExpression[]
  fullname.vb: System.Linq.Expressions.ParameterExpression()
  name.vb: ParameterExpression()
  spec.csharp:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.Expression{{TDelegate}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    fullName: <
  - name: TDelegate
    fullName: TDelegate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    fullName: '(Of '
  - name: TDelegate
    fullName: TDelegate
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    fullName: <
  - name: TDelegate
    fullName: TDelegate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    fullName: '(Of '
  - name: TDelegate
    fullName: TDelegate
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<ElementInit>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit)
  name.vb: Collections.Generic.IEnumerable(Of ElementInit)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: )
    fullName: )
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Linq.Expressions.ElementInit[]
  isExternal: false
  name: ElementInit[]
  fullName: System.Linq.Expressions.ElementInit[]
  fullname.vb: System.Linq.Expressions.ElementInit()
  name.vb: ElementInit()
  spec.csharp:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.GotoExpressionKind
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpressionKind
  fullName: System.Linq.Expressions.GotoExpressionKind
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CatchBlock>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock)
  name.vb: Collections.Generic.IEnumerable(Of CatchBlock)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: )
    fullName: )
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<MemberBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding)
  name.vb: Collections.Generic.IEnumerable(Of MemberBinding)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: )
    fullName: )
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Linq.Expressions.MemberBinding[]
  isExternal: false
  name: MemberBinding[]
  fullName: System.Linq.Expressions.MemberBinding[]
  fullname.vb: System.Linq.Expressions.MemberBinding()
  name.vb: MemberBinding()
  spec.csharp:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Reflection.MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  name.vb: Collections.Generic.IEnumerable(Of Reflection.MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: Reflection.MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: Reflection.MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo[]
  isExternal: false
  name: Reflection.MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  fullname.vb: System.Reflection.MemberInfo()
  name.vb: Reflection.MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: Reflection.MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: Reflection.MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Linq.Expressions.SwitchCase[]
  isExternal: false
  name: SwitchCase[]
  fullName: System.Linq.Expressions.SwitchCase[]
  fullname.vb: System.Linq.Expressions.SwitchCase()
  name.vb: SwitchCase()
  spec.csharp:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<SwitchCase>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase)
  name.vb: Collections.Generic.IEnumerable(Of SwitchCase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
  - name: )
    fullName: )
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Linq.Expressions.CatchBlock[]
  isExternal: false
  name: CatchBlock[]
  fullName: System.Linq.Expressions.CatchBlock[]
  fullname.vb: System.Linq.Expressions.CatchBlock()
  name.vb: CatchBlock()
  spec.csharp:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
