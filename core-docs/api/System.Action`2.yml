items:
- uid: System.Action`2
  commentId: T:System.Action`2
  id: Action`2
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Action<T1, T2>
  fullName: System.Action<T1, T2>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Action
    path: src/mscorlib/src/System/Action.cs
    startLine: 22
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has two parameters and does not return a value.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Action`2\" data-throw-if-not-resolved=\"false\"></xref> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have two parameters that are both passed to it by value, and it must not return a value. (In C#, the method must return <strong>void</strong>. In Visual Basic, it must be defined by the <strong>Sub</strong>â€¦<strong>End Sub</strong> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</p>\n<p>To reference a method that has two parameters and returns a value, use the generic <xref href=\"System.Func`3\" data-throw-if-not-resolved=\"false\"></xref> delegate instead.</p>\n<p>When you use the <xref href=\"System.Action`2\" data-throw-if-not-resolved=\"false\"></xref> delegate, you do not have to explicitly define a delegate that encapsulates a method with two parameters. For example, the following code explicitly declares a delegate named <code>ConcatStrings</code>. It then assigns a reference to either of two methods to its delegate instance. One method writes two strings to the console; the second writes two strings to a file. </p>System.Action~2#1<p>The following example simplifies this code by instantiating the <xref href=\"System.Action`2\" data-throw-if-not-resolved=\"false\"></xref> delegate instead of explicitly defining a new delegate and assigning a named method to it.</p>System.Action~2#2<p>You can also use the <xref href=\"System.Action`2\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see Anonymous Methods (C# Programming Guide).)</p>System.Action~2#3<p>You can also assign a lambda expression to an <xref href=\"System.Action`2\" data-throw-if-not-resolved=\"false\"></xref> delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see Lambda Expressions (C# Programming Guide).)</p>System.Action~2#4"
  example:
  - 
  syntax:
    content: >-
      [TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")]

      public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2);
    content.vb: >-
      <TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")>

      Public Delegate Sub Action(Of In T1, In T2)(arg1 As T1, arg2 As T2)
    parameters:
    - id: arg1
      type: '{T1}'
    - id: arg2
      type: '{T2}'
    typeParameters:
    - id: T1
    - id: T2
  seealso:
  - type: System.Func`3
    commentId: T:System.Func`3
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: '{T2}'
  isExternal: false
  name: T2
  fullName: T2
