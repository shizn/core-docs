items:
- uid: System.Convert
  commentId: T:System.Convert
  id: Convert
  parent: System
  children:
  - System.Convert.ChangeType(System.Object,System.Type)
  - System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)
  - System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  - System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  - System.Convert.FromBase64String(System.String)
  - System.Convert.GetTypeCode(System.Object)
  - System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Convert.ToBase64String(System.Byte[])
  - System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)
  - System.Convert.ToBoolean(System.Boolean)
  - System.Convert.ToBoolean(System.Byte)
  - System.Convert.ToBoolean(System.Decimal)
  - System.Convert.ToBoolean(System.Double)
  - System.Convert.ToBoolean(System.Int16)
  - System.Convert.ToBoolean(System.Int32)
  - System.Convert.ToBoolean(System.Int64)
  - System.Convert.ToBoolean(System.Object)
  - System.Convert.ToBoolean(System.Object,System.IFormatProvider)
  - System.Convert.ToBoolean(System.SByte)
  - System.Convert.ToBoolean(System.Single)
  - System.Convert.ToBoolean(System.String)
  - System.Convert.ToBoolean(System.String,System.IFormatProvider)
  - System.Convert.ToBoolean(System.UInt16)
  - System.Convert.ToBoolean(System.UInt32)
  - System.Convert.ToBoolean(System.UInt64)
  - System.Convert.ToByte(System.Boolean)
  - System.Convert.ToByte(System.Byte)
  - System.Convert.ToByte(System.Char)
  - System.Convert.ToByte(System.Decimal)
  - System.Convert.ToByte(System.Double)
  - System.Convert.ToByte(System.Int16)
  - System.Convert.ToByte(System.Int32)
  - System.Convert.ToByte(System.Int64)
  - System.Convert.ToByte(System.Object)
  - System.Convert.ToByte(System.Object,System.IFormatProvider)
  - System.Convert.ToByte(System.SByte)
  - System.Convert.ToByte(System.Single)
  - System.Convert.ToByte(System.String)
  - System.Convert.ToByte(System.String,System.IFormatProvider)
  - System.Convert.ToByte(System.String,System.Int32)
  - System.Convert.ToByte(System.UInt16)
  - System.Convert.ToByte(System.UInt32)
  - System.Convert.ToByte(System.UInt64)
  - System.Convert.ToChar(System.Byte)
  - System.Convert.ToChar(System.Int16)
  - System.Convert.ToChar(System.Int32)
  - System.Convert.ToChar(System.Int64)
  - System.Convert.ToChar(System.Object)
  - System.Convert.ToChar(System.Object,System.IFormatProvider)
  - System.Convert.ToChar(System.SByte)
  - System.Convert.ToChar(System.String)
  - System.Convert.ToChar(System.String,System.IFormatProvider)
  - System.Convert.ToChar(System.UInt16)
  - System.Convert.ToChar(System.UInt32)
  - System.Convert.ToChar(System.UInt64)
  - System.Convert.ToDateTime(System.Object)
  - System.Convert.ToDateTime(System.Object,System.IFormatProvider)
  - System.Convert.ToDateTime(System.String)
  - System.Convert.ToDateTime(System.String,System.IFormatProvider)
  - System.Convert.ToDecimal(System.Boolean)
  - System.Convert.ToDecimal(System.Byte)
  - System.Convert.ToDecimal(System.Decimal)
  - System.Convert.ToDecimal(System.Double)
  - System.Convert.ToDecimal(System.Int16)
  - System.Convert.ToDecimal(System.Int32)
  - System.Convert.ToDecimal(System.Int64)
  - System.Convert.ToDecimal(System.Object)
  - System.Convert.ToDecimal(System.Object,System.IFormatProvider)
  - System.Convert.ToDecimal(System.SByte)
  - System.Convert.ToDecimal(System.Single)
  - System.Convert.ToDecimal(System.String)
  - System.Convert.ToDecimal(System.String,System.IFormatProvider)
  - System.Convert.ToDecimal(System.UInt16)
  - System.Convert.ToDecimal(System.UInt32)
  - System.Convert.ToDecimal(System.UInt64)
  - System.Convert.ToDouble(System.Boolean)
  - System.Convert.ToDouble(System.Byte)
  - System.Convert.ToDouble(System.Decimal)
  - System.Convert.ToDouble(System.Double)
  - System.Convert.ToDouble(System.Int16)
  - System.Convert.ToDouble(System.Int32)
  - System.Convert.ToDouble(System.Int64)
  - System.Convert.ToDouble(System.Object)
  - System.Convert.ToDouble(System.Object,System.IFormatProvider)
  - System.Convert.ToDouble(System.SByte)
  - System.Convert.ToDouble(System.Single)
  - System.Convert.ToDouble(System.String)
  - System.Convert.ToDouble(System.String,System.IFormatProvider)
  - System.Convert.ToDouble(System.UInt16)
  - System.Convert.ToDouble(System.UInt32)
  - System.Convert.ToDouble(System.UInt64)
  - System.Convert.ToInt16(System.Boolean)
  - System.Convert.ToInt16(System.Byte)
  - System.Convert.ToInt16(System.Char)
  - System.Convert.ToInt16(System.Decimal)
  - System.Convert.ToInt16(System.Double)
  - System.Convert.ToInt16(System.Int16)
  - System.Convert.ToInt16(System.Int32)
  - System.Convert.ToInt16(System.Int64)
  - System.Convert.ToInt16(System.Object)
  - System.Convert.ToInt16(System.Object,System.IFormatProvider)
  - System.Convert.ToInt16(System.SByte)
  - System.Convert.ToInt16(System.Single)
  - System.Convert.ToInt16(System.String)
  - System.Convert.ToInt16(System.String,System.IFormatProvider)
  - System.Convert.ToInt16(System.String,System.Int32)
  - System.Convert.ToInt16(System.UInt16)
  - System.Convert.ToInt16(System.UInt32)
  - System.Convert.ToInt16(System.UInt64)
  - System.Convert.ToInt32(System.Boolean)
  - System.Convert.ToInt32(System.Byte)
  - System.Convert.ToInt32(System.Char)
  - System.Convert.ToInt32(System.Decimal)
  - System.Convert.ToInt32(System.Double)
  - System.Convert.ToInt32(System.Int16)
  - System.Convert.ToInt32(System.Int32)
  - System.Convert.ToInt32(System.Int64)
  - System.Convert.ToInt32(System.Object)
  - System.Convert.ToInt32(System.Object,System.IFormatProvider)
  - System.Convert.ToInt32(System.SByte)
  - System.Convert.ToInt32(System.Single)
  - System.Convert.ToInt32(System.String)
  - System.Convert.ToInt32(System.String,System.IFormatProvider)
  - System.Convert.ToInt32(System.String,System.Int32)
  - System.Convert.ToInt32(System.UInt16)
  - System.Convert.ToInt32(System.UInt32)
  - System.Convert.ToInt32(System.UInt64)
  - System.Convert.ToInt64(System.Boolean)
  - System.Convert.ToInt64(System.Byte)
  - System.Convert.ToInt64(System.Char)
  - System.Convert.ToInt64(System.Decimal)
  - System.Convert.ToInt64(System.Double)
  - System.Convert.ToInt64(System.Int16)
  - System.Convert.ToInt64(System.Int32)
  - System.Convert.ToInt64(System.Int64)
  - System.Convert.ToInt64(System.Object)
  - System.Convert.ToInt64(System.Object,System.IFormatProvider)
  - System.Convert.ToInt64(System.SByte)
  - System.Convert.ToInt64(System.Single)
  - System.Convert.ToInt64(System.String)
  - System.Convert.ToInt64(System.String,System.IFormatProvider)
  - System.Convert.ToInt64(System.String,System.Int32)
  - System.Convert.ToInt64(System.UInt16)
  - System.Convert.ToInt64(System.UInt32)
  - System.Convert.ToInt64(System.UInt64)
  - System.Convert.ToSByte(System.Boolean)
  - System.Convert.ToSByte(System.Byte)
  - System.Convert.ToSByte(System.Char)
  - System.Convert.ToSByte(System.Decimal)
  - System.Convert.ToSByte(System.Double)
  - System.Convert.ToSByte(System.Int16)
  - System.Convert.ToSByte(System.Int32)
  - System.Convert.ToSByte(System.Int64)
  - System.Convert.ToSByte(System.Object)
  - System.Convert.ToSByte(System.Object,System.IFormatProvider)
  - System.Convert.ToSByte(System.SByte)
  - System.Convert.ToSByte(System.Single)
  - System.Convert.ToSByte(System.String)
  - System.Convert.ToSByte(System.String,System.IFormatProvider)
  - System.Convert.ToSByte(System.String,System.Int32)
  - System.Convert.ToSByte(System.UInt16)
  - System.Convert.ToSByte(System.UInt32)
  - System.Convert.ToSByte(System.UInt64)
  - System.Convert.ToSingle(System.Boolean)
  - System.Convert.ToSingle(System.Byte)
  - System.Convert.ToSingle(System.Decimal)
  - System.Convert.ToSingle(System.Double)
  - System.Convert.ToSingle(System.Int16)
  - System.Convert.ToSingle(System.Int32)
  - System.Convert.ToSingle(System.Int64)
  - System.Convert.ToSingle(System.Object)
  - System.Convert.ToSingle(System.Object,System.IFormatProvider)
  - System.Convert.ToSingle(System.SByte)
  - System.Convert.ToSingle(System.Single)
  - System.Convert.ToSingle(System.String)
  - System.Convert.ToSingle(System.String,System.IFormatProvider)
  - System.Convert.ToSingle(System.UInt16)
  - System.Convert.ToSingle(System.UInt32)
  - System.Convert.ToSingle(System.UInt64)
  - System.Convert.ToString(System.Boolean)
  - System.Convert.ToString(System.Boolean,System.IFormatProvider)
  - System.Convert.ToString(System.Byte)
  - System.Convert.ToString(System.Byte,System.IFormatProvider)
  - System.Convert.ToString(System.Byte,System.Int32)
  - System.Convert.ToString(System.Char)
  - System.Convert.ToString(System.Char,System.IFormatProvider)
  - System.Convert.ToString(System.DateTime)
  - System.Convert.ToString(System.DateTime,System.IFormatProvider)
  - System.Convert.ToString(System.Decimal)
  - System.Convert.ToString(System.Decimal,System.IFormatProvider)
  - System.Convert.ToString(System.Double)
  - System.Convert.ToString(System.Double,System.IFormatProvider)
  - System.Convert.ToString(System.Int16)
  - System.Convert.ToString(System.Int16,System.IFormatProvider)
  - System.Convert.ToString(System.Int16,System.Int32)
  - System.Convert.ToString(System.Int32)
  - System.Convert.ToString(System.Int32,System.IFormatProvider)
  - System.Convert.ToString(System.Int32,System.Int32)
  - System.Convert.ToString(System.Int64)
  - System.Convert.ToString(System.Int64,System.IFormatProvider)
  - System.Convert.ToString(System.Int64,System.Int32)
  - System.Convert.ToString(System.Object)
  - System.Convert.ToString(System.Object,System.IFormatProvider)
  - System.Convert.ToString(System.SByte)
  - System.Convert.ToString(System.SByte,System.IFormatProvider)
  - System.Convert.ToString(System.Single)
  - System.Convert.ToString(System.Single,System.IFormatProvider)
  - System.Convert.ToString(System.UInt16)
  - System.Convert.ToString(System.UInt16,System.IFormatProvider)
  - System.Convert.ToString(System.UInt32)
  - System.Convert.ToString(System.UInt32,System.IFormatProvider)
  - System.Convert.ToString(System.UInt64)
  - System.Convert.ToString(System.UInt64,System.IFormatProvider)
  - System.Convert.ToUInt16(System.Boolean)
  - System.Convert.ToUInt16(System.Byte)
  - System.Convert.ToUInt16(System.Char)
  - System.Convert.ToUInt16(System.Decimal)
  - System.Convert.ToUInt16(System.Double)
  - System.Convert.ToUInt16(System.Int16)
  - System.Convert.ToUInt16(System.Int32)
  - System.Convert.ToUInt16(System.Int64)
  - System.Convert.ToUInt16(System.Object)
  - System.Convert.ToUInt16(System.Object,System.IFormatProvider)
  - System.Convert.ToUInt16(System.SByte)
  - System.Convert.ToUInt16(System.Single)
  - System.Convert.ToUInt16(System.String)
  - System.Convert.ToUInt16(System.String,System.IFormatProvider)
  - System.Convert.ToUInt16(System.String,System.Int32)
  - System.Convert.ToUInt16(System.UInt16)
  - System.Convert.ToUInt16(System.UInt32)
  - System.Convert.ToUInt16(System.UInt64)
  - System.Convert.ToUInt32(System.Boolean)
  - System.Convert.ToUInt32(System.Byte)
  - System.Convert.ToUInt32(System.Char)
  - System.Convert.ToUInt32(System.Decimal)
  - System.Convert.ToUInt32(System.Double)
  - System.Convert.ToUInt32(System.Int16)
  - System.Convert.ToUInt32(System.Int32)
  - System.Convert.ToUInt32(System.Int64)
  - System.Convert.ToUInt32(System.Object)
  - System.Convert.ToUInt32(System.Object,System.IFormatProvider)
  - System.Convert.ToUInt32(System.SByte)
  - System.Convert.ToUInt32(System.Single)
  - System.Convert.ToUInt32(System.String)
  - System.Convert.ToUInt32(System.String,System.IFormatProvider)
  - System.Convert.ToUInt32(System.String,System.Int32)
  - System.Convert.ToUInt32(System.UInt16)
  - System.Convert.ToUInt32(System.UInt32)
  - System.Convert.ToUInt32(System.UInt64)
  - System.Convert.ToUInt64(System.Boolean)
  - System.Convert.ToUInt64(System.Byte)
  - System.Convert.ToUInt64(System.Char)
  - System.Convert.ToUInt64(System.Decimal)
  - System.Convert.ToUInt64(System.Double)
  - System.Convert.ToUInt64(System.Int16)
  - System.Convert.ToUInt64(System.Int32)
  - System.Convert.ToUInt64(System.Int64)
  - System.Convert.ToUInt64(System.Object)
  - System.Convert.ToUInt64(System.Object,System.IFormatProvider)
  - System.Convert.ToUInt64(System.SByte)
  - System.Convert.ToUInt64(System.Single)
  - System.Convert.ToUInt64(System.String)
  - System.Convert.ToUInt64(System.String,System.IFormatProvider)
  - System.Convert.ToUInt64(System.String,System.Int32)
  - System.Convert.ToUInt64(System.UInt16)
  - System.Convert.ToUInt64(System.UInt32)
  - System.Convert.ToUInt64(System.UInt64)
  langs:
  - csharp
  - vb
  name: Convert
  fullName: System.Convert
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 45
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts a base data type to another base data type.</p>\n"
  remarks: "\n<p>The static methods of the <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. In addition, the <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> class includes methods to support  other kinds of conversions.</p>\n<p>This topic consists of the following sections:</p>\n<p>Conversions to and from Base TypesNon-Decimal NumbersConversions from Custom Objects to Base TypesCulture-Specific Formatting InformationBase64 EncodingOther Common Conversions</p>\n"
  example:
  - <p>The following example demonstrates some of the conversion methods in the <xref href="System.Convert" data-throw-if-not-resolved="false"></xref> class, including <see cref="Overload:System.Convert.ToInt32"></see>, <see cref="Overload:System.Convert.ToBoolean"></see>, and <see cref="Overload:System.Convert.ToString"></see>.</p>System.Convert#1
  syntax:
    content: 'public class Convert : object'
    content.vb: >-
      Public Class Convert
          Inherits Object
  seealso:
  - type: System.IConvertible
    commentId: T:System.IConvertible
  - type: System.Object
    commentId: T:System.Object
  - type: System.SByte
    commentId: T:System.SByte
  - type: System.Int16
    commentId: T:System.Int16
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Int64
    commentId: T:System.Int64
  - type: System.Byte
    commentId: T:System.Byte
  - type: System.UInt16
    commentId: T:System.UInt16
  - type: System.UInt32
    commentId: T:System.UInt32
  - type: System.UInt64
    commentId: T:System.UInt64
  - type: System.Single
    commentId: T:System.Single
  - type: System.Double
    commentId: T:System.Double
  - type: System.Decimal
    commentId: T:System.Decimal
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Char
    commentId: T:System.Char
  - type: System.String
    commentId: T:System.String
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Convert.ChangeType(System.Object,System.Type)
  commentId: M:System.Convert.ChangeType(System.Object,System.Type)
  id: ChangeType(System.Object,System.Type)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ChangeType(Object, Type)
  fullName: System.Convert.ChangeType(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeType
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 47
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an object of the specified type and whose value is equivalent to the specified object.</p>\n"
  remarks: "\n<p>\n<see cref=\"Overload:System.Convert.ChangeType\"></see> is a general-purpose conversion method that converts the object specified by <em>value</em> to <em>conversionType</em>. The <em>value</em> parameter can be an object of any type, and <em>conversionType</em> can also be a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents any base or custom type. For the conversion to succeed, <em>value</em> must implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, because the method simply wraps a call to an appropriate <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> method. The method requires that conversion of <em>value</em> to <em>conversionType</em> be supported.</p>\n<p>This method uses the current thread's culture for the conversion.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <see cref=\"Overload:System.Convert.ChangeType\"></see> method. </p>convertchangetype#1"
  syntax:
    content: public static object ChangeType(object value, Type conversionType)
    content.vb: Public Shared Function ChangeType(value As Object, conversionType As Type) As Object
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: conversionType
      type: System.Type
      description: "\n<p>The type of object to return. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object whose type is <em>conversionType</em> and whose value is equivalent to <em>value</em>.</p>\n<p>-or-</p>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic), if <em>value</em> is <strong>null</strong> and <em>conversionType</em> is not a value type. </p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported.  </p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong> and <em>conversionType</em> is a value type.</p>\n<p>-or-</p>\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in a format recognized by <em>conversionType</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is out of the range of <em>conversionType</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>conversionType</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)
  commentId: M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)
  id: ChangeType(System.Object,System.Type,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ChangeType(Object, Type, IFormatProvider)
  fullName: System.Convert.ChangeType(System.Object, System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeType
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 48
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<see cref=\"Overload:System.Convert.ChangeType\"></see> is a general-purpose conversion method that converts the object specified by <em>value</em> to <em>conversionType</em>. The <em>value</em> parameter can be an object of any type, and <em>conversionType</em> can also be a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents any base or custom type. For the conversion to succeed, <em>value</em> must implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, because the method simply wraps a call to an appropriate <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> method. The method requires that conversion of <em>value</em> to <em>conversionType</em> be supported.</p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> implementation. If <em>value</em> is a base data type, <em>provider</em> is used only for the following conversions:</p>\n<ul><li>\n<p>Conversion from a number to a string, or from a string to a number. <em>provider</em> must be a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object, a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object, or a custom <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. However, because the <xref href=\"System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method performs the conversion using the default \"G\" format specifier, the <em>provider</em> parameter has no effect if <em>value</em> or the target type is an unsigned integer. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current thread culture is used. </p>\n</li><li>\n<p>Conversion from a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value to a string, or from a string to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value. <em>provider</em> must be a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current thread culture is used. </p>\n</li></ul>\n<p>If <em>value</em> is an application-defined type, its <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> implementation may use the <em>provider</em> parameter.</p>\n"
  example:
  - "\n<p>The following example defines a <code>Temperature</code> class that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Convert.ChangeType#3<p>The following example creates an instance of the <code>Temperature</code> class and calls the <xref href=\"System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert it to the basic numeric types supported by the .NET Framework and to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. It illustrates that the <see cref=\"Overload:System.Convert.ChangeType\"></see> method wraps a call to the source type's <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>System.Convert.ChangeType#4"
  syntax:
    content: public static object ChangeType(object value, Type conversionType, IFormatProvider provider)
    content.vb: Public Shared Function ChangeType(value As Object, conversionType As Type, provider As IFormatProvider) As Object
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: conversionType
      type: System.Type
      description: "\n<p>The type of object to return. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object whose type is <em>conversionType</em> and whose value is equivalent to <em>value</em>.</p>\n<p>-or- </p>\n<p>\n<em>value</em>, if the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of <em>value</em> and <em>conversionType</em> are equal.</p>\n<p>-or- </p>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic), if <em>value</em> is <strong>null</strong> and <em>conversionType</em> is not a value type.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported. </p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong> and <em>conversionType</em> is a value type.</p>\n<p>-or-</p>\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in a format for <em>conversionType</em> recognized by <em>provider</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is out of the range of <em>conversionType</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>conversionType</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  commentId: M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  id: ChangeType(System.Object,System.TypeCode,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ChangeType(Object, TypeCode, IFormatProvider)
  fullName: System.Convert.ChangeType(System.Object, System.TypeCode, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeType
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 49
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> is a general-purpose conversion method that converts the object specified by <em>value</em> to a predefined type specified by <em>typeCode</em>. The <em>value</em> parameter can be an object of any type. For the conversion to succeed, <em>value</em> must implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, because the method simply wraps a call to an appropriate <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> method. The method also requires that conversion of <em>value</em> to <em>typeCode</em> be supported.</p>\n<p>The <xref href=\"System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method does not support the conversion of <em>value</em> to a custom type. To perform such a conversion, call the <xref href=\"System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> implementation. If <em>value</em> is a base data type, <em>provider</em> is used only for the following conversions. If a <strong>null</strong><xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> argument is passed to these methods, the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current thread culture is used. </p>\n<ul><li>\n<p>Conversion from a number to a string, or from a string to a number. <em>provider</em> must be a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object, a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object, or a custom <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. However, because the <xref href=\"System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method performs the conversion using the default \"G\" format specifier, the <em>provider</em> parameter has no effect if <em>value</em> or the target type is an unsigned integer. </p>\n</li><li>\n<p>Conversion from a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value to a string, or from a string to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value.<em> provider</em> must be a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li></ul>\n<p>If <em>value</em> is an application-defined type, its <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> implementation may use the <em>provider</em> parameter.</p>\n"
  example:
  - "\n<p>The following example defines a custom format provider named <code>InterceptProvider</code> that indicates when its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method is called and returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the fr-FR culture and a <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the en-US culture. This format provider is used in all calls to the <xref href=\"System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. The example then creates an array with a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value and makes repeated calls to <xref href=\"System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> with each value and each member of the <xref href=\"System.TypeCode\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The example illustrates when the method uses the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> parameter and also illustrates the use of the <em>provider</em> parameter to perform culture-sensitive formatting.</p>System.Convert.ChangeType#1"
  syntax:
    content: public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider)
    content.vb: Public Shared Function ChangeType(value As Object, typeCode As TypeCode, provider As IFormatProvider) As Object
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: typeCode
      type: System.TypeCode
      description: "\n<p>The type of object to return. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object whose underlying type is <em>typeCode</em> and whose value is equivalent to <em>value</em>.</p>\n<p>-or- </p>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic), if <em>value</em> is <strong>null</strong> and <em>typeCode</em> is <xref href=\"System.TypeCode.Empty\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.TypeCode.String\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.TypeCode.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported.  </p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong> and <em>typeCode</em> specifies a value type.</p>\n<p>-or-</p>\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in a format for the <em>typeCode</em> type recognized by <em>provider</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is out of the range of the <em>typeCode</em> type.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>typeCode</em> is invalid. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  id: FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: FromBase64CharArray(Char[], Int32, Int32)
  fullName: System.Convert.FromBase64CharArray(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromBase64CharArray
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 50
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</p>\n"
  remarks: "\n<p>\n<em>inArray</em> is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".</p>\n<p>The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in <em>inArray</em> because all white-space characters are ignored.</p>\n<p>The valueless character, \"=\", is used for trailing padding. The end of <em>inArray</em> can consist of zero, one, or two padding characters.</p>\n<p>The <xref href=\"System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref href=\"System.Security.Cryptography.FromBase64Transform\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to decode UUencoded (base-64) data and save it as binary output.</p>System.Convert UUEncodeDecode functions#3<p>The following example demonstrates the <xref href=\"System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits, \"A\", \"A\", \"E\", and \"C\", at the beginning of the output.</p><p>If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit \"/\" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, \"w\". The last two 6-bit values are padding and correspond to the valueless padding character, \"=\".</p>convert.tobase64chararray#1"
  syntax:
    content: public static byte[] FromBase64CharArray(char[] inArray, int offset, int length)
    content.vb: Public Shared Function FromBase64CharArray(inArray As Char(), offset As Integer, length As Integer) As Byte()
    parameters:
    - id: inArray
      type: System.Char[]
      description: "\n<p>A Unicode character array. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>A position within <em>inArray</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in <em>inArray</em> to convert. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>An array of 8-bit unsigned integers equivalent to <em>length</em> elements at position <em>offset</em> in <em>inArray</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>inArray</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>length</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> plus <em>length</em> indicates a position not within <em>inArray</em>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The length of <em>inArray</em>, ignoring white-space characters, is not zero or a multiple of 4. </p>\n<p>-or-</p>\n<p>The format of <em>inArray</em> is invalid. <em>inArray</em> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters. </p>\n"
  seealso:
  - type: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Security.Cryptography.FromBase64Transform
    commentId: T:System.Security.Cryptography.FromBase64Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Convert.FromBase64CharArray(System.Char(), System.Int32, System.Int32)
  name.vb: FromBase64CharArray(Char(), Int32, Int32)
- uid: System.Convert.FromBase64String(System.String)
  commentId: M:System.Convert.FromBase64String(System.String)
  id: FromBase64String(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: FromBase64String(String)
  fullName: System.Convert.FromBase64String(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromBase64String
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 51
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</p>\n"
  remarks: "\n<p>\n<em>s</em> is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\".</p>\n<p>The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in <em>s</em> because all white-space characters are ignored.</p>\n<p>The valueless character, \"=\", is used for trailing padding. The end of <em>s</em> can consist of zero, one, or two padding characters.</p>\n<p>The <xref href=\"System.Convert.FromBase64String(System.String)\" data-throw-if-not-resolved=\"false\"></xref>method is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref href=\"System.Security.Cryptography.FromBase64Transform\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Convert.ToBase64String(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref href=\"System.Convert.FromBase64String(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to restore the original byte array.</p>System.Convert.ToBase64String#1<p>The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref href=\"System.BitConverter.GetBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref href=\"System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. This buffer is then passed to the <xref href=\"System.Convert.ToBase64String(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a UUencoded (base-64) string.  It then calls the <xref href=\"System.Convert.FromBase64String(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to decode the UUencoded string, and calls the <xref href=\"System.BitConverter.ToInt32(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored. </p>System.Convert.ToBase64String#2"
  syntax:
    content: public static byte[] FromBase64String(string s)
    content.vb: Public Shared Function FromBase64String(s As String) As Byte()
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The string to convert. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>An array of 8-bit unsigned integers that is equivalent to <em>s</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The length of <em>s</em>, ignoring white-space characters, is not zero or a multiple of 4. </p>\n<p>-or-</p>\n<p>The format of <em>s</em> is invalid. <em>s</em> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</p>\n"
  seealso:
  - type: System.Convert.ToBase64String(System.Byte[])
    commentId: M:System.Convert.ToBase64String(System.Byte[])
  - type: System.Security.Cryptography.FromBase64Transform
    commentId: T:System.Security.Cryptography.FromBase64Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.GetTypeCode(System.Object)
  commentId: M:System.Convert.GetTypeCode(System.Object)
  id: GetTypeCode(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: GetTypeCode(Object)
  fullName: System.Convert.GetTypeCode(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeCode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 52
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the <xref href=\"System.TypeCode\" data-throw-if-not-resolved=\"false\"></xref> for the specified object.</p>\n"
  syntax:
    content: public static TypeCode GetTypeCode(object value)
    content.vb: Public Shared Function GetTypeCode(value As Object) As TypeCode
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    return:
      type: System.TypeCode
      description: "\n<p>The <xref href=\"System.TypeCode\" data-throw-if-not-resolved=\"false\"></xref> for <em>value</em>, or <xref href=\"System.TypeCode.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Convert.ToBase64CharArray(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBase64CharArray
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 53
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</p>\n"
  remarks: "\n<p>The subset of <em>length</em> elements of <em>inArray</em> starting at position <em>offsetIn</em>, are taken as a numeric value and converted to a subset of elements in <em>outArray</em> starting at position <em>offsetOut</em>. The return value indicates the number of converted elements in <em>outArray</em>. The subset of <em>outArray</em> consists of base-64 digits.</p>\n<p>The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.</p>\n<p>The <em>offset</em> and <em>length</em> parameters are 32-bit signed numbers. The <em>offsetIn</em> and <em>offsetOut</em> parameters are zero-based array positions.</p>\n<p>The <xref href=\"System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref href=\"System.Security.Cryptography.ToBase64Transform\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example demonstrates using the <xref href=\"System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.</p>System.Convert UUEncodeDecode functions#2"
  syntax:
    content: public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut)
    content.vb: Public Shared Function ToBase64CharArray(inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer) As Integer
    parameters:
    - id: inArray
      type: System.Byte[]
      description: "\n<p>An input array of 8-bit unsigned integers. </p>\n"
    - id: offsetIn
      type: System.Int32
      description: "\n<p>A position within <em>inArray</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements of <em>inArray</em> to convert. </p>\n"
    - id: outArray
      type: System.Char[]
      description: "\n<p>An output array of Unicode characters. </p>\n"
    - id: offsetOut
      type: System.Int32
      description: "\n<p>A position within <em>outArray</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer containing the number of bytes in <em>outArray</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>inArray</em> or <em>outArray</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offsetIn</em>, <em>offsetOut</em>, or <em>length</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>offsetIn</em> plus <em>length</em> is greater than the length of <em>inArray</em>.</p>\n<p>-or- </p>\n<p>\n<em>offsetOut</em> plus the number of elements to return is greater than the length of <em>outArray</em>. </p>\n"
  seealso:
  - type: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)
  - type: System.Security.Cryptography.ToBase64Transform
    commentId: T:System.Security.Cryptography.ToBase64Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Convert.ToBase64CharArray(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: ToBase64CharArray(Byte(), Int32, Int32, Char(), Int32)
- uid: System.Convert.ToBase64String(System.Byte[])
  commentId: M:System.Convert.ToBase64String(System.Byte[])
  id: ToBase64String(System.Byte[])
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBase64String(Byte[])
  fullName: System.Convert.ToBase64String(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBase64String
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 54
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</p>\n"
  remarks: "\n<p>The elements of <em>inArray</em> are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.</p>\n<p>The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.</p>\n<p>The <xref href=\"System.Convert.ToBase64String(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref href=\"System.Security.Cryptography.ToBase64Transform\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Ordinarily, the <see cref=\"Overload:System.Convert.ToBase64String\"></see> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <xref href=\"System.Convert.FromBase64String(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, then encode the returned byte array by calling the <see cref=\"Overload:System.Convert.ToBase64String\"></see> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Convert.ToBase64String(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref href=\"System.Convert.FromBase64String(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to restore the original byte array.</p>System.Convert.ToBase64String#1<p>The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref href=\"System.BitConverter.GetBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref href=\"System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. This buffer is then passed to the <xref href=\"System.Convert.ToBase64String(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a UUencoded (base-64) string.  It then calls the <xref href=\"System.Convert.FromBase64String(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to decode the UUencoded string, and calls the <xref href=\"System.BitConverter.ToInt32(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored. </p>System.Convert.ToBase64String#2"
  syntax:
    content: public static string ToBase64String(byte[] inArray)
    content.vb: Public Shared Function ToBase64String(inArray As Byte()) As String
    parameters:
    - id: inArray
      type: System.Byte[]
      description: "\n<p>An array of 8-bit unsigned integers. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation, in base 64, of the contents of <em>inArray</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>inArray</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Convert.FromBase64String(System.String)
    commentId: M:System.Convert.FromBase64String(System.String)
  - type: System.Security.Cryptography.ToBase64Transform
    commentId: T:System.Security.Cryptography.ToBase64Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Convert.ToBase64String(System.Byte())
  name.vb: ToBase64String(Byte())
- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)
  id: ToBase64String(System.Byte[],System.Int32,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBase64String(Byte[], Int32, Int32)
  fullName: System.Convert.ToBase64String(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBase64String
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 55
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</p>\n"
  remarks: "\n<p>The elements of <em>inArray</em> are taken as a numeric value and converted to a string representation in base 64.</p>\n<p>The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", the lowercase characters \"a\" to \"z\", the numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The valueless character, \"=\", is used for trailing padding.</p>\n<p>The <em>offset</em> and <em>length</em> parameters are 32-bit signed numbers. The <em>offset</em> parameter is zero-based.</p>\n<p>The <xref href=\"System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref href=\"System.Security.Cryptography.ToBase64Transform\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public static string ToBase64String(byte[] inArray, int offset, int length)
    content.vb: Public Shared Function ToBase64String(inArray As Byte(), offset As Integer, length As Integer) As String
    parameters:
    - id: inArray
      type: System.Byte[]
      description: "\n<p>An array of 8-bit unsigned integers. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>An offset in <em>inArray</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements of <em>inArray</em> to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation in base 64 of <em>length</em> elements of <em>inArray</em>, starting at position <em>offset</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>inArray</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>length</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> plus <em>length</em> is greater than the length of <em>inArray</em>. </p>\n"
  seealso:
  - type: System.Convert.FromBase64String(System.String)
    commentId: M:System.Convert.FromBase64String(System.String)
  - type: System.Security.Cryptography.ToBase64Transform
    commentId: T:System.Security.Cryptography.ToBase64Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Convert.ToBase64String(System.Byte(), System.Int32, System.Int32)
  name.vb: ToBase64String(Byte(), Int32, Int32)
- uid: System.Convert.ToBoolean(System.Boolean)
  commentId: M:System.Convert.ToBoolean(System.Boolean)
  id: ToBoolean(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Boolean)
  fullName: System.Convert.ToBoolean(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 56
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified Boolean value; no actual conversion is performed.</p>\n"
  syntax:
    content: public static bool ToBoolean(bool value)
    content.vb: Public Shared Function ToBoolean(value As Boolean) As Boolean
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to return. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Byte)
  commentId: M:System.Convert.ToBoolean(System.Byte)
  id: ToBoolean(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Byte)
  fullName: System.Convert.ToBoolean(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 57
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values. </p>System.Convert.ToBoolean#12"
  syntax:
    content: public static bool ToBoolean(byte value)
    content.vb: Public Shared Function ToBoolean(value As Byte) As Boolean
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Decimal)
  commentId: M:System.Convert.ToBoolean(System.Decimal)
  id: ToBoolean(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Decimal)
  fullName: System.Convert.ToBoolean(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 58
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#2"
  syntax:
    content: public static bool ToBoolean(decimal value)
    content.vb: Public Shared Function ToBoolean(value As Decimal) As Boolean
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The number to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Double)
  commentId: M:System.Convert.ToBoolean(System.Double)
  id: ToBoolean(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Double)
  fullName: System.Convert.ToBoolean(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 59
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts a Boolean to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> to a Boolean value. </p>System.Convert Snippets#1"
  syntax:
    content: public static bool ToBoolean(double value)
    content.vb: Public Shared Function ToBoolean(value As Double) As Boolean
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Int16)
  commentId: M:System.Convert.ToBoolean(System.Int16)
  id: ToBoolean(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Int16)
  fullName: System.Convert.ToBoolean(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 60
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#3"
  syntax:
    content: public static bool ToBoolean(short value)
    content.vb: Public Shared Function ToBoolean(value As Short) As Boolean
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Int32)
  commentId: M:System.Convert.ToBoolean(System.Int32)
  id: ToBoolean(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Int32)
  fullName: System.Convert.ToBoolean(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 61
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#4"
  syntax:
    content: public static bool ToBoolean(int value)
    content.vb: Public Shared Function ToBoolean(value As Integer) As Boolean
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Int64)
  commentId: M:System.Convert.ToBoolean(System.Int64)
  id: ToBoolean(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Int64)
  fullName: System.Convert.ToBoolean(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 62
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#5"
  syntax:
    content: public static bool ToBoolean(long value)
    content.vb: Public Shared Function ToBoolean(value As Long) As Boolean
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Object)
  commentId: M:System.Convert.ToBoolean(System.Object)
  id: ToBoolean(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Object)
  fullName: System.Convert.ToBoolean(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 63
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of a specified object to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of object values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#11"
  syntax:
    content: public static bool ToBoolean(object value)
    content.vb: Public Shared Function ToBoolean(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> or <strong>false</strong>, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method for the underlying type of <em>value</em>. If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is a string that does not equal <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>-or-</p>\n<p>The conversion of <em>value</em> to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> is not supported.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)
  id: ToBoolean(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Object, IFormatProvider)
  fullName: System.Convert.ToBoolean(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 64
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. The base types ignore the <em>provider</em> parameter; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> and a class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Objects of the class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> hold an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. An object of each class is passed to the <xref href=\"System.Convert.ToBoolean(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. This method returns <strong>true</strong> if any of the non-discarded array values are non-zero. The <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object determines how elements are discarded for this calculation.</p>System.Convert.ToXXX_Object_IFP#1"
  syntax:
    content: public static bool ToBoolean(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToBoolean(value As Object, provider As IFormatProvider) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> or <strong>false</strong>, which reflects the value returned by invoking the <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method for the underlying type of <em>value</em>. If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is a string that does not equal <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>-or-</p>\n<p>The conversion of <em>value</em> to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> is not supported. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.SByte)
  commentId: M:System.Convert.ToBoolean(System.SByte)
  id: ToBoolean(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(SByte)
  fullName: System.Convert.ToBoolean(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 65
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#6"
  syntax:
    content: public static bool ToBoolean(sbyte value)
    content.vb: Public Shared Function ToBoolean(value As SByte) As Boolean
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.Single)
  commentId: M:System.Convert.ToBoolean(System.Single)
  id: ToBoolean(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(Single)
  fullName: System.Convert.ToBoolean(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 67
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#7"
  syntax:
    content: public static bool ToBoolean(float value)
    content.vb: Public Shared Function ToBoolean(value As Single) As Boolean
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.String)
  commentId: M:System.Convert.ToBoolean(System.String)
  id: ToBoolean(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(String)
  fullName: System.Convert.ToBoolean(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 68
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a logical value to its Boolean equivalent.</p>\n"
  remarks: "\n<p>For a successful conversion to occur, the <em>value</em> parameter must equal either <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref>, a constant whose value is <strong>True</strong>, <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>, a constant whose value is <strong>False</strong>, or it must be <strong>null</strong>. In comparing <em>value</em> with <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>, the method ignores case as well as leading and trailing white space.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Boolean.TryParse(System.String,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Convert.ToBoolean(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert various strings to Boolean values.</p>System.Convert.ToBoolean#1"
  syntax:
    content: public static bool ToBoolean(string value)
    content.vb: Public Shared Function ToBoolean(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the value of either <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> equals <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>false</strong> if <em>value</em> equals <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref> or <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not equal to <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToBoolean(System.String,System.IFormatProvider)
  id: ToBoolean(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(String, IFormatProvider)
  fullName: System.Convert.ToBoolean(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 69
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Boolean.TryParse(System.String,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  syntax:
    content: public static bool ToBoolean(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToBoolean(value As String, provider As IFormatProvider) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the value of either <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> equals <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>false</strong> if <em>value</em> equals <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref> or <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not equal to <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.UInt16)
  commentId: M:System.Convert.ToBoolean(System.UInt16)
  id: ToBoolean(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(UInt16)
  fullName: System.Convert.ToBoolean(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 70
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#8"
  syntax:
    content: public static bool ToBoolean(ushort value)
    content.vb: Public Shared Function ToBoolean(value As UShort) As Boolean
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.UInt32)
  commentId: M:System.Convert.ToBoolean(System.UInt32)
  id: ToBoolean(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(UInt32)
  fullName: System.Convert.ToBoolean(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 72
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#9"
  syntax:
    content: public static bool ToBoolean(uint value)
    content.vb: Public Shared Function ToBoolean(value As UInteger) As Boolean
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToBoolean(System.UInt64)
  commentId: M:System.Convert.ToBoolean(System.UInt64)
  id: ToBoolean(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToBoolean(UInt64)
  fullName: System.Convert.ToBoolean(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToBoolean
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 74
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToBoolean#10"
  syntax:
    content: public static bool ToBoolean(ulong value)
    content.vb: Public Shared Function ToBoolean(value As ULong) As Boolean
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Boolean)
  commentId: M:System.Convert.ToByte(System.Boolean)
  id: ToByte(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Boolean)
  fullName: System.Convert.ToByte(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 76
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#1"
  syntax:
    content: public static byte ToByte(bool value)
    content.vb: Public Shared Function ToByte(value As Boolean) As Byte
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Byte)
  commentId: M:System.Convert.ToByte(System.Byte)
  id: ToByte(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Byte)
  fullName: System.Convert.ToByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 77
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</p>\n"
  syntax:
    content: public static byte ToByte(byte value)
    content.vb: Public Shared Function ToByte(value As Byte) As Byte
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to return. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Char)
  commentId: M:System.Convert.ToByte(System.Char)
  id: ToByte(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Char)
  fullName: System.Convert.ToByte(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 78
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</p>\n"
  remarks: "\n<p>This method returns an unsigned byte value that represents the numeric code of the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object passed to it. In the .NET Framework, a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#2"
  syntax:
    content: public static byte ToByte(char value)
    content.vb: Public Shared Function ToByte(value As Char) As Byte
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Decimal)
  commentId: M:System.Convert.ToByte(System.Decimal)
  id: ToByte(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Decimal)
  fullName: System.Convert.ToByte(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 79
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</p>\n"
  remarks: "\n<p>The following example converts a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Convert Snippets#18"
  syntax:
    content: public static byte ToByte(decimal value)
    content.vb: Public Shared Function ToByte(value As Decimal) As Byte
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The number to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>\n<em>value</em>, rounded to the nearest 8-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Double)
  commentId: M:System.Convert.ToByte(System.Double)
  id: ToByte(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Double)
  fullName: System.Convert.ToByte(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 80
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Convert Snippets#2"
  syntax:
    content: public static byte ToByte(double value)
    content.vb: Public Shared Function ToByte(value As Double) As Byte
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>\n<em>value</em>, rounded to the nearest 8-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Int16)
  commentId: M:System.Convert.ToByte(System.Int16)
  id: ToByte(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Int16)
  fullName: System.Convert.ToByte(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 81
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#3"
  syntax:
    content: public static byte ToByte(short value)
    content.vb: Public Shared Function ToByte(value As Short) As Byte
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Int32)
  commentId: M:System.Convert.ToByte(System.Int32)
  id: ToByte(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Int32)
  fullName: System.Convert.ToByte(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 82
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#4"
  syntax:
    content: public static byte ToByte(int value)
    content.vb: Public Shared Function ToByte(value As Integer) As Byte
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Int64)
  commentId: M:System.Convert.ToByte(System.Int64)
  id: ToByte(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Int64)
  fullName: System.Convert.ToByte(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 83
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#5"
  syntax:
    content: public static byte ToByte(long value)
    content.vb: Public Shared Function ToByte(value As Long) As Byte
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Object)
  commentId: M:System.Convert.ToByte(System.Object)
  id: ToByte(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Object)
  fullName: System.Convert.ToByte(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 84
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an 8-bit unsigned integer.</p>\n"
  remarks: "\n<p>If <em>value</em> is not <strong>null</strong>, this method wraps a call to the <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>implementation of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Convert.ToByte(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an array of objects to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values. </p>System.Convert.ToByte#6"
  syntax:
    content: public static byte ToByte(object value)
    content.vb: Public Shared Function ToByte(value As Object) As Byte
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in the property format for a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>Conversion from <em>value</em> to the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> type is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToByte(System.Object,System.IFormatProvider)
  id: ToByte(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Object, IFormatProvider)
  fullName: System.Convert.ToByte(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 85
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a <code>ByteString</code> class that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values. </p>System.Convert.ToByte#12<p>The following example instantiates several <code>ByteString</code> objects and calls the <xref href=\"System.Convert.ToByte(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert them to byte values. It illustrates that the <xref href=\"System.Convert.ToByte(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method wraps a call to the <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the object to be converted.</p>System.Convert.ToByte#13"
  syntax:
    content: public static byte ToByte(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToByte(value As Object, provider As IFormatProvider) As Byte
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in the property format for a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>Conversion from <em>value</em> to the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> type is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.SByte)
  commentId: M:System.Convert.ToByte(System.SByte)
  id: ToByte(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(SByte)
  fullName: System.Convert.ToByte(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 86
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts an array of <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#7"
  syntax:
    content: public static byte ToByte(sbyte value)
    content.vb: Public Shared Function ToByte(value As SByte) As Byte
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to be converted. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.Single)
  commentId: M:System.Convert.ToByte(System.Single)
  id: ToByte(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(Single)
  fullName: System.Convert.ToByte(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 88
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Convert Snippets#19"
  syntax:
    content: public static byte ToByte(float value)
    content.vb: Public Shared Function ToByte(value As Single) As Byte
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>A single-precision floating-point number. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>\n<em>value</em>, rounded to the nearest 8-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.String)
  commentId: M:System.Convert.ToByte(System.String)
  id: ToByte(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(String)
  fullName: System.Convert.ToByte(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 89
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToByte(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Byte.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Byte.TryParse(System.String,System.Byte@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example defines a string array and attempts to convert each string to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>.  Note that while a <strong>null</strong> string parses to zero, <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>. Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.</p>System.Convert.ToByte#15"
  syntax:
    content: public static byte ToByte(string value)
    content.vb: Public Shared Function ToByte(value As String) As Byte
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Byte.Parse(System.String)
    commentId: M:System.Byte.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToByte(System.String,System.IFormatProvider)
  id: ToByte(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(String, IFormatProvider)
  fullName: System.Convert.ToByte(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 90
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Byte.TryParse(System.String,System.Byte@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example creates a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that defines the positive sign as \"pos\" and the negative sign as \"neg\", which it uses in calls to the <xref href=\"System.Convert.ToByte(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. It then calls the <xref href=\"System.Convert.ToByte(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method repeatedly to convert each element in a string array to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToByte#14"
  syntax:
    content: public static byte ToByte(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToByte(value As String, provider As IFormatProvider) As Byte
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Byte.Parse(System.String)
    commentId: M:System.Byte.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.String,System.Int32)
  commentId: M:System.Convert.ToByte(System.String,System.Int32)
  id: ToByte(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(String, Int32)
  fullName: System.Convert.ToByte(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 91
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> data type supports unsigned values only, the <xref href=\"System.Convert.ToByte(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>value</em> is expressed using unsigned binary representation. In other words, all eight bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example converts <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToByte(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0x80 converts to 128.\" </p>System.Convert.BaseConversion#3<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception. </p>System.Convert.BaseConversion#4"
  example:
  - "\n<p>The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.</p>System.Convert.ToByte#11"
  syntax:
    content: public static byte ToByte(string value, int fromBase)
    content.vb: Public Shared Function ToByte(value As String, fromBase As Integer) As Byte
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a base 10 unsigned number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.UInt16)
  commentId: M:System.Convert.ToByte(System.UInt16)
  id: ToByte(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(UInt16)
  fullName: System.Convert.ToByte(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 92
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts an array of unsigned 16-bit integers to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#8"
  syntax:
    content: public static byte ToByte(ushort value)
    content.vb: Public Shared Function ToByte(value As UShort) As Byte
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.UInt32)
  commentId: M:System.Convert.ToByte(System.UInt32)
  id: ToByte(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(UInt32)
  fullName: System.Convert.ToByte(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 94
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts an array of unsigned integers to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#9"
  syntax:
    content: public static byte ToByte(uint value)
    content.vb: Public Shared Function ToByte(value As UInteger) As Byte
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToByte(System.UInt64)
  commentId: M:System.Convert.ToByte(System.UInt64)
  id: ToByte(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToByte(UInt64)
  fullName: System.Convert.ToByte(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 96
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts an array of unsigned long integers to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToByte#10"
  syntax:
    content: public static byte ToByte(ulong value)
    content.vb: Public Shared Function ToByte(value As ULong) As Byte
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.Byte)
  commentId: M:System.Convert.ToChar(System.Byte)
  id: ToChar(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(Byte)
  fullName: System.Convert.ToChar(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 98
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example converts an array of unsigned bytes to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToChar#1"
  syntax:
    content: public static char ToChar(byte value)
    content.vb: Public Shared Function ToChar(value As Byte) As Char
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.Int16)
  commentId: M:System.Convert.ToChar(System.Int16)
  id: ToChar(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(Int16)
  fullName: System.Convert.ToChar(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 99
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example converts an array of signed 16-bit integers to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToChar#2"
  syntax:
    content: public static char ToChar(short value)
    content.vb: Public Shared Function ToChar(value As Short) As Char
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.Int32)
  commentId: M:System.Convert.ToChar(System.Int32)
  id: ToChar(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(Int32)
  fullName: System.Convert.ToChar(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 100
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example converts an array of signed integers to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToChar#3"
  syntax:
    content: public static char ToChar(int value)
    content.vb: Public Shared Function ToChar(value As Integer) As Char
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Char.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.Int64)
  commentId: M:System.Convert.ToChar(System.Int64)
  id: ToChar(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(Int64)
  fullName: System.Convert.ToChar(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 101
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example attempts to convert a long integer to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>, and throws a <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> on failure.</p>System.Convert Snippets#8"
  syntax:
    content: public static char ToChar(long value)
    content.vb: Public Shared Function ToChar(value As Long) As Char
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Char.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.Object)
  commentId: M:System.Convert.ToChar(System.Object)
  id: ToChar(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(Object)
  fullName: System.Convert.ToChar(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 102
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a Unicode character.</p>\n"
  remarks: "\n<p>If <em>value</em> is not <strong>null</strong>, this method wraps a call to the <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>implementation of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Convert.ToChar#9"
  syntax:
    content: public static char ToChar(object value)
    content.vb: Public Shared Function ToChar(value As Object) As Char
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to value, or <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is a null string.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>-or-</p>\n<p>The conversion of <em>value</em> to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is not supported. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Char.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToChar(System.Object,System.IFormatProvider)
  id: ToChar(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(Object, IFormatProvider)
  fullName: System.Convert.ToChar(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 103
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> and a class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Objects of the class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> hold an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. An object of each class is passed to the <strong>ToChar</strong> method. This method returns a character whose Unicode value is the average of the array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values, using the object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> to determine how to calculate the average.</p>System.Convert.ToXXX_Object_IFP#1"
  syntax:
    content: public static char ToChar(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToChar(value As Object, provider As IFormatProvider) As Char
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>, or <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is a null string.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion of <em>value</em> to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Char.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.SByte)
  commentId: M:System.Convert.ToChar(System.SByte)
  id: ToChar(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(SByte)
  fullName: System.Convert.ToChar(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 104
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example converts an array of signed bytes to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToChar#4"
  syntax:
    content: public static char ToChar(sbyte value)
    content.vb: Public Shared Function ToChar(value As SByte) As Char
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Char.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.String)
  commentId: M:System.Convert.ToChar(System.String)
  id: ToChar(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(String)
  fullName: System.Convert.ToChar(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 106
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the first character of a specified string to a Unicode character.</p>\n"
  remarks: "\n<p>\n<em>value</em> must be a string that contains a single character.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Char.TryParse(System.String,System.Char@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts each element in a string array to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Convert.ToChar#5"
  syntax:
    content: public static char ToChar(string value)
    content.vb: Public Shared Function ToChar(value As String) As Char
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string of length 1. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to the first and only character in <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The length of <em>value</em> is not 1. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToChar(System.String,System.IFormatProvider)
  id: ToChar(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(String, IFormatProvider)
  fullName: System.Convert.ToChar(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 107
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>value</em> must be a string that contains a single character.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Char.TryParse(System.String,System.Char@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts a string representation of a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value with the <strong>ToChar</strong> method, using an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object that displays the type of the format provider for which it is called. The example shows that the format provider is not referenced.</p>System.Convert.ToNonNum_String#2"
  syntax:
    content: public static char ToChar(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToChar(value As String, provider As IFormatProvider) As Char
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string of length 1 or <strong>null</strong>. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to the first and only character in <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The length of <em>value</em> is not 1. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.UInt16)
  commentId: M:System.Convert.ToChar(System.UInt16)
  id: ToChar(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(UInt16)
  fullName: System.Convert.ToChar(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 108
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned 16-bit integers to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToChar#6"
  syntax:
    content: public static char ToChar(ushort value)
    content.vb: Public Shared Function ToChar(value As UShort) As Char
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.UInt32)
  commentId: M:System.Convert.ToChar(System.UInt32)
  id: ToChar(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(UInt32)
  fullName: System.Convert.ToChar(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 110
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned integers to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToChar#7"
  syntax:
    content: public static char ToChar(uint value)
    content.vb: Public Shared Function ToChar(value As UInteger) As Char
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Char.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToChar(System.UInt64)
  commentId: M:System.Convert.ToChar(System.UInt64)
  id: ToChar(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToChar(UInt64)
  fullName: System.Convert.ToChar(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 112
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned long integers to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToChar#8"
  syntax:
    content: public static char ToChar(ulong value)
    content.vb: Public Shared Function ToChar(value As ULong) As Char
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Char.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDateTime(System.Object)
  commentId: M:System.Convert.ToDateTime(System.Object)
  id: ToDateTime(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDateTime(Object)
  fullName: System.Convert.ToDateTime(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDateTime
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 114
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>For the conversion to succeed, the runtime type of the <em>value</em> parameter must be either a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> or a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, or <em>value</em> must be <strong>null</strong>. Otherwise, the method throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>. In addition, if <em>value</em> is a string, it must contain a valid representation of a date and time value in the current culture or a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.  </p>\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Convert.ToDateTime(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method with a variety of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> variables.</p>System.Convert.ToDateTime#1"
  syntax:
    content: public static DateTime ToDateTime(object value)
    content.vb: Public Shared Function ToDateTime(value As Object) As DateTime
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The date and time equivalent of the value of <em>value</em>, or a date and time equivalent of <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a valid date and time value.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDateTime(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)
  id: ToDateTime(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDateTime(Object, IFormatProvider)
  fullName: System.Convert.ToDateTime(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDateTime
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 115
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> object, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a date, <em>provider</em> could supply culture-specific information about the notation used to represent that date. <em>provider</em> is involved in the conversion of <em>value</em> if the runtime type of <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, or if <em>value</em> is a user-defined type whose <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation makes use of <em>provider</em>. If the runtime type of <em>value</em> is <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current thread culture is used. </p>\n"
  example:
  - "\n<p>The following example defines a custom format provider, <code>CustomProvider</code>, whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method outputs a message to the console that it has been invoked, and then returns the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of the culture whose name was passed as a parameter to its class constructor. Each of these <code>CustomProvider</code> objects is used to convert the elements in an object array to date and time values. The output indicates that the <code>CustomProvider</code> object is used in the conversion only when the type of the <em>value</em> parameter is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Convert.ToDateTime#4"
  syntax:
    content: public static DateTime ToDateTime(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToDateTime(value As Object, provider As IFormatProvider) As DateTime
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The date and time equivalent of the value of <em>value</em>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a valid date and time value.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDateTime(System.String)
  commentId: M:System.Convert.ToDateTime(System.String)
  id: ToDateTime(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDateTime(String)
  fullName: System.Convert.ToDateTime(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDateTime
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 116
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a date and time to an equivalent date and time value.</p>\n"
  remarks: "\n<p>If <em>value</em> is not <strong>null</strong>, the return value is the result of invoking the <xref href=\"System.DateTime.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method on <em>value</em> using the formatting information in a <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is initialized for the current culture. The <em>value</em> argument must contain the representation of a date and time in one of the formats described in the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> topic. If <em>value</em> is <strong>null</strong>, the method returns <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method tries to parse <em>value</em> completely and avoid throwing a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>. It completes missing month, day, and year information with the current date. If <em>value</em> contains only a date and no time, this method assumes a time of midnight. Any leading, inner, or trailing white-space characters in <em>value</em> are ignored.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.DateTime.TryParse(System.String,System.DateTime@)\" data-throw-if-not-resolved=\"false\"></xref>method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Convert.ToDateTime(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert various string representations of dates and times to <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToDateTime#2"
  syntax:
    content: public static DateTime ToDateTime(string value)
    content.vb: Public Shared Function ToDateTime(value As String) As DateTime
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string representation of a date and time.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The date and time equivalent of the value of <em>value</em>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a properly formatted date and time string. </p>\n"
  seealso:
  - type: System.Globalization.CultureInfo.CurrentCulture
    commentId: P:System.Globalization.CultureInfo.CurrentCulture
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDateTime(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToDateTime(System.String,System.IFormatProvider)
  id: ToDateTime(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDateTime(String, IFormatProvider)
  fullName: System.Convert.ToDateTime(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDateTime
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 117
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.DateTime.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.DateTime.TryParse(System.String,System.DateTime@)\" data-throw-if-not-resolved=\"false\"></xref>method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts string representations of date values with the <strong>ToDateTime</strong> method, using an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToDateTime#3"
  syntax:
    content: public static DateTime ToDateTime(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToDateTime(value As String, provider As IFormatProvider) As DateTime
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains a date and time to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The date and time equivalent of the value of <em>value</em>, or the date and time equivalent of <xref href=\"System.DateTime.MinValue\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a properly formatted date and time string. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Boolean)
  commentId: M:System.Convert.ToDecimal(System.Boolean)
  id: ToDecimal(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Boolean)
  fullName: System.Convert.ToDecimal(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 118
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToDecimal2#1"
  syntax:
    content: public static decimal ToDecimal(bool value)
    content.vb: Public Shared Function ToDecimal(value As Boolean) As Decimal
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Byte)
  commentId: M:System.Convert.ToDecimal(System.Byte)
  id: ToDecimal(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Byte)
  fullName: System.Convert.ToDecimal(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 119
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#18"
  syntax:
    content: public static decimal ToDecimal(byte value)
    content.vb: Public Shared Function ToDecimal(value As Byte) As Decimal
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Decimal)
  commentId: M:System.Convert.ToDecimal(System.Decimal)
  id: ToDecimal(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Decimal)
  fullName: System.Convert.ToDecimal(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 120
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified decimal number; no actual conversion is performed.</p>\n"
  syntax:
    content: public static decimal ToDecimal(decimal value)
    content.vb: Public Shared Function ToDecimal(value As Decimal) As Decimal
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>A decimal number. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Double)
  commentId: M:System.Convert.ToDecimal(System.Double)
  id: ToDecimal(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Double)
  fullName: System.Convert.ToDecimal(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 121
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value returned by this method contains a maximum of 15 significant digits. If the <em>value</em> parameter contains more than 15 significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref href=\"System.Convert.ToDecimal(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method uses rounding to nearest to return a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value with 15 significant digits.</p>System.Convert.ToDecimal#2"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#5"
  syntax:
    content: public static decimal ToDecimal(double value)
    content.vb: Public Shared Function ToDecimal(value As Double) As Decimal
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>. </p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Int16)
  commentId: M:System.Convert.ToDecimal(System.Int16)
  id: ToDecimal(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Int16)
  fullName: System.Convert.ToDecimal(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 122
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts an array of 16-bit signed integers to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToDecimal2#2"
  syntax:
    content: public static decimal ToDecimal(short value)
    content.vb: Public Shared Function ToDecimal(value As Short) As Decimal
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Int32)
  commentId: M:System.Convert.ToDecimal(System.Int32)
  id: ToDecimal(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Int32)
  fullName: System.Convert.ToDecimal(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 123
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts an array of signed integers to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToDecimal2#3"
  syntax:
    content: public static decimal ToDecimal(int value)
    content.vb: Public Shared Function ToDecimal(value As Integer) As Decimal
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Int64)
  commentId: M:System.Convert.ToDecimal(System.Int64)
  id: ToDecimal(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Int64)
  fullName: System.Convert.ToDecimal(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 124
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#10"
  syntax:
    content: public static decimal ToDecimal(long value)
    content.vb: Public Shared Function ToDecimal(value As Long) As Decimal
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Object)
  commentId: M:System.Convert.ToDecimal(System.Object)
  id: ToDecimal(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Object)
  fullName: System.Convert.ToDecimal(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 125
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an equivalent decimal number.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example tries to convert each element in an object array to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDecimal2#4"
  syntax:
    content: public static decimal ToDecimal(object value)
    content.vb: Public Shared Function ToDecimal(value As Object) As Decimal
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format for a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)
  id: ToDecimal(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Object, IFormatProvider)
  fullName: System.Convert.ToDecimal(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 126
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a <code>Temperature</code> class that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>System.Convert.ToDecimal2#10<p>The following example shows that when a <code>Temperature</code> object is passed as a parameter to the <xref href=\"System.Convert.ToDecimal(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the <code>Temperature</code> class is called to perform the conversion.</p>System.Convert.ToDecimal2#11"
  syntax:
    content: public static decimal ToDecimal(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToDecimal(value As Object, provider As IFormatProvider) As Decimal
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format for a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>-or-</p>\n<p>The conversion is not supported. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.SByte)
  commentId: M:System.Convert.ToDecimal(System.SByte)
  id: ToDecimal(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(SByte)
  fullName: System.Convert.ToDecimal(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 127
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of signed bytes to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDecimal2#5"
  syntax:
    content: public static decimal ToDecimal(sbyte value)
    content.vb: Public Shared Function ToDecimal(value As SByte) As Decimal
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.Single)
  commentId: M:System.Convert.ToDecimal(System.Single)
  id: ToDecimal(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(Single)
  fullName: System.Convert.ToDecimal(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 129
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value returned by this method contains a maximum of seven significant digits. If the <em>value</em> parameter contains more than seven significant digits, it is rounded using rounding to nearest. The following example illustrates how the <xref href=\"System.Convert.ToDecimal(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method uses rounding to nearest to return a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value with seven significant digits.</p>System.Convert.ToDecimal#1"
  example:
  - "\n<p>The following example tries to convert each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Convert.ToDecimal2#6"
  syntax:
    content: public static decimal ToDecimal(float value)
    content.vb: Public Shared Function ToDecimal(value As Single) As Decimal
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>. </p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.String)
  commentId: M:System.Convert.ToDecimal(System.String)
  id: ToDecimal(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(String)
  fullName: System.Convert.ToDecimal(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 130
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent decimal number.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToDecimal(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Decimal.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Decimal.TryParse(System.String,System.Decimal@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of <strong>ToDecimal</strong>. It attempts to convert a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>, and throws the possible exceptions that may arise during the conversion.</p>System.Convert Snippets#15"
  syntax:
    content: public static decimal ToDecimal(string value)
    content.vb: Public Shared Function ToDecimal(value As String) As Decimal
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a number in a valid format.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToDecimal(System.String,System.IFormatProvider)
  id: ToDecimal(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(String, IFormatProvider)
  fullName: System.Convert.ToDecimal(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 131
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.Decimal.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Decimal.TryParse(System.String,System.Decimal@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example attempts to convert an array of strings to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values by using <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent two different cultures.</p>System.Convert.ToDecimal2#12"
  syntax:
    content: public static decimal ToDecimal(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToDecimal(value As String, provider As IFormatProvider) As Decimal
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a number in a valid format.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.UInt16)
  commentId: M:System.Convert.ToDecimal(System.UInt16)
  id: ToDecimal(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(UInt16)
  fullName: System.Convert.ToDecimal(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 132
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts an array of 16-bit unsigned integers to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToDecimal2#7"
  syntax:
    content: public static decimal ToDecimal(ushort value)
    content.vb: Public Shared Function ToDecimal(value As UShort) As Decimal
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.UInt32)
  commentId: M:System.Convert.ToDecimal(System.UInt32)
  id: ToDecimal(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(UInt32)
  fullName: System.Convert.ToDecimal(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 134
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts an array of unsigned integers to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToDecimal2#8"
  syntax:
    content: public static decimal ToDecimal(uint value)
    content.vb: Public Shared Function ToDecimal(value As UInteger) As Decimal
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDecimal(System.UInt64)
  commentId: M:System.Convert.ToDecimal(System.UInt64)
  id: ToDecimal(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDecimal(UInt64)
  fullName: System.Convert.ToDecimal(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDecimal
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 136
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</p>\n"
  example:
  - "\n<p>The following example converts an array of unsigned long integers to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToDecimal2#9"
  syntax:
    content: public static decimal ToDecimal(ulong value)
    content.vb: Public Shared Function ToDecimal(value As ULong) As Decimal
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Boolean)
  commentId: M:System.Convert.ToDouble(System.Boolean)
  id: ToDouble(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Boolean)
  fullName: System.Convert.ToDouble(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 138
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#1"
  syntax:
    content: public static double ToDouble(bool value)
    content.vb: Public Shared Function ToDouble(value As Boolean) As Double
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Byte)
  commentId: M:System.Convert.ToDouble(System.Byte)
  id: ToDouble(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Byte)
  fullName: System.Convert.ToDouble(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 139
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#2"
  syntax:
    content: public static double ToDouble(byte value)
    content.vb: Public Shared Function ToDouble(value As Byte) As Double
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Decimal)
  commentId: M:System.Convert.ToDouble(System.Decimal)
  id: ToDouble(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Decimal)
  fullName: System.Convert.ToDouble(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 140
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#5"
  syntax:
    content: public static double ToDouble(decimal value)
    content.vb: Public Shared Function ToDouble(value As Decimal) As Double
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Double)
  commentId: M:System.Convert.ToDouble(System.Double)
  id: ToDouble(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Double)
  fullName: System.Convert.ToDouble(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 141
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified double-precision floating-point number; no actual conversion is performed.</p>\n"
  syntax:
    content: public static double ToDouble(double value)
    content.vb: Public Shared Function ToDouble(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to return. </p>\n"
    return:
      type: System.Double
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Int16)
  commentId: M:System.Convert.ToDouble(System.Int16)
  id: ToDouble(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Int16)
  fullName: System.Convert.ToDouble(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 142
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit signed integers to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDouble#1"
  syntax:
    content: public static double ToDouble(short value)
    content.vb: Public Shared Function ToDouble(value As Short) As Double
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Int32)
  commentId: M:System.Convert.ToDouble(System.Int32)
  id: ToDouble(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Int32)
  fullName: System.Convert.ToDouble(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 143
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#3"
  syntax:
    content: public static double ToDouble(int value)
    content.vb: Public Shared Function ToDouble(value As Integer) As Double
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Int64)
  commentId: M:System.Convert.ToDouble(System.Int64)
  id: ToDouble(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Int64)
  fullName: System.Convert.ToDouble(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 144
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of signed long integers to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDouble#2"
  syntax:
    content: public static double ToDouble(long value)
    content.vb: Public Shared Function ToDouble(value As Long) As Double
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Object)
  commentId: M:System.Convert.ToDouble(System.Object)
  id: ToDouble(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Object)
  fullName: System.Convert.ToDouble(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 145
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a double-precision floating-point number.</p>\n"
  remarks: "\n<p>If <em>value</em> is not <strong>null</strong>, this method wraps a call to the <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>implementation of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each value in an object array to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Convert.ToDouble#3"
  syntax:
    content: public static double ToDouble(object value)
    content.vb: Public Shared Function ToDouble(value As Object) As Double
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format for a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToDouble(System.Object,System.IFormatProvider)
  id: ToDouble(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Object, IFormatProvider)
  fullName: System.Convert.ToDouble(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 146
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> and a class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Objects of the class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> hold an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. An object of each class is passed to the <strong>ToDouble</strong> method. This method returns an average of the array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values, using the object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> to determine how to calculate the average.</p>System.Convert.ToXXX_Object_IFP#1"
  syntax:
    content: public static double ToDouble(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToDouble(value As Object, provider As IFormatProvider) As Double
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format for a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.SByte)
  commentId: M:System.Convert.ToDouble(System.SByte)
  id: ToDouble(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(SByte)
  fullName: System.Convert.ToDouble(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 147
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDouble#4"
  syntax:
    content: public static double ToDouble(sbyte value)
    content.vb: Public Shared Function ToDouble(value As SByte) As Double
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.Single)
  commentId: M:System.Convert.ToDouble(System.Single)
  id: ToDouble(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(Single)
  fullName: System.Convert.ToDouble(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 149
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert Snippets#6"
  syntax:
    content: public static double ToDouble(float value)
    content.vb: Public Shared Function ToDouble(value As Single) As Double
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.String)
  commentId: M:System.Convert.ToDouble(System.String)
  id: ToDouble(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(String)
  fullName: System.Convert.ToDouble(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 150
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToDouble(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Double.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Double.TryParse(System.String,System.Double@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of numeric strings to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>. The example's output is from a system whose current culture is en-US. </p>System.Convert.ToDouble#8"
  syntax:
    content: public static double ToDouble(string value)
    content.vb: Public Shared Function ToDouble(value As String) As Double
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a number in a valid format.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToDouble(System.String,System.IFormatProvider)
  id: ToDouble(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(String, IFormatProvider)
  fullName: System.Convert.ToDouble(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 151
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.Double.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Double.TryParse(System.String,System.Double@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts string representations of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToDouble</strong> method, using an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToReals_String#2"
  syntax:
    content: public static double ToDouble(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToDouble(value As String, provider As IFormatProvider) As Double
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a number in a valid format.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.UInt16)
  commentId: M:System.Convert.ToDouble(System.UInt16)
  id: ToDouble(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(UInt16)
  fullName: System.Convert.ToDouble(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 152
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDouble#5"
  syntax:
    content: public static double ToDouble(ushort value)
    content.vb: Public Shared Function ToDouble(value As UShort) As Double
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.UInt32)
  commentId: M:System.Convert.ToDouble(System.UInt32)
  id: ToDouble(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(UInt32)
  fullName: System.Convert.ToDouble(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 154
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDouble#6"
  syntax:
    content: public static double ToDouble(uint value)
    content.vb: Public Shared Function ToDouble(value As UInteger) As Double
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToDouble(System.UInt64)
  commentId: M:System.Convert.ToDouble(System.UInt64)
  id: ToDouble(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToDouble(UInt64)
  fullName: System.Convert.ToDouble(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 156
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToDouble#7"
  syntax:
    content: public static double ToDouble(ulong value)
    content.vb: Public Shared Function ToDouble(value As ULong) As Double
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Boolean)
  commentId: M:System.Convert.ToInt16(System.Boolean)
  id: ToInt16(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Boolean)
  fullName: System.Convert.ToInt16(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 158
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts the Boolean values <strong>true</strong> and <strong>false</strong> to <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToInt16#1"
  syntax:
    content: public static short ToInt16(bool value)
    content.vb: Public Shared Function ToInt16(value As Boolean) As Short
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Byte)
  commentId: M:System.Convert.ToInt16(System.Byte)
  id: ToInt16(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Byte)
  fullName: System.Convert.ToInt16(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 159
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values to a 16-bit signed integer.</p>System.Convert.ToInt16#2"
  syntax:
    content: public static short ToInt16(byte value)
    content.vb: Public Shared Function ToInt16(value As Byte) As Short
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Char)
  commentId: M:System.Convert.ToInt16(System.Char)
  id: ToInt16(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Char)
  fullName: System.Convert.ToInt16(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 160
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values to a 16-bit signed integer.</p>System.Convert.ToInt16#3"
  syntax:
    content: public static short ToInt16(char value)
    content.vb: Public Shared Function ToInt16(value As Char) As Short
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>. </p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Decimal)
  commentId: M:System.Convert.ToInt16(System.Decimal)
  id: ToInt16(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Decimal)
  fullName: System.Convert.ToInt16(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 161
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value is rounded when performing the conversion.</p>System.Convert.ToInt16#4"
  syntax:
    content: public static short ToInt16(decimal value)
    content.vb: Public Shared Function ToInt16(value As Decimal) As Short
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>\n<em>value</em>, rounded to the nearest 16-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Double)
  commentId: M:System.Convert.ToInt16(System.Double)
  id: ToInt16(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Double)
  fullName: System.Convert.ToInt16(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 162
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value is rounded before performing the conversion.</p>System.Convert.ToInt16#5"
  syntax:
    content: public static short ToInt16(double value)
    content.vb: Public Shared Function ToInt16(value As Double) As Short
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>\n<em>value</em>, rounded to the nearest 16-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Int16)
  commentId: M:System.Convert.ToInt16(System.Int16)
  id: ToInt16(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Int16)
  fullName: System.Convert.ToInt16(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 163
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 16-bit signed integer; no actual conversion is performed.</p>\n"
  syntax:
    content: public static short ToInt16(short value)
    content.vb: Public Shared Function ToInt16(value As Short) As Short
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to return. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Int32)
  commentId: M:System.Convert.ToInt16(System.Int32)
  id: ToInt16(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Int32)
  fullName: System.Convert.ToInt16(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 164
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of integers to a 16-bit signed integer.</p>System.Convert.ToInt16#6"
  syntax:
    content: public static short ToInt16(int value)
    content.vb: Public Shared Function ToInt16(value As Integer) As Short
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>The 16-bit signed integer equivalent of <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Int64)
  commentId: M:System.Convert.ToInt16(System.Int64)
  id: ToInt16(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Int64)
  fullName: System.Convert.ToInt16(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 165
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.</p>System.Convert.ToInt16#7"
  syntax:
    content: public static short ToInt16(long value)
    content.vb: Public Shared Function ToInt16(value As Long) As Short
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Object)
  commentId: M:System.Convert.ToInt16(System.Object)
  id: ToInt16(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Object)
  fullName: System.Convert.ToInt16(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 166
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 16-bit signed integer.</p>\n"
  remarks: "\n<p>If <em>value</em> is not <strong>null</strong>, this method wraps a call to the <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to a 16-bit signed integer.</p>System.Convert.ToInt16#8"
  syntax:
    content: public static short ToInt16(object value)
    content.vb: Public Shared Function ToInt16(value As Object) As Short
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format for an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToInt16(System.Object,System.IFormatProvider)
  id: ToInt16(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Object, IFormatProvider)
  fullName: System.Convert.ToInt16(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 167
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> and a class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Objects of the class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> hold an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. An object of each class is passed to the <strong>ToInt16</strong> method. This method returns an average of the array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values, using the object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> to determine how to calculate the average.</p>System.Convert.ToXXX_Object_IFP#1"
  syntax:
    content: public static short ToInt16(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToInt16(value As Object, provider As IFormatProvider) As Short
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format for an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.SByte)
  commentId: M:System.Convert.ToInt16(System.SByte)
  id: ToInt16(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(SByte)
  fullName: System.Convert.ToInt16(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 168
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of signed bytes to a 16-bit signed integer.</p>System.Convert.ToInt16#9"
  syntax:
    content: public static short ToInt16(sbyte value)
    content.vb: Public Shared Function ToInt16(value As SByte) As Short
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.Single)
  commentId: M:System.Convert.ToInt16(System.Single)
  id: ToInt16(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(Single)
  fullName: System.Convert.ToInt16(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 170
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to a 16-bit signed integer.</p>System.Convert.ToInt16#10"
  syntax:
    content: public static short ToInt16(float value)
    content.vb: Public Shared Function ToInt16(value As Single) As Short
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>\n<em>value</em>, rounded to the nearest 16-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.String)
  commentId: M:System.Convert.ToInt16(System.String)
  id: ToInt16(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(String)
  fullName: System.Convert.ToInt16(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 171
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToInt16(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Int16.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Int16.TryParse(System.String,System.Int16@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts string representations of 16-bit integers with the <strong>ToInt16</strong> method, using default formatting.</p>System.Convert.ToSInts_String#3"
  syntax:
    content: public static short ToInt16(string value)
    content.vb: Public Shared Function ToInt16(value As String) As Short
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int16.Parse(System.String)
    commentId: M:System.Int16.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToInt16(System.String,System.IFormatProvider)
  id: ToInt16(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(String, IFormatProvider)
  fullName: System.Convert.ToInt16(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 172
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Int16.TryParse(System.String,System.Int16@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts string representations of 16-bit integers with the <strong>ToInt16</strong> method, using an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToSInts_String#3"
  syntax:
    content: public static short ToInt16(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToInt16(value As String, provider As IFormatProvider) As Short
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int16.Parse(System.String)
    commentId: M:System.Int16.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.String,System.Int32)
  commentId: M:System.Convert.ToInt16(System.String,System.Int32)
  id: ToInt16(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(String, Int32)
  fullName: System.Convert.ToInt16(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 173
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the negative sign is not supported for non-base 10 numeric representations, the <xref href=\"System.Convert.ToInt16(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example increments <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToInt16(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to -32768.\" </p>System.Convert.BaseConversion#5<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value. </p>System.Convert.BaseConversion#6"
  example:
  - "\n<p>The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.</p>System.Convert.ToInt16#14"
  syntax:
    content: public static short ToInt16(string value, int fromBase)
    content.vb: Public Shared Function ToInt16(value As String, fromBase As Integer) As Short
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.UInt16)
  commentId: M:System.Convert.ToInt16(System.UInt16)
  id: ToInt16(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(UInt16)
  fullName: System.Convert.ToInt16(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 174
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.</p>System.Convert.ToInt16#11"
  syntax:
    content: public static short ToInt16(ushort value)
    content.vb: Public Shared Function ToInt16(value As UShort) As Short
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.UInt32)
  commentId: M:System.Convert.ToInt16(System.UInt32)
  id: ToInt16(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(UInt32)
  fullName: System.Convert.ToInt16(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 176
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.</p>System.Convert.ToInt16#12"
  syntax:
    content: public static short ToInt16(uint value)
    content.vb: Public Shared Function ToInt16(value As UInteger) As Short
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt16(System.UInt64)
  commentId: M:System.Convert.ToInt16(System.UInt64)
  id: ToInt16(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt16(UInt64)
  fullName: System.Convert.ToInt16(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 178
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.</p>System.Convert.ToInt16#13"
  syntax:
    content: public static short ToInt16(ulong value)
    content.vb: Public Shared Function ToInt16(value As ULong) As Short
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Boolean)
  commentId: M:System.Convert.ToInt32(System.Boolean)
  id: ToInt32(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Boolean)
  fullName: System.Convert.ToInt32(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 180
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts the <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values <strong>true</strong> and <strong>false</strong> to integers. </p>System.Convert.ToInt32#1"
  syntax:
    content: public static int ToInt32(bool value)
    content.vb: Public Shared Function ToInt32(value As Boolean) As Integer
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Byte)
  commentId: M:System.Convert.ToInt32(System.Byte)
  id: ToInt32(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Byte)
  fullName: System.Convert.ToInt32(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 181
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of bytes to an integer.</p>System.Convert.ToInt32#2"
  syntax:
    content: public static int ToInt32(byte value)
    content.vb: Public Shared Function ToInt32(value As Byte) As Integer
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Char)
  commentId: M:System.Convert.ToInt32(System.Char)
  id: ToInt32(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Char)
  fullName: System.Convert.ToInt32(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 182
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Convert.ToInt32(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the <em>value</em> argument. If <em>value</em> is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value. </p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values to an integer.</p>System.Convert.ToInt32#3"
  syntax:
    content: public static int ToInt32(char value)
    content.vb: Public Shared Function ToInt32(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Decimal)
  commentId: M:System.Convert.ToInt32(System.Decimal)
  id: ToInt32(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Decimal)
  fullName: System.Convert.ToInt32(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 183
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to an integer.</p>System.Convert.ToInt32#4"
  syntax:
    content: public static int ToInt32(decimal value)
    content.vb: Public Shared Function ToInt32(value As Decimal) As Integer
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>\n<em>value</em>, rounded to the nearest 32-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Double)
  commentId: M:System.Convert.ToInt32(System.Double)
  id: ToInt32(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Double)
  fullName: System.Convert.ToInt32(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 184
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to an<strong></strong>integer.</p>System.Convert.ToInt32#5"
  syntax:
    content: public static int ToInt32(double value)
    content.vb: Public Shared Function ToInt32(value As Double) As Integer
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>\n<em>value</em>, rounded to the nearest 32-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Int16)
  commentId: M:System.Convert.ToInt32(System.Int16)
  id: ToInt32(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Int16)
  fullName: System.Convert.ToInt32(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 185
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit signed integers to an integer.</p>System.Convert.ToInt32#6"
  syntax:
    content: public static int ToInt32(short value)
    content.vb: Public Shared Function ToInt32(value As Short) As Integer
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Int32)
  commentId: M:System.Convert.ToInt32(System.Int32)
  id: ToInt32(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Int32)
  fullName: System.Convert.ToInt32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 186
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 32-bit signed integer; no actual conversion is performed.</p>\n"
  syntax:
    content: public static int ToInt32(int value)
    content.vb: Public Shared Function ToInt32(value As Integer) As Integer
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to return. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Int64)
  commentId: M:System.Convert.ToInt32(System.Int64)
  id: ToInt32(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Int64)
  fullName: System.Convert.ToInt32(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 187
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of long integers to an integer.</p>System.Convert.ToInt32#7"
  syntax:
    content: public static int ToInt32(long value)
    content.vb: Public Shared Function ToInt32(value As Long) As Integer
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Object)
  commentId: M:System.Convert.ToInt32(System.Object)
  id: ToInt32(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Object)
  fullName: System.Convert.ToInt32(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 188
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 32-bit signed integer.</p>\n"
  remarks: "\n<p>If<em>value</em> is not <strong>null</strong>, this method wraps a call to the <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>implementation of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to an integer.</p>System.Convert.ToInt32#8"
  syntax:
    content: public static int ToInt32(object value)
    content.vb: Public Shared Function ToInt32(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the  <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToInt32(System.Object,System.IFormatProvider)
  id: ToInt32(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Object, IFormatProvider)
  fullName: System.Convert.ToInt32(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 189
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> and a class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Objects of the class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> hold an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. An object of each class is passed to the <strong>ToInt32</strong> method. This method returns an average of the array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values, using the object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> to determine how to calculate the average.</p>System.Convert.ToXXX_Object_IFP#1"
  syntax:
    content: public static int ToInt32(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToInt32(value As Object, provider As IFormatProvider) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.SByte)
  commentId: M:System.Convert.ToInt32(System.SByte)
  id: ToInt32(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(SByte)
  fullName: System.Convert.ToInt32(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 190
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of signed bytes to an integer.</p>System.Convert.ToInt32#9"
  syntax:
    content: public static int ToInt32(sbyte value)
    content.vb: Public Shared Function ToInt32(value As SByte) As Integer
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.Single)
  commentId: M:System.Convert.ToInt32(System.Single)
  id: ToInt32(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(Single)
  fullName: System.Convert.ToInt32(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 192
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to an integer.</p>System.Convert.ToInt32#10"
  syntax:
    content: public static int ToInt32(float value)
    content.vb: Public Shared Function ToInt32(value As Single) As Integer
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>\n<em>value</em>, rounded to the nearest 32-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.String)
  commentId: M:System.Convert.ToInt32(System.String)
  id: ToInt32(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(String)
  fullName: System.Convert.ToInt32(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 193
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToInt32(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Int32.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.<em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Int32.TryParse(System.String,System.Int32@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a numeric string array to an integer.</p>System.Convert.ToInt32#11"
  syntax:
    content: public static int ToInt32(string value)
    content.vb: Public Shared Function ToInt32(value As String) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToInt32(System.String,System.IFormatProvider)
  id: ToInt32(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(String, IFormatProvider)
  fullName: System.Convert.ToInt32(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 194
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.Int32.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Int32.TryParse(System.String,System.Int32@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> provider for the invariant culture.</p>System.Convert.ToInt32#15"
  syntax:
    content: public static int ToInt32(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToInt32(value As String, provider As IFormatProvider) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.String,System.Int32)
  commentId: M:System.Convert.ToInt32(System.String,System.Int32)
  id: ToInt32(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(String, Int32)
  fullName: System.Convert.ToInt32(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 195
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the negative sign is not supported for non-base 10 numeric representations, the <xref href=\"System.Convert.ToInt32(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example increments <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToInt32(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to -2147483648.\" </p>System.Convert.BaseConversion#1<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value. </p>System.Convert.BaseConversion#2<p></p>"
  syntax:
    content: public static int ToInt32(string value, int fromBase)
    content.vb: Public Shared Function ToInt32(value As String, fromBase As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.UInt16)
  commentId: M:System.Convert.ToInt32(System.UInt16)
  id: ToInt32(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(UInt16)
  fullName: System.Convert.ToInt32(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 196
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit unsigned integers to an integer.</p>System.Convert.ToInt32#12"
  syntax:
    content: public static int ToInt32(ushort value)
    content.vb: Public Shared Function ToInt32(value As UShort) As Integer
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.UInt32)
  commentId: M:System.Convert.ToInt32(System.UInt32)
  id: ToInt32(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(UInt32)
  fullName: System.Convert.ToInt32(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 198
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned integers to a signed integer.</p>System.Convert.ToInt32#13"
  syntax:
    content: public static int ToInt32(uint value)
    content.vb: Public Shared Function ToInt32(value As UInteger) As Integer
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt32(System.UInt64)
  commentId: M:System.Convert.ToInt32(System.UInt64)
  id: ToInt32(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt32(UInt64)
  fullName: System.Convert.ToInt32(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 200
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned long integers to a signed integer.</p>System.Convert.ToInt32#14"
  syntax:
    content: public static int ToInt32(ulong value)
    content.vb: Public Shared Function ToInt32(value As ULong) As Integer
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Boolean)
  commentId: M:System.Convert.ToInt64(System.Boolean)
  id: ToInt64(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Boolean)
  fullName: System.Convert.ToInt64(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 202
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts the <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values <strong>true</strong> and <strong>false</strong> to long integers.</p>System.Convert.ToInt64#1"
  syntax:
    content: public static long ToInt64(bool value)
    content.vb: Public Shared Function ToInt64(value As Boolean) As Long
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Byte)
  commentId: M:System.Convert.ToInt64(System.Byte)
  id: ToInt64(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Byte)
  fullName: System.Convert.ToInt64(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 203
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of bytes to a long integer.</p>System.Convert.ToInt64#2"
  syntax:
    content: public static long ToInt64(byte value)
    content.vb: Public Shared Function ToInt64(value As Byte) As Long
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Char)
  commentId: M:System.Convert.ToInt64(System.Char)
  id: ToInt64(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Char)
  fullName: System.Convert.ToInt64(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 204
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> array to a long integer.</p>System.Convert.ToInt64#3"
  syntax:
    content: public static long ToInt64(char value)
    content.vb: Public Shared Function ToInt64(value As Char) As Long
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Decimal)
  commentId: M:System.Convert.ToInt64(System.Decimal)
  id: ToInt64(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Decimal)
  fullName: System.Convert.ToInt64(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 205
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to a long integer.</p>System.Convert.ToInt64#4"
  syntax:
    content: public static long ToInt64(decimal value)
    content.vb: Public Shared Function ToInt64(value As Decimal) As Long
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>\n<em>value</em>, rounded to the nearest 64-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Double)
  commentId: M:System.Convert.ToInt64(System.Double)
  id: ToInt64(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Double)
  fullName: System.Convert.ToInt64(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 206
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to a long integer.</p>System.Convert.ToInt64#5"
  syntax:
    content: public static long ToInt64(double value)
    content.vb: Public Shared Function ToInt64(value As Double) As Long
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>\n<em>value</em>, rounded to the nearest 64-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Int16)
  commentId: M:System.Convert.ToInt64(System.Int16)
  id: ToInt64(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Int16)
  fullName: System.Convert.ToInt64(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 207
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit integers to a long integer. </p>System.Convert.ToInt64#6"
  syntax:
    content: public static long ToInt64(short value)
    content.vb: Public Shared Function ToInt64(value As Short) As Long
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Int32)
  commentId: M:System.Convert.ToInt64(System.Int32)
  id: ToInt64(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Int32)
  fullName: System.Convert.ToInt64(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 208
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</p>\n"
  syntax:
    content: public static long ToInt64(int value)
    content.vb: Public Shared Function ToInt64(value As Integer) As Long
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Int64)
  commentId: M:System.Convert.ToInt64(System.Int64)
  id: ToInt64(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Int64)
  fullName: System.Convert.ToInt64(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 209
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 64-bit signed integer; no actual conversion is performed.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of integers to a long integer.</p>System.Convert.ToInt64#7"
  syntax:
    content: public static long ToInt64(long value)
    content.vb: Public Shared Function ToInt64(value As Long) As Long
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>A 64-bit signed integer. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Object)
  commentId: M:System.Convert.ToInt64(System.Object)
  id: ToInt64(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Object)
  fullName: System.Convert.ToInt64(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 210
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 64-bit signed integer.</p>\n"
  remarks: "\n<p>If <em>value</em> is not <strong>null</strong>, this method wraps a call to the <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to a long integer.</p>System.Convert.ToInt64#8"
  syntax:
    content: public static long ToInt64(object value)
    content.vb: Public Shared Function ToInt64(value As Object) As Long
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToInt64(System.Object,System.IFormatProvider)
  id: ToInt64(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Object, IFormatProvider)
  fullName: System.Convert.ToInt64(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 211
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> and a class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Objects of the class that implements <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> hold an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. An object of each class is passed to the <strong>ToInt64</strong> method. This method returns an average of the array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values, using the object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> to determine how to calculate the average.</p>System.Convert.ToXXX_Object_IFP#1"
  syntax:
    content: public static long ToInt64(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToInt64(value As Object, provider As IFormatProvider) As Long
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>-or-</p>\n<p>The conversion is not supported. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.SByte)
  commentId: M:System.Convert.ToInt64(System.SByte)
  id: ToInt64(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(SByte)
  fullName: System.Convert.ToInt64(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 212
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a signed byte array to a long integer.</p>System.Convert.ToInt64#9"
  syntax:
    content: public static long ToInt64(sbyte value)
    content.vb: Public Shared Function ToInt64(value As SByte) As Long
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.Single)
  commentId: M:System.Convert.ToInt64(System.Single)
  id: ToInt64(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(Single)
  fullName: System.Convert.ToInt64(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 214
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to a long integer.</p>System.Convert.ToInt64#10"
  syntax:
    content: public static long ToInt64(float value)
    content.vb: Public Shared Function ToInt64(value As Single) As Long
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>\n<em>value</em>, rounded to the nearest 64-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.String)
  commentId: M:System.Convert.ToInt64(System.String)
  id: ToInt64(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(String)
  fullName: System.Convert.ToInt64(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 215
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToInt64(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Int64.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Int64.TryParse(System.String,System.Int64@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of numeric strings to a long integer.</p>System.Convert.ToInt64#11"
  syntax:
    content: public static long ToInt64(string value)
    content.vb: Public Shared Function ToInt64(value As String) As Long
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToInt64(System.String,System.IFormatProvider)
  id: ToInt64(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(String, IFormatProvider)
  fullName: System.Convert.ToInt64(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 216
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.Int64.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <strong>IFormatProvider</strong> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <strong>NumberFormatInfo</strong> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <strong>NumberFormatInfo</strong> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Int64.TryParse(System.String,System.Int64@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> provider for the invariant culture.</p>System.Convert.ToInt64#16"
  syntax:
    content: public static long ToInt64(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToInt64(value As String, provider As IFormatProvider) As Long
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.String,System.Int32)
  commentId: M:System.Convert.ToInt64(System.String,System.Int32)
  id: ToInt64(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(String, Int32)
  fullName: System.Convert.ToInt64(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 217
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the negative sign is not supported for non-base 10 numeric representations, the <xref href=\"System.Convert.ToInt64(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example converts <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToInt64(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0xFFFFFFFFFFFFFFFF converts to -1.\"</p>System.Convert.BaseConversion#7<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on. </p>System.Convert.BaseConversion#8<p>The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.</p>System.Convert.ToInt64#15<p></p>"
  syntax:
    content: public static long ToInt64(string value, int fromBase)
    content.vb: Public Shared Function ToInt64(value As String, fromBase As Integer) As Long
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.UInt16)
  commentId: M:System.Convert.ToInt64(System.UInt16)
  id: ToInt64(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(UInt16)
  fullName: System.Convert.ToInt64(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 218
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit unsigned integers to a long integer.</p>System.Convert.ToInt64#12"
  syntax:
    content: public static long ToInt64(ushort value)
    content.vb: Public Shared Function ToInt64(value As UShort) As Long
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.UInt32)
  commentId: M:System.Convert.ToInt64(System.UInt32)
  id: ToInt64(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(UInt32)
  fullName: System.Convert.ToInt64(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 220
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned integers to a long integer.</p>System.Convert.ToInt64#13"
  syntax:
    content: public static long ToInt64(uint value)
    content.vb: Public Shared Function ToInt64(value As UInteger) As Long
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToInt64(System.UInt64)
  commentId: M:System.Convert.ToInt64(System.UInt64)
  id: ToInt64(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToInt64(UInt64)
  fullName: System.Convert.ToInt64(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 222
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned long integers to a long integer.</p>System.Convert.ToInt64#14"
  syntax:
    content: public static long ToInt64(ulong value)
    content.vb: Public Shared Function ToInt64(value As ULong) As Long
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Boolean)
  commentId: M:System.Convert.ToSByte(System.Boolean)
  id: ToSByte(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Boolean)
  fullName: System.Convert.ToSByte(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 224
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example converts the Boolean values <strong>true</strong> and <strong>false</strong> to signed byte values.</p>System.Convert.ToSByte#1"
  syntax:
    content: public static sbyte ToSByte(bool value)
    content.vb: Public Shared Function ToSByte(value As Boolean) As SByte
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Byte)
  commentId: M:System.Convert.ToSByte(System.Byte)
  id: ToSByte(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Byte)
  fullName: System.Convert.ToSByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 226
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a byte array to a signed byte. </p>System.Convert.ToSByte#2"
  syntax:
    content: public static sbyte ToSByte(byte value)
    content.vb: Public Shared Function ToSByte(value As Byte) As SByte
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Char)
  commentId: M:System.Convert.ToSByte(System.Char)
  id: ToSByte(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Char)
  fullName: System.Convert.ToSByte(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 228
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values to a signed byte.</p>System.Convert.ToSByte#3"
  syntax:
    content: public static sbyte ToSByte(char value)
    content.vb: Public Shared Function ToSByte(value As Char) As SByte
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Decimal)
  commentId: M:System.Convert.ToSByte(System.Decimal)
  id: ToSByte(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Decimal)
  fullName: System.Convert.ToSByte(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 230
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to a signed byte.</p>System.Convert.ToSByte#4"
  syntax:
    content: public static sbyte ToSByte(decimal value)
    content.vb: Public Shared Function ToSByte(value As Decimal) As SByte
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>\n<em>value</em>, rounded to the nearest 8-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Double)
  commentId: M:System.Convert.ToSByte(System.Double)
  id: ToSByte(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Double)
  fullName: System.Convert.ToSByte(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 232
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to a signed byte.</p>System.Convert.ToSByte#5"
  syntax:
    content: public static sbyte ToSByte(double value)
    content.vb: Public Shared Function ToSByte(value As Double) As SByte
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>\n<em>value</em>, rounded to the nearest 8-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Int16)
  commentId: M:System.Convert.ToSByte(System.Int16)
  id: ToSByte(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Int16)
  fullName: System.Convert.ToSByte(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 234
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.</p>System.Convert.ToSByte#6"
  syntax:
    content: public static sbyte ToSByte(short value)
    content.vb: Public Shared Function ToSByte(value As Short) As SByte
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Int32)
  commentId: M:System.Convert.ToSByte(System.Int32)
  id: ToSByte(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Int32)
  fullName: System.Convert.ToSByte(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 236
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of signed integers to a signed byte.</p>System.Convert.ToSByte#7"
  syntax:
    content: public static sbyte ToSByte(int value)
    content.vb: Public Shared Function ToSByte(value As Integer) As SByte
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Int64)
  commentId: M:System.Convert.ToSByte(System.Int64)
  id: ToSByte(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Int64)
  fullName: System.Convert.ToSByte(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 238
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of long integers to a signed byte.</p>System.Convert.ToSByte#8"
  syntax:
    content: public static sbyte ToSByte(long value)
    content.vb: Public Shared Function ToSByte(value As Long) As SByte
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Object)
  commentId: M:System.Convert.ToSByte(System.Object)
  id: ToSByte(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Object)
  fullName: System.Convert.ToSByte(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 240
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an 8-bit signed integer.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to a signed byte.</p>System.Convert.ToSByte#9"
  syntax:
    content: public static sbyte ToSByte(object value)
    content.vb: Public Shared Function ToSByte(value As Object) As SByte
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToSByte(System.Object,System.IFormatProvider)
  id: ToSByte(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Object, IFormatProvider)
  fullName: System.Convert.ToSByte(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 242
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a <code>ByteString</code> class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte. The <code>ByteString</code> class implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. Its <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.SByte.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to perform the conversion. If it fails, it throws an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Convert.ToSByte#14<p>The following example shows how the <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the <code>ByteString</code> class is called by the <xref href=\"System.Convert.ToSByte(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Convert.ToSByte#15"
  syntax:
    content: public static sbyte ToSByte(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToSByte(value As Object, provider As IFormatProvider) As SByte
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.SByte)
  commentId: M:System.Convert.ToSByte(System.SByte)
  id: ToSByte(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(SByte)
  fullName: System.Convert.ToSByte(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 244
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 8-bit signed integer; no actual conversion is performed.</p>\n"
  syntax:
    content: public static sbyte ToSByte(sbyte value)
    content.vb: Public Shared Function ToSByte(value As SByte) As SByte
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to return. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.Single)
  commentId: M:System.Convert.ToSByte(System.Single)
  id: ToSByte(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(Single)
  fullName: System.Convert.ToSByte(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 246
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to a signed byte.</p>System.Convert.ToSByte#9"
  syntax:
    content: public static sbyte ToSByte(float value)
    content.vb: Public Shared Function ToSByte(value As Single) As SByte
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>\n<em>value</em>, rounded to the nearest 8-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.String)
  commentId: M:System.Convert.ToSByte(System.String)
  id: ToSByte(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(String)
  fullName: System.Convert.ToSByte(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 248
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToSByte(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.SByte.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.SByte.TryParse(System.String,System.SByte@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts string representations of <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToSByte</strong> method, using default formatting.</p>System.Convert.ToSInts_String#4"
  syntax:
    content: public static sbyte ToSByte(string value)
    content.vb: Public Shared Function ToSByte(value As String) As SByte
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if value is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.SByte.Parse(System.String)
    commentId: M:System.SByte.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToSByte(System.String,System.IFormatProvider)
  id: ToSByte(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(String, IFormatProvider)
  fullName: System.Convert.ToSByte(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 250
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.SByte.TryParse(System.String,System.SByte@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example converts string representations of <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToSByte</strong> method, using an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToSInts_String#4"
  syntax:
    content: public static sbyte ToSByte(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToSByte(value As String, provider As IFormatProvider) As SByte
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.SByte.Parse(System.String)
    commentId: M:System.SByte.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.String,System.Int32)
  commentId: M:System.Convert.ToSByte(System.String,System.Int32)
  id: ToSByte(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(String, Int32)
  fullName: System.Convert.ToSByte(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 252
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the negative sign is not supported for non-base 10 numeric representations, the <xref href=\"System.Convert.ToSByte(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to an <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example converts <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToSByte(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0xff converts to -1.\"</p>System.Convert.BaseConversion#9<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on. </p>System.Convert.BaseConversion#10"
  example:
  - "\n<p>The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.</p>System.Convert.ToSByte#16<p></p>"
  syntax:
    content: public static sbyte ToSByte(string value, int fromBase)
    content.vb: Public Shared Function ToSByte(value As String, fromBase As Integer) As SByte
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.UInt16)
  commentId: M:System.Convert.ToSByte(System.UInt16)
  id: ToSByte(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(UInt16)
  fullName: System.Convert.ToSByte(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 254
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.</p>System.Convert.ToSByte#11"
  syntax:
    content: public static sbyte ToSByte(ushort value)
    content.vb: Public Shared Function ToSByte(value As UShort) As SByte
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.UInt32)
  commentId: M:System.Convert.ToSByte(System.UInt32)
  id: ToSByte(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(UInt32)
  fullName: System.Convert.ToSByte(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 256
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an integer array to a signed byte.</p>System.Convert.ToSByte#12"
  syntax:
    content: public static sbyte ToSByte(uint value)
    content.vb: Public Shared Function ToSByte(value As UInteger) As SByte
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSByte(System.UInt64)
  commentId: M:System.Convert.ToSByte(System.UInt64)
  id: ToSByte(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSByte(UInt64)
  fullName: System.Convert.ToSByte(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSByte
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 258
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of long integers to a signed byte.</p>System.Convert.ToSByte#13"
  syntax:
    content: public static sbyte ToSByte(ulong value)
    content.vb: Public Shared Function ToSByte(value As ULong) As SByte
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Boolean)
  commentId: M:System.Convert.ToSingle(System.Boolean)
  id: ToSingle(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Boolean)
  fullName: System.Convert.ToSingle(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 260
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts the Boolean values <strong>true</strong> and <strong>false</strong> to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToSingle#1"
  syntax:
    content: public static float ToSingle(bool value)
    content.vb: Public Shared Function ToSingle(value As Boolean) As Single
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Byte)
  commentId: M:System.Convert.ToSingle(System.Byte)
  id: ToSingle(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Byte)
  fullName: System.Convert.ToSingle(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 261
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of byte values to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#2"
  syntax:
    content: public static float ToSingle(byte value)
    content.vb: Public Shared Function ToSingle(value As Byte) As Single
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Decimal)
  commentId: M:System.Convert.ToSingle(System.Decimal)
  id: ToSingle(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Decimal)
  fullName: System.Convert.ToSingle(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 262
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#3"
  syntax:
    content: public static float ToSingle(decimal value)
    content.vb: Public Shared Function ToSingle(value As Decimal) As Single
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n<p>\n<em>value</em> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Double)
  commentId: M:System.Convert.ToSingle(System.Double)
  id: ToSingle(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Double)
  fullName: System.Convert.ToSingle(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 263
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#4"
  syntax:
    content: public static float ToSingle(double value)
    content.vb: Public Shared Function ToSingle(value As Double) As Single
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n<p>\n<em>value</em> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Int16)
  commentId: M:System.Convert.ToSingle(System.Int16)
  id: ToSingle(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Int16)
  fullName: System.Convert.ToSingle(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 264
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit integers to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#5"
  syntax:
    content: public static float ToSingle(short value)
    content.vb: Public Shared Function ToSingle(value As Short) As Single
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Int32)
  commentId: M:System.Convert.ToSingle(System.Int32)
  id: ToSingle(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Int32)
  fullName: System.Convert.ToSingle(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 265
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an integer array to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#6"
  syntax:
    content: public static float ToSingle(int value)
    content.vb: Public Shared Function ToSingle(value As Integer) As Single
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Int64)
  commentId: M:System.Convert.ToSingle(System.Int64)
  id: ToSingle(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Int64)
  fullName: System.Convert.ToSingle(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 266
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of long integers to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#7"
  syntax:
    content: public static float ToSingle(long value)
    content.vb: Public Shared Function ToSingle(value As Long) As Single
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Object)
  commentId: M:System.Convert.ToSingle(System.Object)
  id: ToSingle(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Object)
  fullName: System.Convert.ToSingle(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 267
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a single-precision floating-point number.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Convert.ToSingle#8"
  syntax:
    content: public static float ToSingle(object value)
    content.vb: Public Shared Function ToSingle(value As Object) As Single
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToSingle(System.Object,System.IFormatProvider)
  id: ToSingle(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Object, IFormatProvider)
  fullName: System.Convert.ToSingle(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 268
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a <code>Temperature</code> class that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. Its implementation of the <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method returns the internal value of a private <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> variable that represents the temperature.</p>System.Convert.ToSingle#14<p>The following example illustrates how a call to the <xref href=\"System.Convert.ToSingle(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method, in turn, calls the <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the <code>Temperature</code> class.</p>System.Convert.ToSingle#15"
  syntax:
    content: public static float ToSingle(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToSingle(value As Object, provider As IFormatProvider) As Single
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.SByte)
  commentId: M:System.Convert.ToSingle(System.SByte)
  id: ToSingle(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(SByte)
  fullName: System.Convert.ToSingle(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 269
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in a signed byte array to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#9"
  syntax:
    content: public static float ToSingle(sbyte value)
    content.vb: Public Shared Function ToSingle(value As SByte) As Single
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.Single)
  commentId: M:System.Convert.ToSingle(System.Single)
  id: ToSingle(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(Single)
  fullName: System.Convert.ToSingle(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 271
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified single-precision floating-point number; no actual conversion is performed.</p>\n"
  syntax:
    content: public static float ToSingle(float value)
    content.vb: Public Shared Function ToSingle(value As Single) As Single
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to return. </p>\n"
    return:
      type: System.Single
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.String)
  commentId: M:System.Convert.ToSingle(System.String)
  id: ToSingle(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(String)
  fullName: System.Convert.ToSingle(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 272
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToSingle(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Single.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Single.TryParse(System.String,System.Single@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of numeric strings to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Convert.ToSingle#10"
  syntax:
    content: public static float ToSingle(string value)
    content.vb: Public Shared Function ToSingle(value As String) As Single
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a number in a valid format.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToSingle(System.String,System.IFormatProvider)
  id: ToSingle(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(String, IFormatProvider)
  fullName: System.Convert.ToSingle(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 273
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.Single.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.Single.TryParse(System.String,System.Single@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example uses <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Convert.ToSingle#16"
  syntax:
    content: public static float ToSingle(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToSingle(value As String, provider As IFormatProvider) As Single
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not a number in a valid format.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.UInt16)
  commentId: M:System.Convert.ToSingle(System.UInt16)
  id: ToSingle(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(UInt16)
  fullName: System.Convert.ToSingle(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 274
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned 16-bit integers to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#11"
  syntax:
    content: public static float ToSingle(ushort value)
    content.vb: Public Shared Function ToSingle(value As UShort) As Single
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.UInt32)
  commentId: M:System.Convert.ToSingle(System.UInt32)
  id: ToSingle(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(UInt32)
  fullName: System.Convert.ToSingle(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 276
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned integers to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#12"
  syntax:
    content: public static float ToSingle(uint value)
    content.vb: Public Shared Function ToSingle(value As UInteger) As Single
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToSingle(System.UInt64)
  commentId: M:System.Convert.ToSingle(System.UInt64)
  id: ToSingle(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToSingle(UInt64)
  fullName: System.Convert.ToSingle(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSingle
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 278
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned long integers to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Convert.ToSingle#13"
  syntax:
    content: public static float ToSingle(ulong value)
    content.vb: Public Shared Function ToSingle(value As ULong) As Single
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Boolean)
  commentId: M:System.Convert.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Boolean)
  fullName: System.Convert.ToString(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 280
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref>. It returns <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> for <strong>true</strong> values and <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref> for <strong>false</strong> values.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, using <strong>ToString</strong>. It also illustrates that the string returned by the conversion equals either <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Convert.ToString#1"
  syntax:
    content: public static string ToString(bool value)
    content.vb: Public Shared Function ToString(value As Boolean) As String
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Boolean,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Boolean,System.IFormatProvider)
  id: ToString(System.Boolean,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Boolean, IFormatProvider)
  fullName: System.Convert.ToString(System.Boolean, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 281
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref>. It returns <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> for <strong>true</strong> values and <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref> for <strong>false</strong> values.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> with the <strong>ToString</strong> method, using an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object that displays the type of the format provider for which it is called. The example shows that the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object is not referenced.</p>System.Convert.ToString.IFormatProvider#2"
  syntax:
    content: public static string ToString(bool value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Boolean, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An instance of an object. This parameter is ignored.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Byte)
  commentId: M:System.Convert.ToString(System.Byte)
  id: ToString(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Byte)
  fullName: System.Convert.ToString(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 282
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Byte.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each value in a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array to a string.</p>System.Convert.ToString#3"
  syntax:
    content: public static string ToString(byte value)
    content.vb: Public Shared Function ToString(value As Byte) As String
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Byte,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Byte,System.IFormatProvider)
  id: ToString(System.Byte,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Byte, IFormatProvider)
  fullName: System.Convert.ToString(System.Byte, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 283
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Byte.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures. Because the \"G\" specifier by default outputs only decimal digits in a byte value's string representation, the <em>provider</em> parameter does not affect the formatting of the returned string.</p>System.Convert.ToString2#16"
  syntax:
    content: public static string ToString(byte value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Byte, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Byte,System.Int32)
  commentId: M:System.Convert.ToString(System.Byte,System.Int32)
  id: ToString(System.Byte,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Byte, Int32)
  fullName: System.Convert.ToString(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 284
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</p>\n"
  remarks: "\n<p>If <em>toBase</em> does not equal 10, the string that is returned by the <xref href=\"System.Convert.ToString(System.Byte,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method represents <em>value</em> by its magnitude only. If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion. Such methods include <xref href=\"System.Convert.ToByte(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Byte.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</p>System.Convert.ToString2#9"
  syntax:
    content: public static string ToString(byte value, int toBase)
    content.vb: Public Shared Function ToString(value As Byte, toBase As Integer) As String
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    - id: toBase
      type: System.Int32
      description: "\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Char)
  commentId: M:System.Convert.ToString(System.Char)
  id: ToString(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Char)
  fullName: System.Convert.ToString(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 285
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Char.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Convert Snippets#14"
  syntax:
    content: public static string ToString(char value)
    content.vb: Public Shared Function ToString(value As Char) As String
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Char,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Char,System.IFormatProvider)
  id: ToString(System.Char,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Char, IFormatProvider)
  fullName: System.Convert.ToString(System.Char, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 286
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Char.ToString\" data-throw-if-not-resolved=\"false\"></xref>. The <em>provider</em> parameter is ignored. </p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> with the <strong>ToString</strong> method, using an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object that displays the type of the format provider for which it is called. The example shows that the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object is not referenced.</p>System.Convert.ToString.IFormatProvider#2"
  syntax:
    content: public static string ToString(char value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Char, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. This parameter is ignored. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.DateTime)
  commentId: M:System.Convert.ToString(System.DateTime)
  id: ToString(System.DateTime)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(DateTime)
  fullName: System.Convert.ToString(System.DateTime)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 287
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.DateTime.ToString\" data-throw-if-not-resolved=\"false\"></xref>. It uses the formatting conventions of the current culture and the \"G\" format specifier to convert a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value to its string representation.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Convert.ToString2#1"
  syntax:
    content: public static string ToString(DateTime value)
    content.vb: Public Shared Function ToString(value As DateTime) As String
    parameters:
    - id: value
      type: System.DateTime
      description: "\n<p>The date and time value to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.DateTime,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.DateTime,System.IFormatProvider)
  id: ToString(System.DateTime,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(DateTime, IFormatProvider)
  fullName: System.Convert.ToString(System.DateTime, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 288
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.DateTime.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value to its equivalent string representation in eight different cultures.</p>System.Convert.ToString2#13"
  syntax:
    content: public static string ToString(DateTime value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As DateTime, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.DateTime
      description: "\n<p>The date and time value to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Decimal)
  commentId: M:System.Convert.ToString(System.Decimal)
  id: ToString(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Decimal)
  fullName: System.Convert.ToString(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 289
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Decimal.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Convert Snippets#15"
  syntax:
    content: public static string ToString(decimal value)
    content.vb: Public Shared Function ToString(value As Decimal) As String
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Decimal,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Decimal,System.IFormatProvider)
  id: ToString(System.Decimal,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Decimal, IFormatProvider)
  fullName: System.Convert.ToString(System.Decimal, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 290
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Decimal.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to its equivalent string representation in four different cultures.</p>System.Convert.ToString2#14"
  syntax:
    content: public static string ToString(decimal value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Decimal, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Double)
  commentId: M:System.Convert.ToString(System.Double)
  id: ToString(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Double)
  fullName: System.Convert.ToString(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 291
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Double.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Convert Snippets#7"
  syntax:
    content: public static string ToString(double value)
    content.vb: Public Shared Function ToString(value As Double) As String
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Double,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Double,System.IFormatProvider)
  id: ToString(System.Double,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Double, IFormatProvider)
  fullName: System.Convert.ToString(System.Double, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 292
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Double.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to its equivalent string representation in four different cultures.</p>System.Convert.ToString2#15"
  syntax:
    content: public static string ToString(double value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Double, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int16)
  commentId: M:System.Convert.ToString(System.Int16)
  id: ToString(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int16)
  fullName: System.Convert.ToString(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 293
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Int16.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit integers to its equivalent string representation.</p>System.Convert.ToString2#2"
  syntax:
    content: public static string ToString(short value)
    content.vb: Public Shared Function ToString(value As Short) As String
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int16,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Int16,System.IFormatProvider)
  id: ToString(System.Int16,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int16, IFormatProvider)
  fullName: System.Convert.ToString(System.Int16, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 294
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Int16.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref href=\"System.Convert.ToString(System.Int16,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each element in an array of 16-bit integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToString2#19"
  syntax:
    content: public static string ToString(short value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Short, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int16,System.Int32)
  commentId: M:System.Convert.ToString(System.Int16,System.Int32)
  id: ToString(System.Int16,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int16, Int32)
  fullName: System.Convert.ToString(System.Int16, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 295
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</p>\n"
  remarks: "\n<p>If <em>value</em> is positive and <em>toBase</em> is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If <em>value</em> is negative and <em>toBase</em> is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit. If the <xref href=\"System.Convert.ToString(System.Int16,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref href=\"System.Convert.ToInt16(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Int16.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.</p>System.Convert.ToString2#10"
  syntax:
    content: public static string ToString(short value, int toBase)
    content.vb: Public Shared Function ToString(value As Short, toBase As Integer) As String
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    - id: toBase
      type: System.Int32
      description: "\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int32)
  commentId: M:System.Convert.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int32)
  fullName: System.Convert.ToString(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 296
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Int32.ToString\" data-throw-if-not-resolved=\"false\"></xref>. It formats <em>value</em> by using the formatting conventions of the current thread culture. </p>\n"
  example:
  - "\n<p>The following example compares the <xref href=\"System.Convert.ToString(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method with the <xref href=\"System.Convert.ToString(System.UInt16,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. It defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that uses the sting \"minus\" to represent the negative sign. It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.</p>System.Convert.ToString2#27"
  syntax:
    content: public static string ToString(int value)
    content.vb: Public Shared Function ToString(value As Integer) As String
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int32,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Int32,System.IFormatProvider)
  id: ToString(System.Int32,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int32, IFormatProvider)
  fullName: System.Convert.ToString(System.Int32, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 297
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Int32.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref href=\"System.Convert.ToString(System.Int32,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each element in an array of integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToString2#20"
  syntax:
    content: public static string ToString(int value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Integer, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int32,System.Int32)
  commentId: M:System.Convert.ToString(System.Int32,System.Int32)
  id: ToString(System.Int32,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int32, Int32)
  fullName: System.Convert.ToString(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 298
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</p>\n"
  remarks: "\n<p>If <em>value</em> is positive and <em>toBase</em> is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If <em>value</em> is negative and <em>toBase</em> is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit. If the <xref href=\"System.Convert.ToString(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref href=\"System.Convert.ToInt32(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Int32.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</p>System.Convert.ToString2#11"
  syntax:
    content: public static string ToString(int value, int toBase)
    content.vb: Public Shared Function ToString(value As Integer, toBase As Integer) As String
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    - id: toBase
      type: System.Int32
      description: "\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int64)
  commentId: M:System.Convert.ToString(System.Int64)
  id: ToString(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int64)
  fullName: System.Convert.ToString(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 299
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Int64.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in a long integer array to its equivalent string representation.</p>System.Convert.ToString2#28"
  syntax:
    content: public static string ToString(long value)
    content.vb: Public Shared Function ToString(value As Long) As String
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int64,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Int64,System.IFormatProvider)
  id: ToString(System.Int64,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int64, IFormatProvider)
  fullName: System.Convert.ToString(System.Int64, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 300
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Int64.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref href=\"System.Convert.ToString(System.Int64,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each element in a long integer array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToString2#21"
  syntax:
    content: public static string ToString(long value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Long, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Int64,System.Int32)
  commentId: M:System.Convert.ToString(System.Int64,System.Int32)
  id: ToString(System.Int64,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Int64, Int32)
  fullName: System.Convert.ToString(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 301
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</p>\n"
  remarks: "\n<p>If <em>value</em> is positive and <em>toBase</em> is not 10, the returned string uses sign-and-magnitude representation. If <em>value</em> is negative and <em>toBase</em> is not 10, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit. If the <xref href=\"System.Convert.ToString(System.Int64,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref href=\"System.Convert.ToInt64(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Int64.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</p>System.Convert.ToString2#12"
  syntax:
    content: public static string ToString(long value, int toBase)
    content.vb: Public Shared Function ToString(value As Long, toBase As Integer) As String
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    - id: toBase
      type: System.Int32
      description: "\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Object)
  commentId: M:System.Convert.ToString(System.Object)
  id: ToString(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Object)
  fullName: System.Convert.ToString(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 302
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to its equivalent string representation.</p>\n"
  remarks: "\n<p>To convert <em>value</em> to its string representation, the method tries to call the <xref href=\"System.IConvertible.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of <em>value</em>. If <em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, the method tries to call the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of <em>value</em>. If value does not implement the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, the method calls the <strong>ToString</strong> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an object array to its equivalent string representation.</p>System.Convert.ToString2#3"
  syntax:
    content: public static string ToString(object value)
    content.vb: Public Shared Function ToString(value As Object) As String
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that supplies the value to convert, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is an object whose value is <strong>null</strong>. If <em>value</em> is <strong>null</strong>, the method returns <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Object,System.IFormatProvider)
  id: ToString(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Object, IFormatProvider)
  fullName: System.Convert.ToString(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 303
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>If the <em>value</em> parameter implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, the method calls the <xref href=\"System.IConvertible.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>implementation of <em>value</em>. Otherwise, if the <em>value</em> parameter implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, the method calls its <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>implementation. If <em>value</em> implements neither interface, the method calls the <em>value</em> parameter's <strong>ToString()</strong> method, and the <em>provider</em> parameter is ignored.</p>\n<p>The <em>provider</em> parameter is used if the <em>value</em> parameter implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface. The most common use of the <em>provider</em> parameter is to specify culture-specific information used in the conversion of <em>value</em>. For example, if the <em>value</em> parameter is a negative decimal number, the <em>provider</em> parameter can supply culture-specific information about the notation used for the negative sign and decimal separator. The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information. </p>\n"
  example:
  - "\n<p>The following example defines a <code>Temperature</code> class that overrides the <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method but does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The example illustrates how calls to the <xref href=\"System.Convert.ToString(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method, in turn, call the <code>Temperature.ToString</code> method. </p>System.Convert.ToString2#26"
  - "\n<p>The following example defines a <code>Temperature</code> class that implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface but does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. Its <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>implementation represents the <code>Temperature</code> value in Celsius, Fahrenheit, or Kelvin, depending on the format  string. The example also defines a <code>TemperatureProvider</code> class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> and provides a randomly generated format string that is used by the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> implementation of the <code>Temperature</code> class. </p>System.Convert.ToString2#30"
  syntax:
    content: public static string ToString(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Object, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that supplies the value to convert, or <strong>null</strong>. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is an object whose value is <strong>null</strong>. If <em>value</em> is <strong>null</strong>, the method returns <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.SByte)
  commentId: M:System.Convert.ToString(System.SByte)
  id: ToString(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(SByte)
  fullName: System.Convert.ToString(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 304
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.SByte.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in a signed byte array to its equivalent string representation.</p>System.Convert.ToString2#4"
  syntax:
    content: public static string ToString(sbyte value)
    content.vb: Public Shared Function ToString(value As SByte) As String
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.SByte,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.SByte,System.IFormatProvider)
  id: ToString(System.SByte,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(SByte, IFormatProvider)
  fullName: System.Convert.ToString(System.SByte, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 306
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.SByte.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref href=\"System.Convert.ToString(System.SByte,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each element in signed byte array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Convert.ToString2#17"
  syntax:
    content: public static string ToString(sbyte value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As SByte, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Single)
  commentId: M:System.Convert.ToString(System.Single)
  id: ToString(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Single)
  fullName: System.Convert.ToString(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 308
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to its equivalent string representation.</p>System.Convert.ToString2#5"
  syntax:
    content: public static string ToString(float value)
    content.vb: Public Shared Function ToString(value As Single) As String
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.Single,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.Single,System.IFormatProvider)
  id: ToString(System.Single,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(Single, IFormatProvider)
  fullName: System.Convert.ToString(System.Single, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 309
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.Single.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to its equivalent string representation in four different cultures.</p>System.Convert.ToString2#18"
  syntax:
    content: public static string ToString(float value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As Single, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.UInt16)
  commentId: M:System.Convert.ToString(System.UInt16)
  id: ToString(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(UInt16)
  fullName: System.Convert.ToString(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 310
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.UInt16.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.</p>System.Convert.ToString2#6"
  syntax:
    content: public static string ToString(ushort value)
    content.vb: Public Shared Function ToString(value As UShort) As String
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.UInt16,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.UInt16,System.IFormatProvider)
  id: ToString(System.UInt16,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(UInt16, IFormatProvider)
  fullName: System.Convert.ToString(System.UInt16, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 312
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.UInt16.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref href=\"System.Convert.ToString(System.UInt16,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a 16-bit unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The output indicates that this formatting information is not used, because by default the \"G\" format specifier does not include a positive sign with positive values.</p>System.Convert.ToString2#22"
  syntax:
    content: public static string ToString(ushort value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As UShort, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.UInt32)
  commentId: M:System.Convert.ToString(System.UInt32)
  id: ToString(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(UInt32)
  fullName: System.Convert.ToString(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 314
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.UInt32.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an unsigned integer array to its equivalent string representation.</p>System.Convert.ToString2#7"
  syntax:
    content: public static string ToString(uint value)
    content.vb: Public Shared Function ToString(value As UInteger) As String
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.UInt32,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.UInt32,System.IFormatProvider)
  id: ToString(System.UInt32,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(UInt32, IFormatProvider)
  fullName: System.Convert.ToString(System.UInt32, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 316
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.UInt32.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref href=\"System.Convert.ToString(System.UInt32,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The output indicates that this formatting information is not used, because by default the \"G\" format specifier does not include a positive sign with positive values.</p>System.Convert.ToString2#23"
  syntax:
    content: public static string ToString(uint value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As UInteger, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.UInt64)
  commentId: M:System.Convert.ToString(System.UInt64)
  id: ToString(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(UInt64)
  fullName: System.Convert.ToString(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 318
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.UInt64.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example converts each element in an unsigned long integer array to its equivalent string representation.</p>System.Convert.ToString2#8"
  syntax:
    content: public static string ToString(ulong value)
    content.vb: Public Shared Function ToString(value As ULong) As String
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToString(System.UInt64,System.IFormatProvider)
  commentId: M:System.Convert.ToString(System.UInt64,System.IFormatProvider)
  id: ToString(System.UInt64,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToString(UInt64, IFormatProvider)
  fullName: System.Convert.ToString(System.UInt64, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 320
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>This implementation is identical to <xref href=\"System.UInt64.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class that defines its negative sign as the string \"~\" and its positive sign as the string \"!\". It then calls the <xref href=\"System.Convert.ToString(System.UInt64,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an unsigned long integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The output indicates that this formatting information is not used, because by default the \"G\" format specifier does not include a positive sign with positive values.</p>System.Convert.ToString2#24"
  syntax:
    content: public static string ToString(ulong value, IFormatProvider provider)
    content.vb: Public Shared Function ToString(value As ULong, provider As IFormatProvider) As String
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Boolean)
  commentId: M:System.Convert.ToUInt16(System.Boolean)
  id: ToUInt16(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Boolean)
  fullName: System.Convert.ToUInt16(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 322
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts the Boolean values <strong>true</strong> and <strong>false</strong> to unsigned 16-bit integers.</p>System.Convert.ToUInt16#1"
  syntax:
    content: public static ushort ToUInt16(bool value)
    content.vb: Public Shared Function ToUInt16(value As Boolean) As UShort
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Byte)
  commentId: M:System.Convert.ToUInt16(System.Byte)
  id: ToUInt16(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Byte)
  fullName: System.Convert.ToUInt16(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 324
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a byte array to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#2"
  syntax:
    content: public static ushort ToUInt16(byte value)
    content.vb: Public Shared Function ToUInt16(value As Byte) As UShort
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Char)
  commentId: M:System.Convert.ToUInt16(System.Char)
  id: ToUInt16(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Char)
  fullName: System.Convert.ToUInt16(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 326
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a character array to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#3"
  syntax:
    content: public static ushort ToUInt16(char value)
    content.vb: Public Shared Function ToUInt16(value As Char) As UShort
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Decimal)
  commentId: M:System.Convert.ToUInt16(System.Decimal)
  id: ToUInt16(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Decimal)
  fullName: System.Convert.ToUInt16(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 328
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#4"
  syntax:
    content: public static ushort ToUInt16(decimal value)
    content.vb: Public Shared Function ToUInt16(value As Decimal) As UShort
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>\n<em>value</em>, rounded to the nearest 16-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Double)
  commentId: M:System.Convert.ToUInt16(System.Double)
  id: ToUInt16(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Double)
  fullName: System.Convert.ToUInt16(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 330
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#5"
  syntax:
    content: public static ushort ToUInt16(double value)
    content.vb: Public Shared Function ToUInt16(value As Double) As UShort
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>\n<em>value</em>, rounded to the nearest 16-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Int16)
  commentId: M:System.Convert.ToUInt16(System.Int16)
  id: ToUInt16(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Int16)
  fullName: System.Convert.ToUInt16(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 332
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#6"
  syntax:
    content: public static ushort ToUInt16(short value)
    content.vb: Public Shared Function ToUInt16(value As Short) As UShort
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Int32)
  commentId: M:System.Convert.ToUInt16(System.Int32)
  id: ToUInt16(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Int32)
  fullName: System.Convert.ToUInt16(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 334
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an integer array to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#7"
  syntax:
    content: public static ushort ToUInt16(int value)
    content.vb: Public Shared Function ToUInt16(value As Integer) As UShort
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Int64)
  commentId: M:System.Convert.ToUInt16(System.Int64)
  id: ToUInt16(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Int64)
  fullName: System.Convert.ToUInt16(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 336
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a long integer array to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#8"
  syntax:
    content: public static ushort ToUInt16(long value)
    content.vb: Public Shared Function ToUInt16(value As Long) As UShort
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Object)
  commentId: M:System.Convert.ToUInt16(System.Object)
  id: ToUInt16(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Object)
  fullName: System.Convert.ToUInt16(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 338
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 16-bit unsigned integer.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#9"
  syntax:
    content: public static ushort ToUInt16(object value)
    content.vb: Public Shared Function ToUInt16(value As Object) As UShort
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the  <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)
  id: ToUInt16(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Object, IFormatProvider)
  fullName: System.Convert.ToUInt16(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 340
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a <code>HexString</code> class that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values. The class includes a <code>Sign</code> property that indicates the sign of its hexadecimal value.</p>System.Convert.ToUInt16#16<p>The following example shows that a call to the <xref href=\"System.Convert.ToUInt16(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method that passes a <code>HexString</code> object as a parameter, in turn, calls the <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the <code>HexString</code> class.</p>System.Convert.ToUInt16#17"
  syntax:
    content: public static ushort ToUInt16(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToUInt16(value As Object, provider As IFormatProvider) As UShort
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the  <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.SByte)
  commentId: M:System.Convert.ToUInt16(System.SByte)
  id: ToUInt16(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(SByte)
  fullName: System.Convert.ToUInt16(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 342
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a signed byte array to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#10"
  syntax:
    content: public static ushort ToUInt16(sbyte value)
    content.vb: Public Shared Function ToUInt16(value As SByte) As UShort
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.Single)
  commentId: M:System.Convert.ToUInt16(System.Single)
  id: ToUInt16(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(Single)
  fullName: System.Convert.ToUInt16(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 344
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#11"
  syntax:
    content: public static ushort ToUInt16(float value)
    content.vb: Public Shared Function ToUInt16(value As Single) As UShort
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>\n<em>value</em>, rounded to the nearest 16-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.String)
  commentId: M:System.Convert.ToUInt16(System.String)
  id: ToUInt16(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(String)
  fullName: System.Convert.ToUInt16(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 346
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToUInt16(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.UInt16.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.UInt16.TryParse(System.String,System.UInt16@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.</p>System.Convert.ToUInt16#12"
  syntax:
    content: public static ushort ToUInt16(string value)
    content.vb: Public Shared Function ToUInt16(value As String) As UShort
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt16(System.String,System.IFormatProvider)
  id: ToUInt16(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(String, IFormatProvider)
  fullName: System.Convert.ToUInt16(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 348
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking <xref href=\"System.UInt16.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.UInt16.TryParse(System.String,System.UInt16@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> provider for the invariant culture.</p>System.Convert.ToUInt16#18"
  syntax:
    content: public static ushort ToUInt16(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToUInt16(value As String, provider As IFormatProvider) As UShort
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.String,System.Int32)
  commentId: M:System.Convert.ToUInt16(System.String,System.Int32)
  id: ToUInt16(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(String, Int32)
  fullName: System.Convert.ToUInt16(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 350
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> data type supports unsigned values only, the <xref href=\"System.Convert.ToUInt16(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>value</em> is expressed using unsigned binary representation. In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example converts <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToUInt16(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0x8000 converts to 32768.\" </p>System.Convert.BaseConversion#11<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception. </p>System.Convert.BaseConversion#12"
  example:
  - "\n<p>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#15"
  syntax:
    content: public static ushort ToUInt16(string value, int fromBase)
    content.vb: Public Shared Function ToUInt16(value As String, fromBase As Integer) As UShort
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.UInt16)
  commentId: M:System.Convert.ToUInt16(System.UInt16)
  id: ToUInt16(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(UInt16)
  fullName: System.Convert.ToUInt16(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 352
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</p>\n"
  syntax:
    content: public static ushort ToUInt16(ushort value)
    content.vb: Public Shared Function ToUInt16(value As UShort) As UShort
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to return. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.UInt32)
  commentId: M:System.Convert.ToUInt16(System.UInt32)
  id: ToUInt16(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(UInt32)
  fullName: System.Convert.ToUInt16(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 354
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#13"
  syntax:
    content: public static ushort ToUInt16(uint value)
    content.vb: Public Shared Function ToUInt16(value As UInteger) As UShort
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt16(System.UInt64)
  commentId: M:System.Convert.ToUInt16(System.UInt64)
  id: ToUInt16(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt16(UInt64)
  fullName: System.Convert.ToUInt16(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt16
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 356
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.</p>System.Convert.ToUInt16#14"
  syntax:
    content: public static ushort ToUInt16(ulong value)
    content.vb: Public Shared Function ToUInt16(value As ULong) As UShort
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Boolean)
  commentId: M:System.Convert.ToUInt32(System.Boolean)
  id: ToUInt32(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Boolean)
  fullName: System.Convert.ToUInt32(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 358
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts the Boolean values <strong>true</strong> and <strong>false</strong> to unsigned integers.</p>System.Convert.ToUInt32#1"
  syntax:
    content: public static uint ToUInt32(bool value)
    content.vb: Public Shared Function ToUInt32(value As Boolean) As UInteger
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Byte)
  commentId: M:System.Convert.ToUInt32(System.Byte)
  id: ToUInt32(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Byte)
  fullName: System.Convert.ToUInt32(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 360
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a byte array to an unsigned integer.</p>System.Convert.ToUInt32#2"
  syntax:
    content: public static uint ToUInt32(byte value)
    content.vb: Public Shared Function ToUInt32(value As Byte) As UInteger
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Char)
  commentId: M:System.Convert.ToUInt32(System.Char)
  id: ToUInt32(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Char)
  fullName: System.Convert.ToUInt32(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 362
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a character array to an unsigned integer.</p>System.Convert.ToUInt32#3"
  syntax:
    content: public static uint ToUInt32(char value)
    content.vb: Public Shared Function ToUInt32(value As Char) As UInteger
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Decimal)
  commentId: M:System.Convert.ToUInt32(System.Decimal)
  id: ToUInt32(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Decimal)
  fullName: System.Convert.ToUInt32(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 364
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned integer.</p>System.Convert.ToUInt32#4"
  syntax:
    content: public static uint ToUInt32(decimal value)
    content.vb: Public Shared Function ToUInt32(value As Decimal) As UInteger
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>\n<em>value</em>, rounded to the nearest 32-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Double)
  commentId: M:System.Convert.ToUInt32(System.Double)
  id: ToUInt32(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Double)
  fullName: System.Convert.ToUInt32(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 366
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned integer.</p>System.Convert.ToUInt32#5"
  syntax:
    content: public static uint ToUInt32(double value)
    content.vb: Public Shared Function ToUInt32(value As Double) As UInteger
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>\n<em>value</em>, rounded to the nearest 32-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Int16)
  commentId: M:System.Convert.ToUInt32(System.Int16)
  id: ToUInt32(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Int16)
  fullName: System.Convert.ToUInt32(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 368
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.</p>System.Convert.ToUInt32#6"
  syntax:
    content: public static uint ToUInt32(short value)
    content.vb: Public Shared Function ToUInt32(value As Short) As UInteger
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Int32)
  commentId: M:System.Convert.ToUInt32(System.Int32)
  id: ToUInt32(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Int32)
  fullName: System.Convert.ToUInt32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 370
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an integer array to an unsigned integer.</p>System.Convert.ToUInt32#7"
  syntax:
    content: public static uint ToUInt32(int value)
    content.vb: Public Shared Function ToUInt32(value As Integer) As UInteger
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Int64)
  commentId: M:System.Convert.ToUInt32(System.Int64)
  id: ToUInt32(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Int64)
  fullName: System.Convert.ToUInt32(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 372
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a long integer array to an unsigned integer.</p>System.Convert.ToUInt32#8"
  syntax:
    content: public static uint ToUInt32(long value)
    content.vb: Public Shared Function ToUInt32(value As Long) As UInteger
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Object)
  commentId: M:System.Convert.ToUInt32(System.Object)
  id: ToUInt32(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Object)
  fullName: System.Convert.ToUInt32(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 374
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 32-bit unsigned integer.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to an unsigned integer.</p>System.Convert.ToUInt32#9"
  syntax:
    content: public static uint ToUInt32(object value)
    content.vb: Public Shared Function ToUInt32(value As Object) As UInteger
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)
  id: ToUInt32(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Object, IFormatProvider)
  fullName: System.Convert.ToUInt32(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 376
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a <code>HexString</code> class that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values. The class includes a <code>Sign</code> property that indicates the sign of its hexadecimal value.</p>System.Convert.ToUInt32#17<p>The following example shows that a call to the <xref href=\"System.Convert.ToUInt32(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method that passes a <code>HexString</code> object as a parameter, in turn, calls the <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the <code>HexString</code> class.</p>System.Convert.ToUInt32#18"
  syntax:
    content: public static uint ToUInt32(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToUInt32(value As Object, provider As IFormatProvider) As UInteger
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.SByte)
  commentId: M:System.Convert.ToUInt32(System.SByte)
  id: ToUInt32(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(SByte)
  fullName: System.Convert.ToUInt32(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 378
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a signed byte array to an unsigned integer.</p>System.Convert.ToUInt32#10"
  syntax:
    content: public static uint ToUInt32(sbyte value)
    content.vb: Public Shared Function ToUInt32(value As SByte) As UInteger
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.Single)
  commentId: M:System.Convert.ToUInt32(System.Single)
  id: ToUInt32(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(Single)
  fullName: System.Convert.ToUInt32(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 380
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned integer.</p>System.Convert.ToUInt32#11"
  syntax:
    content: public static uint ToUInt32(float value)
    content.vb: Public Shared Function ToUInt32(value As Single) As UInteger
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>\n<em>value</em>, rounded to the nearest 32-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.String)
  commentId: M:System.Convert.ToUInt32(System.String)
  id: ToUInt32(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(String)
  fullName: System.Convert.ToUInt32(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 382
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToUInt32(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.UInt32.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.UInt32.TryParse(System.String,System.UInt32@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.</p>System.Convert.ToUInt32#12"
  syntax:
    content: public static uint ToUInt32(string value)
    content.vb: Public Shared Function ToUInt32(value As String) As UInteger
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt32(System.String,System.IFormatProvider)
  id: ToUInt32(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(String, IFormatProvider)
  fullName: System.Convert.ToUInt32(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 384
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking <xref href=\"System.UInt32.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> instance that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.UInt32.TryParse(System.String,System.UInt32@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> provider for the invariant culture.</p>System.Convert.ToUInt32#15"
  syntax:
    content: public static uint ToUInt32(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToUInt32(value As String, provider As IFormatProvider) As UInteger
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.String,System.Int32)
  commentId: M:System.Convert.ToUInt32(System.String,System.Int32)
  id: ToUInt32(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(String, Int32)
  fullName: System.Convert.ToUInt32(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 386
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> data type supports unsigned values only, the <xref href=\"System.Convert.ToUInt32(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>value</em> is expressed using unsigned binary representation. In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example converts <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToUInt32(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0x80000000 converts to 2147483648.\" </p>System.Convert.BaseConversion#13<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception. </p>System.Convert.BaseConversion#14"
  example:
  - "\n<p>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.</p>System.Convert.ToUInt32#16<p></p>"
  syntax:
    content: public static uint ToUInt32(string value, int fromBase)
    content.vb: Public Shared Function ToUInt32(value As String, fromBase As Integer) As UInteger
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.UInt16)
  commentId: M:System.Convert.ToUInt32(System.UInt16)
  id: ToUInt32(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(UInt16)
  fullName: System.Convert.ToUInt32(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 388
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.</p>System.Convert.ToUInt32#13"
  syntax:
    content: public static uint ToUInt32(ushort value)
    content.vb: Public Shared Function ToUInt32(value As UShort) As UInteger
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.UInt32)
  commentId: M:System.Convert.ToUInt32(System.UInt32)
  id: ToUInt32(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(UInt32)
  fullName: System.Convert.ToUInt32(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 390
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</p>\n"
  syntax:
    content: public static uint ToUInt32(uint value)
    content.vb: Public Shared Function ToUInt32(value As UInteger) As UInteger
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to return. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt32(System.UInt64)
  commentId: M:System.Convert.ToUInt32(System.UInt64)
  id: ToUInt32(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt32(UInt64)
  fullName: System.Convert.ToUInt32(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt32
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 392
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.</p>System.Convert.ToUInt32#14"
  syntax:
    content: public static uint ToUInt32(ulong value)
    content.vb: Public Shared Function ToUInt32(value As ULong) As UInteger
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Boolean)
  commentId: M:System.Convert.ToUInt64(System.Boolean)
  id: ToUInt64(System.Boolean)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Boolean)
  fullName: System.Convert.ToUInt64(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 394
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts Boolean <strong>true</strong> and <strong>false</strong> values to unsigned long integers.</p>System.Convert.ToUInt64#1"
  syntax:
    content: public static ulong ToUInt64(bool value)
    content.vb: Public Shared Function ToUInt64(value As Boolean) As ULong
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Byte)
  commentId: M:System.Convert.ToUInt64(System.Byte)
  id: ToUInt64(System.Byte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Byte)
  fullName: System.Convert.ToUInt64(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 396
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a byte array to an unsigned long integer.</p>System.Convert.ToUInt64#2"
  syntax:
    content: public static ulong ToUInt64(byte value)
    content.vb: Public Shared Function ToUInt64(value As Byte) As ULong
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Char)
  commentId: M:System.Convert.ToUInt64(System.Char)
  id: ToUInt64(System.Char)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Char)
  fullName: System.Convert.ToUInt64(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 398
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in a character array to an unsigned long integer.</p>System.Convert.ToUInt64#3"
  syntax:
    content: public static ulong ToUInt64(char value)
    content.vb: Public Shared Function ToUInt64(value As Char) As ULong
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Decimal)
  commentId: M:System.Convert.ToUInt64(System.Decimal)
  id: ToUInt64(System.Decimal)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Decimal)
  fullName: System.Convert.ToUInt64(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 400
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned long integer.</p>System.Convert.ToUInt64#4"
  syntax:
    content: public static ulong ToUInt64(decimal value)
    content.vb: Public Shared Function ToUInt64(value As Decimal) As ULong
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal number to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>\n<em>value</em>, rounded to the nearest 64-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Double)
  commentId: M:System.Convert.ToUInt64(System.Double)
  id: ToUInt64(System.Double)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Double)
  fullName: System.Convert.ToUInt64(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 402
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned long integer.</p>System.Convert.ToUInt64#5"
  syntax:
    content: public static ulong ToUInt64(double value)
    content.vb: Public Shared Function ToUInt64(value As Double) As ULong
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The double-precision floating-point number to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>\n<em>value</em>, rounded to the nearest 64-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Int16)
  commentId: M:System.Convert.ToUInt64(System.Int16)
  id: ToUInt64(System.Int16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Int16)
  fullName: System.Convert.ToUInt64(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 404
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.</p>System.Convert.ToUInt64#6"
  syntax:
    content: public static ulong ToUInt64(short value)
    content.vb: Public Shared Function ToUInt64(value As Short) As ULong
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The 16-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Int32)
  commentId: M:System.Convert.ToUInt64(System.Int32)
  id: ToUInt64(System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Int32)
  fullName: System.Convert.ToUInt64(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 406
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of integers to an unsigned long integer.</p>System.Convert.ToUInt64#7"
  syntax:
    content: public static ulong ToUInt64(int value)
    content.vb: Public Shared Function ToUInt64(value As Integer) As ULong
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 32-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Int64)
  commentId: M:System.Convert.ToUInt64(System.Int64)
  id: ToUInt64(System.Int64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Int64)
  fullName: System.Convert.ToUInt64(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 408
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of long integers to an unsigned long integer.</p>System.Convert.ToUInt64#8"
  syntax:
    content: public static ulong ToUInt64(long value)
    content.vb: Public Shared Function ToUInt64(value As Long) As ULong
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 64-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Object)
  commentId: M:System.Convert.ToUInt64(System.Object)
  id: ToUInt64(System.Object)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Object)
  fullName: System.Convert.ToUInt64(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 410
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an object array to an unsigned long integer.</p>System.Convert.ToUInt64#9"
  syntax:
    content: public static ulong ToUInt64(object value)
    content.vb: Public Shared Function ToUInt64(value As Object) As ULong
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface, or <strong>null</strong>. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Object,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)
  id: ToUInt64(System.Object,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Object, IFormatProvider)
  fullName: System.Convert.ToUInt64(System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 412
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking the <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying type of <em>value</em>.</p>\n<p>\n<em>provider</em> enables the user to specify culture-specific conversion information about the contents of <em>value</em>. For example, if <em>value</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents a number, <em>provider</em> could supply culture-specific information about the notation used to represent that number.</p>\n<p>The base types ignore <em>provider</em>; however, the parameter may be used if <em>value</em> is a user-defined type that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example defines a <code>HexString</code> class that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values. The class includes a <code>Sign</code> property that indicates the sign of its hexadecimal value.</p>System.Convert.ToUInt64#17<p>The following example shows that a call to the <xref href=\"System.Convert.ToUInt64(System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method that passes a <code>HexString</code> object as a parameter, in turn, calls the <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation of the <code>HexString</code> class.</p>System.Convert.ToUInt64#18"
  syntax:
    content: public static ulong ToUInt64(object value, IFormatProvider provider)
    content.vb: Public Shared Function ToUInt64(value As Object, provider As IFormatProvider) As ULong
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An object that implements the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in an appropriate format.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>-or-</p>\n<p>The conversion is not supported.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.SByte)
  commentId: M:System.Convert.ToUInt64(System.SByte)
  id: ToUInt64(System.SByte)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(SByte)
  fullName: System.Convert.ToUInt64(System.SByte)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 414
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in a signed byte array to an unsigned long integer.</p>System.Convert.ToUInt64#10"
  syntax:
    content: public static ulong ToUInt64(sbyte value)
    content.vb: Public Shared Function ToUInt64(value As SByte) As ULong
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The 8-bit signed integer to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.Single)
  commentId: M:System.Convert.ToUInt64(System.Single)
  id: ToUInt64(System.Single)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(Single)
  fullName: System.Convert.ToUInt64(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 416
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example attempts to convert each element in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to an unsigned long integer. The output shows that fractional values are rounded before the conversion is performed.</p>System.Convert.ToUInt64#11"
  syntax:
    content: public static ulong ToUInt64(float value)
    content.vb: Public Shared Function ToUInt64(value As Single) As ULong
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The single-precision floating-point number to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>\n<em>value</em>, rounded to the nearest 64-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than zero or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.String)
  commentId: M:System.Convert.ToUInt64(System.String)
  id: ToUInt64(System.String)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(String)
  fullName: System.Convert.ToUInt64(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 418
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Convert.ToInt64(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to passing <em>value</em> to the <xref href=\"System.Int64.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. <em>value</em> is interpreted by using the formatting conventions of the current thread culture.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.UInt64.TryParse(System.String,System.UInt64@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.</p>System.Convert.ToUInt64#12"
  syntax:
    content: public static ulong ToUInt64(string value)
    content.vb: Public Shared Function ToUInt64(value As String) As ULong
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.String,System.IFormatProvider)
  commentId: M:System.Convert.ToUInt64(System.String,System.IFormatProvider)
  id: ToUInt64(System.String,System.IFormatProvider)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(String, IFormatProvider)
  fullName: System.Convert.ToUInt64(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 420
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The return value is the result of invoking <xref href=\"System.UInt64.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> on <em>value</em>.</p>\n<p>\n<em>provider</em> is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that obtains a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object provides culture-specific information about the format of <em>value</em>. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture is used.</p>\n<p>If you prefer not to handle an exception if the conversion fails, you can call the <xref href=\"System.UInt64.TryParse(System.String,System.UInt64@)\" data-throw-if-not-resolved=\"false\"></xref> method instead. It returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the conversion succeeded or failed.</p>\n"
  example:
  - "\n<p>The following example defines a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that recognizes the string \"pos\" as the positive sign and the string \"neg\" as the negative sign. It then attempts to convert each element of a numeric string array to an unsigned long integer. The conversion uses both the custom provider and the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> provider for the invariant culture.</p>System.Convert.ToUInt64#15"
  syntax:
    content: public static ulong ToUInt64(string value, IFormatProvider provider)
    content.vb: Public Shared Function ToUInt64(value As String, provider As IFormatProvider) As ULong
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.String,System.Int32)
  commentId: M:System.Convert.ToUInt64(System.String,System.Int32)
  id: ToUInt64(System.String,System.Int32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(String, Int32)
  fullName: System.Convert.ToUInt64(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 422
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>If <em>fromBase</em> is 16, you can prefix the number specified by the <em>value</em> parameter with \"0x\" or \"0X\".</p>\n<p>Because the <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> data type supports unsigned values only, the <xref href=\"System.Convert.ToUInt64(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>value</em> is expressed using unsigned binary representation. In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> data type is converted to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value without the method throwing an exception. The following example converts <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> to its hexadecimal string representation, and then calls the <xref href=\"System.Convert.ToUInt64(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Instead of throwing an exception, the method displays the message, \"0x8000000000000000 converts to 9223372036854775808.\" </p>System.Convert.BaseConversion#15<p>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception. </p>System.Convert.BaseConversion#16"
  example:
  - "\n<p>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.</p>System.Convert.ToUInt32#16"
  syntax:
    content: public static ulong ToUInt64(string value, int fromBase)
    content.vb: Public Shared Function ToUInt64(value As String, fromBase As Integer) As ULong
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert. </p>\n"
    - id: fromBase
      type: System.Int32
      description: "\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\n<p>-or-</p>\n<p>\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\n<p>-or-</p>\n<p>\n<em>value</em> represents a number that is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.UInt16)
  commentId: M:System.Convert.ToUInt64(System.UInt16)
  id: ToUInt64(System.UInt16)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(UInt16)
  fullName: System.Convert.ToUInt64(System.UInt16)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 424
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.</p>System.Convert.ToUInt64#13"
  syntax:
    content: public static ulong ToUInt64(ushort value)
    content.vb: Public Shared Function ToUInt64(value As UShort) As ULong
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.UInt32)
  commentId: M:System.Convert.ToUInt64(System.UInt32)
  id: ToUInt64(System.UInt32)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(UInt32)
  fullName: System.Convert.ToUInt64(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 426
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</p>\n"
  example:
  - "\n<p>The following example converts each element in an unsigned integer array to an unsigned long integer.</p>System.Convert.ToUInt64#14"
  syntax:
    content: public static ulong ToUInt64(uint value)
    content.vb: Public Shared Function ToUInt64(value As UInteger) As ULong
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer to convert. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Convert.ToUInt64(System.UInt64)
  commentId: M:System.Convert.ToUInt64(System.UInt64)
  id: ToUInt64(System.UInt64)
  parent: System.Convert
  langs:
  - csharp
  - vb
  name: ToUInt64(UInt64)
  fullName: System.Convert.ToUInt64(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUInt64
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 428
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</p>\n"
  syntax:
    content: public static ulong ToUInt64(ulong value)
    content.vb: Public Shared Function ToUInt64(value As ULong) As ULong
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer to return. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>\n<em>value</em> is returned unchanged.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
