items:
- uid: System.Security.AccessControl.RegistryAccessRule
  commentId: T:System.Security.AccessControl.RegistryAccessRule
  id: RegistryAccessRule
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.RegistryRights
  langs:
  - csharp
  - vb
  name: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
  type: Class
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegistryAccessRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 11
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key. </p>\n<p>To get a list of the rules currently applied to a registry key, use the <xref href=\"Microsoft.Win32.RegistryKey.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and then use its <xref href=\"System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a collection of <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n<p>\n<xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects do not map one-to-one with access control entries in the underlying discretionary control access list (DACL). When you get the set of all access rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries. </p>\n<p>The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.</p>\n<p>Use <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects to specify access rights to allow or deny to a user or group. A <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object always represents either allowed access or denied access, never both.</p>\n<p>To apply a rule to a registry key, use the <xref href=\"Microsoft.Win32.RegistryKey.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object. Modify the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object by using its methods to add the rule, and then use the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to reattach the security object.</p>\n<p>Changes you make to a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object do not affect the access levels of the registry key until you call the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to assign the altered security object to the registry key.</p>\n<p>\n<xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable. Security for a registry key is modified using the methods of the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> class to add or remove rules; as you do this, the underlying access control entries are modified. </p>\n"
  example:
  - "\n<p>The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, then creates and adds two rules that have the <xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. The first rule has no propagation flags, while the second has <xref href=\"System.Security.AccessControl.PropagationFlags.NoPropagateInherit\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.PropagationFlags.InheritOnly\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The program displays the rules in the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and then uses the object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey. Finally, the program deletes the test keys.</p>System.Security.AccessControl.RegistryAccessRule.ctor2#1"
  syntax:
    content: 'public sealed class RegistryAccessRule : AccessRule'
    content.vb: >-
      Public NotInheritable Class RegistryAccessRule
          Inherits AccessRule
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  - vb
  name: RegistryAccessRule(Principal.IdentityReference, RegistryRights, AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.Security.Principal.IdentityReference, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
    startLine: 23
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>This constructor specifies default propagation and inheritance. That is, <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.PropagationFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public RegistryAccessRule(Principal.IdentityReference identity, RegistryRights registryRights, AccessControlType type)
    content.vb: Public Sub New(identity As Principal.IdentityReference, registryRights As RegistryRights, type As AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\" data-throw-if-not-resolved=\"false\"></xref> values indicating the rights allowed or denied.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values indicating whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>registryRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>eventRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  - vb
  name: RegistryAccessRule(Principal.IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.Security.Principal.IdentityReference, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
    startLine: 24
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.</p>\n<p>Propagation flags</p>\n<p>S</p>\n<p>CS</p>\n<p>GS</p>\n<p>The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey. </p>\n<p>For example, if the <xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref> flag is specified for <em>inheritanceFlags</em> and the <xref href=\"System.Security.AccessControl.PropagationFlags.InheritOnly\" data-throw-if-not-resolved=\"false\"></xref> propagation flag is specified for <em>propagationFlags</em>, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain. </p>\n<p>Although you can specify the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag for <em>inheritanceFlags</em>, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. Finally, specifying the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</p>\n"
  syntax:
    content: public RegistryAccessRule(Principal.IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public Sub New(identity As Principal.IdentityReference, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the rights allowed or denied.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> flags specifying how access rights are inherited from other objects.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> flags specifying how access rights are propagated to other objects.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>registryRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>inheritanceFlags</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>propagationFlags</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>registryRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  - vb
  name: RegistryAccessRule(String, RegistryRights, AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.String, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
    startLine: 25
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>This constructor specifies default propagation and inheritance. That is, <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.PropagationFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is equivalent to creating an <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object, by passing <em>identity</em> to the <xref href=\"System.Security.Principal.NTAccount.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and passing the newly created <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - "\n<p>The following code example creates registry access rules and adds them to a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</p>System.Security.AccessControl.RegistrySecurity.AddAccessRule#1"
  syntax:
    content: public RegistryAccessRule(string identity, RegistryRights registryRights, AccessControlType type)
    content.vb: Public Sub New(identity As String, registryRights As RegistryRights, type As AccessControlType)
    parameters:
    - id: identity
      type: System.String
      description: "\n<p>The name of the user or group the rule applies to.</p>\n"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\" data-throw-if-not-resolved=\"false\"></xref> values indicating the rights allowed or denied.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values indicating whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>registryRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>registryRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is a zero-length string.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is longer than 512 characters.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  - vb
  name: RegistryAccessRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.String, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
    startLine: 26
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.</p>\n<p>Propagation flags</p>\n<p>S</p>\n<p>CS</p>\n<p>GS</p>\n<p>The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey. </p>\n<p>For example, if the <xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref> flag is specified for <em>inheritanceFlags</em> and the <xref href=\"System.Security.AccessControl.PropagationFlags.InheritOnly\" data-throw-if-not-resolved=\"false\"></xref> propagation flag is specified for <em>propagationFlags</em>, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain. </p>\n<p>Although you can specify the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag for <em>inheritanceFlags</em>, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. Finally, specifying the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</p>\n<p>This constructor is equivalent to creating an <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object, by passing <em>identity</em> to the <xref href=\"System.Security.Principal.NTAccount.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and passing the newly created <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - "\n<p>The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and then creates and adds two rules that have the <xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. The first rule has no propagation flags, while the second has <xref href=\"System.Security.AccessControl.PropagationFlags.NoPropagateInherit\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.PropagationFlags.InheritOnly\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The program displays the rules in the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and then uses the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey. Finally, the program deletes the test keys.</p>System.Security.AccessControl.RegistryAccessRule.ctor2#1"
  syntax:
    content: public RegistryAccessRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public Sub New(identity As String, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)
    parameters:
    - id: identity
      type: System.String
      description: "\n<p>The name of the user or group the rule applies to.</p>\n"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\" data-throw-if-not-resolved=\"false\"></xref> values indicating the rights allowed or denied.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> flags specifying how access rights are inherited from other objects.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> flags specifying how access rights are propagated to other objects.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>registryRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>inheritanceFlags</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>propagationFlags</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is a zero-length string.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is longer than 512 characters.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  commentId: P:System.Security.AccessControl.RegistryAccessRule.RegistryRights
  id: RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  - vb
  name: RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegistryRights
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 55
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the rights allowed or denied by the access rule.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref>, but you cannot modify an existing access rule.</p>\n"
  syntax:
    content: public RegistryRights RegistryRights { get; }
    content.vb: Public ReadOnly Property RegistryRights As RegistryRights
    parameters: []
    return:
      type: RegistryRights
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
