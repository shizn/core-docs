items:
- uid: System.Runtime.InteropServices.ComEventInterfaceAttribute
  commentId: T:System.Runtime.InteropServices.ComEventInterfaceAttribute
  id: ComEventInterfaceAttribute
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)
  - System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider
  - System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface
  langs:
  - csharp
  - vb
  name: ComEventInterfaceAttribute
  fullName: System.Runtime.InteropServices.ComEventInterfaceAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComEventInterfaceAttribute
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 110
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.</p>\n"
  remarks: "\n<p>You can apply this attribute to interfaces, although the Tlbimp.exe (Type Library Importer) typically applies it for you when it imports a type library.</p>\n<p>When a source interface is imported from a type library, any methods it implements are added as events to a generated event interface. Tlbimp.exe applies <xref href=\"System.Runtime.InteropServices.ComEventInterfaceAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the event interface to identify the managed class that implements the methods of the event interface and implements the original source interface. The common language runtime uses this attribute at run time to perform the following tasks: </p>\n<ul><li>\n<p>Associate events exposed by the interface to their implementation in the event provider class.</p>\n</li><li>\n<p>Link the events to the original COM source interface.</p>\n</li></ul>\n<p>You rarely apply this attribute. However, if you plan to write source code that produces metadata that closely simulates metadata produced by Tlbimp.exe, you should create a event interface for each original source interface. For a detailed description about how Tlbimp.exe imports events, see Imported Member Conversion. For instruction about how to expose a COM event to a.NET client, see How to: Handle Events Raised by a COM Source.</p>\n"
  syntax:
    content: 'public sealed class ComEventInterfaceAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class ComEventInterfaceAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)
  commentId: M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)
  id: '#ctor(System.Type,System.Type)'
  parent: System.Runtime.InteropServices.ComEventInterfaceAttribute
  langs:
  - csharp
  - vb
  name: ComEventInterfaceAttribute(Type, Type)
  fullName: System.Runtime.InteropServices.ComEventInterfaceAttribute.ComEventInterfaceAttribute(System.Type, System.Type)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 115
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.ComEventInterfaceAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the source interface and event provider class.</p>\n"
  syntax:
    content: public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider)
    content.vb: Public Sub New(SourceInterface As Type, EventProvider As Type)
    parameters:
    - id: SourceInterface
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that contains the original source interface from the type library. COM uses this interface to call back to the managed class. </p>\n"
    - id: EventProvider
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that contains the class that implements the methods of the event interface. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider
  commentId: P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider
  id: EventProvider
  parent: System.Runtime.InteropServices.ComEventInterfaceAttribute
  langs:
  - csharp
  - vb
  name: EventProvider
  fullName: System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventProvider
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 116
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the class that implements the methods of the event interface.</p>\n"
  remarks: "\n<p>This value is set to the type of the event provider class generated by the Tlbimp.exe (Type Library Importer). Tlbimp.exe appends the source interface name with EventProvider. For example, IMyInterface becomes IMyInterfaceEventProvider.</p>\n"
  syntax:
    content: public Type EventProvider { get; }
    content.vb: Public ReadOnly Property EventProvider As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that contains the class that implements the methods of the event interface.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface
  commentId: P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface
  id: SourceInterface
  parent: System.Runtime.InteropServices.ComEventInterfaceAttribute
  langs:
  - csharp
  - vb
  name: SourceInterface
  fullName: System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SourceInterface
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 117
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the original source interface from the type library.</p>\n"
  remarks: "\n<p>A source interface has at least one event member, and typically one for each method of the source interface. COM uses this interface to call back to the managed class.</p>\n"
  syntax:
    content: public Type SourceInterface { get; }
    content.vb: Public ReadOnly Property SourceInterface As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> containing the source interface.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
