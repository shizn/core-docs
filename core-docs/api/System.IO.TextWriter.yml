items:
- uid: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
  id: TextWriter
  parent: System.IO
  children:
  - System.IO.TextWriter.#ctor
  - System.IO.TextWriter.#ctor(System.IFormatProvider)
  - System.IO.TextWriter.CoreNewLine
  - System.IO.TextWriter.Dispose
  - System.IO.TextWriter.Dispose(System.Boolean)
  - System.IO.TextWriter.Encoding
  - System.IO.TextWriter.Flush
  - System.IO.TextWriter.FlushAsync
  - System.IO.TextWriter.FormatProvider
  - System.IO.TextWriter.NewLine
  - System.IO.TextWriter.Null
  - System.IO.TextWriter.Write(System.Boolean)
  - System.IO.TextWriter.Write(System.Char)
  - System.IO.TextWriter.Write(System.Char[])
  - System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
  - System.IO.TextWriter.Write(System.Decimal)
  - System.IO.TextWriter.Write(System.Double)
  - System.IO.TextWriter.Write(System.Int32)
  - System.IO.TextWriter.Write(System.Int64)
  - System.IO.TextWriter.Write(System.Object)
  - System.IO.TextWriter.Write(System.Single)
  - System.IO.TextWriter.Write(System.String)
  - System.IO.TextWriter.Write(System.String,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object[])
  - System.IO.TextWriter.Write(System.UInt32)
  - System.IO.TextWriter.Write(System.UInt64)
  - System.IO.TextWriter.WriteAsync(System.Char)
  - System.IO.TextWriter.WriteAsync(System.Char[])
  - System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextWriter.WriteAsync(System.String)
  - System.IO.TextWriter.WriteLine
  - System.IO.TextWriter.WriteLine(System.Boolean)
  - System.IO.TextWriter.WriteLine(System.Char)
  - System.IO.TextWriter.WriteLine(System.Char[])
  - System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.IO.TextWriter.WriteLine(System.Decimal)
  - System.IO.TextWriter.WriteLine(System.Double)
  - System.IO.TextWriter.WriteLine(System.Int32)
  - System.IO.TextWriter.WriteLine(System.Int64)
  - System.IO.TextWriter.WriteLine(System.Object)
  - System.IO.TextWriter.WriteLine(System.Single)
  - System.IO.TextWriter.WriteLine(System.String)
  - System.IO.TextWriter.WriteLine(System.String,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object[])
  - System.IO.TextWriter.WriteLine(System.UInt32)
  - System.IO.TextWriter.WriteLine(System.UInt64)
  - System.IO.TextWriter.WriteLineAsync
  - System.IO.TextWriter.WriteLineAsync(System.Char)
  - System.IO.TextWriter.WriteLineAsync(System.Char[])
  - System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextWriter.WriteLineAsync(System.String)
  langs:
  - csharp
  - vb
  name: TextWriter
  fullName: System.IO.TextWriter
  type: Class
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TextWriter
    path: src/System.IO/ref/System.IO.cs
    startLine: 287
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Represents a writer that can write a sequential series of characters. This class is abstract.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is the abstract base class of <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref>, which write characters to streams and strings, respectively. Create an instance of <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> to write an object to a string, write strings to a file, or to serialize XML. You can also use an instance of <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> to write text to a custom backing store using the same APIs you would use for a string or a stream, or to add support for text formatting.</p>\n<p>All the <strong>Write</strong> methods of <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> having primitive data types as parameters write out the values as strings.</p>\n<p>By default, a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is not thread safe. See <xref href=\"System.IO.TextWriter.Synchronized(System.IO.TextWriter)\" data-throw-if-not-resolved=\"false\"></xref> for a thread-safe wrapper.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IO.TextWriter.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see Dispose and the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class is an abstract class. Therefore, you do not instantiate it in your code. The <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> class derives from <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> and provides implementations of the members for writing to a stream. The following example shows how to write two lines that consist of string values to a text file by using the <xref href=\"System.IO.StreamWriter.WriteLineAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Override Dispose in a derived class to provide </p>System.IO.StreamWriter#23"
  syntax:
    content: 'public abstract class TextWriter : IDisposable'
    content.vb: >-
      Public MustInherit Class TextWriter
          Inherits IDisposable
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.IO.TextWriter.CoreNewLine
  commentId: F:System.IO.TextWriter.CoreNewLine
  id: CoreNewLine
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: CoreNewLine
  fullName: System.IO.TextWriter.CoreNewLine
  type: Field
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CoreNewLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 289
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Stores the newline characters used for this <strong>TextWriter</strong>.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected char[] CoreNewLine
    content.vb: Protected CoreNewLine As Char()
    return:
      type: System.Char[]
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.TextWriter.Null
  commentId: F:System.IO.TextWriter.Null
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  fullName: System.IO.TextWriter.Null
  type: Field
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.IO/ref/System.IO.cs
    startLine: 290
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Provides a <strong>TextWriter</strong> with no backing store that can be written to, but not read from.</p>\n"
  remarks: "\n<p>Use <strong>Null</strong> to redirect output to a stream that will not consume any operating system resources.</p>\n<p>When the <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> methods are invoked on <strong>Null</strong>, the call simply returns, and no data is actually written to any backing store.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public static readonly TextWriter Null
    content.vb: Public Shared ReadOnly Null As TextWriter
    return:
      type: System.IO.TextWriter
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.TextWriter.#ctor
  commentId: M:System.IO.TextWriter.#ctor
  id: '#ctor'
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: TextWriter()
  fullName: System.IO.TextWriter.TextWriter()
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 291
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Use this constructor overload when you do not want to provide a value for the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property. When the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>, the culture of the current thread is used for formatting.</p>\n<p>Use this constructor for derived classes.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected TextWriter()
    content.vb: Protected Sub New
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.TextWriter.#ctor(System.IFormatProvider)
  commentId: M:System.IO.TextWriter.#ctor(System.IFormatProvider)
  id: '#ctor(System.IFormatProvider)'
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: TextWriter(IFormatProvider)
  fullName: System.IO.TextWriter.TextWriter(System.IFormatProvider)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 292
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class with the specified format provider.</p>\n"
  remarks: "\n<p>Use this constructor overload to provide a value for the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property. The value of the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property specifies the culture-specific formatting that is used when you call the <see cref=\"Overload:System.IO.TextWriter.Write\"></see> and <see cref=\"Overload:System.IO.TextWriter.WriteLine\"></see> methods. If you do not want to provide a format provider, you create an instance by using the <xref href=\"System.IO.TextWriter.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor, which sets the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>. When the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>, the culture of the current thread is used for formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected TextWriter(IFormatProvider formatProvider)
    content.vb: Protected Sub New(formatProvider As IFormatProvider)
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
      description: "\n<p>An <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object that controls formatting. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.TextWriter.Encoding
  commentId: P:System.IO.TextWriter.Encoding
  id: Encoding
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Encoding
  fullName: System.IO.TextWriter.Encoding
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Encoding
    path: src/System.IO/ref/System.IO.cs
    startLine: 293
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>When overridden in a derived class, returns the character encoding in which the output is written.</p>\n"
  remarks: "\n<p>This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <strong>TextWriter</strong>. This enables the XML code to consume an arbitrary <strong>TextWriter</strong> and generate the correct XML header.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public abstract Text.Encoding Encoding { get; }
    content.vb: Public MustOverride ReadOnly Property Encoding As Text.Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>The character encoding in which the output is written.</p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.IO.TextWriter.FormatProvider
  commentId: P:System.IO.TextWriter.FormatProvider
  id: FormatProvider
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: FormatProvider
  fullName: System.IO.TextWriter.FormatProvider
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FormatProvider
    path: src/System.IO/ref/System.IO.cs
    startLine: 294
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets an object that controls formatting.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property specifies the culture-specific formatting that is used when you call the <see cref=\"Overload:System.IO.TextWriter.Write\"></see> and <see cref=\"Overload:System.IO.TextWriter.WriteLine\"></see> methods. If you do not want to provide a format provider, you create an instance by using the <xref href=\"System.IO.TextWriter.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor, which sets the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>. When the <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property contains <strong>null</strong>, the culture of the current thread is used for formatting.</p>\n<p>For an example of creating a file and writing text to a file, see How to: Write Text to a File. For an example of reading text from a file, see How to: Read Text from a File. For an example of reading from and writing to a binary file, see How to: Read and Write to a Newly Created Data File.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual IFormatProvider FormatProvider { get; }
    content.vb: Public Overridable ReadOnly Property FormatProvider As IFormatProvider
    parameters: []
    return:
      type: System.IFormatProvider
      description: "\n<p>An <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object for a specific culture, or the formatting of the current culture if no other culture is specified.</p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.TextWriter.NewLine
  commentId: P:System.IO.TextWriter.NewLine
  id: NewLine
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: NewLine
  fullName: System.IO.TextWriter.NewLine
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 295
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets or sets the line terminator string used by the current <strong>TextWriter</strong>.</p>\n"
  remarks: "\n<p>The default line terminator string is a carriage return followed by a line feed (\"\\r\\n\").</p>\n<p>The line terminator string is written to the text stream whenever one of the <strong>WriteLine</strong> methods is called. In order for text written by the <strong>TextWriter</strong> to be readable by a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>, only \"\\n\" or \"\\r\\n\" should be used as terminator strings. If <strong>NewLine</strong> is set to <strong>null</strong>, the default newline character is used instead.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual string NewLine { get; set; }
    content.vb: Public Overridable Property NewLine As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The line terminator string for the current <strong>TextWriter</strong>.</p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Dispose
  commentId: M:System.IO.TextWriter.Dispose
  id: Dispose
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.TextWriter.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 296
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases all resources used by the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Call <xref href=\"System.IO.TextWriter.Dispose\" data-throw-if-not-resolved=\"false\"></xref> when you are finished using the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.IO.TextWriter.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method leaves the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <xref href=\"System.IO.TextWriter.Dispose\" data-throw-if-not-resolved=\"false\"></xref>, you must release all references to the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Note   Always call <xref href=\"System.IO.TextWriter.Dispose\" data-throw-if-not-resolved=\"false\"></xref> before you release your last reference to the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> object's <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.TextWriter.Dispose(System.Boolean)
  commentId: M:System.IO.TextWriter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.TextWriter.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 297
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by <strong>Dispose</strong> and <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref>. By default, this method specifies the <em>disposing</em> parameter as <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> specifies the <em>disposing</em> parameter as <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.TextWriter.Flush
  commentId: M:System.IO.TextWriter.Flush
  id: Flush
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.TextWriter.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO/ref/System.IO.cs
    startLine: 298
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\n"
  remarks: "\n<p>This default method does nothing, but derived classes can override the method to provide the appropriate functionality.</p>\n<p>Flushing the stream will not flush its underlying encoder unless you explicitly call <strong>Flush</strong> or <xref href=\"System.IO.TextWriter.Close\" data-throw-if-not-resolved=\"false\"></xref>. Setting <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n"
  syntax:
    content: public virtual void Flush()
    content.vb: Public Overridable Sub Flush
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.FlushAsync
  commentId: M:System.IO.TextWriter.FlushAsync
  id: FlushAsync
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: FlushAsync()
  fullName: System.IO.TextWriter.FlushAsync()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 299
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device. </p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task FlushAsync()
    content.vb: Public Overridable Function FlushAsync As Threading.Tasks.Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous flush operation. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.Boolean)
  commentId: M:System.IO.TextWriter.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Boolean)
  fullName: System.IO.TextWriter.Write(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 300
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a <strong>Boolean</strong> value to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method outputs either <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(bool value)
    content.vb: Public Overridable Sub Write(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The <strong>Boolean</strong> value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.Char)
  commentId: M:System.IO.TextWriter.Write(System.Char)
  id: Write(System.Char)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Char)
  fullName: System.IO.TextWriter.Write(System.Char)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 301
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character to the text string or stream.</p>\n"
  remarks: "\n<p>This default method does nothing, but derived classes can override the method to provide the appropriate functionality.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public abstract void Write(char value)
    content.vb: Public MustOverride Sub Write(value As Char)
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The character to write to the text stream. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.Write(System.Char)
    commentId: M:System.IO.StreamWriter.Write(System.Char)
  - type: System.IO.StringWriter.Write(System.Char)
    commentId: M:System.IO.StringWriter.Write(System.Char)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.IO.TextWriter.Write(System.Char[])
  commentId: M:System.IO.TextWriter.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Char[])
  fullName: System.IO.TextWriter.Write(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 302
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character array to the text string or stream.</p>\n"
  remarks: "\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This default method calls the <xref href=\"System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method and passes the entire character array. If the character array is <strong>null</strong>, nothing is written.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(char[] buffer)
    content.vb: Public Overridable Sub Write(buffer As Char())
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array to write to the text stream. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.Write(System.Char[])
    commentId: M:System.IO.StreamWriter.Write(System.Char[])
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.Write(System.Char())
  name.vb: Write(Char())
- uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.Write(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 303
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters to the text string or stream.</p>\n"
  remarks: "\n<p>This method will write <em>count</em> characters of data into this <strong>TextWriter</strong> from the <em>buffer</em> character array starting at position <em>index</em>.</p>\n<p>This overload is equivalent to the <xref href=\"System.IO.TextWriter.Write(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> overload for each character in <em>buffer</em> between <em>index</em> and (<em>index</em> + <em>count</em>).</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(char[] buffer, int index, int count)
    content.vb: Public Overridable Sub Write(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array to write data from. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The character position in the buffer at which to start retrieving data. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)
  - type: System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.Write(System.Char(), System.Int32, System.Int32)
  name.vb: Write(Char(), Int32, Int32)
- uid: System.IO.TextWriter.Write(System.Decimal)
  commentId: M:System.IO.TextWriter.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Decimal)
  fullName: System.IO.TextWriter.Write(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 304
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a decimal value to the text string or stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n"
  syntax:
    content: public virtual void Write(decimal value)
    content.vb: Public Overridable Sub Write(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.Double)
  commentId: M:System.IO.TextWriter.Write(System.Double)
  id: Write(System.Double)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Double)
  fullName: System.IO.TextWriter.Write(System.Double)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 305
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of an 8-byte floating-point value to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Double.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(double value)
    content.vb: Public Overridable Sub Write(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The 8-byte floating-point value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.Int32)
  commentId: M:System.IO.TextWriter.Write(System.Int32)
  id: Write(System.Int32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Int32)
  fullName: System.IO.TextWriter.Write(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 306
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a 4-byte signed integer to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Int32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(int value)
    content.vb: Public Overridable Sub Write(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 4-byte signed integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.Int64)
  commentId: M:System.IO.TextWriter.Write(System.Int64)
  id: Write(System.Int64)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Int64)
  fullName: System.IO.TextWriter.Write(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 307
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of an 8-byte signed integer to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Int64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n<p>How to: Write Text to a File</p>\n"
  syntax:
    content: public virtual void Write(long value)
    content.vb: Public Overridable Sub Write(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 8-byte signed integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.Object)
  commentId: M:System.IO.TextWriter.Write(System.Object)
  id: Write(System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Object)
  fullName: System.IO.TextWriter.Write(System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 308
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of an object to the text string or stream by calling the <strong>ToString</strong> method on that object.</p>\n"
  remarks: "\n<p>This overload is equivalent to the <xref href=\"System.IO.TextWriter.Write(System.String)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>If the specified object is <strong>null</strong>, no action is taken and no exception is thrown. Otherwise, the object's <strong>ToString</strong> method is called to produce the string representation, and the resulting string is then written to the output stream. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(object value)
    content.vb: Public Overridable Sub Write(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.Single)
  commentId: M:System.IO.TextWriter.Write(System.Single)
  id: Write(System.Single)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(Single)
  fullName: System.IO.TextWriter.Write(System.Single)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 309
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a 4-byte floating-point value to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(float value)
    content.vb: Public Overridable Sub Write(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The 4-byte floating-point value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.String)
  commentId: M:System.IO.TextWriter.Write(System.String)
  id: Write(System.String)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(String)
  fullName: System.IO.TextWriter.Write(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 310
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string to the text string or stream.</p>\n"
  remarks: "\n<p>This overload is equivalent to the <xref href=\"System.IO.TextWriter.Write(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>value</em> is <strong>null</strong>, nothing is written to the text stream.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(string value)
    content.vb: Public Overridable Sub Write(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.Write(System.String)
    commentId: M:System.IO.StreamWriter.Write(System.String)
  - type: System.IO.StringWriter.Write(System.String)
    commentId: M:System.IO.StringWriter.Write(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.String,System.Object)
  commentId: M:System.IO.TextWriter.Write(System.String,System.Object)
  id: Write(System.String,System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(String, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 311
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has only a single object in its parameter list, the value of index must always be 0. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>. This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(string format, object arg0)
    content.vb: Public Overridable Sub Write(format As String, arg0 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)
  commentId: M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(String, Object, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 312
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has two objects in its parameter list, the value of index must always be 0 or 1. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(string format, object arg0, object arg1)
    content.vb: Public Overridable Sub Write(format As String, arg0 As Object, arg1 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format and write. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(String, Object, Object, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 313
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has three objects in its parameter list, the value of index must always be 0, 1, or 2. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>This method does not search the specified string  for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(string format, object arg0, object arg1, object arg2)
    content.vb: Public Overridable Sub Write(format As String, arg0 As Object, arg1 As Object, arg2 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format and write. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format and write. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.String,System.Object[])
  commentId: M:System.IO.TextWriter.Write(System.String,System.Object[])
  id: Write(System.String,System.Object[])
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(String, Object[])
  fullName: System.IO.TextWriter.Write(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 314
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has an array in its parameter list, the value of index must always be less than the length of the array. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(string format, params object[] arg)
    content.vb: Public Overridable Sub Write(format As String, ParamArray arg As Object())
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg
      type: System.Object[]
      description: "\n<p>An object array that contains zero or more objects to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>arg</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>arg</em> array. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.Write(System.String, System.Object())
  name.vb: Write(String, Object())
- uid: System.IO.TextWriter.Write(System.UInt32)
  commentId: M:System.IO.TextWriter.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(UInt32)
  fullName: System.IO.TextWriter.Write(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 315
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a 4-byte unsigned integer to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.UInt32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(uint value)
    content.vb: Public Overridable Sub Write(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 4-byte unsigned integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.Write(System.UInt64)
  commentId: M:System.IO.TextWriter.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: Write(UInt64)
  fullName: System.IO.TextWriter.Write(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO/ref/System.IO.cs
    startLine: 317
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of an 8-byte unsigned integer to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.UInt64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void Write(ulong value)
    content.vb: Public Overridable Sub Write(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 8-byte unsigned integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteAsync(System.Char)
  commentId: M:System.IO.TextWriter.WriteAsync(System.Char)
  id: WriteAsync(System.Char)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(Char)
  fullName: System.IO.TextWriter.WriteAsync(System.Char)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 319
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character to the text string or stream asynchronously.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref href=\"System.IO.TextWriter.WriteAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, see the <xref href=\"System.IO.StreamWriter.WriteAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteAsync(char value)
    content.vb: Public Overridable Function WriteAsync(value As Char) As Threading.Tasks.Task
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The character to write to the text stream.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.WriteAsync(System.Char)
    commentId: M:System.IO.StreamWriter.WriteAsync(System.Char)
  - type: System.IO.StringWriter.WriteAsync(System.Char)
    commentId: M:System.IO.StringWriter.WriteAsync(System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteAsync(System.Char[])
  commentId: M:System.IO.TextWriter.WriteAsync(System.Char[])
  id: WriteAsync(System.Char[])
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(Char[])
  fullName: System.IO.TextWriter.WriteAsync(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 320
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character array to the text string or stream asynchronously.</p>\n"
  syntax:
    content: public Threading.Tasks.Task WriteAsync(char[] buffer)
    content.vb: Public Function WriteAsync(buffer As Char()) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array to write to the text stream. If <em>buffer</em> is <strong>null</strong>, nothing is written.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.TextWriter.WriteAsync(System.Char())
  name.vb: WriteAsync(Char())
- uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  id: WriteAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 321
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters to the text string or stream asynchronously. </p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref href=\"System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  method, see the <xref href=\"System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  method.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function WriteAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array to write data from. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The character position in the buffer at which to start retrieving data. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  - type: System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.WriteAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteAsync(Char(), Int32, Int32)
- uid: System.IO.TextWriter.WriteAsync(System.String)
  commentId: M:System.IO.TextWriter.WriteAsync(System.String)
  id: WriteAsync(System.String)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(String)
  fullName: System.IO.TextWriter.WriteAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 322
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string to the text string or stream asynchronously.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref href=\"System.IO.TextWriter.WriteAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>  method, see the <xref href=\"System.IO.StreamWriter.WriteAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteAsync(string value)
    content.vb: Public Overridable Function WriteAsync(value As String) As Threading.Tasks.Task
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to write. If <em>value</em> is <strong>null</strong>, nothing is written to the text stream.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.WriteAsync(System.String)
    commentId: M:System.IO.StreamWriter.WriteAsync(System.String)
  - type: System.IO.StringWriter.WriteAsync(System.String)
    commentId: M:System.IO.StringWriter.WriteAsync(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine
  commentId: M:System.IO.TextWriter.WriteLine
  id: WriteLine
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine()
  fullName: System.IO.TextWriter.WriteLine()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 323
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine()
    content.vb: Public Overridable Sub WriteLine
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Boolean)
  commentId: M:System.IO.TextWriter.WriteLine(System.Boolean)
  id: WriteLine(System.Boolean)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Boolean)
  fullName: System.IO.TextWriter.WriteLine(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 324
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a <strong>Boolean</strong> value followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method outputs either <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(bool value)
    content.vb: Public Overridable Sub WriteLine(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The <strong>Boolean</strong> value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Char)
  commentId: M:System.IO.TextWriter.WriteLine(System.Char)
  id: WriteLine(System.Char)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Char)
  fullName: System.IO.TextWriter.WriteLine(System.Char)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 325
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>This overload is equivalent to <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>  followed by <xref href=\"System.IO.TextWriter.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> .</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(char value)
    content.vb: Public Overridable Sub WriteLine(value As Char)
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The character to write to the text stream. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Char[])
  commentId: M:System.IO.TextWriter.WriteLine(System.Char[])
  id: WriteLine(System.Char[])
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Char[])
  fullName: System.IO.TextWriter.WriteLine(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 326
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes an array of characters followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>All the characters in <em>buffer</em> are written to the underlying stream. If the character array is <strong>null</strong>, only the line terminator is written.</p>\n<p>This overload is equivalent to <xref href=\"System.IO.TextWriter.Write(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref>  followed by <xref href=\"System.IO.TextWriter.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> .</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(char[] buffer)
    content.vb: Public Overridable Sub WriteLine(buffer As Char())
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array from which data is read. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.WriteLine(System.Char())
  name.vb: WriteLine(Char())
- uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
  id: WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteLine(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 327
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>This method will write <em>count</em> characters of data into this <strong>TextWriter</strong> from the <em>buffer</em> character array starting at position <em>index</em>.</p>\n<p>This overload is equivalent to calling the <xref href=\"System.IO.TextWriter.Write(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method followed by <xref href=\"System.IO.TextWriter.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> for each character in <em>buffer</em> between <em>index</em> and (<em>index</em> + <em>count</em>).</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(char[] buffer, int index, int count)
    content.vb: Public Overridable Sub WriteLine(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array from which data is read. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The character position in <em>buffer</em> at which to start reading data. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to write. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.WriteLine(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLine(Char(), Int32, Int32)
- uid: System.IO.TextWriter.WriteLine(System.Decimal)
  commentId: M:System.IO.TextWriter.WriteLine(System.Decimal)
  id: WriteLine(System.Decimal)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Decimal)
  fullName: System.IO.TextWriter.WriteLine(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 328
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a decimal value followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting. For a list of common I/O tasks, see Common I/O Tasks.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n"
  syntax:
    content: public virtual void WriteLine(decimal value)
    content.vb: Public Overridable Sub WriteLine(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Double)
  commentId: M:System.IO.TextWriter.WriteLine(System.Double)
  id: WriteLine(System.Double)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Double)
  fullName: System.IO.TextWriter.WriteLine(System.Double)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 329
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting. For a list of common I/O tasks, see Common I/O Tasks.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n"
  syntax:
    content: public virtual void WriteLine(double value)
    content.vb: Public Overridable Sub WriteLine(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The 8-byte floating-point value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Int32)
  commentId: M:System.IO.TextWriter.WriteLine(System.Int32)
  id: WriteLine(System.Int32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Int32)
  fullName: System.IO.TextWriter.WriteLine(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 330
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Int32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(int value)
    content.vb: Public Overridable Sub WriteLine(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The 4-byte signed integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Int64)
  commentId: M:System.IO.TextWriter.WriteLine(System.Int64)
  id: WriteLine(System.Int64)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Int64)
  fullName: System.IO.TextWriter.WriteLine(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 331
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.Int64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(long value)
    content.vb: Public Overridable Sub WriteLine(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The 8-byte signed integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Object)
  commentId: M:System.IO.TextWriter.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Object)
  fullName: System.IO.TextWriter.WriteLine(System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 332
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of an object by calling the <strong>ToString</strong> method on that object, followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>This overload is equivalent to the <xref href=\"System.IO.TextWriter.Write(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(object value)
    content.vb: Public Overridable Sub WriteLine(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to write. If <em>value</em> is <strong>null</strong>, only the line terminator is written. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.Single)
  commentId: M:System.IO.TextWriter.WriteLine(System.Single)
  id: WriteLine(System.Single)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(Single)
  fullName: System.IO.TextWriter.WriteLine(System.Single)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 333
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting. For a list of common I/O tasks, see Common I/O Tasks.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n"
  syntax:
    content: public virtual void WriteLine(float value)
    content.vb: Public Overridable Sub WriteLine(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The 4-byte floating-point value to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.String)
  commentId: M:System.IO.TextWriter.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(String)
  fullName: System.IO.TextWriter.WriteLine(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 334
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>This overload is equivalent to the <xref href=\"System.IO.TextWriter.Write(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(string value)
    content.vb: Public Overridable Sub WriteLine(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to write. If <em>value</em> is <strong>null</strong>, only the line terminator is written. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object)
  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object)
  id: WriteLine(System.String,System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 335
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has only a single object in its parameter list, the value of index must always be 0. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(string format, object arg0)
    content.vb: Public Overridable Sub WriteLine(format As String, arg0 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 336
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\"System.String.Format(System.String,System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has two objects in its parameter list, the value of index must always be 0 or 1. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(string format, object arg0, object arg1)
    content.vb: Public Overridable Sub WriteLine(format As String, arg0 As Object, arg1 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format and write. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object, Object, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 337
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has three objects in its parameter list, the value of index must always be 0, 1, or 2. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(string format, object arg0, object arg1, object arg2)
    content.vb: Public Overridable Sub WriteLine(format As String, arg0 As Object, arg1 As Object, arg2 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format and write. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format and write. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])
  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object[])
  id: WriteLine(System.String,System.Object[])
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object[])
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 338
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes out a formatted string and a new line, using the same semantics as <xref href=\"System.String.Format(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method uses the  of the .NET Framework to convert the value of an object to its string representation and to embed that representation in a string. The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about the composite formatting feature, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the string representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element. For more information about the composite formatting feature, including the syntax of a format item, see Composite Formatting.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because this overload has an array in its parameter list, the value of index must always be less than the length of the array. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the object to be formatted. Possible values for formatString are the same as the values supported by the object's <strong>ToString(</strong><em>format</em><strong>)</strong> method. If formatString is not specified and the object to be formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, <strong>null</strong> is passed as the value of the <em>format</em> parameter that is used as the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> format string.</p>\n</td></tr></tbody></table>\n<p>The leading and trailing brace characters, \"{\" and \"}\", are required. To specify a single literal brace character in <em>format</em>, specify two leading or trailing brace characters; that is, \"{{\" or \"}}\".</p>\n<p>This method does not search the specified string for individual newline characters (hexadecimal 0x000a) and replace them with <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a specified object is not referenced in the format string, it is ignored.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(string format, params object[] arg)
    content.vb: Public Overridable Sub WriteLine(format As String, ParamArray arg As Object())
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg
      type: System.Object[]
      description: "\n<p>An object array that contains zero or more objects to format and write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>A string or object is passed in as <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid composite format string.</p>\n<p>-or- </p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>arg</em> array. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.WriteLine(System.String, System.Object())
  name.vb: WriteLine(String, Object())
- uid: System.IO.TextWriter.WriteLine(System.UInt32)
  commentId: M:System.IO.TextWriter.WriteLine(System.UInt32)
  id: WriteLine(System.UInt32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(UInt32)
  fullName: System.IO.TextWriter.WriteLine(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 339
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.UInt32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(uint value)
    content.vb: Public Overridable Sub WriteLine(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The 4-byte unsigned integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLine(System.UInt64)
  commentId: M:System.IO.TextWriter.WriteLine(System.UInt64)
  id: WriteLine(System.UInt64)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLine(UInt64)
  fullName: System.IO.TextWriter.WriteLine(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 341
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.</p>\n"
  remarks: "\n<p>The text representation of the specified value is produced by calling the <xref href=\"System.UInt64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IO.TextWriter.FormatProvider\" data-throw-if-not-resolved=\"false\"></xref> property, if not <strong>null</strong>, specifies the culture-specific formatting.</p>\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual void WriteLine(ulong value)
    content.vb: Public Overridable Sub WriteLine(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The 8-byte unsigned integer to write. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLineAsync
  commentId: M:System.IO.TextWriter.WriteLineAsync
  id: WriteLineAsync
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync()
  fullName: System.IO.TextWriter.WriteLineAsync()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLineAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 343
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a line terminator asynchronously to the text string or stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field. </p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteLineAsync()
    content.vb: Public Overridable Function WriteLineAsync As Threading.Tasks.Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.WriteLineAsync
    commentId: M:System.IO.StreamWriter.WriteLineAsync
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLineAsync(System.Char)
  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char)
  id: WriteLineAsync(System.Char)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(Char)
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLineAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 344
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character followed by a line terminator asynchronously to the text string or stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field. </p>\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref href=\"System.IO.TextWriter.WriteLineAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>  method, see the <xref href=\"System.IO.StreamWriter.WriteLineAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>  method.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteLineAsync(char value)
    content.vb: Public Overridable Function WriteLineAsync(value As Char) As Threading.Tasks.Task
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The character to write to the text stream.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.WriteLineAsync(System.Char)
    commentId: M:System.IO.StreamWriter.WriteLineAsync(System.Char)
  - type: System.IO.StringWriter.WriteLineAsync(System.Char)
    commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.TextWriter.WriteLineAsync(System.Char[])
  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char[])
  id: WriteLineAsync(System.Char[])
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(Char[])
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLineAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 345
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes an array of characters followed by a line terminator asynchronously to the text string or stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field. </p>\n"
  syntax:
    content: public Threading.Tasks.Task WriteLineAsync(char[] buffer)
    content.vb: Public Function WriteLineAsync(buffer As Char()) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array to write to the text stream. If the character array is <strong>null</strong>, only the line terminator is written. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  - type: System.IO.StringWriter
    commentId: T:System.IO.StringWriter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.IO.TextWriter.WriteLineAsync(System.Char())
  name.vb: WriteLineAsync(Char())
- uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  id: WriteLineAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLineAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 346
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref href=\"System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  method, see the <xref href=\"System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  method.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function WriteLineAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The character array to write data from. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The character position in the buffer at which to start retrieving data. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  - type: System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextWriter.WriteLineAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLineAsync(Char(), Int32, Int32)
- uid: System.IO.TextWriter.WriteLineAsync(System.String)
  commentId: M:System.IO.TextWriter.WriteLineAsync(System.String)
  id: WriteLineAsync(System.String)
  parent: System.IO.TextWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(String)
  fullName: System.IO.TextWriter.WriteLineAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLineAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 347
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string followed by a line terminator asynchronously to the text string or stream. </p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.CoreNewLine\" data-throw-if-not-resolved=\"false\"></xref> field.</p>\n<p>The <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> class is an abstract class. Therefore, you do not instantiate it in your code. For an example of using the <xref href=\"System.IO.TextWriter.WriteLineAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, see the <xref href=\"System.IO.StreamWriter.WriteLineAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual Threading.Tasks.Task WriteLineAsync(string value)
    content.vb: Public Overridable Function WriteLineAsync(value As String) As Threading.Tasks.Task
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to write. If the value is <strong>null</strong>, only a line terminator is written. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The text writer is currently in use by a previous write operation. </p>\n"
  seealso:
  - type: System.IO.StreamWriter.WriteLineAsync(System.String)
    commentId: M:System.IO.StreamWriter.WriteLineAsync(System.String)
  - type: System.IO.StringWriter.WriteLineAsync(System.String)
    commentId: M:System.IO.StringWriter.WriteLineAsync(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: IO.TextWriter
  fullName: System.IO.TextWriter
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Text.Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
