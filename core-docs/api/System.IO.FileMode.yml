items:
- uid: System.IO.FileMode
  commentId: T:System.IO.FileMode
  id: FileMode
  parent: System.IO
  children:
  - System.IO.FileMode.Append
  - System.IO.FileMode.Create
  - System.IO.FileMode.CreateNew
  - System.IO.FileMode.Open
  - System.IO.FileMode.OpenOrCreate
  - System.IO.FileMode.Truncate
  langs:
  - csharp
  - vb
  name: FileMode
  fullName: System.IO.FileMode
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FileMode
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 28
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: "\n<p>Specifies how the operating system should open a file.</p>\n"
  remarks: "\n<p>For an example of creating a file and writing text to a file, see How to: Write Text to a File. For an example of reading text from a file, see How to: Read Text from a File. For an example of reading from and writing to a binary file, see How to: Read and Write to a Newly Created Data File.</p>\n<p>A <strong>FileMode</strong> parameter is specified in many of the constructors for <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref>, and in the <strong>Open</strong> methods of <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> to control how a file is opened.</p>\n<p>\n<strong>FileMode</strong> parameters control whether a file is overwritten, created, opened, or some combination thereof. Use <strong>Open</strong> to open an existing file. To append to a file, use <strong>Append</strong>. To truncate a file or create a file if it doesn't exist, use <strong>Create</strong>.</p>\n"
  example:
  - "\n<p>The following <strong>FileStream</strong> constructor opens an existing file (<strong>FileMode.Open</strong>).</p>Classic FileAccess Example#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public enum FileMode
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Enum FileMode
  seealso:
  - type: System.IO.File.Open(System.String,System.IO.FileMode)
    commentId: M:System.IO.File.Open(System.String,System.IO.FileMode)
  - type: System.IO.FileInfo.Open(System.IO.FileMode)
    commentId: M:System.IO.FileInfo.Open(System.IO.FileMode)
  - type: System.IO.FileStream
    commentId: T:System.IO.FileStream
  - type: System.IO.IsolatedStorage.IsolatedStorageFileStream
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageFileStream
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.IO.FileMode.Append
  commentId: F:System.IO.FileMode.Append
  id: Append
  parent: System.IO.FileMode
  langs:
  - csharp
  - vb
  name: Append
  fullName: System.IO.FileMode.Append
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 51
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: "\n<p>Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Append\" data-throw-if-not-resolved=\"false\"></xref> permission. <strong>FileMode.Append</strong> can be used only in conjunction with <strong>FileAccess.Write</strong>. Trying to seek to a position before the end of the file throws an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exception, and any attempt to read fails and throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> exception.</p>\n"
  syntax:
    content: Append = 6
    return:
      type: System.IO.FileMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.IO.FileMode.Create
  commentId: F:System.IO.FileMode.Create
  id: Create
  parent: System.IO.FileMode
  langs:
  - csharp
  - vb
  name: Create
  fullName: System.IO.FileMode.Create
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 36
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: "\n<p>Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> permission. <strong>FileMode.Create</strong> is equivalent to requesting that if the file does not exist, use <xref href=\"System.IO.FileMode.CreateNew\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, use <xref href=\"System.IO.FileMode.Truncate\" data-throw-if-not-resolved=\"false\"></xref>. If the file already exists but is a hidden file, an <xref href=\"System.UnauthorizedAccessException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown.</p>\n"
  syntax:
    content: Create = 2
    return:
      type: System.IO.FileMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.IO.FileMode.CreateNew
  commentId: F:System.IO.FileMode.CreateNew
  id: CreateNew
  parent: System.IO.FileMode
  langs:
  - csharp
  - vb
  name: CreateNew
  fullName: System.IO.FileMode.CreateNew
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateNew
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 33
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: "\n<p>Specifies that the operating system should create a new file. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> permission. If the file already exists, an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown.</p>\n"
  syntax:
    content: CreateNew = 1
    return:
      type: System.IO.FileMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.IO.FileMode.Open
  commentId: F:System.IO.FileMode.Open
  id: Open
  parent: System.IO.FileMode
  langs:
  - csharp
  - vb
  name: Open
  fullName: System.IO.FileMode.Open
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Open
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 39
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: "\n<p>Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration. A <xref href=\"System.IO.FileNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the file does not exist.</p>\n"
  syntax:
    content: Open = 3
    return:
      type: System.IO.FileMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.IO.FileMode.OpenOrCreate
  commentId: F:System.IO.FileMode.OpenOrCreate
  id: OpenOrCreate
  parent: System.IO.FileMode
  langs:
  - csharp
  - vb
  name: OpenOrCreate
  fullName: System.IO.FileMode.OpenOrCreate
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenOrCreate
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 42
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: "\n<p>Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with <strong>FileAccess.Read</strong>, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\" data-throw-if-not-resolved=\"false\"></xref> permission is required. If the file access is <strong>FileAccess.Write</strong>, <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> permission is required. If the file is opened with <strong>FileAccess.ReadWrite</strong>, both <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Read\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> permissions are required.  </p>\n"
  syntax:
    content: OpenOrCreate = 4
    return:
      type: System.IO.FileMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.IO.FileMode.Truncate
  commentId: F:System.IO.FileMode.Truncate
  id: Truncate
  parent: System.IO.FileMode
  langs:
  - csharp
  - vb
  name: Truncate
  fullName: System.IO.FileMode.Truncate
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Truncate
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 47
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: "\n<p>Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires <xref href=\"System.Security.Permissions.FileIOPermissionAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> permission. Attempts to read from a file opened with <strong>FileMode.Truncate</strong> cause an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> exception.</p>\n"
  syntax:
    content: Truncate = 5
    return:
      type: System.IO.FileMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
