items:
- uid: System.AttributeUsageAttribute
  commentId: T:System.AttributeUsageAttribute
  id: AttributeUsageAttribute
  parent: System
  children:
  - System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  - System.AttributeUsageAttribute.AllowMultiple
  - System.AttributeUsageAttribute.Inherited
  - System.AttributeUsageAttribute.ValidOn
  langs:
  - csharp
  - vb
  name: AttributeUsageAttribute
  fullName: System.AttributeUsageAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/AttributeUsageAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AttributeUsageAttribute
    path: src/mscorlib/src/System/AttributeUsageAttribute.cs
    startLine: 16
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Specifies the usage of another attribute class. This class cannot be inherited.</p>\n"
  remarks: "\n<p>When you are defining your own attribute class, you can control the manner in which it is used by placing an <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> on your attribute class. The indicated attribute class must derive from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>, either directly or indirectly.</p>\n<p>Attribute classes have positional and named parameters. Each public constructor for an attribute class defines a valid sequence of positional parameters for that class. Named parameters are defined by the non-static, public, and read-write fields or properties of the attribute class.</p>\n<p>The three properties of <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> are set by defining the following parameters: </p>\n<ul><li>\n<p>\n<xref href=\"System.AttributeUsageAttribute.ValidOn\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>This positional parameter specifies the program elements that the indicated attribute can be placed on. The set of all possible elements that you can place an attribute on is listed in the <xref href=\"System.AttributeTargets\" data-throw-if-not-resolved=\"false\"></xref> enumeration. You can combine several <xref href=\"System.AttributeTargets\" data-throw-if-not-resolved=\"false\"></xref> values using a bitwise OR operation to get the desired combination of valid program elements.</p>\n<ul><li>\n<p>\n<xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>This named parameter specifies whether the indicated attribute can be specified more than once for a given program element.</p>\n<ul><li>\n<p>\n<xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>This named parameter specifies whether the indicated attribute can be inherited by derived classes and overriding members.</p>\n<p>For more information about using attributes, see <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> and Extending Metadata Using Attributes.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [AttributeUsage(AttributeTargets.Class, Inherited = true)]

      [ComVisible(true)]

      public sealed class AttributeUsageAttribute : Attribute, _Attribute
    content.vb: >-
      <Serializable>

      <AttributeUsage(AttributeTargets.Class, Inherited:=True)>

      <ComVisible(True)>

      Public NotInheritable Class AttributeUsageAttribute
          Inherits Attribute
          Implements _Attribute
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.AttributeTargets
    commentId: T:System.AttributeTargets
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 4
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  commentId: M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  id: '#ctor(System.AttributeTargets)'
  parent: System.AttributeUsageAttribute
  langs:
  - csharp
  - vb
  name: AttributeUsageAttribute(AttributeTargets)
  fullName: System.AttributeUsageAttribute.AttributeUsageAttribute(System.AttributeTargets)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/AttributeUsageAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/AttributeUsageAttribute.cs
    startLine: 28
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the specified list of <xref href=\"System.AttributeTargets\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref> value, and the <xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>You can combine several <xref href=\"System.AttributeTargets\" data-throw-if-not-resolved=\"false\"></xref> values using a bitwise OR operation to get the desired combination of valid program elements.</p>\n<p>For default property values, see the <xref href=\"System.AttributeUsageAttribute.ValidOn\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.AttributeUsageAttribute.AllowMultiple\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  example:
  - "\n<p>The definition of the DispId attribute illustrates the use of a bitwise OR operation to combine several <xref href=\"System.AttributeTargets\" data-throw-if-not-resolved=\"false\"></xref> values.</p>Classic AttributeUsageAttribute.AttributeUsageAttribute Example#1"
  syntax:
    content: public AttributeUsageAttribute(AttributeTargets validOn)
    content.vb: Public Sub New(validOn As AttributeTargets)
    parameters:
    - id: validOn
      type: System.AttributeTargets
  seealso:
  - type: System.AttributeTargets
    commentId: T:System.AttributeTargets
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.AttributeUsageAttribute.AllowMultiple
  commentId: P:System.AttributeUsageAttribute.AllowMultiple
  id: AllowMultiple
  parent: System.AttributeUsageAttribute
  langs:
  - csharp
  - vb
  name: AllowMultiple
  fullName: System.AttributeUsageAttribute.AllowMultiple
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/AttributeUsageAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AllowMultiple
    path: src/mscorlib/src/System/AttributeUsageAttribute.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</p>\n"
  remarks: "\n<p>An attribute that can be specified more than once for a program element is called a multi-use attribute. An attribute that can be specified only once is called a single-use attribute.</p>\n"
  syntax:
    content: public bool AllowMultiple { get; set; }
    content.vb: Public Property AllowMultiple As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.AttributeUsageAttribute.Inherited
  commentId: P:System.AttributeUsageAttribute.Inherited
  id: Inherited
  parent: System.AttributeUsageAttribute
  langs:
  - csharp
  - vb
  name: Inherited
  fullName: System.AttributeUsageAttribute.Inherited
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/AttributeUsageAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Inherited
    path: src/mscorlib/src/System/AttributeUsageAttribute.cs
    startLine: 50
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that determines whether the indicated attribute is inherited by derived classes and overriding members.</p>\n"
  remarks: "\n<p>The <xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref> property determines: </p>\n<ul><li>\n<p>Whether classes derived from a base class tagged with the attribute to which the <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute is applied inherit that attribute. </p>\n</li><li>\n<p>Whether methods of derived classes that override a base class method tagged with the attribute to which the <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute is applied inherit that attribute.  (If a class inherits a base class member, it also inherits any attributes applied to that member.)</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example illustrates the difference between an attribute to which an <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute with an <xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref> property value of <strong>true</strong> is applied and one to which  <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute with an <xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref> property value of <strong>true</strong> is applied . The example defines two attributes, <code>InheritedAttribute</code> and <code>NotInheritedAttribute</code>. Both attributes can apply to classes and methods. Because the <xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute applied to <code>InheritedAttribute</code> is <strong>true</strong>, it is inherited by derived classes and the members of derived classes that override the base class method.  On the other hand, because the <xref href=\"System.AttributeUsageAttribute.Inherited\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.AttributeUsageAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute applied to <code>NotInheritedAttribute</code> is <strong>false</strong>, it is not inherited by derived classes and the members of derived classes that override the base class method. </p>System.AttributeUsageAttribute.Inherited#1<p>The example then defines two  base classes. The first, <code>BaseA</code>, has a single method, <code>MethodA</code>.  The second, <code>BaseB</code>, has a single method, <code>MethodB</code>. <code>BaseA</code> and <code>MethodA</code> are tagged with the <code>InheritedAttribute</code> attribute, and <code>BaseB</code> and <code>MethodB</code> are tagged with the <code>NotInheritedAttribute</code> attribute. <code>DerivedA</code> inherits from <code>BaseA</code> and overrides its <code>MethodA</code> method. <code>DerivedB</code> inherits from <code>BaseB</code> and overrides its <code>MethodB</code> method.  </p>System.AttributeUsageAttribute.Inherited#2<p>As the output from the example shows, <code>DerivedA</code> and <code>DerivedA.MethodA</code> inherit the <code>InheritedAttribute</code> attribute, but <code>DerivedB</code> and <code>DerivedB.MethodB</code> do not inherit the <code>NotInheritedAttribute</code> attribute. </p>"
  syntax:
    content: public bool Inherited { get; set; }
    content.vb: Public Property Inherited As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.AttributeUsageAttribute.ValidOn
  commentId: P:System.AttributeUsageAttribute.ValidOn
  id: ValidOn
  parent: System.AttributeUsageAttribute
  langs:
  - csharp
  - vb
  name: ValidOn
  fullName: System.AttributeUsageAttribute.ValidOn
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/AttributeUsageAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ValidOn
    path: src/mscorlib/src/System/AttributeUsageAttribute.cs
    startLine: 39
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</p>\n"
  syntax:
    content: public AttributeTargets ValidOn { get; }
    content.vb: Public ReadOnly Property ValidOn As AttributeTargets
    parameters: []
    return:
      type: System.AttributeTargets
  seealso:
  - type: System.AttributeTargets
    commentId: T:System.AttributeTargets
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.AttributeTargets
  parent: System
  isExternal: false
  name: AttributeTargets
  fullName: System.AttributeTargets
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
