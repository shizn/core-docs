items:
- uid: System.Collections.ArrayList
  commentId: T:System.Collections.ArrayList
  id: ArrayList
  parent: System.Collections
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  - vb
  name: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayList
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 33
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Implements the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface using an array whose size is dynamically increased as required.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:</p>\n<ul><li>\n<p>For a heterogeneous collection of objects, use the <strong>List<Object></strong> (in C#) or <strong>List(Of Object)</strong> (in Visual Basic) type. </p>\n</li><li>\n<p>For a homogeneous collection of objects, use the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n</li></ul>\n<p>See the \"Performance Considerations\" section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> reference topic for a discussion of the relative performance of these classes. </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is not guaranteed to be sorted.  You must sort the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> by calling its <xref href=\"System.Collections.ArrayList.Sort\" data-throw-if-not-resolved=\"false\"></xref> method prior to performing operations (such as <see cref=\"Overload:System.Collections.ArrayList.BinarySearch\"></see>) that require the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the <xref href=\"System.Collections.Generic.SortedSet`1\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>The capacity of an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref href=\"System.Collections.ArrayList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly.</p>\n<p>For very large <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <strong>enabled</strong> attribute of the  configuration element to <strong>true</strong> in the run-time environment.</p>\n<p>Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.</p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> collection accepts <strong>null</strong> as a valid value. It also allows duplicate elements. </p>\n<p>Using multidimensional arrays as elements in an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> collection is not supported.</p>\n"
  example:
  - "\n<p>The following code example shows how to create and initialize an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and how to display its values. </p>Classic ArrayList Example#1"
  syntax:
    content: 'public class ArrayList : IList'
    content.vb: >-
      Public Class ArrayList
          Inherits IList
  seealso:
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.Generic.List`1
    commentId: T:System.Collections.Generic.List`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.ArrayList.#ctor
  commentId: M:System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 57
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the default initial capacity.</p>\n"
  remarks: "\n<p>The capacity of an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public ArrayList()
    content.vb: Public Sub New
  seealso:
  - type: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(System.Collections.ICollection)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 13
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</p>\n"
  remarks: "\n<p>The capacity of an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements are copied onto the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> in the same order they are read by the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>c</em>.</p>\n"
  syntax:
    content: public ArrayList(ICollection c)
    content.vb: Public Sub New(c As ICollection)
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new list. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  commentId: M:System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 66
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the specified initial capacity.</p>\n"
  remarks: "\n<p>The capacity of an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: public ArrayList(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.ArrayList.Capacity
  commentId: P:System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capacity
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 103
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.ArrayList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. When the value of <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is an O(<em>n</em>) operation, where <em>n</em> is the new capacity.</p>\n"
  syntax:
    content: public virtual int Capacity { get; set; }
    content.vb: Public Overridable Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - type: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Count
  commentId: P:System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 140
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements actually contained in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.IsFixedSize
  commentId: P:System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFixedSize
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 149
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  remarks: "\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a fixed-size wrapper around an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.IsFixedSize Example#1"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.IsReadOnly
  commentId: P:System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 156
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a read-only wrapper around an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and how to determine if an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>Classic ArrayList.ReadOnly1 Example#1"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
    commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  commentId: P:System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 162
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>To guarantee the thread safety of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, all operations must be done through the wrapper returned by the <xref href=\"System.Collections.ArrayList.Synchronized(System.Collections.IList)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ArrayList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>Classic ArrayList.IsSynchronized Example#2<p>Retrieving the value of this property is an O(1) operation.</p><p>The following code example shows how to synchronize an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, determine if an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is synchronized and use a synchronized <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.IsSynchronized Example#1"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.ArrayList.SyncRoot
    commentId: P:System.Collections.ArrayList.SyncRoot
  - type: System.Collections.ArrayList.Synchronized(System.Collections.IList)
    commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.Item(System.Int32)
  commentId: P:System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.ArrayList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 182
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ArrayList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>, so you may need to cast the returned value to the original type in order to manipulate it. It is important to note that <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is not a strongly-typed collection. For a strongly-typed alternative, see <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.ArrayList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.ArrayList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and adds several items. The example demonstrates accessing elements with the <xref href=\"System.Collections.ArrayList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#), and changing an element by assigning a new value to the <xref href=\"System.Collections.ArrayList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property for a specified index. The example also shows that the <xref href=\"System.Collections.ArrayList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property cannot be used to access or add elements outside the current size of the list.</p>System.Collections.ArrayList.Item#1"
  - "\n<p>The following example uses the <xref href=\"System.Collections.ArrayList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property explicitly to assign values to items in the list. The example defines a class that inherits an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and adds a method to scramble the list items.</p>System.Collections.ArrayList.Item#2"
  syntax:
    content: public virtual Object this[int index] { get; set; }
    content.vb: Public Overridable Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
    return:
      type: Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.ArrayList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.ArrayList.SyncRoot
  commentId: P:System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 168
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>To create a synchronized version of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Collections.ArrayList.Synchronized(System.Collections.IList)\" data-throw-if-not-resolved=\"false\"></xref> method. However, derived classes can provide their own synchronized version of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.ArrayList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.ArrayList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ArrayList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>Classic ArrayList.IsSynchronized Example#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: public virtual Object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: Object
  seealso:
  - type: System.Collections.ArrayList.IsSynchronized
    commentId: P:System.Collections.ArrayList.IsSynchronized
  - type: System.Collections.ArrayList.Synchronized(System.Collections.IList)
    commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Adapter
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 22
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper for a specific <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList.Adapter(System.Collections.IList)\" data-throw-if-not-resolved=\"false\"></xref> does not copy the contents of <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. Instead, it only creates an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper around <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>; therefore, changes to the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> also affect the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class provides generic <xref href=\"System.Collections.ArrayList.Reverse\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ArrayList.Sort\" data-throw-if-not-resolved=\"false\"></xref> methods. This wrapper can be a means to use those methods on <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>; however, performing these generic operations through the wrapper might be less efficient than operations applied directly on the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public static ArrayList Adapter(IList list)
    content.vb: Public Shared Function Adapter(list As IList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to wrap.</p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper around the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
    commentId: M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - type: System.Collections.ArrayList.Reverse
    commentId: M:System.Collections.ArrayList.Reverse
  - type: System.Collections.ArrayList.Sort
    commentId: M:System.Collections.ArrayList.Sort
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Add(System.Object)
  commentId: M:System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Add(Object)
  fullName: System.Collections.ArrayList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 23
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an object to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>If <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to add elements to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Add Example#1"
  syntax:
    content: public virtual int Add(object value)
    content.vb: Public Overridable Function Add(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to be added to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the <em>value</em> has been added.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - type: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  - type: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddRange
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 24
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds the elements of an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>The order of the elements in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is preserved in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the new <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> (the current <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> plus the size of the collection) will be greater than <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</p>\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can accommodate the new elements without increasing the <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements to be added and <em>m</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to add elements to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Add Example#1"
  syntax:
    content: public virtual void AddRange(ICollection c)
    content.vb: Public Overridable Sub AddRange(c As ICollection)
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements should be added to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  - type: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  - type: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: BinarySearch(Int32, Int32, Object, IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(System.Int32, System.Int32, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 25
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches a range of elements in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\n"
  remarks: "\n<p>The comparer customizes how the elements are compared. For example, you can use a <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> instance as the comparer to perform case-insensitive string searches.</p>\n<p>If <em>comparer</em> is provided, the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> are compared to the specified value using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation. The elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted in increasing value according to the sort order defined by <em>comparer</em>; otherwise, the result might be incorrect.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the comparison is done using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the element itself or by the specified value. The elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted in increasing value according to the sort order defined by the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation; otherwise, the result might be incorrect.</p>\n<p>Comparing <strong>null</strong> with any type is allowed and does not generate an exception when using <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>. When sorting, <strong>null</strong> is considered to be less than any other object.</p>\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</p>\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, this index should be used as the insertion point to maintain the sort order.</p>\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  syntax:
    content: public virtual int BinarySearch(int index, int count, object value, IComparer comparer)
    content.vb: Public Overridable Function BinarySearch(index As Integer, count As Integer, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the range to search. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate. The value can be <strong>null</strong>. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer that is the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>comparer</em> is <strong>null</strong> and neither <em>value</em> nor the elements of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong> and <em>value</em> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 26
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches the entire sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> for an element using the default comparer and returns the zero-based index of the element.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter and each element of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> must implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, which is used for comparisons. The elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted in increasing value according to the sort order defined by the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation; otherwise, the result might be incorrect.</p>\n<p>Comparing <strong>null</strong> with any type is allowed and does not generate an exception when using <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>. When sorting, <strong>null</strong> is considered to be less than any other object.</p>\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</p>\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, this index should be used as the insertion point to maintain the sort order.</p>\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use <xref href=\"System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> to locate a specific object in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.BinarySearch1 Example#1"
  syntax:
    content: public virtual int BinarySearch(object value)
    content.vb: Public Overridable Function BinarySearch(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Neither <em>value</em> nor the elements of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>value</em> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: BinarySearch(Object, IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 27
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches the entire sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\n"
  remarks: "\n<p>The comparer customizes how the elements are compared. For example, you can use a <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> instance as the comparer to perform case-insensitive string searches.</p>\n<p>If <em>comparer</em> is provided, the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> are compared to the specified value using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation. The elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted in increasing value according to the sort order defined by <em>comparer</em>; otherwise, the result might be incorrect.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the comparison is done using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the element itself or by the specified value. The elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted in increasing value according to the sort order defined by the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation; otherwise, the result might be incorrect.</p>\n<p>Comparing <strong>null</strong> with any type is allowed and does not generate an exception when using <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>. When sorting, <strong>null</strong> is considered to be less than any other object.</p>\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</p>\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, this index should be used as the insertion point to maintain the sort order.</p>\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> of colored animals. The provided <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed. </p>Classic ArrayList.BinarySearch1 Example#2"
  syntax:
    content: public virtual int BinarySearch(object value, IComparer comparer)
    content.vb: Public Overridable Function BinarySearch(value As Object, comparer As IComparer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate. The value can be <strong>null</strong>. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer that is the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong> and neither <em>value</em> nor the elements of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong> and <em>value</em> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Clear
  commentId: M:System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 287
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>\n<xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged.  To reset the capacity of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.Collections.ArrayList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref> or set the <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property directly. Trimming an empty <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to trim the unused portions of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and how to clear the values of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Clear Example#1"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.TrimToSize
    commentId: M:System.Collections.ArrayList.TrimToSize
  - type: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  - type: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Clone
  commentId: M:System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 300
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates a shallow copy of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.</p>\n<p>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: Object
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Contains(System.Object)
  commentId: M:System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.ArrayList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 30
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  syntax:
    content: public virtual bool Contains(object item)
    content.vb: Public Overridable Function Contains(item As Object) As Boolean
    parameters:
    - id: item
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>item</em> is found in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - type: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  commentId: M:System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(System.Array)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 31
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the beginning of the target array.</p>\n"
  remarks: "\n<p>The specified array must be of a compatible type.</p>\n<p>This method uses <see cref=\"Overload:System.Array.Copy\"></see> to copy the elements.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to copy an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.CopyTo Example#1"
  syntax:
    content: public virtual void CopyTo(Array array)
    content.vb: Public Overridable Sub CopyTo(array As Array)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is greater than the number of elements that the destination <em>array</em> can contain. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ArrayList.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 32
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>The specified array must be of a compatible type.</p>\n<p>This method uses <see cref=\"Overload:System.Array.Copy\"></see> to copy the elements.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to copy an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.CopyTo1 Example#1"
  syntax:
    content: public virtual void CopyTo(Array array, int arrayIndex)
    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, Array, Int32, Int32)
  fullName: System.Collections.ArrayList.CopyTo(System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 33
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies a range of elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>The specified array must be of a compatible type.</p>\n<p>This method uses <see cref=\"Overload:System.Array.Copy\"></see> to copy the elements.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to copy an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.CopyTo1 Example#1"
  syntax:
    content: public virtual void CopyTo(int index, Array array, int arrayIndex, int count)
    content.vb: Public Overridable Sub CopyTo(index As Integer, array As Array, arrayIndex As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> at which copying begins. </p>\n"
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>arrayIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than the <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The number of elements from <em>index</em> to the end of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FixedSize
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 400
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper with a fixed size.</p>\n"
  remarks: "\n<p>This wrapper can be used to prevent additions to and deletions from the original <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The elements can still be modified or replaced.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a fixed-size wrapper around an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.IsFixedSize Example#1"
  syntax:
    content: public static ArrayList FixedSize(ArrayList list)
    content.vb: Public Shared Function FixedSize(list As ArrayList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.ArrayList
    return:
      type: System.Collections.ArrayList
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FixedSize
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 35
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper with a fixed size.</p>\n"
  remarks: "\n<p>This wrapper can be used to prevent additions to and deletions from the original <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. The elements can still be modified or replaced.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public static IList FixedSize(IList list)
    content.vb: Public Shared Function FixedSize(list As IList) As IList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to wrap. </p>\n"
    return:
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper with a fixed size.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.GetEnumerator
  commentId: M:System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 414
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator for the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example gets the enumerator for an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, and the enumerator for a range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Collections.ArrayList.GetEnumerator#1"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: GetEnumerator(Int32, Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 425
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator for a range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual C++, <strong>For Each</strong> Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - <p>The following example gets the enumerator for an <xref href="System.Collections.ArrayList" data-throw-if-not-resolved="false"></xref>, and the enumerator for a range of elements in the <xref href="System.Collections.ArrayList" data-throw-if-not-resolved="false"></xref>.</p>Collections.ArrayList.GetEnumerator#1
  syntax:
    content: public virtual IEnumerator GetEnumerator(int index, int count)
    content.vb: Public Overridable Function GetEnumerator(index As Integer, count As Integer) As IEnumerator
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: IEnumerator
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: GetRange(Int32, Int32)
  fullName: System.Collections.ArrayList.GetRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRange
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 742
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method does not create copies of the elements. The new <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is only a view window into the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. However, all subsequent changes to the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> must be done through this view window <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. If changes are made directly to the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, the view window <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is invalidated and any operations on it will return an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to set and get a range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.SetRange Example#1"
  syntax:
    content: public virtual ArrayList GetRange(int index, int count)
    content.vb: Public Overridable Function GetRange(index As Integer, count As Integer) As ArrayList
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Collections.ArrayList
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 39
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at the first element and ending at the last element.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of the first occurrence of a specified element.</p>Classic ArrayList.IndexOf Example#1"
  syntax:
    content: public virtual int IndexOf(object value)
    content.vb: Public Overridable Function IndexOf(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, -1.</p>\n"
  seealso:
  - type: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  - type: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IndexOf(Object, Int32)
  fullName: System.Collections.ArrayList.IndexOf(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 40
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from the specified index to the last element.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at <em>startIndex</em> and ending at the last element.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements from <em>startIndex</em> to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of the first occurrence of a specified element.</p>Classic ArrayList.IndexOf Example#1"
  syntax:
    content: public virtual int IndexOf(object value, int startIndex)
    content.vb: Public Overridable Function IndexOf(value As Object, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from <em>startIndex</em> to the last element, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  - type: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IndexOf(Object, Int32, Int32)
  fullName: System.Collections.ArrayList.IndexOf(System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 41
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that starts at the specified index and contains the specified number of elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at <em>startIndex</em> and ending at <em>startIndex</em> plus <em>count</em> minus 1, if <em>count</em> is greater than 0.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of the first occurrence of a specified element.</p>Classic ArrayList.IndexOf Example#1"
  syntax:
    content: public virtual int IndexOf(object value, int startIndex, int count)
    content.vb: Public Overridable Function IndexOf(value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that starts at <em>startIndex</em> and contains <em>count</em> number of elements, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  - type: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object)
  fullName: System.Collections.ArrayList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 42
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Inserts an element into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>If <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If <em>index</em> is equal to <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>, <em>value</em> is added to the end of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to insert elements into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Insert Example#1"
  syntax:
    content: public virtual void Insert(int index, object value)
    content.vb: Public Overridable Sub Insert(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> should be inserted. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to insert. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - type: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - type: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: InsertRange(Int32, ICollection)
  fullName: System.Collections.ArrayList.InsertRange(System.Int32, System.Collections.ICollection)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertRange
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 43
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Inserts the elements of a collection into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>If the new <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> (the current <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> plus the size of the collection) will be greater than <xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</p>\n<p>If <em>index</em> is equal to <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>, the elements are added to the end of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The order of the elements in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is preserved in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements to be added and <em>m</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to insert elements into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Insert Example#1"
  syntax:
    content: public virtual void InsertRange(int index, ICollection c)
    content.vb: Public Overridable Sub InsertRange(index As Integer, c As ICollection)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which the new elements should be inserted. </p>\n"
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements should be inserted into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 44
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at the last element and ending at the first element.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of the last occurrence of a specified element.</p>Classic ArrayList.LastIndexOf Example#1"
  syntax:
    content: public virtual int LastIndexOf(object value)
    content.vb: Public Overridable Function LastIndexOf(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the entire the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, -1.</p>\n"
  seealso:
  - type: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - type: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: LastIndexOf(Object, Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 45
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at <em>startIndex</em> and ending at the first element.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements from the beginning of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to <em>startIndex</em>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of the last occurrence of a specified element.</p>Classic ArrayList.LastIndexOf Example#1"
  syntax:
    content: public virtual int LastIndexOf(object value, int startIndex)
    content.vb: Public Overridable Function LastIndexOf(value As Object, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to <em>startIndex</em>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - type: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: LastIndexOf(Object, Int32, Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 46
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements and ends at the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at <em>startIndex</em> and ending at <em>startIndex</em> minus <em>count</em> plus 1, if <em>count</em> is greater than 0.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of the last occurrence of a specified element. Note that <strong>LastIndexOf</strong> is a backward search; therefore, <em>count</em> must be less than or equal to <em>startIndex</em> + 1.</p>Classic ArrayList.LastIndexOf Example#1"
  syntax:
    content: public virtual int LastIndexOf(object value, int startIndex, int count)
    content.vb: Public Overridable Function LastIndexOf(value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that contains <em>count</em> number of elements and ends at <em>startIndex</em>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - type: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOnly
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 615
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a read-only <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper.</p>\n"
  remarks: "\n<p>To prevent any modifications to <em>list</em>, expose <em>list</em> only through this wrapper.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a read-only wrapper around an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and how to determine if an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>Classic ArrayList.ReadOnly1 Example#1"
  syntax:
    content: public static ArrayList ReadOnly(ArrayList list)
    content.vb: Public Shared Function ReadOnly(list As ArrayList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.ArrayList
    return:
      type: System.Collections.ArrayList
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.IsReadOnly
    commentId: P:System.Collections.ArrayList.IsReadOnly
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOnly
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 48
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a read-only <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper.</p>\n"
  remarks: "\n<p>To prevent any modifications to <em>list</em>, expose <em>list</em> only through this wrapper.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection. If changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public static IList ReadOnly(IList list)
    content.vb: Public Shared Function ReadOnly(list As IList) As IList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to wrap. </p>\n"
    return:
      type: System.Collections.IList
      description: "\n<p>A read-only <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper around <em>list</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.IsReadOnly
    commentId: P:System.Collections.ArrayList.IsReadOnly
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Remove(System.Object)
  commentId: M:System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.ArrayList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 49
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified object, the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Remove Example#1"
  syntax:
    content: public virtual void Remove(object obj)
    content.vb: Public Overridable Sub Remove(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to remove from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.RemoveAt(System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)
  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - type: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 640
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>After the element is removed, the size of the collection is adjusted and the value of the <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> property is decreased by one.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Remove Example#1"
  syntax:
    content: public virtual void RemoveAt(int index)
    content.vb: Public Overridable Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - type: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: RemoveRange(Int32, Int32)
  fullName: System.Collections.ArrayList.RemoveRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveRange
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 658
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes a range of elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Remove Example#1"
  syntax:
    content: public virtual void RemoveRange(int index, int count)
    content.vb: Public Overridable Sub RemoveRange(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  - type: System.Collections.ArrayList.RemoveAt(System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)
  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  commentId: M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Repeat(Object, Int32)
  fullName: System.Collections.ArrayList.Repeat(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Repeat
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 52
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copies of the specified value.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to create and initialize a new <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> with the same value.</p>Classic ArrayList.Repeat Example#1"
  syntax:
    content: public static ArrayList Repeat(object value, int count)
    content.vb: Public Shared Function Repeat(value As Object, count As Integer) As ArrayList
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to copy multiple times in the new <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times <em>value</em> should be copied. </p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>An <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> with <em>count</em> number of elements, all of which are copies of <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Reverse
  commentId: M:System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 699
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Reverses the order of the elements in the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method uses <xref href=\"System.Array.Reverse(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> to reverse the order of the elements, such that the element at <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> [i], where i is any index within the range, moves to <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> [j], where j equals <em>index</em> + <em>index</em> + <em>count</em> - i - 1.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to reverse the sort order of the values in an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Reverse Example#1"
  syntax:
    content: public virtual void Reverse()
    content.vb: Public Overridable Sub Reverse
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Reverse(Int32, Int32)
  fullName: System.Collections.ArrayList.Reverse(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 712
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Reverses the order of the elements in the specified range.</p>\n"
  remarks: "\n<p>This method uses <xref href=\"System.Array.Reverse(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> to reverse the order of the elements, such that the element at <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> [i], where i is any index within the range, moves to <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> [j], where j equals <em>index</em> + <em>index</em> + <em>count</em> - i - 1.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to reverse the sort order of the values in a range of elements in an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Reverse1 Example#1"
  syntax:
    content: public virtual void Reverse(int index, int count)
    content.vb: Public Overridable Sub Reverse(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: SetRange(Int32, ICollection)
  fullName: System.Collections.ArrayList.SetRange(System.Int32, System.Collections.ICollection)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetRange
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 55
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the elements of a collection over a range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>The order of the elements in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is preserved in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em> + 1) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to set and get a range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.SetRange Example#1"
  syntax:
    content: public virtual void SetRange(int index, ICollection c)
    content.vb: Public Overridable Sub SetRange(index As Integer, c As ICollection)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which to start copying the elements of <em>c</em>. </p>\n"
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements to copy to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> plus the number of elements in <em>c</em> is greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Sort
  commentId: M:System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 755
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method uses <xref href=\"System.Array.Sort(System.Array)\" data-throw-if-not-resolved=\"false\"></xref>, which uses the QuickSort algorithm. The QuickSort algorithm is a comparison sort (also called an unstable sort), which means that a \"less than or equal to\" comparison operation determines which of two elements should occur first in the final sorted list. However, if two elements are equal, their original order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface to use with the other overloads of this method.</p>\n<p>On average, this method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>; in the worst case it is an O(<em>n</em>^2) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to sort the values in an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Sort Example#1"
  syntax:
    content: public virtual void Sort()
    content.vb: Public Overridable Sub Sort
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 57
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> using the specified comparer.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Collections.ArrayList.Sort(System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method to  sort a list of objects with a custom comparer that implements the <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface. If you pass <strong>null</strong> for <em>comparer</em>, this method uses the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. In this case, you must make sure that the objects contained in the list implement the <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface or an exception will occur. </p>\n<p>In addition, using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation means the list performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>On average, this method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>; in the worst case it is an O(<em>n</em>^2) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to sort the values in an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> using the default comparer and a custom comparer that reverses the sort order.</p>System.Collections.ArrayList.Sort_2#1"
  syntax:
    content: public virtual void Sort(IComparer comparer)
    content.vb: Public Overridable Sub Sort(comparer As IComparer)
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred while comparing two elements.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<strong>null</strong> is passed for <em>comparer</em>, and the elements in the list do not implement <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Sort(Int32, Int32, IComparer)
  fullName: System.Collections.ArrayList.Sort(System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 58
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sorts the elements in a range of elements in <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> using the specified comparer.</p>\n"
  remarks: "\n<p>If <em>comparer</em> is set to <strong>null</strong>, this method performs a comparison sort (also called an unstable sort); that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal. To perform a stable sort, you must implement a custom <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>On average, this method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <em>count</em>; in the worst case it is an O(n^2) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to sort the values in a range of elements in an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> using the default comparer and a custom comparer that reverses the sort order.</p>System.Collections.ArrayList.Sort_3#1"
  syntax:
    content: public virtual void Sort(int index, int count, IComparer comparer)
    content.vb: Public Overridable Sub Sort(index As Integer, count As Integer, comparer As IComparer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to sort. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the range to sort. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred while comparing two elements.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Synchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 802
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper that is synchronized (thread safe).</p>\n"
  remarks: "\n<p>To guarantee the thread safety of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, all operations must be done through this wrapper.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ArrayList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>Classic ArrayList.IsSynchronized Example#2<p>This method is an O(1) operation.</p><p>The following code example shows how to synchronize an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, determine if an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is synchronized and use a synchronized <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.IsSynchronized Example#1"
  syntax:
    content: public static ArrayList Synchronized(ArrayList list)
    content.vb: Public Shared Function Synchronized(list As ArrayList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.ArrayList
    return:
      type: System.Collections.ArrayList
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.SyncRoot
    commentId: P:System.Collections.ArrayList.SyncRoot
  - type: System.Collections.ArrayList.IsSynchronized
    commentId: P:System.Collections.ArrayList.IsSynchronized
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Synchronized
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 60
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper that is synchronized (thread safe).</p>\n"
  remarks: "\n<p>To guarantee the thread safety of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, all operations must be done through this wrapper.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ArrayList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>Classic ArrayList.IsSynchronized Example#2<p>This method is an O(1) operation.</p>"
  syntax:
    content: public static IList Synchronized(IList list)
    content.vb: Public Shared Function Synchronized(list As IList) As IList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to synchronize. </p>\n"
    return:
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper that is synchronized (thread safe).</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.SyncRoot
    commentId: P:System.Collections.ArrayList.SyncRoot
  - type: System.Collections.ArrayList.IsSynchronized
    commentId: P:System.Collections.ArrayList.IsSynchronized
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.ToArray
  commentId: M:System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 813
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a new <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  remarks: "\n<p>The elements are copied using <see cref=\"Overload:System.Array.Copy\"></see>, which is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Object[] ToArray()
    content.vb: Public Overridable Function ToArray As Object()
    return:
      type: Object[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.ToArray(System.Type)
  commentId: M:System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 62
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a new array of the specified element type.</p>\n"
  remarks: "\n<p>All of the objects in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> object will be cast to the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> specified in the <em>type</em> parameter.</p>\n<p>The elements are copied using <see cref=\"Overload:System.Array.Copy\"></see>, which is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following copy example shows how to copy the elements of an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a string array.</p>System.Collections.ArrayList.ToArray#1"
  syntax:
    content: public virtual Array ToArray(Type type)
    content.vb: Public Overridable Function ToArray(type As Type) As Array
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The element <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the destination array to create and copy elements to.</p>\n"
    return:
      type: System.Array
      description: "\n<p>An array of the specified element type containing copies of the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the specified type. </p>\n"
  seealso:
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.TrimToSize
  commentId: M:System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimToSize
    path: src/System.Collections.NonGeneric/src/System/Collections/ArrayList.cs
    startLine: 851
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</p>\n<p>To reset a <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to its initial state, call the <xref href=\"System.Collections.ArrayList.Clear\" data-throw-if-not-resolved=\"false\"></xref> method before calling <xref href=\"System.Collections.ArrayList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>. Trimming an empty <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to trim the unused portions of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> and how to clear the values of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic ArrayList.Clear Example#1"
  syntax:
    content: public virtual void TrimToSize()
    content.vb: Public Overridable Sub TrimToSize
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.ArrayList.Clear
    commentId: M:System.Collections.ArrayList.Clear
  - type: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  - type: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
