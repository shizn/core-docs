items:
- uid: System.Runtime.CompilerServices.RuntimeHelpers
  commentId: T:System.Runtime.CompilerServices.RuntimeHelpers
  id: RuntimeHelpers
  parent: System.Runtime.CompilerServices
  children:
  - System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack
  - System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)
  - System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)
  - System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)
  - System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData
  - System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)
  langs:
  - csharp
  - vb
  name: RuntimeHelpers
  fullName: System.Runtime.CompilerServices.RuntimeHelpers
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeHelpers
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2966
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited.</p>\n"
  example:
  - "\n<p>The following example shows how to reliably set handles by using the <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions\" data-throw-if-not-resolved=\"false\"></xref> method. To reliably set a handle to a specified pre-existing handle, you must ensure that the allocation of the native handle and the subsequent recording of that handle within a <xref href=\"System.Runtime.InteropServices.SafeHandle\" data-throw-if-not-resolved=\"false\"></xref> object is atomic. Any failure between these operations (such as a thread abort or out-of-memory exception) will result in the native handle being leaked.  You can use the <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions\" data-throw-if-not-resolved=\"false\"></xref> method to make sure that the handle is not leaked.</p>SafeHandle-RuntimeHelpers.PrepareConstrainedRegions#1"
  syntax:
    content: public class RuntimeHelpers
    content.vb: Public Class RuntimeHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData
  commentId: P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData
  id: OffsetToStringData
  parent: System.Runtime.CompilerServices.RuntimeHelpers
  langs:
  - csharp
  - vb
  name: OffsetToStringData
  fullName: System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OffsetToStringData
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2968
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Gets the offset, in bytes, to the data in the given string.</p>\n"
  remarks: "\n<p>Compilers use this property for unsafe, but efficient, pointer operations on the characters in a managed string. Compilers should pin the string against movement by the garbage collector before use. Note that common language runtime strings are immutable; that is, their contents can be read but not changed.</p>\n"
  syntax:
    content: public static int OffsetToStringData { get; }
    content.vb: Public Shared ReadOnly Property OffsetToStringData As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The byte offset, from the start of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object to the first character in the string.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack
  commentId: M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack
  id: EnsureSufficientExecutionStack
  parent: System.Runtime.CompilerServices.RuntimeHelpers
  langs:
  - csharp
  - vb
  name: EnsureSufficientExecutionStack()
  fullName: System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnsureSufficientExecutionStack
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2969
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Ensures that the remaining stack space is large enough to execute the average .NET Framework function.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack\" data-throw-if-not-resolved=\"false\"></xref> provides information about an artificially limited stack that preserves enough space for an exception to be raised and recovery action to be taken. The artificial stack limit is chosen by the common language runtime to ensure that enough space remains to throw an exception safely.</p>\n<p>This method is useful in situations where stack overflow might occur as a result of unbounded recursion. It is intended for use in compiler services scenarios, although it can also be used safely in other development scenarios.</p>\n<p>If the stack space is sufficient, the exception is not thrown, and most .NET Framework types and members can still be called.</p>\n<p>This method is not part of the constrained execution region (CER) support, and should not be confused with the <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public static void EnsureSufficientExecutionStack()
    content.vb: Public Shared Sub EnsureSufficientExecutionStack
  exceptions:
  - type: System.InsufficientExecutionStackException
    commentId: T:System.InsufficientExecutionStackException
    description: "\n<p>The available stack space is insufficient to execute the average .NET Framework function.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)
  commentId: M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)
  id: GetHashCode(System.Object)
  parent: System.Runtime.CompilerServices.RuntimeHelpers
  langs:
  - csharp
  - vb
  name: GetHashCode(Object)
  fullName: System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2970
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Serves as a hash function for a particular object, and is suitable for use in algorithms and data structures that use hash codes, such as a hash table.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method always calls the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method non-virtually, even if the object's type has overridden the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method. Therefore, using <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> might differ from calling <strong>GetHashCode</strong> directly on the object with the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Although the <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns identical hash codes for identical object references, you should not use this method to test for object identity, because this hash code does not uniquely identify an object reference. To test for object identify (that is, to test that two objects reference the same object in memory), call the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. Nor should you use <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to test whether two strings represent equal object references, because the string is interned. To test for string interning, call the <xref href=\"System.String.IsInterned(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows:</p>\n<ul><li>\n<p>\n<xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> returns a hash code that is based on the object's definition of equality. For example, two strings with identical contents will return the same value for <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> returns a hash code that indicates object identity. That is, two string variables whose contents are identical and that represent a string that is interned (see the String Interning section) or that represent a single string in memory return identical hash codes. </p>\n</li></ul>\n<p>Note that <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> always returns identical hash codes for equal object references. However, the reverse is not true: equal hash codes do not indicate equal object references. A particular hash code value is not unique to a particular object reference; different object references can generate identical hash codes. </p>\n<p>This method is used by compilers.</p>\n"
  example:
  - >-
    <p>The following example demonstrates the difference between the <xref href="System.Object.GetHashCode" data-throw-if-not-resolved="false"></xref> and <xref href="System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" data-throw-if-not-resolved="false"></xref> methods. The output from the example illustrates the following: </p>

    <ul>

    <li>

    <p>Both sets of hash codes for the first set of strings passed to the <code>ShowHashCodes</code> method are different, because the strings are completely different.</p>

    </li>

    <li>

    <p>

    <xref href="System.Object.GetHashCode" data-throw-if-not-resolved="false"></xref> generates the same hash code for the second set of strings passed to the <code>ShowHashCodes</code> method, because the strings are equal. However, the <xref href="System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" data-throw-if-not-resolved="false"></xref> method does not. The first string is defined by using a string literal and so is interned. Although the value of the second string is the same, it is not interned, because it is returned by a call to the <xref href="System.String.Format(System.String,System.Object)" data-throw-if-not-resolved="false"></xref> method.  </p>

    </li>

    <li>

    <p>In the case of the third string, the hash codes produced by <xref href="System.Object.GetHashCode" data-throw-if-not-resolved="false"></xref> for both strings are identical, as are the hash codes produced by <xref href="System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" data-throw-if-not-resolved="false"></xref>. This is because the compiler has treated the value assigned to both strings as a single string literal, and so the string variables refer to the same interned string. </p>

    </li>

    </ul>System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode#1
  syntax:
    content: public static int GetHashCode(object o)
    content.vb: Public Shared Function GetHashCode(o As Object) As Integer
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>An object to retrieve the hash code for. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A hash code for the object identified by the <em>o</em> parameter.</p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)
  commentId: M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)
  id: GetObjectValue(System.Object)
  parent: System.Runtime.CompilerServices.RuntimeHelpers
  langs:
  - csharp
  - vb
  name: GetObjectValue(Object)
  fullName: System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetObjectValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2971
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Boxes a value type.</p>\n"
  remarks: "\n<p>Boxing a value type creates an object and performs a shallow copy of the fields of the specified value type into the new object.</p>\n<p>This method allows a value class to be manipulated as an object while it retains the aliasing behavior of a value class. </p>\n<p>The return value depends on whether the value class is mutable or immutable:</p>\n<ul><li>\n<p>If the value being assigned is a mutable value class, the method returns a shallow copy of the class, because value classes have copy semantics.</p>\n</li><li>\n<p>If the value being assigned is an immutable value class, the method returns the object itself, instead of a copy of the class.</p>\n</li></ul>\n<p>Compilers of dynamically typed languages can use this method to make sure that boxed value types work identically to unboxed value types. That is, boxed value types get cloned when you pass them around, and they are always passed by value. The compiler can call <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to assign a value type to an object or to pass a value type as a parameter of a type object.</p>\n<p>This method is used by compilers.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to box a value class by using the <xref href=\"System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Runtime.CompilerServices.RuntimeHelpers.GetObjectValue#1"
  syntax:
    content: public static object GetObjectValue(object obj)
    content.vb: Public Shared Function GetObjectValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The value type to be boxed. </p>\n"
    return:
      type: System.Object
      description: "\n<p>A boxed copy of <em>obj</em> if it is a value class; otherwise, <em>obj</em> itself.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)
  commentId: M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)
  id: InitializeArray(System.Array,System.RuntimeFieldHandle)
  parent: System.Runtime.CompilerServices.RuntimeHelpers
  langs:
  - csharp
  - vb
  name: InitializeArray(Array, RuntimeFieldHandle)
  fullName: System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array, System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InitializeArray
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2972
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Provides a fast way to initialize an array from data that is stored in a module.</p>\n"
  remarks: "\n<p>This method is used by compilers.</p>\n"
  syntax:
    content: public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle)
    content.vb: Public Shared Sub InitializeArray(array As Array, fldHandle As RuntimeFieldHandle)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The array to be initialized. </p>\n"
    - id: fldHandle
      type: System.RuntimeFieldHandle
      description: "\n<p>A field handle that specifies the location of the data used to initialize the array. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)
  commentId: M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)
  id: RunClassConstructor(System.RuntimeTypeHandle)
  parent: System.Runtime.CompilerServices.RuntimeHelpers
  langs:
  - csharp
  - vb
  name: RunClassConstructor(RuntimeTypeHandle)
  fullName: System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunClassConstructor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2973
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Runs a specified class constructor method.</p>\n"
  remarks: "\n<p>This method is used by compilers.</p>\n"
  syntax:
    content: public static void RunClassConstructor(RuntimeTypeHandle type)
    content.vb: Public Shared Sub RunClassConstructor(type As RuntimeTypeHandle)
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "\n<p>A type handle that specifies the class constructor method to run. </p>\n"
  exceptions:
  - type: System.TypeInitializationException
    commentId: T:System.TypeInitializationException
    description: "\n<p>The class initializer throws an exception. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.InsufficientExecutionStackException
  isExternal: false
  name: InsufficientExecutionStackException
  fullName: System.InsufficientExecutionStackException
- uid: System.TypeInitializationException
  isExternal: false
  name: TypeInitializationException
  fullName: System.TypeInitializationException
