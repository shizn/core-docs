items:
- uid: System.Action`5
  commentId: T:System.Action`5
  id: Action`5
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Action<T1, T2, T3, T4, T5>
  fullName: System.Action<T1, T2, T3, T4, T5>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Action
    path: src/mscorlib/src/System/Action.cs
    startLine: 78
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has five parameters and does not return a value.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Action`5\" data-throw-if-not-resolved=\"false\"></xref> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have five parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return <strong>void</strong>. In Visual Basic, it must be defined by the <strong>Sub</strong>â€¦<strong>End Sub</strong> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</p>\n<p>To reference a method that has five parameters and returns a value, use the generic <xref href=\"System.Func`6\" data-throw-if-not-resolved=\"false\"></xref> delegate instead.</p>\n<p>You can also use the <xref href=\"System.Action`5\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods and lambda expressions.</p>\n"
  example:
  - 
  syntax:
    content: public delegate void Action<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    content.vb: Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5)
    parameters:
    - id: arg1
      type: '{T1}'
    - id: arg2
      type: '{T2}'
    - id: arg3
      type: '{T3}'
    - id: arg4
      type: '{T4}'
    - id: arg5
      type: '{T5}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
  seealso:
  - type: System.Func`6
    commentId: T:System.Func`6
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5)
  name.vb: Action(Of T1, T2, T3, T4, T5)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: '{T2}'
  isExternal: false
  name: T2
  fullName: T2
- uid: '{T3}'
  isExternal: false
  name: T3
  fullName: T3
- uid: '{T4}'
  isExternal: false
  name: T4
  fullName: T4
- uid: '{T5}'
  isExternal: false
  name: T5
  fullName: T5
