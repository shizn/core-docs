items:
- uid: Microsoft.Win32.RegistryKey
  commentId: T:Microsoft.Win32.RegistryKey
  id: RegistryKey
  parent: Microsoft.Win32
  children:
  - Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  - Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.Dispose
  - Microsoft.Win32.RegistryKey.Flush
  - Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  - Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  - Microsoft.Win32.RegistryKey.GetSubKeyNames
  - Microsoft.Win32.RegistryKey.GetValue(System.String)
  - Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)
  - Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  - Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  - Microsoft.Win32.RegistryKey.GetValueNames
  - Microsoft.Win32.RegistryKey.Handle
  - Microsoft.Win32.RegistryKey.Name
  - Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  - Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  - Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  - Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  - Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.RegistryKey.SubKeyCount
  - Microsoft.Win32.RegistryKey.ToString
  - Microsoft.Win32.RegistryKey.ValueCount
  - Microsoft.Win32.RegistryKey.View
  langs:
  - csharp
  - vb
  name: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
  type: Class
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegistryKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 84
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Represents a key-level node in the Windows registry. This class is a registry encapsulation.</p>\n"
  remarks: "\n<p>To get an instance of <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>, use one of the static members of the <xref href=\"Microsoft.Win32.Registry\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The registry acts as a central repository of information for the operating system and the applications on a computer. The registry is organized in a hierarchical format, based on a logical ordering of the elements stored within it (please see <xref href=\"Microsoft.Win32.Registry\" data-throw-if-not-resolved=\"false\"></xref> for the base-level items in this hierarchy). When storing information in the registry, select the appropriate location based on the type of information being stored. Be sure to avoid destroying information created by other applications, because this can cause those applications to exhibit unexpected behavior, and can also have an adverse effect upon your own application.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>Registry keys are the base unit of organization in the registry, and can be compared to folders in File Explorer. A particular key can have subkeys, just as a folder can have subfolders. Each key can be deleted, as long as the user has the appropriate permissions to do so, and the key is not a base key or at the level directly under the base keys. Each key can also have multiple values associated with it (a value can be compared to a file), which are used to store the information — for example, information about an application installed on the computer. Each value holds one particular piece of information, which can be retrieved or updated when required. For instance, you can create a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> for your company, under the key HKEY_LOCAL_MACHINE\\Software, and then a subkey for each application that your company creates. Each subkey holds the information specific to that application, such as color settings, screen location and size, or recognized file extensions.</p>\n<p>Note that information stored in the registry is available to other applications and users, and therefore should not be used to store security data or critical application information.</p>\n<p>Do not expose <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.</p>\n<p>Starting in the .NET Framework 4, the length of a registry key is no longer limited to 255 characters.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a subkey under HKEY_CURRENT_USER, manipulate its contents, and then delete the subkey.</p>Microsoft.Win32.RegistryKey2#1"
  syntax:
    content: 'public sealed class RegistryKey : IDisposable'
    content.vb: >-
      Public NotInheritable Class RegistryKey
          Inherits IDisposable
  seealso:
  - type: Microsoft.Win32.Registry
    commentId: T:Microsoft.Win32.Registry
  - type: Microsoft.Win32.RegistryHive
    commentId: T:Microsoft.Win32.RegistryHive
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Win32.RegistryKey.Handle
  commentId: P:Microsoft.Win32.RegistryKey.Handle
  id: Handle
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Handle
  fullName: Microsoft.Win32.RegistryKey.Handle
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Handle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 718
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Gets a <xref href=\"Microsoft.Win32.SafeHandles.SafeRegistryHandle\" data-throw-if-not-resolved=\"false\"></xref> object that represents the registry key that the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object encapsulates.</p>\n"
  example:
  - 
  syntax:
    content: public SafeRegistryHandle Handle { get; }
    content.vb: Public ReadOnly Property Handle As SafeRegistryHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The registry key is closed. Closed keys cannot be accessed.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, such as deletion of the current key.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read the key.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Win32.RegistryKey.Name
  commentId: P:Microsoft.Win32.RegistryKey.Name
  id: Name
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Name
  fullName: Microsoft.Win32.RegistryKey.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 1287
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the name of the key.</p>\n"
  remarks: "\n<p>The name of the key includes the absolute path of this key in the registry, always starting at a base key, for example, HKEY_LOCAL_MACHINE.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#4"
  syntax:
    content: public String Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: String
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.ToString
    commentId: M:Microsoft.Win32.RegistryKey.ToString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Win32.RegistryKey.SubKeyCount
  commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  id: SubKeyCount
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: SubKeyCount
  fullName: Microsoft.Win32.RegistryKey.SubKeyCount
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubKeyCount
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 699
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the count of subkeys of the current key.</p>\n"
  remarks: "\n<p>This property does not recursively count names. It only returns the count of names on the base level from which it was called.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#2"
  syntax:
    content: public int SubKeyCount { get; }
    content.vb: Public ReadOnly Property SubKeyCount As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have read permission for the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, for example the current key has been deleted.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Win32.RegistryKey.ValueCount
  commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  id: ValueCount
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: ValueCount
  fullName: Microsoft.Win32.RegistryKey.ValueCount
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueCount
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 871
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the count of values in the key.</p>\n"
  remarks: "\n<p>Each registry key has a default value that is not associated with any name. This unnamed value can be set by using the <see cref=\"Overload:Microsoft.Win32.RegistryKey.SetValue\"></see> method and specifying either <strong>null</strong> or the empty string (\"\") for <em>name</em>. If the default value has never been set, it does not contribute to the total count returned by the <xref href=\"Microsoft.Win32.RegistryKey.ValueCount\" data-throw-if-not-resolved=\"false\"></xref> property; once it has been set, however, it is always counted.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#2"
  syntax:
    content: public int ValueCount { get; }
    content.vb: Public ReadOnly Property ValueCount As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have read permission for the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, for example the current key has been deleted.</p>\n"
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Win32.RegistryKey.View
  commentId: P:Microsoft.Win32.RegistryKey.View
  id: View
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: View
  fullName: Microsoft.Win32.RegistryKey.View
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: View
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 708
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Gets the view that was used to create the registry key. </p>\n"
  remarks: "\n<p>On the 64-bit versions of Windows, portions of the registry are stored separately for 32-bit and 64-bit applications. There is a 32-bit view for 32-bit applications and a 64-bit view for 64-bit applications.</p>\n<p>Do not assume that the view always corresponds to the actual view of the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public RegistryView View { get; }
    content.vb: Public ReadOnly Property View As RegistryView
    parameters: []
    return:
      type: Microsoft.Win32.RegistryView
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  id: CreateSubKey(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: CreateSubKey(String)
  fullName: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSubKey
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 39
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a new subkey or opens an existing subkey for write access.  </p>\n"
  remarks: "\n<p>In order to perform this action, the user must have permission at this level and below in the registry hierarchy.</p>\n<p>Do not expose <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a subkey under HKEY_CURRENT_USER, manipulate its contents, and then delete the subkey.</p>Microsoft.Win32.RegistryKey2#1"
  syntax:
    content: public RegistryKey CreateSubKey(string subkey)
    content.vb: Public Function CreateSubKey(subkey As String) As RegistryKey
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The newly created subkey, or <strong>null</strong> if the operation failed. If a zero-length string is specified for <em>subkey</em>, the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or open the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> on which this method is being invoked is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> cannot be written to; for example, it was not opened as a writable key , or the user does not have the necessary access rights. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The nesting level exceeds 510.</p>\n<p>-or-</p>\n<p>A system error occurred, such as deletion of the key, or an attempt to create a key in the <xref href=\"Microsoft.Win32.Registry.LocalMachine\" data-throw-if-not-resolved=\"false\"></xref> root.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
    commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)
  id: CreateSubKey(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: CreateSubKey(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.CreateSubKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSubKey
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 40
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a new subkey or opens an existing subkey with the specified access. </p>\n<p>Available starting in .NET Framework 4.6</p>\n"
  remarks: "\n<p>In order to perform this action, the user must have permission at this level and below in the registry hierarchy.</p>\n<p>Do not expose <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.</p>\n<p>In order to use the <xref href=\"Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method, you must have an instance of the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class. To get an instance of <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>, use one of the static members of the <xref href=\"Microsoft.Win32.Registry\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public RegistryKey CreateSubKey(string subkey, bool writable)
    content.vb: Public Function CreateSubKey(subkey As String, writable As Boolean) As RegistryKey
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to indicate the new subkey is writable; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The newly created subkey, or <strong>null</strong> if the operation failed. If a zero-length string is specified for <em>subkey</em>, the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or open the registry key. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The nesting level exceeds 510.</p>\n<p>-or-</p>\n<p>A system error occurred, such as deletion of the key, or an attempt to create a key in the <xref href=\"Microsoft.Win32.Registry.LocalMachine\" data-throw-if-not-resolved=\"false\"></xref> root.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  id: CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: CreateSubKey(String, Boolean, RegistryOptions)
  fullName: Microsoft.Win32.RegistryKey.CreateSubKey(System.String, System.Boolean, Microsoft.Win32.RegistryOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSubKey
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 41
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a new subkey or opens an existing subkey with the specified access. </p>\n<p>Available starting in .NET Framework 4.6</p>\n"
  remarks: "\n<p>In order to perform this action, the user must have permission at this level and below in the registry hierarchy.</p>\n<p>Do not expose <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.</p>\n<p>In order to use the <xref href=\"Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)\" data-throw-if-not-resolved=\"false\"></xref> method, you must have an instance of the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class. To get an instance of <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>, use one of the static members of the <xref href=\"Microsoft.Win32.Registry\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public RegistryKey CreateSubKey(string subkey, bool writable, RegistryOptions options)
    content.vb: Public Function CreateSubKey(subkey As String, writable As Boolean, options As RegistryOptions) As RegistryKey
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to indicate the new subkey is writable; otherwise, <strong>false</strong>.</p>\n"
    - id: options
      type: Microsoft.Win32.RegistryOptions
      description: "\n<p>The registry option to use.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The newly created subkey, or <strong>null</strong> if the operation failed. If a zero-length string is specified for <em>subkey</em>, the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> does not specify a valid Option</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or open the registry key. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The nesting level exceeds 510.</p>\n<p>-or-</p>\n<p>A system error occurred, such as deletion of the key, or an attempt to create a key in the <xref href=\"Microsoft.Win32.Registry.LocalMachine\" data-throw-if-not-resolved=\"false\"></xref> root.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  id: DeleteSubKey(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKey(String)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKey
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 42
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified subkey. </p>\n"
  remarks: "\n<p>To delete child subkeys, use <xref href=\"Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use caution when deleting registry keys.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use <xref href=\"Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>Microsoft.Win32.RegistryKey2#5"
  syntax:
    content: public void DeleteSubKey(string subkey)
    content.vb: Public Sub DeleteSubKey(subkey As String)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name of the subkey to delete. This string is not case-sensitive.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>subkey</em> has child subkeys </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>subkey</em> parameter does not specify a valid registry key </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong></p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)
  id: DeleteSubKey(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKey(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKey
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 43
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified subkey, and specifies whether an exception is raised if the subkey is not found. </p>\n"
  remarks: "\n<p>To delete child subkeys, use <xref href=\"Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use caution when deleting registry keys.</p>\n"
  syntax:
    content: public void DeleteSubKey(string subkey, bool throwOnMissingSubKey)
    content.vb: Public Sub DeleteSubKey(subkey As String, throwOnMissingSubKey As Boolean)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name of the subkey to delete. This string is not case-sensitive.</p>\n"
    - id: throwOnMissingSubKey
      type: System.Boolean
      description: "\n<p>Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <strong>true</strong> and the specified subkey does not exist, an exception is raised. If this argument is <strong>false</strong> and the specified subkey does not exist, no action is taken. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>subkey</em> has child subkeys. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>subkey</em> does not specify a valid registry key, and <em>throwOnMissingSubKey</em> is <strong>true</strong>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  id: DeleteSubKeyTree(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKeyTree(String)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKeyTree
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 44
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes a subkey and any child subkeys recursively. </p>\n"
  remarks: "\n<p>You must have appropriate permissions to delete the subkey and its tree.</p>\n<p>Deleting a particular key will remove all entries below the key in the tree. No warning will be provided. If you want to delete a subkey only when it has no child subkeys, use the <xref href=\"Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#4"
  syntax:
    content: public void DeleteSubKeyTree(string subkey)
    content.vb: Public Sub DeleteSubKeyTree(subkey As String)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The subkey to delete. This string is not case-sensitive.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Deletion of a root hive is attempted.</p>\n<p>-or-</p>\n<p>\n<em>subkey</em> does not specify a valid registry subkey. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error has occurred.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)
  id: DeleteSubKeyTree(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKeyTree(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKeyTree
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 45
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified subkey and any child subkeys recursively, and specifies whether an exception is raised if the subkey is not found. </p>\n"
  example:
  - 
  syntax:
    content: public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey)
    content.vb: Public Sub DeleteSubKeyTree(subkey As String, throwOnMissingSubKey As Boolean)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name of the subkey to delete. This string is not case-sensitive.</p>\n"
    - id: throwOnMissingSubKey
      type: System.Boolean
      description: "\n<p>Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <strong>true</strong> and the specified subkey does not exist, an exception is raised. If this argument is <strong>false</strong> and the specified subkey does not exist, no action is taken.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An attempt was made to delete the root hive of the tree.</p>\n<p>-or-</p>\n<p>\n<em>subkey</em> does not specify a valid registry subkey, and <em>throwOnMissingSubKey</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed).</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key.</p>\n"
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  id: DeleteValue(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteValue(String)
  fullName: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteValue
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 46
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified value from this key.</p>\n"
  remarks: "\n<p>On Windows 95, Windows 98, Windows 98 Second Edition, and Windows Millennium Edition, specifying an empty string for the <em>name</em> parameter does not delete the default value.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#3"
  syntax:
    content: public void DeleteValue(string name)
    content.vb: Public Sub DeleteValue(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to delete. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid reference to a value. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the value. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is read-only. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
    commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)
  id: DeleteValue(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteValue(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.DeleteValue(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteValue
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 47
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified value from this key, and specifies whether an exception is raised if the value is not found.</p>\n"
  remarks: "\n<p>If <em>throwOnMissingValue</em> is <strong>false</strong>, there is no way to tell if the deletion was successful, without subsequently trying to access the value just deleted. Therefore, use caution when deleting values from the registry in this manner.</p>\n<p>On Windows 95, Windows 98, Windows 98 Second Edition, and Windows Millennium Edition, specifying an empty string for the <em>name</em> parameter does not delete the default value.</p>\n"
  syntax:
    content: public void DeleteValue(string name, bool throwOnMissingValue)
    content.vb: Public Sub DeleteValue(name As String, throwOnMissingValue As Boolean)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to delete. </p>\n"
    - id: throwOnMissingValue
      type: System.Boolean
      description: "\n<p>Indicates whether an exception should be raised if the specified value cannot be found. If this argument is <strong>true</strong> and the specified value does not exist, an exception is raised. If this argument is <strong>false</strong> and the specified value does not exist, no action is taken. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid reference to a value and <em>throwOnMissingValue</em> is <strong>true</strong>. </p>\n<p>-or- </p>\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the value. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is read-only. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
    commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.Dispose
  commentId: M:Microsoft.Win32.RegistryKey.Dispose
  id: Dispose
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: Microsoft.Win32.RegistryKey.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 257
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.Flush
  commentId: M:Microsoft.Win32.RegistryKey.Flush
  id: Flush
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: Microsoft.Win32.RegistryKey.Flush()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 245
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Writes all the attributes of the specified open registry key into the registry.</p>\n"
  remarks: "\n<p>It is not necessary to call <strong>Flush</strong> to write out changes to a key. Registry changes are flushed to disk when the registry uses its lazy flusher. Lazy flushing occurs automatically and regularly after a system-specified time interval. Registry changes are also flushed to disk at system shutdown.</p>\n<p>Unlike <xref href=\"Microsoft.Win32.RegistryKey.Close\" data-throw-if-not-resolved=\"false\"></xref>, the <strong>Flush</strong> function returns only when all the data has been written to the registry. </p>\n<p>The <strong>Flush</strong> function might also write out parts of or all of the other keys. Calling this function excessively can have a negative effect on an application's performance.</p>\n<p>An application should only call <strong>Flush</strong> if it must be absolute certain that registry changes are recorded to disk. In general, <strong>Flush</strong> rarely, if ever, need be used.</p>\n"
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush
  seealso:
  - type: Microsoft.Win32.RegistryKey.Close
    commentId: M:Microsoft.Win32.RegistryKey.Close
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  commentId: M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  id: FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: FromHandle(SafeRegistryHandle)
  fullName: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromHandle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 777
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a registry key from a specified handle.</p>\n"
  syntax:
    content: public static RegistryKey FromHandle(SafeRegistryHandle handle)
    content.vb: Public Shared Function FromHandle(handle As SafeRegistryHandle) As RegistryKey
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeRegistryHandle
    return:
      type: Microsoft.Win32.RegistryKey
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>handle</em> is <strong>null</strong>.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to perform this action.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  commentId: M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  id: FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: FromHandle(SafeRegistryHandle, RegistryView)
  fullName: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle, Microsoft.Win32.RegistryView)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromHandle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 783
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a registry key from a specified handle and registry view setting. </p>\n"
  remarks: "\n<p>The <em>view</em> parameter for this method is used in subsequent operations, such as opening subkeys. </p>\n<p>If <em>view</em> is <xref href=\"Microsoft.Win32.RegistryView.Registry64\" data-throw-if-not-resolved=\"false\"></xref> but the machine is running a 32-bit operating system, the returned key will use the <xref href=\"Microsoft.Win32.RegistryView.Registry32\" data-throw-if-not-resolved=\"false\"></xref> view.</p>\n"
  example:
  - 
  syntax:
    content: public static RegistryKey FromHandle(SafeRegistryHandle handle, RegistryView view)
    content.vb: Public Shared Function FromHandle(handle As SafeRegistryHandle, view As RegistryView) As RegistryKey
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeRegistryHandle
    - id: view
      type: Microsoft.Win32.RegistryView
    return:
      type: Microsoft.Win32.RegistryKey
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>view</em> is invalid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>handle</em> is <strong>null</strong>.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to perform this action.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Win32.RegistryKey.GetSubKeyNames
  commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  id: GetSubKeyNames
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetSubKeyNames()
  fullName: Microsoft.Win32.RegistryKey.GetSubKeyNames()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSubKeyNames
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 822
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves an array of strings that contains all the subkey names.</p>\n"
  remarks: "\n<p>This method does not recursively find names. It returns the names on the base level from which it was called.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#2"
  syntax:
    content: public String[] GetSubKeyNames()
    content.vb: Public Function GetSubKeyNames As String()
    return:
      type: String[]
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, for example the current key has been deleted.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.GetValue(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  id: GetValue(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValue(String)
  fullName: Microsoft.Win32.RegistryKey.GetValue(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 55
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the value associated with the specified name. Returns <strong>null</strong> if the name/value pair does not exist in the registry.</p>\n"
  remarks: "\n<p>A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either <strong>null</strong> or the empty string (\"\") for <em>name</em>.</p>\n<p>When the <xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method retrieves expandable string values (<xref href=\"Microsoft.Win32.RegistryValueKind.ExpandString\" data-throw-if-not-resolved=\"false\"></xref>), it expands environment strings using data from the local environment. To retrieve expandable string values from the registry on a remote computer, use the <xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)\" data-throw-if-not-resolved=\"false\"></xref> method overload to specify that you do not want environment strings expanded.</p>\n<p>If a value containing expandable references to environment variables has been stored as a string (<xref href=\"Microsoft.Win32.RegistryValueKind.String\" data-throw-if-not-resolved=\"false\"></xref>), rather than as an expandable string (<xref href=\"Microsoft.Win32.RegistryValueKind.ExpandString\" data-throw-if-not-resolved=\"false\"></xref>), <xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> does not expand it. You can expand such a string after it has been retrieved by calling the <xref href=\"System.Environment.ExpandEnvironmentVariables(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The recommended way to retrieve data from the <xref href=\"Microsoft.Win32.Registry.PerformanceData\" data-throw-if-not-resolved=\"false\"></xref> key is to use the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class rather than the <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetValue\"></see> method.</p>\n<p>\n<xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> does not support reading values of type REG_NONE or REG_LINK.  In both cases, the default value (<strong>null</strong>) is returned instead of the actual value.</p>\n"
  example:
  - "\n<p>The following code example creates a test key and adds values of different data types to the key. The example then reads the name/value pairs and displays them to the console, using the <xref href=\"Microsoft.Win32.RegistryKey.GetValueKind(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the corresponding registry data types.</p>Microsoft.Win32.RegistryValueKind#1"
  syntax:
    content: public object GetValue(string name)
    content.vb: Public Function GetValue(name As String) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. This string is not case-sensitive.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with <em>name</em>, or <strong>null</strong> if <em>name</em> is not found.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value has been marked for deletion. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)
  commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)
  id: GetValue(System.String,System.Object)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValue(String, Object)
  fullName: Microsoft.Win32.RegistryKey.GetValue(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 56
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the value associated with the specified name. If the name is not found, returns the default value that you provide.</p>\n"
  remarks: "\n<p>Use this overload of <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetValue\"></see> to handle the case where a name does not exist yet — for example, the first time your application is run. Whenever you call this overload, use the <em>defaultValue</em> parameter to specify the value to return if <em>name</em> does not exist.</p>\n<p>A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either <strong>null</strong> or the empty string (\"\") for <em>name</em>.</p>\n<p>When the <xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method retrieves expandable string values (<xref href=\"Microsoft.Win32.RegistryValueKind.ExpandString\" data-throw-if-not-resolved=\"false\"></xref>), it expands environment strings using data from the local environment. To retrieve expandable string values from the registry on a remote computer, use the <xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)\" data-throw-if-not-resolved=\"false\"></xref> overload to specify that you do not want environment strings expanded.</p>\n<p>If a value containing expandable references to environment variables has been stored as a string (<xref href=\"Microsoft.Win32.RegistryValueKind.String\" data-throw-if-not-resolved=\"false\"></xref>), rather than as an expandable string (<xref href=\"Microsoft.Win32.RegistryValueKind.ExpandString\" data-throw-if-not-resolved=\"false\"></xref>), the <xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method does not expand it. You can expand such a string after it has been retrieved by calling the <xref href=\"System.Environment.ExpandEnvironmentVariables(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The recommended way to retrieve data from the <xref href=\"Microsoft.Win32.Registry.PerformanceData\" data-throw-if-not-resolved=\"false\"></xref> key is to use the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class rather than the <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetValue\"></see> method.</p>\n<p>\n<xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> does not support reading values of type REG_NONE or REG_LINK.  In both cases, the default value (<strong>null</strong>) is returned instead of the actual value.</p>\n"
  example:
  - "\n<p>The following code example creates a test key with a value and retrieves that value. The example then attempts to retrieve a nonexistent value from the key; in this case the <xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns the specified default value.</p>Classic RegistryKey.GetValue Example#1"
  syntax:
    content: public object GetValue(string name, object defaultValue)
    content.vb: Public Function GetValue(name As String, defaultValue As Object) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. This string is not case-sensitive.</p>\n"
    - id: defaultValue
      type: System.Object
      description: "\n<p>The value to return if <em>name</em> does not exist. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with <em>name</em>, with any embedded environment variables left unexpanded, or <em>defaultValue</em> if <em>name</em> is not found.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value has been marked for deletion. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  id: GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValue(String, Object, RegistryValueOptions)
  fullName: Microsoft.Win32.RegistryKey.GetValue(System.String, System.Object, Microsoft.Win32.RegistryValueOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 57
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the value associated with the specified name and retrieval options. If the name is not found, returns the default value that you provide.</p>\n"
  remarks: "\n<p>Use this overload to specify special processing of the retrieved value. For example, you can specify <xref href=\"Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames\" data-throw-if-not-resolved=\"false\"></xref> when retrieving a registry value of type <xref href=\"Microsoft.Win32.RegistryValueKind.ExpandString\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the string without expanding embedded environment variables.</p>\n<p>Use the <em>defaultValue</em> parameter to specify the value to return if <em>name</em> does not exist.</p>\n<p>A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either <strong>null</strong> or the empty string (\"\") for <em>name</em>.</p>\n<p>\n<xref href=\"Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)\" data-throw-if-not-resolved=\"false\"></xref> does not support reading values of type REG_NONE or REG_LINK.  In both cases, the default value (<strong>null</strong>) is returned instead of the actual value.</p>\n"
  example:
  - "\n<p>The following code sample creates a test key, adds a value with an embedded environment variable, and retrieves the value in both expanded and unexpanded forms.</p>RegistryValueOptions#1"
  syntax:
    content: public object GetValue(string name, object defaultValue, RegistryValueOptions options)
    content.vb: Public Function GetValue(name As String, defaultValue As Object, options As RegistryValueOptions) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. This string is not case-sensitive.</p>\n"
    - id: defaultValue
      type: System.Object
      description: "\n<p>The value to return if <em>name</em> does not exist. </p>\n"
    - id: options
      type: Microsoft.Win32.RegistryValueOptions
      description: "\n<p>One of the enumeration values that specifies optional processing of the retrieved value.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with <em>name</em>, processed according to the specified <em>options</em>, or <em>defaultValue</em> if <em>name</em> is not found.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value has been marked for deletion. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not a valid <xref href=\"Microsoft.Win32.RegistryValueOptions\" data-throw-if-not-resolved=\"false\"></xref> value; for example, an invalid value is cast to <xref href=\"Microsoft.Win32.RegistryValueOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryValueOptions
    commentId: T:Microsoft.Win32.RegistryValueOptions
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  id: GetValueKind(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValueKind(String)
  fullName: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueKind
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 1241
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the registry data type of the value associated with the specified name.</p>\n"
  remarks: "\n<p>A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve the registry data type of this unnamed value, specify either <strong>null</strong> or the empty string (\"\") for <em>name</em>.</p>\n<p>For a description of supported registry data types, please see the <xref href=\"Microsoft.Win32.RegistryValueKind\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  example:
  - "\n<p>The following code example creates a test key and adds values of different data types to the key. The example then reads the name/value pairs and displays them to the console, using the <xref href=\"Microsoft.Win32.RegistryKey.GetValueKind(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the corresponding registry data types.</p>Microsoft.Win32.RegistryValueKind#1"
  syntax:
    content: public RegistryValueKind GetValueKind(string name)
    content.vb: Public Function GetValueKind(name As String) As RegistryValueKind
    parameters:
    - id: name
      type: System.String
    return:
      type: Microsoft.Win32.RegistryValueKind
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The subkey that contains the specified value does not exist.</p>\n<p>-or-</p>\n<p>The name/value pair specified by <em>name</em> does not exist.</p>\n<p>This exception is not thrown on Windows 95, Windows 98, or Windows Millennium Edition.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
    commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  - type: Microsoft.Win32.RegistryValueKind
    commentId: T:Microsoft.Win32.RegistryValueKind
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.GetValueNames
  commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  id: GetValueNames
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValueNames()
  fullName: Microsoft.Win32.RegistryKey.GetValueNames()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueNames
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 908
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves an array of strings that contains all the value names associated with this key.</p>\n"
  remarks: "\n<p>If no value names for the key are found, an empty array is returned.</p>\n<p>A registry key can have a default value — that is, a name/value pair in which the name is the empty string (\"\"). If a default value has been set for a registry key, the array returned by the <xref href=\"Microsoft.Win32.RegistryKey.GetValueNames\" data-throw-if-not-resolved=\"false\"></xref> method includes the empty string.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#2"
  syntax:
    content: public String[] GetValueNames()
    content.vb: Public Function GetValueNames As String()
    return:
      type: String[]
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>  being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred; for example, the current key has been deleted.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  commentId: M:Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  id: OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenBaseKey(RegistryHive, RegistryView)
  fullName: Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive, Microsoft.Win32.RegistryView)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenBaseKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 548
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Opens a new <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that represents the requested key on the local machine with the specified view.</p>\n"
  example:
  - 
  syntax:
    content: public static RegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view)
    content.vb: Public Shared Function OpenBaseKey(hKey As RegistryHive, view As RegistryView) As RegistryKey
    parameters:
    - id: hKey
      type: Microsoft.Win32.RegistryHive
    - id: view
      type: Microsoft.Win32.RegistryView
    return:
      type: Microsoft.Win32.RegistryKey
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hKey</em> or <em>view</em> is invalid.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to perform this action.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  id: OpenSubKey(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenSubKey(String)
  fullName: Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenSubKey
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 61
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a subkey as read-only.</p>\n"
  remarks: "\n<p>You must open a key before it can be manipulated with other methods and properties. To modify a key, you must open it with an overload of the <see cref=\"Overload:Microsoft.Win32.RegistryKey.OpenSubKey\"></see> method that allows you to specify write access, such as the <xref href=\"Microsoft.Win32.RegistryKey.OpenSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)\" data-throw-if-not-resolved=\"false\"></xref> overload or the <xref href=\"Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>If the specified subkey cannot be found, then <strong>null</strong> is returned.</p>\n<p>In order to use the <xref href=\"Microsoft.Win32.RegistryKey.OpenSubKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, you must have an instance of <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>. To get an instance of <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>, use the one of the static members of the <xref href=\"Microsoft.Win32.Registry\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example creates a test key and uses the <see cref=\"Overload:Microsoft.Win32.RegistryKey.OpenSubKey\"></see> method to open it, demonstrating both overloads of the method.</p>RegistryKey.OpenSubKey#1"
  syntax:
    content: public RegistryKey OpenSubKey(string name)
    content.vb: Public Function OpenSubKey(name As String) As RegistryKey
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name or path of the subkey to open as read-only. </p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The subkey requested, or <strong>null</strong> if the operation failed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong></p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read the registry key. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  - type: Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
    commentId: M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  - type: Microsoft.Win32.Registry
    commentId: T:Microsoft.Win32.Registry
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  id: OpenSubKey(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenSubKey(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.OpenSubKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 618
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a specified subkey, and specifies whether write access is to be applied to the key. </p>\n"
  remarks: "\n<p>If the requested key does not exist, this method returns <strong>null</strong> instead of throwing an exception.</p>\n<p>If <em>writable</em> is <strong>true</strong>, the key will be opened for reading and writing, otherwise, the key will be opened as read-only.</p>\n<p>In order to use the <xref href=\"Microsoft.Win32.RegistryKey.OpenSubKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, you must have an instance of the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> method. To get an instance of <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>, use one of the static members of the <xref href=\"Microsoft.Win32.Registry\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example creates a test key and uses the <see cref=\"Overload:Microsoft.Win32.RegistryKey.OpenSubKey\"></see> method to open it, demonstrating both overloads of the method.</p>RegistryKey.OpenSubKey#1"
  syntax:
    content: public RegistryKey OpenSubKey(string name, bool writable)
    content.vb: Public Function OpenSubKey(name As String, writable As Boolean) As RegistryKey
    parameters:
    - id: name
      type: System.String
    - id: writable
      type: System.Boolean
    return:
      type: Microsoft.Win32.RegistryKey
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to access the registry key in the specified mode. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  - type: Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
    commentId: M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  - type: Microsoft.Win32.Registry
    commentId: T:Microsoft.Win32.Registry
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  id: OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenSubKey(String, RegistryRights)
  fullName: Microsoft.Win32.RegistryKey.OpenSubKey(System.String, System.Security.AccessControl.RegistryRights)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenSubKey
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 63
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a subkey with the specified name and .</p>\n<p>Available starting in .NET Framework 4.6</p>\n"
  remarks: "\n<p>You must open a key before it can be manipulated with other methods and properties. To modify a key, you must open it with an overload of the <see cref=\"Overload:Microsoft.Win32.RegistryKey.OpenSubKey\"></see> method that allows you to specify write access.</p>\n"
  syntax:
    content: public RegistryKey OpenSubKey(string name, RegistryRights rights)
    content.vb: Public Function OpenSubKey(name As String, rights As RegistryRights) As RegistryKey
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open.</p>\n"
    - id: rights
      type: System.Security.AccessControl.RegistryRights
      description: "\n<p>The rights for the registry key.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The subkey requested, or <strong>null</strong> if the operation failed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to access the registry key in the specified mode. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  id: SetValue(System.String,System.Object)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: SetValue(String, Object)
  fullName: Microsoft.Win32.RegistryKey.SetValue(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 64
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Sets the specified name/value pair.</p>\n"
  remarks: "\n<p>Because many values can be stored in each key in the registry, you must use the <em>name</em> parameter to specify the particular value you want to set.</p>\n<p>A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either <strong>null</strong> or the empty string (\"\") for <em>name</em>.</p>\n<p>In order to set values in a key, you must open the key with write access. After you have opened a key with write access, you can change any of the name/value pairs in that key.</p>\n<p>If the specified <em>name</em> does not exist in the key, it is created and the associated value is set to <em>value</em>.</p>\n<p>This overload of <see cref=\"Overload:Microsoft.Win32.RegistryKey.SetValue\"></see> stores 64-bit integers as strings (<xref href=\"Microsoft.Win32.RegistryValueKind.String\" data-throw-if-not-resolved=\"false\"></xref>). To store 64-bit numbers as <xref href=\"Microsoft.Win32.RegistryValueKind.QWord\" data-throw-if-not-resolved=\"false\"></xref> values, use the <xref href=\"Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)\" data-throw-if-not-resolved=\"false\"></xref> overload that specifies <xref href=\"Microsoft.Win32.RegistryValueKind\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload of <see cref=\"Overload:Microsoft.Win32.RegistryKey.SetValue\"></see> stores all string values as <xref href=\"Microsoft.Win32.RegistryValueKind.String\" data-throw-if-not-resolved=\"false\"></xref>, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref href=\"Microsoft.Win32.RegistryValueKind.ExpandString\" data-throw-if-not-resolved=\"false\"></xref>), use the <xref href=\"Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)\" data-throw-if-not-resolved=\"false\"></xref> overload that specifies <xref href=\"Microsoft.Win32.RegistryValueKind\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Numeric types other than 32-bit integers are stored as strings by this method overload. Enumeration elements are stored as strings containing the element names.</p>\n<p>Do not expose <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.</p>\n<p>On Windows 98 and Windows Millennium Edition the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.</p>\n"
  example:
  - "\n<p>The following code example shows how the <xref href=\"Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method determines the registry data type when it sets values. The example creates a test key and adds values of different data types to the key. The example then reads the name/value pairs and displays them to the console, using the <xref href=\"Microsoft.Win32.RegistryKey.GetValueKind(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to display the corresponding registry data types.</p>Microsoft.Win32.RegistryKey.SetValue1#1"
  syntax:
    content: public void SetValue(string name, object value)
    content.vb: Public Sub SetValue(name As String, value As Object)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to store. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The data to be stored. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> is an unsupported data type. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is read-only, and cannot be written to; for example, the key has not been opened with write access. </p>\n<p>-or-</p>\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or modify registry keys. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: SetValue(String, Object, RegistryValueKind)
  fullName: Microsoft.Win32.RegistryKey.SetValue(System.String, System.Object, Microsoft.Win32.RegistryValueKind)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 65
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Sets the value of a name/value pair in the registry key, using the specified registry data type.</p>\n"
  remarks: "\n<p>Because many values can be stored in each key in the registry, you must use the <em>name</em> parameter to specify the particular value you want to set.</p>\n<p>A registry key can have one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either <strong>null</strong> or the empty string (\"\") for <em>name</em>.</p>\n<p>In order to set values in a key, you must open the key with write access. After you have opened a key with write access, you can change any of the name/value pairs in that key.</p>\n<p>If the specified <em>name</em> does not exist in the key, it is created, and the associated value is set to <em>value</em>.</p>\n<p>Specifying the registry data type <xref href=\"Microsoft.Win32.RegistryValueKind.Unknown\" data-throw-if-not-resolved=\"false\"></xref> is the same as using the <xref href=\"Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>If the type of the specified <em>value</em> does not match the specified <em>valueKind</em>, and the data cannot be converted, <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. For example, you can store a <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> as a <xref href=\"Microsoft.Win32.RegistryValueKind.DWord\" data-throw-if-not-resolved=\"false\"></xref>, but only if its value is less than the maximum value of a <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. You cannot store a single string value as a <xref href=\"Microsoft.Win32.RegistryValueKind.MultiString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If boxed values are passed for <xref href=\"Microsoft.Win32.RegistryValueKind.DWord\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Win32.RegistryValueKind.QWord\" data-throw-if-not-resolved=\"false\"></xref>, the conversion is done using the invariant culture.</p>\n<p>Do not expose <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> objects in such a way that a malicious program could create thousands of meaningless subkeys or key/value pairs. For example, do not allow callers to enter arbitrary keys or values.</p>\n<p>On Windows 98 and Windows Millennium Edition the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.</p>\n"
  example:
  - "\n<p>The following code example creates a test key and uses the <xref href=\"Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store several values, specifying the registry data type for each value. The example then reads the name/value pairs and displays them to the console, using the <xref href=\"Microsoft.Win32.RegistryKey.GetValueKind(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to display the corresponding registry data types.</p>Microsoft.Win32.RegistryValueKind#1"
  syntax:
    content: public void SetValue(string name, object value, RegistryValueKind valueKind)
    content.vb: Public Sub SetValue(name As String, value As Object, valueKind As RegistryValueKind)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to be stored. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The data to be stored. </p>\n"
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "\n<p>The registry data type to use when storing the data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The type of <em>value</em> did not match the registry data type specified by <em>valueKind</em>, therefore the data could not be converted properly. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is read-only, and cannot be written to; for example, the key has not been opened with write access.</p>\n<p>-or-</p>\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or modify registry keys. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryValueKind
    commentId: T:Microsoft.Win32.RegistryValueKind
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.RegistryKey.ToString
  commentId: M:Microsoft.Win32.RegistryKey.ToString
  id: ToString
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: Microsoft.Win32.RegistryKey.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 1487
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a string representation of this key.</p>\n"
  remarks: "\n<p>The return value includes the registry path of the specified key and the hexadecimal value for the key. The registry path includes the absolute root of the specified key, always starts at one of the base keys for the registry, for example, HKEY_LOCAL_MACHINE.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Microsoft.Win32.RegistryKey2#4"
  syntax:
    content: public override String ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: String
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being accessed is closed (closed keys cannot be accessed). </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.Name
    commentId: P:Microsoft.Win32.RegistryKey.Name
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Win32
  isExternal: false
  name: Microsoft.Win32
  fullName: Microsoft.Win32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeRegistryHandle
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: Microsoft.Win32.RegistryView
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryView
  fullName: Microsoft.Win32.RegistryView
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.RegistryOptions
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryOptions
  fullName: Microsoft.Win32.RegistryOptions
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: Microsoft.Win32.RegistryValueOptions
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueOptions
  fullName: Microsoft.Win32.RegistryValueOptions
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.RegistryHive
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryHive
  fullName: Microsoft.Win32.RegistryHive
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
