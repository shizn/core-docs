items:
- uid: System.IO.FileStream
  commentId: T:System.IO.FileStream
  id: FileStream
  parent: System.IO
  children:
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  - System.IO.FileStream.CanRead
  - System.IO.FileStream.CanSeek
  - System.IO.FileStream.CanWrite
  - System.IO.FileStream.Dispose(System.Boolean)
  - System.IO.FileStream.Finalize
  - System.IO.FileStream.Flush
  - System.IO.FileStream.Flush(System.Boolean)
  - System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.FileStream.IsAsync
  - System.IO.FileStream.Length
  - System.IO.FileStream.Name
  - System.IO.FileStream.Position
  - System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.FileStream.ReadByte
  - System.IO.FileStream.SafeFileHandle
  - System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.FileStream.SetLength(System.Int64)
  - System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.FileStream.WriteByte(System.Byte)
  langs:
  - csharp
  - vb
  name: FileStream
  fullName: System.IO.FileStream
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FileStream
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 374
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Provides a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> for a file, supporting both synchronous and asynchronous read and write operations.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>Use the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output. You can use the <xref href=\"System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.CopyTo(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.FileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> methods to perform synchronous operations, or the <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> methods to perform asynchronous operations. Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> buffers input and output for better performance.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>The <xref href=\"System.IO.FileStream.IsAsync\" data-throw-if-not-resolved=\"false\"></xref> property detects whether the file handle was opened asynchronously. You specify this value when you create an instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class using a constructor that has an <em>isAsync</em>, <em>useAsync</em>, or <em>options</em> parameter. When the property is <strong>true</strong>, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref href=\"System.IO.FileStream.IsAsync\" data-throw-if-not-resolved=\"false\"></xref> property does not have to be <strong>true</strong> to call the <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method. When the <xref href=\"System.IO.FileStream.IsAsync\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</p>\n<p>The <xref href=\"System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> method supports random access to files. <xref href=\"System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> allows the read/write position to be moved to any position within the file. This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n<p>Disk files always support random access. At the time of construction, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property value is set to <strong>true</strong> or <strong>false</strong> depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property value is <strong>true</strong>. Otherwise, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property value is <strong>false</strong>.</p>\n<p>If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.</p>\n<p>For directory operations and other file operations, see the <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Directory\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.Path\" data-throw-if-not-resolved=\"false\"></xref> classes. The <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> class is a utility class that has static methods primarily for the creation of <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects based on file paths. The <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> class creates a stream from a byte array and is similar to the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - <p>The following example demonstrates some of the <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> constructors.</p>fstream class#1<p>The following example shows how to write to a file asynchronously. This code runs in a WPF app that has a TextBlock named UserInput and a button hooked up to a Click event handler that is named Button_Click. The file path needs to be changed to a file than exits on the computer.</p>Asynchronous_File_IO_async#3
  syntax:
    content: >-
      [ComVisible(true)]

      public class FileStream : Stream, IDisposable
    content.vb: >-
      <ComVisible(True)>

      Public Class FileStream
          Inherits Stream
          Implements IDisposable
  seealso:
  - type: System.IO.File
    commentId: T:System.IO.File
  - type: System.IO.FileAccess
    commentId: T:System.IO.FileAccess
  - type: System.IO.FileMode
    commentId: T:System.IO.FileMode
  - type: System.IO.FileShare
    commentId: T:System.IO.FileShare
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.Stream
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.IO.Stream.Null
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.Close
  - System.IO.Stream.Dispose
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.CreateWaitHandle
  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.EndRead(System.IAsyncResult)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.EndWrite(System.IAsyncResult)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.Synchronized(System.IO.Stream)
  - System.IO.Stream.ObjectInvariant
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.WriteTimeout
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  commentId: M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(SafeFileHandle, FileAccess)
  fullName: System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 874
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class for the specified file handle, with the specified read/write permission. </p>\n"
  remarks: "\n<p>When <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> is called, the handle is also closed and the file's handle count is decremented.</p>\n<p>\n<strong>FileStream</strong> assumes that it has exclusive control over the handle. Reading, writing, or seeking while a <strong>FileStream</strong> is also holding a handle could result in data corruption. For data safety, call <xref href=\"System.IO.FileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> before using the handle, and avoid calling any methods other than <strong>Close</strong> after you are done using the handle.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>\n<strong>FileShare.Read</strong> is the default for those <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> constructors without a <strong>FileShare</strong> parameter.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream(SafeFileHandle handle, FileAccess access)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(handle As SafeFileHandle, access As FileAccess)
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
    - id: access
      type: System.IO.FileAccess
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>access</em> is not a field of <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as a disk error, occurred.</p>\n<p>-or-</p>\n<p>The stream has been closed. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified file handle, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file handle is set for read-only access. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  commentId: M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(SafeFileHandle, FileAccess, Int32)
  fullName: System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 879
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class for the specified file handle, with the specified read/write permission, and buffer size.</p>\n"
  remarks: "\n<p>\n<strong>FileStream</strong> assumes that it has exclusive control over the handle. Reading, writing, or seeking while a <strong>FileStream</strong> is also holding a handle could result in data corruption. For data safety, call <xref href=\"System.IO.FileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> before using the handle, and avoid calling any methods other than <strong>Close</strong> after you are done using the handle. Alternately, read and write to the handle before calling this <strong>FileStream</strong> constructor.</p>\n<p>\n<strong>FileShare.Read</strong> is the default for those <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> constructors without a <strong>FileShare</strong> parameter.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream(SafeFileHandle handle, FileAccess access, int bufferSize)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(handle As SafeFileHandle, access As FileAccess, bufferSize As Integer)
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
    - id: access
      type: System.IO.FileAccess
    - id: bufferSize
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>handle</em> parameter is an invalid handle.</p>\n<p>-or-</p>\n<p>The <em>handle</em> parameter is a synchronous handle and it was used asynchronously. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>bufferSize</em> parameter is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as a disk error, occurred.</p>\n<p>-or-</p>\n<p>The stream has been closed.  </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified file handle, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file handle is set for read-only access. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  commentId: M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(SafeFileHandle, FileAccess, Int32, Boolean)
  fullName: System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle, System.IO.FileAccess, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 884
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</p>\n"
  remarks: "\n<p>You set the <em>isAsync</em> parameter to <strong>true</strong> to open the file handle asynchronously. When the parameter is <strong>true</strong>, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the parameter does not have to be <strong>true</strong> to call the <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method. When the <em>isAsync</em> parameter is <strong>false</strong> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</p>\n<p>\n<strong>FileStream</strong> assumes that it has exclusive control over the handle. Reading, writing, or seeking while a <strong>FileStream</strong> is also holding a handle could result in data corruption. For data safety, call <xref href=\"System.IO.FileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> before using the handle, and avoid calling any methods other than <strong>Close</strong> after you are done using the handle. Alternately, read and write to the handle before calling this <strong>FileStream</strong> constructor.</p>\n<p>\n<strong>FileShare.Read</strong> is the default for those <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> constructors without a <strong>FileShare</strong> parameter.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]

      public FileStream(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync)
    content.vb: >-
      <SecuritySafeCritical>

      <SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.UnmanagedCode)>

      Public Sub New(handle As SafeFileHandle, access As FileAccess, bufferSize As Integer, isAsync As Boolean)
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
    - id: access
      type: System.IO.FileAccess
    - id: bufferSize
      type: System.Int32
    - id: isAsync
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>handle</em> parameter is an invalid handle.</p>\n<p>-or-</p>\n<p>The <em>handle</em> parameter is a synchronous handle and it was used asynchronously. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>bufferSize</em> parameter is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as a disk error, occurred.</p>\n<p>-or-</p>\n<p>The stream has been closed.  </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified file handle, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file handle is set for read-only access. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  id: '#ctor(System.String,System.IO.FileMode)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(String, FileMode)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 405
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified path and creation mode.</p>\n"
  remarks: "\n<p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\.\\PHYSICALDRIVE0 \".</p>\n<p>The <em>path</em> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</p>\n<p>The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <strong>FileStream</strong> object has been closed, but read attempts will succeed). </p>\n<p>You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a <strong>FileAccess</strong> parameter with the value set to <strong>FileAccess.Read</strong>.</p>\n<p>The buffer size is set to the default size of 4096 bytes (4 KB).</p>\n<p>\n<em>path</em> is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.</p>\n<p>\n<xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> for all <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects that encapsulate files. If <em>path</em> indicates a device that does not support seeking, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property on the resulting <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. For additional information, see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>FileShare.Read</strong> is the default for those <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> constructors without a <strong>FileShare</strong> parameter.</p>\n<p>For constructors without a <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> parameter, if the <em>mode</em> parameter is set to <xref href=\"System.IO.FileMode.Append\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> is the default access. Otherwise, the access is set to <xref href=\"System.IO.FileAccess.ReadWrite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</p>System.IO.FileStream1#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream(string path, FileMode mode)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(path As String, mode As FileMode)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is an empty string (\"\"), contains only white space, or contains one or more invalid characters. </p>\n<p>-or-</p>\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file cannot be found, such as when <em>mode</em> is <strong>FileMode.Truncate</strong> or <strong>FileMode.Open</strong>, and the file specified by <em>path</em> does not exist. The file must already exist in these modes. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as specifying <strong>FileMode.CreateNew</strong> when the file specified by <em>path</em> already exists, occurred.</p>\n<p>-or-</p>\n<p>The stream has been closed. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> contains an invalid value. </p>\n"
  seealso:
  - type: System.IO.Path.InvalidPathChars
    commentId: F:System.IO.Path.InvalidPathChars
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(String, FileMode, FileAccess)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 410
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified path, creation mode, and read/write permission.</p>\n"
  remarks: "\n<p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\.\\PHYSICALDRIVE0 \".</p>\n<p>The <em>path</em> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</p>\n<p>The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <strong>FileStream</strong> object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).</p>\n<p>\n<em>path</em> is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.</p>\n<p>\n<xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> for all <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects that encapsulate files. If <em>path</em> indicates a device that does not support seeking, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property on the resulting <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. For additional information, see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>FileShare.Read</strong> is the default for those <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> constructors without a <strong>FileShare</strong> parameter.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream(string path, FileMode mode, FileAccess access)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(path As String, mode As FileMode, access As FileAccess)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is an empty string (\"\"), contains only white space, or contains one or more invalid characters. </p>\n<p>-or-</p>\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file cannot be found, such as when <em>mode</em> is <strong>FileMode.Truncate</strong> or <strong>FileMode.Open</strong>, and the file specified by <em>path</em> does not exist. The file must already exist in these modes. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as specifying <strong>FileMode.CreateNew</strong> when the file specified by <em>path</em> already exists, occurred. </p>\n<p>-or-</p>\n<p>The stream has been closed.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified <em>path</em>, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file or directory is set for read-only access. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> contains an invalid value. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(String, FileMode, FileAccess, FileShare)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 415
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified path, creation mode, read/write permission, and sharing permission.</p>\n"
  remarks: "\n<p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\.\\PHYSICALDRIVE0 \".</p>\n<p>The <em>path</em> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</p>\n<p>The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <strong>FileStream</strong> object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).</p>\n<p>\n<em>path</em> is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.</p>\n<p>\n<xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> for all <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects that encapsulate files. If <em>path</em> indicates a device that does not support seeking, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property on the resulting <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. For additional information, see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.FileStream.Lock(System.Int64,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.FileStream3#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream(string path, FileMode mode, FileAccess access, FileShare share)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    - id: share
      type: System.IO.FileShare
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is an empty string (\"\"), contains only white space, or contains one or more invalid characters. </p>\n<p>-or-</p>\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file cannot be found, such as when <em>mode</em> is <strong>FileMode.Truncate</strong> or <strong>FileMode.Open</strong>, and the file specified by <em>path</em> does not exist. The file must already exist in these modes. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as specifying <strong>FileMode.CreateNew</strong> when the file specified by <em>path</em> already exists, occurred. </p>\n<p>-or-</p>\n<p>The system is running Windows 98 or Windows 98 Second Edition and <em>share</em> is set to <strong>FileShare.Delete</strong>.</p>\n<p>-or-</p>\n<p>The stream has been closed.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified <em>path</em>, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file or directory is set for read-only access. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> contains an invalid value. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(String, FileMode, FileAccess, FileShare, Int32)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 420
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</p>\n"
  remarks: "\n<p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\.\\PHYSICALDRIVE0 \".</p>\n<p>The <em>path</em> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</p>\n<p>\n<em>path</em> is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.</p>\n<p>\n<xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> for all <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects that encapsulate files. If <em>path</em> indicates a device that does not support seeking, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property on the resulting <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. For additional information, see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    - id: share
      type: System.IO.FileShare
    - id: bufferSize
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is an empty string (\"\"), contains only white space, or contains one or more invalid characters. </p>\n<p>-or-</p>\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>bufferSize</em> is negative or zero.</p>\n<p>-or- </p>\n<p>\n<em>mode</em>, <em>access</em>, or <em>share</em> contain an invalid value. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file cannot be found, such as when <em>mode</em> is <strong>FileMode.Truncate</strong> or <strong>FileMode.Open</strong>, and the file specified by <em>path</em> does not exist. The file must already exist in these modes. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as specifying <strong>FileMode.CreateNew</strong> when the file specified by <em>path</em> already exists, occurred. </p>\n<p>-or-</p>\n<p>The system is running Windows 98 or Windows 98 Second Edition and <em>share</em> is set to <strong>FileShare.Delete</strong>.</p>\n<p>-or-</p>\n<p>The stream has been closed.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified <em>path</em>, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file or directory is set for read-only access. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 456
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</p>\n"
  remarks: "\n<p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\.\\PHYSICALDRIVE0 \".</p>\n<p>The <em>path</em> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</p>\n<p>\n<em>path</em> is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.</p>\n<p>\n<xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> for all <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects that encapsulate files. If <em>path</em> indicates a device that does not support seeking, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property on the resulting <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. For additional information, see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example shows how to asynchronously write data to a file and then verify that the data was written correctly. A <strong>State</strong> object is created to pass information from the main thread to the <strong>EndReadCallback</strong> and <strong>EndWriteCallback</strong> methods.</p>System.IO.FileStream2#1"
  syntax:
    content: >-
      [SecurityCritical]

      public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync)
    content.vb: >-
      <SecurityCritical>

      Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, useAsync As Boolean)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    - id: share
      type: System.IO.FileShare
    - id: bufferSize
      type: System.Int32
    - id: useAsync
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is an empty string (\"\"), contains only white space, or contains one or more invalid characters. </p>\n<p>-or-</p>\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>bufferSize</em> is negative or zero.</p>\n<p>-or- </p>\n<p>\n<em>mode</em>, <em>access</em>, or <em>share</em> contain an invalid value. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file cannot be found, such as when <em>mode</em> is <strong>FileMode.Truncate</strong> or <strong>FileMode.Open</strong>, and the file specified by <em>path</em> does not exist. The file must already exist in these modes. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as specifying <strong>FileMode.CreateNew</strong> when the file specified by <em>path</em> already exists, occurred.</p>\n<p>-or- </p>\n<p>The system is running Windows 98 or Windows 98 Second Edition and <em>share</em> is set to <strong>FileShare.Delete</strong>.</p>\n<p>-or-</p>\n<p>The stream has been closed.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified <em>path</em>, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file or directory is set for read-only access. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  seealso:
  - type: System.IO.File
    commentId: T:System.IO.File
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)'
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)
  fullName: System.IO.FileStream.FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32, System.IO.FileOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 449
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</p>\n"
  remarks: "\n<p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\.\\PHYSICALDRIVE0 \".</p>\n<p>The <em>fileOptions</em> parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <em>path</em> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</p>\n<p>\n<em>path</em> is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.</p>\n<p>\n<xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> for all <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects that encapsulate files. If <em>path</em> indicates a device that does not support seeking, the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property on the resulting <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. For additional information, see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example writes data to a file and then reads the data using the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>IO.FileStream.ctor1#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, options As FileOptions)
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    - id: share
      type: System.IO.FileShare
    - id: bufferSize
      type: System.Int32
    - id: options
      type: System.IO.FileOptions
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is an empty string (\"\"), contains only white space, or contains one or more invalid characters. </p>\n<p>-or-</p>\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>bufferSize</em> is negative or zero.</p>\n<p>-or- </p>\n<p>\n<em>mode</em>, <em>access</em>, or <em>share</em> contain an invalid value. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file cannot be found, such as when <em>mode</em> is <strong>FileMode.Truncate</strong> or <strong>FileMode.Open</strong>, and the file specified by <em>path</em> does not exist. The file must already exist in these modes. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as specifying <strong>FileMode.CreateNew</strong> when the file specified by <em>path</em> already exists, occurred.</p>\n<p>-or-</p>\n<p>The stream has been closed.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <em>access</em> requested is not permitted by the operating system for the specified <em>path</em>, such as when <em>access</em> is <strong>Write</strong> or <strong>ReadWrite</strong> and the file or directory is set for read-only access. </p>\n<p>-or-</p>\n<p>\n<xref href=\"System.IO.FileOptions.Encrypted\" data-throw-if-not-resolved=\"false\"></xref> is specified for <em>options</em>, but file encryption is not supported on the current platform.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileStream.CanRead
  commentId: P:System.IO.FileStream.CanRead
  id: CanRead
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.IO.FileStream.CanRead
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanRead
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1030
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the current stream supports reading.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support reading, calls to the <xref href=\"System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.ReadByte\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example demonstrates a use of the <strong>CanRead</strong> property. The output of this code is \"MyFile.txt is not writable.\" To get the output message \"MyFile.txt can be both written to and read from.\", change the <strong>FileAccess</strong> parameter to <strong>ReadWrite</strong> in the <strong>FileStream</strong> constructor.</p>Classic FileStream.CanRead Example#1"
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.IO.Stream.CanRead
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileStream.CanSeek
  commentId: P:System.IO.FileStream.CanSeek
  id: CanSeek
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.IO.FileStream.CanSeek
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanSeek
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1040
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the current stream supports seeking.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support seeking, calls to <xref href=\"System.IO.FileStream.Length\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.Position\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example uses the <strong>CanSeek</strong> property to check whether a stream supports seeking.</p>fstream canseek#1"
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.IO.Stream.CanSeek
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileStream.CanWrite
  commentId: P:System.IO.FileStream.CanWrite
  id: CanWrite
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.IO.FileStream.CanWrite
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanWrite
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1035
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the current stream supports writing.</p>\n"
  remarks: "\n<p>If a class derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> does not support writing, a call to <xref href=\"System.IO.FileStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.FileStream.WriteByte(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the stream is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example uses the <strong>CanWrite</strong> property to check whether a stream supports writing.</p>fstream canwrite#1<p>The following is an example using the <strong>CanWrite</strong> property. The output of this code is \"MyFile.txt is writable.\" To get the output message \"MyFile.txt can be both written to and read from.\", change the <strong>FileAccess</strong> parameter to <strong>ReadWrite</strong> in the <strong>FileStream</strong> constructor.</p>Classic FileStream.CanWrite Example#1"
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.IO.Stream.CanWrite
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileStream.IsAsync
  commentId: P:System.IO.FileStream.IsAsync
  id: IsAsync
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: IsAsync
  fullName: System.IO.FileStream.IsAsync
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAsync
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1045
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the <strong>FileStream</strong> was opened asynchronously or synchronously.</p>\n"
  remarks: "\n<p>The <strong>IsAsync</strong> property detects whether the <strong>FileStream</strong> handle was opened asynchronously, enabling your code to use the <xref href=\"System.IO.FileStream.Handle\" data-throw-if-not-resolved=\"false\"></xref> property correctly. In Win32, <strong>IsAsync</strong> being true means the handle was opened for overlapped I/O, and thus requires different parameters to <strong>ReadFile</strong> and <strong>WriteFile</strong>.</p>\n<p>You specify this value when you create an instance of the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> class using a constructor that has an <em>isAsync</em>, <em>useAsync</em>, or <em>options</em> parameter. When the property is <strong>true</strong>, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref href=\"System.IO.FileStream.IsAsync\" data-throw-if-not-resolved=\"false\"></xref> property does not have to be <strong>true</strong> to call the <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.Stream.CopyToAsync(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method. When the <xref href=\"System.IO.FileStream.IsAsync\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.FileStream2#2"
  syntax:
    content: public virtual bool IsAsync { get; }
    content.vb: Public Overridable ReadOnly Property IsAsync As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.FileStream.Length
  commentId: P:System.IO.FileStream.Length
  id: Length
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.FileStream.Length
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Length
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1049
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the length in bytes of the stream.</p>\n"
  remarks: "\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example uses the <strong>Length</strong> and <strong>Position</strong> properties to check for an end-of-file condition.</p>Classic FileStream.Length Example#1"
  syntax:
    content: >-
      public override long Length

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
  overridden: System.IO.Stream.Length
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> for this stream is <strong>false</strong>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as the file being closed, occurred. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileStream.Name
  commentId: P:System.IO.FileStream.Name
  id: Name
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.FileStream.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1073
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the name of the <strong>FileStream</strong> that was passed to the constructor.</p>\n"
  remarks: "\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.FileStream2#4"
  syntax:
    content: >-
      public string Name

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileStream.Position
  commentId: P:System.IO.FileStream.Position
  id: Position
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.IO.FileStream.Position
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Position
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1096
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the current position of this stream.</p>\n"
  remarks: "\n<p>Seeking to any location beyond the length of the stream is supported.  When you seek beyond the length of the file, the file size grows.  In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.  In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream. Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example uses the <strong>Length</strong> and <strong>Position</strong> properties to check for an end-of-file condition.</p>Classic FileStream.Length Example#1"
  syntax:
    content: >-
      public override long Position

      {
          [SecuritySafeCritical]
          get;
          set;
      }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
  overridden: System.IO.Stream.Position
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support seeking. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n<p>- or -</p>\n<p>The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Attempted to set the position to a negative value. </p>\n"
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "\n<p>Attempted seeking past the end of a stream that does not support this. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileStream.SafeFileHandle
  commentId: P:System.IO.FileStream.SafeFileHandle
  id: SafeFileHandle
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: SafeFileHandle
  fullName: System.IO.FileStream.SafeFileHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SafeFileHandle
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1293
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a <xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\" data-throw-if-not-resolved=\"false\"></xref> object that represents the operating system file handle for the file that the current <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object encapsulates.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileStream.SafeFileHandle\" data-throw-if-not-resolved=\"false\"></xref> property automatically flushes the stream and sets the current stream position to 0.  This allows the file to be moved or the stream position to be reset by another stream using the <xref href=\"System.IO.FileStream.SafeFileHandle\" data-throw-if-not-resolved=\"false\"></xref> returned by this property.</p>\n"
  example:
  - 
  syntax:
    content: >-
      public virtual SafeFileHandle SafeFileHandle

      {
          [SecurityCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property SafeFileHandle As SafeFileHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.FileStream.Dispose(System.Boolean)
  commentId: M:System.IO.FileStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.FileStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1144
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.FileStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.FileStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of each referenced object.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      protected override void Dispose(bool disposing)
    content.vb: >-
      <SecuritySafeCritical>

      Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overridden: System.IO.Stream.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.FileStream.Finalize
  commentId: M:System.IO.FileStream.Finalize
  id: Finalize
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.IO.FileStream.Finalize()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Finalize
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1180
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <strong>FileStream</strong>.</p>\n"
  remarks: "\n<p>The garbage collector calls <strong>Finalize</strong> when the current object is ready to be finalized. <strong>Finalize</strong> closes the <strong>FileStream</strong>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      protected void Finalize()
    content.vb: >-
      <SecuritySafeCritical>

      Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileStream.Flush
  commentId: M:System.IO.FileStream.Flush
  id: Flush
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.FileStream.Flush()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flush
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1189
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Clears buffers for this stream and causes any buffered data to be written to the file.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>When you call the <xref href=\"System.IO.FileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method, the operating system I/O buffer is also flushed.</p>\n<p>A stream’s encoder is not flushed unless you explicitly call <xref href=\"System.IO.FileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> or dispose of the object. Setting <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n<p>Because a buffer can be used for either reading or writing, <xref href=\"System.IO.FileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> performs the following two functions: </p>\n<ul><li>\n<p>Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.</p>\n</li><li>\n<p>If <xref href=\"System.IO.BufferedStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.</p>\n</li></ul>\n<p>Use the <xref href=\"System.IO.FileStream.Flush(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.FileStream.Lock(System.Int64,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.FileStream3#4"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  overridden: System.IO.Stream.Flush
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  seealso:
  - type: System.IO.FileStream.Flush(System.Boolean)
    commentId: M:System.IO.FileStream.Flush(System.Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileStream.Flush(System.Boolean)
  commentId: M:System.IO.FileStream.Flush(System.Boolean)
  id: Flush(System.Boolean)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Flush(Boolean)
  fullName: System.IO.FileStream.Flush(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flush
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1194
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</p>\n"
  remarks: "\n<p>Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk. </p>\n<p>When you call the <xref href=\"System.IO.FileStream.Flush(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method, the operating system I/O buffer is also flushed.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void Flush(bool flushToDisk)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub Flush(flushToDisk As Boolean)
    parameters:
    - id: flushToDisk
      type: System.Boolean
  seealso:
  - type: System.IO.FileStream.Flush
    commentId: M:System.IO.FileStream.Flush
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: FlushAsync(CancellationToken)
  fullName: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FlushAsync
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2648
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. </p>\n"
  remarks: "\n<p>When you call the <xref href=\"System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method, the operating system I/O buffer is also flushed.</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property. If the handle to the file is disposed, the returned task contains the <xref href=\"System.ObjectDisposedException\" data-throw-if-not-resolved=\"false\"></xref> exception in the <xref href=\"System.Threading.Tasks.Task.Exception\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      [SecuritySafeCritical]

      public override Task FlushAsync(CancellationToken cancellationToken)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      <SecuritySafeCritical>

      Public Overrides Function FlushAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.FileStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1365
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Reads a block of bytes from the stream and writes the data in a given buffer.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <em>offset</em> parameter gives the offset of the byte in <em>array</em> (the buffer index) at which to begin reading, and the <em>count</em> parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.</p>\n<p>The <xref href=\"System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns zero only after reaching the end of the stream. Otherwise, <xref href=\"System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref href=\"System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</p>\n<p>Use <xref href=\"System.IO.BinaryReader\" data-throw-if-not-resolved=\"false\"></xref> for reading primitive data types.</p>\n<p>Do not interrupt a thread that is performing a read operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example reads the contents from a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> and writes it into another <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>FSRead#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int Read([In, Out] byte[] array, int offset, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function Read(array As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Byte[]
      attributes:
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  overridden: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>offset</em> and <em>count</em> describe an invalid range in <em>array</em>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.FileStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.FileStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAsync
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2423
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Use the <xref href=\"System.IO.FileStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports reading.</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property. If the handle to the file is disposed, the returned task contains the <xref href=\"System.ObjectDisposedException\" data-throw-if-not-resolved=\"false\"></xref> exception in the <xref href=\"System.Threading.Tasks.Task.Exception\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example shows how to read from a file asynchronously.</p>Asynchronous_File_IO_async#4"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      [SecuritySafeCritical]

      public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      <SecuritySafeCritical>

      Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  overridden: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.FileStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
- uid: System.IO.FileStream.ReadByte
  commentId: M:System.IO.FileStream.ReadByte
  id: ReadByte
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.FileStream.ReadByte()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadByte
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2007
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Reads a byte from the file and advances the read position one byte.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.ReadByte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use the <xref href=\"System.IO.FileStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports reading. For additional information, see <xref href=\"System.IO.Stream.CanRead\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</p>System.IO.FileStream1#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int ReadByte()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
  overridden: System.IO.Stream.ReadByte
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream does not support reading. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.FileStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Seek
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1476
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the current position of this stream to the given value.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports seeking. For additional information, see <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You can seek to any location beyond the length of the stream. When you seek beyond the length of the file, the file size grows. In Windows NT and later versions, data added to the end of the file is set to zero. In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</p>System.IO.FileStream1#1<p>The following example reads text in the reverse direction, from the end of file to the beginning of the file, by using the various <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> values with the <xref href=\"System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.FileStream.Seek#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override long Seek(long offset, SeekOrigin origin)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
    - id: origin
      type: System.IO.SeekOrigin
    return:
      type: System.Int64
  overridden: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support seeking, such as if the <strong>FileStream</strong> is constructed from a pipe or console output. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Seeking is attempted before the beginning of the stream. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the stream was closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileStream.SetLength(System.Int64)
  commentId: M:System.IO.FileStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.IO.FileStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetLength
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1311
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the length of this stream to the given value.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the given value is less than the current length of the stream, the stream is truncated. In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream. If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same. If the stream is expanded, the contents of the stream between the old and the new length are undefined.</p>\n<p>A stream must support both writing and seeking for <strong>SetLength</strong> to work.</p>\n<p>Use the <xref href=\"System.IO.FileStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing, and the <xref href=\"System.IO.FileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether seeking is supported. For additional information, see <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Stream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override void SetLength(long value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
  overridden: System.IO.Stream.SetLength(System.Int64)
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error has occurred. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support both writing and seeking. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Attempted to set the <em>value</em> parameter to less than 0. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.FileStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 1618
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Writes a block of bytes to the file stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <em>offset</em> parameter gives the offset of the byte in <em>array</em> (the buffer index) at which to begin copying, and the <em>count</em> parameter gives the number of bytes that will be written to the stream. If the write operation is successful, the current position of the stream is advanced by the number of bytes written. If an exception occurs, the current position of the stream is unchanged.</p>\n<p>Use the <xref href=\"System.IO.FileStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing. For additional information, see <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Do not interrupt a thread that is performing a write operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability. </p>\n<p>For a list of common file and directory operations, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.FileStream.Lock(System.Int64,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.FileStream3#3"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override void Write(byte[] array, int offset, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Sub Write(array As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: array
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
  overridden: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>offset</em> and <em>count</em> describe an invalid range in <em>array</em>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n<p>- or -</p>\n<p>Another thread may have caused an unexpected change in the position of the operating system's file handle. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream instance does not support writing. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.FileStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.FileStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2475
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. </p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the <strong>async</strong> and <strong>await</strong> keywords in Visual Basic and C#.</p>\n<p>Use the <xref href=\"System.IO.FileStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports reading.</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property. If the handle to the file is disposed, the returned task contains the <xref href=\"System.ObjectDisposedException\" data-throw-if-not-resolved=\"false\"></xref> exception in the <xref href=\"System.Threading.Tasks.Task.Exception\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example shows how to write asynchronously to a file.</p>Asynchronous_File_IO_async#3"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      [SecuritySafeCritical]

      public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      <SecuritySafeCritical>

      Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.FileStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
- uid: System.IO.FileStream.WriteByte(System.Byte)
  commentId: M:System.IO.FileStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.FileStream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  fullName: System.IO.FileStream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteByte
    path: src/mscorlib/src/System/IO/FileStream.cs
    startLine: 2237
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Writes a byte to the current position in the file stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.Stream.WriteByte(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use <strong>WriteByte</strong> to write a byte to a <strong>FileStream</strong> efficiently. If the stream is closed or not writable, an exception will be thrown.</p>\n<p>Use the <xref href=\"System.IO.FileStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current instance supports writing. For additional information, see <xref href=\"System.IO.Stream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</p>System.IO.FileStream1#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override void WriteByte(byte value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
  overridden: System.IO.Stream.WriteByte(System.Byte)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream is closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: false
  fullName: System.IO.Stream.Null
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32, CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream, Int32)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.Close
  parent: System.IO.Stream
  isExternal: true
  name: Close()
  fullName: System.IO.Stream.Close()
  spec.csharp:
  - uid: System.IO.Stream.Close
    name: Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Close
    name: Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.Dispose
  parent: System.IO.Stream
  isExternal: false
  name: Dispose()
  fullName: System.IO.Stream.Dispose()
  spec.csharp:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: false
  name: FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.CreateWaitHandle
  parent: System.IO.Stream
  isExternal: true
  name: CreateWaitHandle()
  fullName: System.IO.Stream.CreateWaitHandle()
  spec.csharp:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  fullname.vb: System.IO.Stream.BeginRead(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.EndRead(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndRead(IAsyncResult)
  fullName: System.IO.Stream.EndRead(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  fullname.vb: System.IO.Stream.BeginWrite(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.EndWrite(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndWrite(IAsyncResult)
  fullName: System.IO.Stream.EndWrite(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.Synchronized(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: Synchronized(Stream)
  fullName: System.IO.Stream.Synchronized(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.ObjectInvariant
  parent: System.IO.Stream
  isExternal: true
  name: ObjectInvariant()
  fullName: System.IO.Stream.ObjectInvariant()
  spec.csharp:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: false
  name: CanTimeout
  fullName: System.IO.Stream.CanTimeout
- uid: System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: false
  name: ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
- uid: System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: false
  name: WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: true
  name: CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)
  spec.csharp:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  fullName: System.IO.FileAccess
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.FileOptions
  parent: System.IO
  isExternal: false
  name: FileOptions
  fullName: System.IO.FileOptions
- uid: System.IO.Stream.CanRead
  parent: System.IO.Stream
  isExternal: false
  name: CanRead
  fullName: System.IO.Stream.CanRead
- uid: System.IO.Stream.CanSeek
  parent: System.IO.Stream
  isExternal: false
  name: CanSeek
  fullName: System.IO.Stream.CanSeek
- uid: System.IO.Stream.CanWrite
  parent: System.IO.Stream
  isExternal: false
  name: CanWrite
  fullName: System.IO.Stream.CanWrite
- uid: System.IO.Stream.Length
  parent: System.IO.Stream
  isExternal: false
  name: Length
  fullName: System.IO.Stream.Length
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IO.Stream.Position
  parent: System.IO.Stream
  isExternal: false
  name: Position
  fullName: System.IO.Stream.Position
- uid: System.IO.Stream.Dispose(System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.Flush
  parent: System.IO.Stream
  isExternal: false
  name: Flush()
  fullName: System.IO.Stream.Flush()
  spec.csharp:
  - uid: System.IO.Stream.Flush
    name: Flush
    fullName: System.IO.Stream.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Flush
    name: Flush
    fullName: System.IO.Stream.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync(CancellationToken)
  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.Stream.Read
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.Stream.Read
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.IO.Stream.ReadByte
  parent: System.IO.Stream
  isExternal: false
  name: ReadByte()
  fullName: System.IO.Stream.ReadByte()
  spec.csharp:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    fullName: System.IO.Stream.ReadByte
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    fullName: System.IO.Stream.ReadByte
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)
  spec.csharp:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    fullName: System.IO.Stream.Seek
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    fullName: System.IO.SeekOrigin
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    fullName: System.IO.Stream.Seek
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    fullName: System.IO.SeekOrigin
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.Stream.SetLength(System.Int64)
  parent: System.IO.Stream
  isExternal: true
  name: SetLength(Int64)
  fullName: System.IO.Stream.SetLength(System.Int64)
  spec.csharp:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    fullName: System.IO.Stream.SetLength
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    fullName: System.IO.Stream.SetLength
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.Stream.Write
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.Stream.Write
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream.WriteByte(System.Byte)
  parent: System.IO.Stream
  isExternal: true
  name: WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(System.Byte)
  spec.csharp:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    fullName: System.IO.Stream.WriteByte
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    fullName: System.IO.Stream.WriteByte
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.IO.EndOfStreamException
  isExternal: false
  name: EndOfStreamException
  fullName: System.IO.EndOfStreamException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
