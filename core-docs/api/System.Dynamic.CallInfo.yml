items:
- uid: System.Dynamic.CallInfo
  commentId: T:System.Dynamic.CallInfo
  id: CallInfo
  parent: System.Dynamic
  children:
  - System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})
  - System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])
  - System.Dynamic.CallInfo.ArgumentCount
  - System.Dynamic.CallInfo.ArgumentNames
  - System.Dynamic.CallInfo.Equals(System.Object)
  - System.Dynamic.CallInfo.GetHashCode
  langs:
  - csharp
  - vb
  name: CallInfo
  fullName: System.Dynamic.CallInfo
  type: Class
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CallInfo
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 27
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Describes arguments in the dynamic binding process.</p>\n"
  remarks: "\n<p>\n<code>ArgumentCount</code> - all inclusive number of arguments.</p>\n<p>\n<code>ArgumentNames</code> - names for those arguments that are named.</p>\n<p>Argument names match to the argument values in left to right order and last name corresponds to the last argument.</p>\n"
  example:
  - "\n<p>\n<code>SampleMethod(arg1, arg2, arg3, name1 = arg4, name2 = arg5, name3 = arg6)</code> will correspond to <code>ArgumentCount: 6 ArgumentNames: {\"name1\", \"name2\", \"name3\"}</code>.</p>\n"
  syntax:
    content: public sealed class CallInfo
    content.vb: Public NotInheritable Class CallInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})'
  parent: System.Dynamic.CallInfo
  langs:
  - csharp
  - vb
  name: CallInfo(Int32, IEnumerable<String>)
  fullName: System.Dynamic.CallInfo.CallInfo(System.Int32, System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 49
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Creates a new CallInfo that represents arguments in the dynamic binding process.</p>\n"
  example:
  - 
  syntax:
    content: public CallInfo(int argCount, IEnumerable<string> argNames)
    content.vb: Public Sub New(argCount As Integer, argNames As IEnumerable(Of String))
    parameters:
    - id: argCount
      type: System.Int32
      description: The number of arguments.
    - id: argNames
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The argument names.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Dynamic.CallInfo.CallInfo(System.Int32, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CallInfo(Int32, IEnumerable(Of String))
- uid: System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])
  commentId: M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])
  id: '#ctor(System.Int32,System.String[])'
  parent: System.Dynamic.CallInfo
  langs:
  - csharp
  - vb
  name: CallInfo(Int32, String[])
  fullName: System.Dynamic.CallInfo.CallInfo(System.Int32, System.String[])
  type: Constructor
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 38
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Creates a new <code>PositionalArgumentInfo</code>.</p>\n"
  example:
  - 
  syntax:
    content: public CallInfo(int argCount, params string[] argNames)
    content.vb: Public Sub New(argCount As Integer, ParamArray argNames As String())
    parameters:
    - id: argCount
      type: System.Int32
      description: The number of arguments.
    - id: argNames
      type: System.String[]
      description: The argument names.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Dynamic.CallInfo.CallInfo(System.Int32, System.String())
  name.vb: CallInfo(Int32, String())
- uid: System.Dynamic.CallInfo.ArgumentCount
  commentId: P:System.Dynamic.CallInfo.ArgumentCount
  id: ArgumentCount
  parent: System.Dynamic.CallInfo
  langs:
  - csharp
  - vb
  name: ArgumentCount
  fullName: System.Dynamic.CallInfo.ArgumentCount
  type: Property
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArgumentCount
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 65
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>The number of arguments.</p>\n"
  example:
  - 
  syntax:
    content: public int ArgumentCount { get; }
    content.vb: Public ReadOnly Property ArgumentCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Dynamic.CallInfo.ArgumentNames
  commentId: P:System.Dynamic.CallInfo.ArgumentNames
  id: ArgumentNames
  parent: System.Dynamic.CallInfo
  langs:
  - csharp
  - vb
  name: ArgumentNames
  fullName: System.Dynamic.CallInfo.ArgumentNames
  type: Property
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArgumentNames
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 73
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>The argument names.</p>\n"
  example:
  - 
  syntax:
    content: public ReadOnlyCollection<string> ArgumentNames { get; }
    content.vb: Public ReadOnly Property ArgumentNames As ReadOnlyCollection(Of String)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Dynamic.CallInfo.Equals(System.Object)
  commentId: M:System.Dynamic.CallInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Dynamic.CallInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Dynamic.CallInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 92
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Determines whether the specified CallInfo instance is considered equal to the current.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The instance of CallInfo to compare with the current instance.
    return:
      type: System.Boolean
      description: true if the specified instance is equal to the current one otherwise, false.
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Dynamic.CallInfo.GetHashCode
  commentId: M:System.Dynamic.CallInfo.GetHashCode
  id: GetHashCode
  parent: System.Dynamic.CallInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Dynamic.CallInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs
    startLine: 82
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Serves as a hash function for the current <xref href=\"System.Dynamic.CallInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A hash code for the current CallInfo.
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Dynamic
  isExternal: false
  name: System.Dynamic
  fullName: System.Dynamic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)
  name.vb: ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
