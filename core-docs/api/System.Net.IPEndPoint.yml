items:
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  id: IPEndPoint
  parent: System.Net
  children:
  - System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)
  - System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.IPEndPoint.Address
  - System.Net.IPEndPoint.AddressFamily
  - System.Net.IPEndPoint.Create(System.Net.SocketAddress)
  - System.Net.IPEndPoint.Equals(System.Object)
  - System.Net.IPEndPoint.GetHashCode
  - System.Net.IPEndPoint.MaxPort
  - System.Net.IPEndPoint.MinPort
  - System.Net.IPEndPoint.Port
  - System.Net.IPEndPoint.Serialize
  - System.Net.IPEndPoint.ToString
  langs:
  - csharp
  - vb
  name: IPEndPoint
  fullName: System.Net.IPEndPoint
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPEndPoint
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 208
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Represents a network endpoint as an IP address and a port number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class contains the host and local or remote port information needed by an application to connect to a service on a host. By combining the host's IP address and port number of a service, the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class forms a connection point to a service.</p>\n"
  example:
  - System.Net.IPEndPoint#1
  syntax:
    content: 'public class IPEndPoint : EndPoint'
    content.vb: >-
      Public Class IPEndPoint
          Inherits EndPoint
  inheritance:
  - System.Object
  - System.Net.EndPoint
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.IPEndPoint.MaxPort
  commentId: F:System.Net.IPEndPoint.MaxPort
  id: MaxPort
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: MaxPort
  fullName: System.Net.IPEndPoint.MaxPort
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxPort
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 210
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Specifies the maximum value that can be assigned to the <xref href=\"System.Net.IPEndPoint.Port\" data-throw-if-not-resolved=\"false\"></xref> property. The MaxPort value is set to 0x0000FFFF. This field is read-only.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref> property to print the maximum value that can be assigned to the <xref href=\"System.Net.IPEndPoint.Port\" data-throw-if-not-resolved=\"false\"></xref> property.</p>IPEndPoint_Properties#4"
  syntax:
    content: public const int MaxPort = 65535
    content.vb: Public Const MaxPort As Integer = 65535
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Net.IPEndPoint.MinPort
  commentId: F:System.Net.IPEndPoint.MinPort
  id: MinPort
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: MinPort
  fullName: System.Net.IPEndPoint.MinPort
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinPort
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 211
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Specifies the minimum value that can be assigned to the <xref href=\"System.Net.IPEndPoint.Port\" data-throw-if-not-resolved=\"false\"></xref> property. This field is read-only.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref> property to print the minimum value that can be assigned to the <xref href=\"System.Net.IPEndPoint.Port\" data-throw-if-not-resolved=\"false\"></xref> property.</p>IPEndPoint_Properties#4"
  syntax:
    content: public const int MinPort = 0
    content.vb: Public Const MinPort As Integer = 0
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)
  commentId: M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)
  id: '#ctor(System.Int64,System.Int32)'
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: IPEndPoint(Int64, Int32)
  fullName: System.Net.IPEndPoint.IPEndPoint(System.Int64, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 212
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class with the specified address and port number.</p>\n"
  example:
  - "\n<p>The following example uses the specified IP address and port number to create an <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>IPEndPoint_Properties#4"
  syntax:
    content: public IPEndPoint(long address, int port)
    content.vb: Public Sub New(address As Long, port As Integer)
    parameters:
    - id: address
      type: System.Int64
      description: "\n<p>The IP address of the Internet host. </p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port number associated with the <em>address</em>, or 0 to specify any available port. <em>port</em> is in host order.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>port</em> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>address</em> is less than 0 or greater than 0x00000000FFFFFFFF. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: IPEndPoint(IPAddress, Int32)
  fullName: System.Net.IPEndPoint.IPEndPoint(System.Net.IPAddress, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 213
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class with the specified address and port number.</p>\n"
  example:
  - System.Net.IPEndPoint#2
  syntax:
    content: public IPEndPoint(IPAddress address, int port)
    content.vb: Public Sub New(address As IPAddress, port As Integer)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port number associated with the <em>address</em>, or 0 to specify any available port. <em>port</em> is in host order.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>port</em> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>address</em> is less than 0 or greater than 0x00000000FFFFFFFF. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPEndPoint.Address
  commentId: P:System.Net.IPEndPoint.Address
  id: Address
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: Address
  fullName: System.Net.IPEndPoint.Address
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Address
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 214
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the IP address of the endpoint.</p>\n"
  example:
  - "\n<p>The following example sets the <xref href=\"System.Net.IPEndPoint.Address\" data-throw-if-not-resolved=\"false\"></xref> property using the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> specified.</p>System.Net.IPEndPoint#3"
  syntax:
    content: public IPAddress Address { get; set; }
    content.vb: Public Property Address As IPAddress
    parameters: []
    return:
      type: System.Net.IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance containing the IP address of the endpoint.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.IPEndPoint.AddressFamily
  commentId: P:System.Net.IPEndPoint.AddressFamily
  id: AddressFamily
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: AddressFamily
  fullName: System.Net.IPEndPoint.AddressFamily
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressFamily
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 215
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the Internet Protocol (IP) address family.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPEndPoint.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> property to return the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> to which the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> belongs. In this case it is the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref><xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Net.IPEndPoint#3"
  syntax:
    content: public override AddressFamily AddressFamily { get; }
    content.vb: Public Overrides ReadOnly Property AddressFamily As AddressFamily
    parameters: []
    return:
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>Returns <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Net.EndPoint.AddressFamily
  seealso:
  - type: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.IPEndPoint.Port
  commentId: P:System.Net.IPEndPoint.Port
  id: Port
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: Port
  fullName: System.Net.IPEndPoint.Port
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Port
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 216
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the port number of the endpoint.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPEndPoint.Port\" data-throw-if-not-resolved=\"false\"></xref> property to set TCP port number of the <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Net.IPEndPoint#3"
  syntax:
    content: public int Port { get; set; }
    content.vb: Public Property Port As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An integer value in the range <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref> indicating the port number of the endpoint.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value that was specified for a set operation is less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.IPEndPoint.Create(System.Net.SocketAddress)
  commentId: M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)
  id: Create(System.Net.SocketAddress)
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: Create(SocketAddress)
  fullName: System.Net.IPEndPoint.Create(System.Net.SocketAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 217
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Creates an endpoint from a socket address.</p>\n"
  example:
  - "\n<p>The following example uses the specified <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> to create an <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Net.IPEndPoint#5"
  syntax:
    content: public override EndPoint Create(SocketAddress socketAddress)
    content.vb: Public Overrides Function Create(socketAddress As SocketAddress) As
    parameters:
    - id: socketAddress
      type: System.Net.SocketAddress
      description: "\n<p>The <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> to use for the endpoint. </p>\n"
    return:
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified socket address.</p>\n"
  overridden: System.Net.EndPoint.Create(System.Net.SocketAddress)
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The AddressFamily of <em>socketAddress</em> is not equal to the AddressFamily of the current instance.</p>\n<p>-or- </p>\n<p>\n<em>socketAddress</em>.Size < 8. </p>\n"
  seealso:
  - type: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  - type: System.Net.SocketAddress
    commentId: T:System.Net.SocketAddress
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPEndPoint.Equals(System.Object)
  commentId: M:System.Net.IPEndPoint.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Net.IPEndPoint.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 218
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Determines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to compare with the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPEndPoint.GetHashCode
  commentId: M:System.Net.IPEndPoint.GetHashCode
  id: GetHashCode
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Net.IPEndPoint.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 219
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns a hash value for a <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.IPEndPoint.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method returns a hash code of the IP endpoint instance. This value can be used as a key in hash tables.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>An integer hash value.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPEndPoint.Serialize
  commentId: M:System.Net.IPEndPoint.Serialize
  id: Serialize
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: Serialize()
  fullName: System.Net.IPEndPoint.Serialize()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Serialize
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 220
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Serializes endpoint information into a <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Net.IPEndPoint.Serialize\" data-throw-if-not-resolved=\"false\"></xref> method to serialize endpoint information into a <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>System.Net.IPEndPoint#4"
  syntax:
    content: public override SocketAddress Serialize()
    content.vb: Public Overrides Function Serialize As SocketAddress
    return:
      type: System.Net.SocketAddress
      description: "\n<p>A <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> instance containing the socket address for the endpoint.</p>\n"
  overridden: System.Net.EndPoint.Serialize
  seealso:
  - type: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPEndPoint.ToString
  commentId: M:System.Net.IPEndPoint.ToString
  id: ToString
  parent: System.Net.IPEndPoint
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Net.IPEndPoint.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 221
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns the IP address and port number of the specified endpoint.</p>\n"
  example:
  - "\n<p>The following example returns a string representation of the IP address and port number of the specified <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Net.IPEndPoint#3"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.EndPoint.AddressFamily
  parent: System.Net.EndPoint
  isExternal: false
  name: AddressFamily
  fullName: System.Net.EndPoint.AddressFamily
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Net.EndPoint.Create(System.Net.SocketAddress)
  parent: System.Net.EndPoint
  isExternal: false
  name: Create(SocketAddress)
  fullName: System.Net.EndPoint.Create(System.Net.SocketAddress)
  spec.csharp:
  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)
    name: Create
    fullName: System.Net.EndPoint.Create
  - name: (
    fullName: (
  - uid: System.Net.SocketAddress
    name: SocketAddress
    fullName: System.Net.SocketAddress
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)
    name: Create
    fullName: System.Net.EndPoint.Create
  - name: (
    fullName: (
  - uid: System.Net.SocketAddress
    name: SocketAddress
    fullName: System.Net.SocketAddress
  - name: )
    fullName: )
- uid: System.Net.SocketAddress
  parent: System.Net
  isExternal: false
  name: SocketAddress
  fullName: System.Net.SocketAddress
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.EndPoint.Serialize
  parent: System.Net.EndPoint
  isExternal: false
  name: Serialize()
  fullName: System.Net.EndPoint.Serialize()
  spec.csharp:
  - uid: System.Net.EndPoint.Serialize
    name: Serialize
    fullName: System.Net.EndPoint.Serialize
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.EndPoint.Serialize
    name: Serialize
    fullName: System.Net.EndPoint.Serialize
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
