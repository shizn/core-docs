items:
- uid: System.Xml.XmlReaderSettings
  commentId: T:System.Xml.XmlReaderSettings
  id: XmlReaderSettings
  parent: System.Xml
  children:
  - System.Xml.XmlReaderSettings.#ctor
  - System.Xml.XmlReaderSettings.Async
  - System.Xml.XmlReaderSettings.CheckCharacters
  - System.Xml.XmlReaderSettings.Clone
  - System.Xml.XmlReaderSettings.CloseInput
  - System.Xml.XmlReaderSettings.ConformanceLevel
  - System.Xml.XmlReaderSettings.DtdProcessing
  - System.Xml.XmlReaderSettings.IgnoreComments
  - System.Xml.XmlReaderSettings.IgnoreProcessingInstructions
  - System.Xml.XmlReaderSettings.IgnoreWhitespace
  - System.Xml.XmlReaderSettings.LineNumberOffset
  - System.Xml.XmlReaderSettings.LinePositionOffset
  - System.Xml.XmlReaderSettings.MaxCharactersFromEntities
  - System.Xml.XmlReaderSettings.MaxCharactersInDocument
  - System.Xml.XmlReaderSettings.NameTable
  - System.Xml.XmlReaderSettings.Reset
  langs:
  - csharp
  - vb
  name: XmlReaderSettings
  fullName: System.Xml.XmlReaderSettings
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlReaderSettings
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 353
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Specifies a set of features to support on the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method. </p>\n"
  remarks: "\n<p>You use the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method to obtain <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instances. This method uses the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> class to specify which features to implement in the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object it creates.</p>\n<p>See the Remarks sections of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> reference pages for information about which settings to use for conformance checks, validation, and other common scenarios. See the <xref href=\"System.Xml.XmlReaderSettings.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor for a list of default settings.</p>\n"
  example:
  - <p>The following example creates an <xref href="System.Xml.XmlReader" data-throw-if-not-resolved="false"></xref> that uses an <xref href="System.Xml.XmlUrlResolver" data-throw-if-not-resolved="false"></xref> with the necessary credentials.</p>XmlReader.Create#2
  syntax:
    content: public sealed class XmlReaderSettings
    content.vb: Public NotInheritable Class XmlReaderSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.XmlReaderSettings.#ctor
  commentId: M:System.Xml.XmlReaderSettings.#ctor
  id: '#ctor'
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: XmlReaderSettings()
  fullName: System.Xml.XmlReaderSettings.XmlReaderSettings()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 355
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property</p>\n<p>Initial value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.IgnoreComments\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.IgnoreProcessingInstructions\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.IgnoreWhitespace\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.LineNumberOffset\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.LinePositionOffset\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.MaxCharactersFromEntities\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0 (there is no limit on the number of characters that result from expanding entities).</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.MaxCharactersInDocument\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0 (there is no limit on the size of the XML document).</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.NameTable\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.DtdProcessing.Prohibit\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ProhibitDtd\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>. This property is obsolete. Use <xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> instead. If you had set <xref href=\"System.Xml.XmlReaderSettings.ProhibitDtd\" data-throw-if-not-resolved=\"false\"></xref> to its default value <strong>true</strong> set <xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> to <strong>Prohibit</strong>. If you had set <xref href=\"System.Xml.XmlReaderSettings.ProhibitDtd\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong> set <xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> to <strong>Parse</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.Schemas\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>An empty <xref href=\"System.Xml.Schema.XmlSchemaSet\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ValidationFlags\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ValidationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ValidationType.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A new <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following creates a settings object that can be used to construct a reader that strips processing instructions, comments, and insignificant white space.</p>XmlReaderSettings.cctor#1"
  syntax:
    content: public XmlReaderSettings()
    content.vb: Public Sub New
  seealso:
  - type: System.Xml.XmlReader
    commentId: T:System.Xml.XmlReader
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.Async
  commentId: P:System.Xml.XmlReaderSettings.Async
  id: Async
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: Async
  fullName: System.Xml.XmlReaderSettings.Async
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 356
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets whether asynchronous <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods can be used on a particular <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>You must set this value to <strong>true</strong> when you create a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance if you want to use asynchronous <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> methods on that instance. After the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance is created, the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> property is read-only. The default value of this property is <strong>false</strong>.</p>\n<p>This flag is ignored by the <xref href=\"System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)\" data-throw-if-not-resolved=\"false\"></xref> overload. This means that if you create a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> based on an existing <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>, the async behavior depends on the input <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>, and you cannot use the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to change the async behavior.</p>\n"
  syntax:
    content: public bool Async { get; set; }
    content.vb: Public Property Async As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if asynchronous methods can be used; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.CheckCharacters
  commentId: P:System.Xml.XmlReaderSettings.CheckCharacters
  id: CheckCharacters
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: CheckCharacters
  fullName: System.Xml.XmlReaderSettings.CheckCharacters
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CheckCharacters
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 357
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to do character checking.</p>\n"
  remarks: "\n<p>This property instructs the XML reader to check characters in the XML data it's reading and throw an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> if any characters are outside the range of legal XML characters. When character checking is enabled, you are ensured the following:</p>\n<ul><li>\n<p>Characters are within the range of legal XML characters, as defined by the <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#charsets\">2.2 Characters</see> section of the W3C XML 1.0 Recommendation.</p>\n</li><li>\n<p>All XML names are valid, as defined by the <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name\">2.3 Common Syntactic Constructs</see> section of the W3C XML 1.0 Recommendation.</p>\n</li></ul>\n<p>When this property is set to <strong>true</strong>, which is the default setting, an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown if the XML file contains illegal characters or invalid XML names (for example, an element name starts with a number).</p>\n"
  example:
  - 
  syntax:
    content: public bool CheckCharacters { get; set; }
    content.vb: Public Property CheckCharacters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to do character checking; otherwise <strong>false</strong>. The default is <strong>true</strong>.</p>\n<p>If the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is processing text data, it always checks that the XML names and text content are valid, regardless of the property setting. Setting <xref href=\"System.Xml.XmlReaderSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong> turns off character checking for character entity references.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.CloseInput
  commentId: P:System.Xml.XmlReaderSettings.CloseInput
  id: CloseInput
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: CloseInput
  fullName: System.Xml.XmlReaderSettings.CloseInput
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseInput
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 358
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether the underlying stream or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> should be closed when the reader is closed.</p>\n"
  remarks: "\n<p>This setting is used when a stream or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> is passed to the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method. If a stream is created by the reader for its own processing, such as when the reader is created with a URI or when it opens an external document type definition, it is always closed when the reader is closed.</p>\n"
  example:
  - 
  syntax:
    content: public bool CloseInput { get; set; }
    content.vb: Public Property CloseInput As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to close the underlying stream or <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> when the reader is closed; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.ConformanceLevel
  commentId: P:System.Xml.XmlReaderSettings.ConformanceLevel
  id: ConformanceLevel
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: ConformanceLevel
  fullName: System.Xml.XmlReaderSettings.ConformanceLevel
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConformanceLevel
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 359
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the level of conformance which the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> will comply.</p>\n"
  remarks: "\n<p>XML readers that are created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method meet the following compliance requirements by default:</p>\n<ul><li>\n<p>New lines and attribute value are normalized according to the W3C <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/\">XML 1.0 Recommendation</see>.</p>\n</li><li>\n<p>All entities are automatically expanded.</p>\n</li><li>\n<p>Default attributes declared in the document type definition are always added even when the reader does not validate. </p>\n</li><li>\n<p>Declaration of XML prefix mapped to the correct XML namespace URI is allowed. </p>\n</li><li>\n<p>The notation names in a single <strong>NotationType</strong> attribute declaration and <strong>NmTokens</strong> in a single <strong>Enumeration</strong> attribute declaration are distinct.</p>\n</li></ul>\n<p>You can use the <xref href=\"System.Xml.XmlReaderSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref> property to check and guarantee that the stream being read complies with the rules for a well-formed XML 1.0 document or document fragment. If the data doesn't comply, an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown. The default is <xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref> (document-level conformance).</p>\n<p>The three conformance levels are:</p>\n<p></p>\n<p>Setting</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Ensures that the XML data conforms to the rules for a well-formed XML 1.0 document. This level of checking ensures that any processor can consume the stream being read as an <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed\">well-formed XML 1.0 document</see>.</p>\n<p>The reader checks for the following:</p>\n<ul><li>\n<p>The top-level item must not have any nodes other than XML Declaration, document type definition (DTD), element, comment, white space, or processing instruction.</p>\n</li><li>\n<p>The XML data must have exactly one top-level element node.</p>\n</li></ul>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Fragment\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Ensures that the XML data conforms to the rules for a well-formed XML 1.0 document fragment. </p>\n<p>This setting accepts XML data with multiple root elements, or text nodes at the top-level. This level of checking ensures that any processor can consume the stream being read as an <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities\">external parsed entity</see>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Auto\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies that the reader should determine the level of conformance checking based on the incoming data.</p>\n<p>Document conformance checking is applied if the XML data contains DTD information.</p>\n<p>Fragment conformance checking is applied if the XML data contains one of following:</p>\n<ul><li>\n<p>Text, CDATA, or entity reference node at the root level.</p>\n</li><li>\n<p>More than one element at the root level.</p>\n</li><li>\n<p>No element at the root level.</p>\n</li></ul>\n<p>An <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown if there is a conflict, such as when there is a text node and a DTD at the root level.</p>\n<p>This setting can be used in wrapping scenarios when the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method is used to add additional features to an existing <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. In this case, <xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref> does not add any new conformance checking. Conformance checking is left to the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that is being wrapped.</p>\n</td></tr></tbody></table>\n<p></p>\n<p>The XML 1.0 recommendation requires document-level conformance when a DTD is present. Therefore, if the reader is configured to support <xref href=\"System.Xml.ConformanceLevel.Fragment\" data-throw-if-not-resolved=\"false\"></xref>, but the XML data contains a document type definition (DTD), an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. </p>\n<p>Here's how the reader handles specific conformance violations depending on the setting of the <xref href=\"System.Xml.XmlReaderSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref> property:</p>\n<p>Condition</p>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Fragment\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Auto\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object that reads an XML fragment.</p>XmlReader.Create#1"
  syntax:
    content: public ConformanceLevel ConformanceLevel { get; set; }
    content.vb: Public Property ConformanceLevel As ConformanceLevel
    parameters: []
    return:
      type: System.Xml.ConformanceLevel
      description: "\n<p>One of the enumeration values that specifies the level of conformance that the XML reader will enforce. The default is <xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.DtdProcessing
  commentId: P:System.Xml.XmlReaderSettings.DtdProcessing
  id: DtdProcessing
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: DtdProcessing
  fullName: System.Xml.XmlReaderSettings.DtdProcessing
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DtdProcessing
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 360
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that determines the processing of DTDs.</p>\n"
  remarks: "\n<p>Document type definition (DTD) validation is implemented by using the validity constraints defined in the W3C <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/\">Extensible Markup Language (XML) 1.0 (fourth edition) recommendation</see>. DTDs use a formal grammar to describe the structure and syntax of compliant XML documents; they specify the content and values allowed for the XML document.</p>\n<p>This property can have one of the following values:</p>\n<ul><li>\n<p>\n<xref href=\"System.Xml.DtdProcessing.Parse\" data-throw-if-not-resolved=\"false\"></xref> to enable DTD processing.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.DtdProcessing.Prohibit\" data-throw-if-not-resolved=\"false\"></xref> to throw an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> exception when a DTD is encountered.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.DtdProcessing.Ignore\" data-throw-if-not-resolved=\"false\"></xref> to disable DTD processing without warnings or exceptions.</p>\n</li></ul>\n<p>To perform validation against a DTD, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> uses the DTD defined in the DOCTYPE declaration of an XML document. The DOCTYPE declaration can either point to an inline DTD or can be a reference to an external DTD file. To validate an XML file against a DTD:</p>\n<ul><li>\n<p>Set the <xref href=\"System.Xml.XmlReaderSettings.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>DtdProcessing.Parse.</strong></p>\n</li><li>\n<p>Set the <xref href=\"System.Xml.XmlReaderSettings.ValidationType\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>ValidationType.DTD</strong>.</p>\n</li><li>\n<p>If the DTD is an external file stored on a network resource that requires authentication, pass an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> object with the necessary credentials to the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method.</p>\n</li></ul>\n<p>If the <xref href=\"System.Xml.XmlReaderSettings.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Xml.DtdProcessing.Ignore\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> will not report the DTDs. This means that the DTD/DOCTYPE will be lost on output. </p>\n"
  example:
  - "\n<p>The following example validates an XML file using a DTD file.</p>XmlReaderSettings.DtdValidate#1Input<p>The example uses the <strong>itemDTD.xml</strong> file as input.</p>XmlReaderSettings.DtdValidate#2"
  syntax:
    content: public DtdProcessing DtdProcessing { get; set; }
    content.vb: Public Property DtdProcessing As DtdProcessing
    parameters: []
    return:
      type: System.Xml.DtdProcessing
      description: "\n<p>One of the enumeration values that determines the processing of DTDs. The default is <xref href=\"System.Xml.DtdProcessing.Prohibit\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.IgnoreComments
  commentId: P:System.Xml.XmlReaderSettings.IgnoreComments
  id: IgnoreComments
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: IgnoreComments
  fullName: System.Xml.XmlReaderSettings.IgnoreComments
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IgnoreComments
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 361
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to ignore comments.</p>\n"
  remarks: "\n<p>Setting this property to <strong>true</strong> can result in multiple contiguous text nodes being returned from the reader. This does not affect validation.</p>\n"
  example:
  - "\n<p>The following creates a settings object that can be used to construct a reader that strips processing instructions, comments, and insignificant white space.</p>XmlReaderSettings.cctor#1"
  syntax:
    content: public bool IgnoreComments { get; set; }
    content.vb: Public Property IgnoreComments As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to ignore comments; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.IgnoreProcessingInstructions
  commentId: P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions
  id: IgnoreProcessingInstructions
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: IgnoreProcessingInstructions
  fullName: System.Xml.XmlReaderSettings.IgnoreProcessingInstructions
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IgnoreProcessingInstructions
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 362
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to ignore processing instructions.</p>\n"
  remarks: "\n<p>Setting this property to <strong>true</strong> can result in multiple contiguous text nodes being returned from the reader. This does not affect validation.</p>\n"
  example:
  - "\n<p>The following creates a settings object that can be used to construct a reader that strips processing instructions, comments, and insignificant white space.</p>XmlReaderSettings.cctor#1"
  syntax:
    content: public bool IgnoreProcessingInstructions { get; set; }
    content.vb: Public Property IgnoreProcessingInstructions As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to ignore processing instructions; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.IgnoreWhitespace
  commentId: P:System.Xml.XmlReaderSettings.IgnoreWhitespace
  id: IgnoreWhitespace
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: IgnoreWhitespace
  fullName: System.Xml.XmlReaderSettings.IgnoreWhitespace
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IgnoreWhitespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 363
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to ignore insignificant white space.</p>\n"
  remarks: "\n<p>White space that is not considered to be significant includes spaces, tabs, and blank lines used to set apart the markup for greater readability. An example of this is white space in element content.</p>\n<p>This property setting does not affect white space between markup in a mixed content mode, or white space that occurs within the scope of an <code>xml:space='preserve'</code> attribute.</p>\n"
  example:
  - "\n<p>The following creates a settings object that can be used to construct a reader that strips processing instructions, comments, and insignificant white space.</p>XmlReaderSettings.cctor#1"
  syntax:
    content: public bool IgnoreWhitespace { get; set; }
    content.vb: Public Property IgnoreWhitespace As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to ignore white space; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.LineNumberOffset
  commentId: P:System.Xml.XmlReaderSettings.LineNumberOffset
  id: LineNumberOffset
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: LineNumberOffset
  fullName: System.Xml.XmlReaderSettings.LineNumberOffset
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LineNumberOffset
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 364
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets line number offset of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlReaderSettings.LineNumberOffset\" data-throw-if-not-resolved=\"false\"></xref> setting determines the point where the <xref href=\"System.Xml.IXmlLineInfo.LineNumber\" data-throw-if-not-resolved=\"false\"></xref> property starts counting. This is useful if your XML data is embedded within a larger document. For example, if your XML data were embedded in a larger document, and your data started on line 101 of the document, you may want to specify that the reader start at line 100. Therefore, if the reader threw an exception while parsing the first line of the XML, it would report the line number as line 101, rather than line 1.</p>\n"
  example:
  - 
  syntax:
    content: public int LineNumberOffset { get; set; }
    content.vb: Public Property LineNumberOffset As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The line number offset. The default is 0.</p>\n"
  seealso:
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.LinePositionOffset
  commentId: P:System.Xml.XmlReaderSettings.LinePositionOffset
  id: LinePositionOffset
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: LinePositionOffset
  fullName: System.Xml.XmlReaderSettings.LinePositionOffset
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LinePositionOffset
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 365
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets line position offset of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlReaderSettings.LinePositionOffset\" data-throw-if-not-resolved=\"false\"></xref> setting determines the point where the <xref href=\"System.Xml.IXmlLineInfo.LinePosition\" data-throw-if-not-resolved=\"false\"></xref> property starts counting. This is useful if your XML data is embedded within a larger document and there is no new line at the beginning of the XML. In this case, if the reader throws an exception while parsing the XML, you want it to return the line position relative to the main document, not just relative to the XML fragment.</p>\n"
  example:
  - 
  syntax:
    content: public int LinePositionOffset { get; set; }
    content.vb: Public Property LinePositionOffset As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The line position offset. The default is 0.</p>\n"
  seealso:
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.MaxCharactersFromEntities
  commentId: P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities
  id: MaxCharactersFromEntities
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: MaxCharactersFromEntities
  fullName: System.Xml.XmlReaderSettings.MaxCharactersFromEntities
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxCharactersFromEntities
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 366
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.</p>\n"
  remarks: "\n<p>A zero (0) value means no limits on the number of characters that result from expanding entities. A non-zero value specifies the maximum number of characters that can result from expanding entities.</p>\n<p>If the reader attempts to read a document that contains entities such that the expanded size will exceed this property, an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown.</p>\n<p>This property allows you to mitigate denial of service attacks where the attacker submits XML documents that attempt to exceed memory limits via expanding entities. By limiting the characters that result from expanded entities, you can detect the attack and recover reliably.</p>\n"
  example:
  - "\n<p>The following code sets this property, and then attempts to parse a document that contains an entity that expands to a size greater than the set limit. In a real world scenario, you would set this limit to a value large enough to handle valid documents, yet small enough to limit the threat from malicious documents.</p>\n<pre><code class=\"c#\">string markup =\n@\"<!DOCTYPE Root [\n<!ENTITY anEntity \"\"Expands to more than 30 characters\"\">\n<!ELEMENT Root (#PCDATA)>\n]>\n<Root>Content &anEntity;</Root>\";\n\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.DtdProcessing = DtdProcessing.Parse;\nsettings.ValidationType = ValidationType.DTD;\nsettings.MaxCharactersFromEntities = 30;\n\ntry\n{\nXmlReader reader = XmlReader.Create(new StringReader(markup), settings);\nwhile (reader.Read()) { }\n}\ncatch (XmlException ex)\n{\nConsole.WriteLine(ex.Message);\n}</code></pre>\n<pre><code class=\"vb\">Dim markup As String = _\n\"<!DOCTYPE Root [\" + Environment.NewLine + _\n\"  <!ENTITY anEntity \"\"Expands to more than 30 characters\"\">\" + Environment.NewLine + _\n\"  <!ELEMENT Root (#PCDATA)>\" + Environment.NewLine + _\n\"]>\" + Environment.NewLine + _\n\"<Root>Content &anEntity;</Root>\"\n\nDim settings As XmlReaderSettings = New XmlReaderSettings()\nsettings.DtdProcessing = DtdProcessing.Parse;\nsettings.ValidationType = ValidationType.DTD\nsettings.MaxCharactersFromEntities = 30\n\nTry\nDim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)\nWhile (reader.Read())\nEnd While\nCatch ex As XmlException\nConsole.WriteLine(ex.Message)\nEnd Try</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>There is an error in XML document (MaxCharactersFromEntities, ).</code></pre>\n"
  syntax:
    content: public long MaxCharactersFromEntities { get; set; }
    content.vb: Public Property MaxCharactersFromEntities As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The maximum allowable number of characters from expanded entities. The default is 0.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.MaxCharactersInDocument
  commentId: P:System.Xml.XmlReaderSettings.MaxCharactersInDocument
  id: MaxCharactersInDocument
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: MaxCharactersInDocument
  fullName: System.Xml.XmlReaderSettings.MaxCharactersInDocument
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxCharactersInDocument
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 367
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating the maximum allowable number of characters in an XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.</p>\n"
  remarks: "\n<p>A zero (0) value means no limits on the number of characters in the parsed document. A non-zero value specifies the maximum number of characters that can be parsed.</p>\n<p>The maximum character count for the document includes the count of characters that result from expanded entities.</p>\n<p>If the reader attempts to read a document with a size that exceeds this property, an <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown.</p>\n<p>This property allows you to mitigate denial of service attacks where the attacker submits extremely large XML documents. By limiting the size of a document, you can detect the attack and recover reliably.</p>\n"
  example:
  - "\n<p>The following code sets this property, and then attempts to parse a document larger than the limit. In a real world scenario, you would set this limit to a value large enough to handle valid documents, yet small enough to limit the threat from malicious documents.</p>\n<pre><code class=\"c#\">string markup = \"<Root>Content</Root>\";\n\nXmlReaderSettings settings = new XmlReaderSettings();\nsettings.MaxCharactersInDocument = 10;\n\ntry\n{\nXmlReader reader = XmlReader.Create(new StringReader(markup), settings);\nwhile (reader.Read()) { }\n}\ncatch (XmlException ex)\n{\nConsole.WriteLine(ex.Message);\n}</code></pre>\n<pre><code class=\"vb\">Dim markup As String = \"<Root>Content</Root>\"\n\nDim settings As XmlReaderSettings = New XmlReaderSettings()\nsettings.MaxCharactersInDocument = 10\n\nTry\nDim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)\nWhile (reader.Read())\nEnd While\nCatch ex As XmlException\nConsole.WriteLine(ex.Message)\nEnd Try</code></pre>\n<p>This code produces the following output:</p>\n<pre><code>There is an error in XML document (MaxCharactersInDocument, ).</code></pre>\n"
  syntax:
    content: public long MaxCharactersInDocument { get; set; }
    content.vb: Public Property MaxCharactersInDocument As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The maximum allowable number of characters in an XML document. The default is 0.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.NameTable
  commentId: P:System.Xml.XmlReaderSettings.NameTable
  id: NameTable
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: NameTable
  fullName: System.Xml.XmlReaderSettings.NameTable
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameTable
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 368
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> used for atomized string comparisons.</p>\n"
  remarks: "\n<p>Set this property to an <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> instance if you want to share a common name table among all the created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n<p>The <xref href=\"System.Xml.NameTable\" data-throw-if-not-resolved=\"false\"></xref> class is not thread-safe. Therefore it cannot be shared between <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> objects that run simultaneously in different threads.</p>\n"
  example:
  - 
  syntax:
    content: public XmlNameTable NameTable { get; set; }
    content.vb: Public Property NameTable As XmlNameTable
    parameters: []
    return:
      type: System.Xml.XmlNameTable
      description: "\n<p>The <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> that stores all the atomized strings used by all <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instances created using this <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The default is <strong>null</strong>. The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance will use a new empty <xref href=\"System.Xml.NameTable\" data-throw-if-not-resolved=\"false\"></xref> if this value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.Clone
  commentId: M:System.Xml.XmlReaderSettings.Clone
  id: Clone
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Xml.XmlReaderSettings.Clone()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 369
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a copy of the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The cloned <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object can be modified without affecting the settings on the original object.</p>\n"
  example:
  - 
  syntax:
    content: public XmlReaderSettings Clone()
    content.vb: Public Function Clone As XmlReaderSettings
    return:
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The cloned <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Xml.XmlReader
    commentId: T:System.Xml.XmlReader
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReaderSettings.Reset
  commentId: M:System.Xml.XmlReaderSettings.Reset
  id: Reset
  parent: System.Xml.XmlReaderSettings
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Xml.XmlReaderSettings.Reset()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 370
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Resets the members of the settings class to their default values.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property</p>\n<p>Initial Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.IgnoreComments\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.IgnoreProcessingInstructions\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.IgnoreWhitespace\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.LineNumberOffset\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.LinePositionOffset\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.MaxCharactersFromEntities\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0 (there is no limit on the number of characters that result from expanding entities).</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.MaxCharactersInDocument\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>0 (there is no limit on the size of the XML document).</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.NameTable\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.DtdProcessing.Prohibit\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ProhibitDtd\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>. This property is obsolete. Use <xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> instead. If you had set <xref href=\"System.Xml.XmlReaderSettings.ProhibitDtd\" data-throw-if-not-resolved=\"false\"></xref> to its default value <strong>true</strong> set <xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> to <strong>Prohibit</strong>. If you had set <xref href=\"System.Xml.XmlReaderSettings.ProhibitDtd\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong> set <xref href=\"System.Xml.XmlTextReader.DtdProcessing\" data-throw-if-not-resolved=\"false\"></xref> to <strong>Parse</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.Schemas\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>An empty <xref href=\"System.Xml.Schema.XmlSchemaSet\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ValidationFlags\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.ValidationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ValidationType.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A new <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  seealso:
  - type: System.Xml.XmlReader
    commentId: T:System.Xml.XmlReader
  - type: System.Xml.XmlReader.Create(System.String)
    commentId: M:System.Xml.XmlReader.Create(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Xml.ConformanceLevel
  parent: System.Xml
  isExternal: false
  name: ConformanceLevel
  fullName: System.Xml.ConformanceLevel
- uid: System.Xml.DtdProcessing
  parent: System.Xml
  isExternal: false
  name: DtdProcessing
  fullName: System.Xml.DtdProcessing
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: false
  name: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlReaderSettings
  parent: System.Xml
  isExternal: false
  name: XmlReaderSettings
  fullName: System.Xml.XmlReaderSettings
