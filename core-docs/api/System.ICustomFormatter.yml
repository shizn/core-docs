items:
- uid: System.ICustomFormatter
  commentId: T:System.ICustomFormatter
  id: ICustomFormatter
  parent: System
  children:
  - System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)
  langs:
  - csharp
  - vb
  name: ICustomFormatter
  fullName: System.ICustomFormatter
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ICustomFormatter
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 985
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines a method that supports custom formatting of the value of an object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface includes a single method, <xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. When this interface is implemented by a reference or value type, the <xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method returns a custom-formatted string representation of an object's value. </p>\n<p>Typically, the <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface is implemented with the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> parameter. Specifically, the <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface can provide custom formatting of the value of an object passed to the <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>Providing a custom representation of an object's value requires that you do the following:</p>\n<ol><li>\n<p>Define a class that implements the <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface and its single member, the <xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li><li>\n<p>Define a class that implements the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> interface and its single member, the <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns an instance of your <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> implementation. Often, a single class implements both <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. In that case, the class's <strong>GetFormat</strong> implementation just returns an instance of itself.</p>\n</li><li>\n<p>Pass the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation as the <em>provider</em> argument of the <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method or a comparable method. </p>\n</li></ol>\n<p>The .NET Framework method will then use your custom formatting instead of its own.</p>\n"
  example:
  - "\n<p>The following example implements <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> to allow binary, octal, and hexadecimal formatting of integral values. In this example, a single class, <code>IBinaryFormatter</code>, implements both <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method determines whether the <em>formatType</em> parameter represents an <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> type. If it does, <code>BinaryFormatter</code> returns an instance of itself; otherwise, it returns <strong>null</strong>. Its <xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation determines whether the format parameter is one of the three supported format strings (\"B\" for binary, \"O\" for octal, and \"H\" for hexadecimal) and formats the <em>arg</em> parameter appropriately. Otherwise, if <em>arg</em> is not <strong>null</strong>, it calls the <em>arg</em> parameter's <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation, if one exists, or its parameterless <strong>ToString</strong> method, if one does not. If <em>arg</em> is <strong>null</strong>, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.ICustomFormatter.Class#1<p><code>BinaryFormatter</code> can then be used to provide custom formatting by passing a <code>BinaryFormatter</code> object as the <em>provider</em> parameter of the <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method, as the following example shows.</p>System.ICustomFormatter.Class#2"
  syntax:
    content: public interface ICustomFormatter
    content.vb: Public Interface ICustomFormatter
  seealso:
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)
  commentId: M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)
  id: Format(System.String,System.Object,System.IFormatProvider)
  parent: System.ICustomFormatter
  langs:
  - csharp
  - vb
  name: Format(String, Object, IFormatProvider)
  fullName: System.ICustomFormatter.Format(System.String, System.Object, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 987
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> is a callback method. It is called by a method that supports custom formatting, such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref>. The implementation is called once for each format item in a composite format string. For example, in the following statement, the <xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method is called three times.</p>System.ICustomFormatter.Class#4<p>The <em>arg</em> parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item. </p><p>The <em>format</em> parameter contains a format string, which is the <em>formatString</em> component of a format item. If the format item has no <em>formatString</em> component, the value of <em>format</em> is <strong>null</strong>. If <em>format</em> is <strong>null</strong>, depending on the type of <em>arg</em>, you may be able to use the default format specification of your choice. </p><p>The <em>formatProvider</em> parameter is the <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that provides formatting for <em>arg</em>. Typically, it is an instance of your <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> implementation. If <em>formatProvider</em> is <strong>null</strong>, ignore that parameter.</p><p>Your implementation of the <xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method must include the following functionality so the .NET Framework can provide formatting you do not support. If your format method does not support a format, determine whether the object being formatted implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface. If it does, invoke the <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method of that interface. Otherwise, invoke the default <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method of the underlying object. The following code illustrates this pattern.</p>System.ICustomFormatter.Class#3"
  example:
  - "\n<p>The following example implements <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> to allow binary, octal, and hexadecimal formatting of integral values. Its <xref href=\"System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation determines whether the format parameter is one of the three supported format strings (\"B\" for binary, \"O\" for octal, and \"H\" for hexadecimal) and formats the <em>arg</em> parameter appropriately. Otherwise, if <em>arg</em> is not <strong>null</strong>, it calls the <em>arg</em> parameter's <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> implementation, if one exists, or its parameterless <strong>ToString</strong> method, if one does not. If <em>arg</em> is <strong>null</strong>, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.ICustomFormatter.Class#1<p><code>BinaryFormatter</code> can then be used to provide custom formatting by passing a <code>BinaryFormatter</code> object as the <em>provider</em> parameter of the <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method, as the following example shows.</p>System.ICustomFormatter.Class#2"
  syntax:
    content: string Format(string format, object arg, IFormatProvider formatProvider)
    content.vb: Function Format(format As String, arg As Object, formatProvider As IFormatProvider) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A format string containing formatting specifications. </p>\n"
    - id: arg
      type: System.Object
      description: "\n<p>An object to format. </p>\n"
    - id: formatProvider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies format information about the current instance. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of <em>arg</em>, formatted as specified by <em>format</em> and <em>formatProvider</em>.</p>\n"
  seealso:
  - type: System.IFormattable
    commentId: T:System.IFormattable
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
