items:
- uid: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
  id: OutOfMemoryException
  parent: System
  children:
  - System.OutOfMemoryException.#ctor
  - System.OutOfMemoryException.#ctor(System.String)
  - System.OutOfMemoryException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/OutOfMemoryException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OutOfMemoryException
    path: src/mscorlib/src/System/OutOfMemoryException.cs
    startLine: 18
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when there is not enough memory to continue the execution of a program.</p>\n"
  remarks: "\n<p>An <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception has two major causes: </p>\n<ul><li>\n<p>You are attempting to expand a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object beyond the length defined by its <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>The common language runtime cannot allocate enough contiguous memory to successfully perform an operation. This exception can be thrown by any property assignment or method call that requires a memory allocation. For more information on the cause of the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception, see <see href=\"http://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx\">\"Out of Memory\" Does Not Refer to Physical Memory</see>. </p>\n<p>This type of <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception represents a catastrophic failure. If you choose to handle the exception, you should include a <strong>catch</strong> block that calls the <xref href=\"System.Environment.FailFast(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to terminate your app and add an entry to the system event log, as the following example does. </p>System.OutOfMemoryException#2</li></ul>\n<p>Some of the conditions under which the exception is thrown and the actions you can take to eliminate it include the following:</p>You are calling the <xref href=\"System.Text.StringBuilder.Insert(System.Int32,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.<p>You are attempting to increase the length of a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object beyond the size specified by its <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref> property. The following example illustrates the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception thrown by a call to the <xref href=\"System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method when the example tries to insert a string that would cause the object's <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> property to exceed its maximum capacity. </p>System.OutOfMemoryException#1<p>You can do either of the following to address the error:</p><ul><li><p>Replace the call to the <xref href=\"System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a call any other <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> constructor overload. The maximum capacity of your <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object will be set to its default value, which is <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.  </p></li><li><p>Call the <xref href=\"System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a <em>maxCapacity</em> value that is large enough to accommodate any expansions to the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p></li></ul>Your app runs as a 32-bit process. <p>32-bit processes can allocate a maximum of 2GB of virtual user-mode memory on 32-bit systems, and 4GB of virtual user-mode memory on 64-bit systems. This can make it more difficult for the common language runtime to allocate sufficient contiguous memory when a large allocation is needed. In contrast, 64-bit processes can allocate up to 8TB of virtual memory. To address this exception, recompile your app to target a 64-bit platform. For information on targeting specific platforms in Visual Studio, see How to: Configure Projects to Target Platforms. </p>Your app is leaking unmanaged resources<p>Although the garbage collector is able to free memory allocated to managed types, it does not manage memory allocated to unmanaged resources such as operating system handles (including handles to files, memory-mapped files, pipes, registry keys, and wait handles) and memory blocks allocated directly by Windows API calls or by calls to memory allocation functions such as <strong>malloc</strong>. Types that consume unmanaged resources implement the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p><p>If you are consuming a type that uses unmanaged resources, you should be sure to call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method when you have finished using it. (Some types also implement a <strong>Close</strong> method that is identical in function to a <strong>Dispose</strong> method.) For more information, see the Using Objects That Implement IDisposable topic. </p><p>If you have created a type that uses unmanaged resources, make sure that you have implemented the Dispose pattern and, if necessary, supplied a finalizer. For more information, see the Dispose Pattern, Implementing a Dispose Method, and <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> topics. </p>You are attempting to create a large array in a 64-bit process. <p>By default, the common language runtime does not allow single objects whose size exceeds 2GB. To override this default, you can use the  configuration file setting to enable arrays whose total size exceeds 2 GB. </p>You are working with very large sets of data (such as arrays, collections, or database data sets) in memory.<p>When data structures or data sets that reside in memory become so large that the common language runtime is unable to allocate enough contiguous memory for them, an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception results. </p><p>To prevent the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exceptions, you must modify your application so that less data is resident in memory, or the data is divided into segments that require smaller memory allocations. For example: </p><ul><li><p>If you are retrieving all of the data from a database and then filtering it in your app to minimize trips to the server, you should modify your queries to return only the subset of data that your app needs. When working with large tables, multiple queries are almost always more efficient than retrieving all of the data in a single table and then manipulating it. </p></li><li><p>If you are executing queries that users create dynamically, you should ensure that the number of records returned by the query is limited. </p></li><li><p>If you are using large arrays or other collection objects whose size results in an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception, you should modify your application to work the data in subsets rather than to work with it all at once. </p></li></ul><p>The following example gets a array that consists of 200 million floating-point values and then calculates their mean. The output from the example shows that, because the example stores the entire array in memory before it calculates the mean, an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> is is thrown. </p>System.OutOfMemoryException#3<p>The following example eliminates the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception by processing the incoming data without storing the entire data set in memory, serializing the data to a file if necessary to permit further processing (these lines are commented out in the example, since in this case they produce a file whose size is greater than 1GB), and returning the calculated mean and the number of cases to the calling routine. </p>System.OutOfMemoryException#4You are repeatedly concatenating large strings.<p>Because strings are immutable, each string concatenation operation creates a new string. The impact for small strings, or for a small number of concatenation operations, is negligible. But for large strings or a very large number of concatenation operations, string concatenation can lead to a large number of memory allocations and memory fragmentation, poor performance, and possibly <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exceptions. </p><p>When concatenating large strings or performing a large number of concatenation operations, you should use the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class instead of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class. When you have finished manipulating the string, convert the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance to a string by calling the <xref href=\"System.Text.StringBuilder.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. </p>You pin a large number of objects in memory. <p>Pinning a large number of objects in memory for long periods can make it difficult for the garbage collector to allocate contiguous blocks of memory. If you've pinned a large number of objects in memory, for example by using the <strong>fixed</strong> statement in C# or by calling the <xref href=\"System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)\" data-throw-if-not-resolved=\"false\"></xref> method with a handle type of <xref href=\"System.Runtime.InteropServices.GCHandleType.Pinned\" data-throw-if-not-resolved=\"false\"></xref>, you can do the following to address the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p><ul><li><p>Evaluate whether each object really needs to be pinned, </p></li><li><p>Ensure that each object is unpinned as soon as possible. </p></li><li><p>Make sure that each call to the <xref href=\"System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)\" data-throw-if-not-resolved=\"false\"></xref> method to pin memory has a corresponding call to the <xref href=\"System.Runtime.InteropServices.GCHandle.Free\" data-throw-if-not-resolved=\"false\"></xref> method to unpin that memory. </p></li></ul><p>The following Microsoft intermediate (MSIL) instructions throw an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception: </p><ul><li><p><see href=\"http://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx\">box</see></p></li><li><p><see href=\"http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx\">newarr</see></p></li><li><p><see href=\"http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx\">newobj</see>newobj</p></li></ul><p><xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT <strong>COR_E_OUTOFMEMORY</strong>, which has the value 0x8007000E.</p><p>For a list of initial property values for an instance of <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.OutOfMemoryException.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p><p>The value of the inherited <xref href=\"System.Exception.Data\" data-throw-if-not-resolved=\"false\"></xref> property is always <strong>null</strong>.</p>"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public class OutOfMemoryException : SystemException, ISerializable, _Exception
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public Class OutOfMemoryException
          Inherits SystemException
          Implements ISerializable, _Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.OutOfMemoryException.#ctor
  commentId: M:System.OutOfMemoryException.#ctor
  id: '#ctor'
  parent: System.OutOfMemoryException
  langs:
  - csharp
  - vb
  name: OutOfMemoryException()
  fullName: System.OutOfMemoryException.OutOfMemoryException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/OutOfMemoryException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/OutOfMemoryException.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"There was not enough memory to continue the execution of the program.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public OutOfMemoryException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.OutOfMemoryException.#ctor(System.String)
  commentId: M:System.OutOfMemoryException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.OutOfMemoryException
  langs:
  - csharp
  - vb
  name: OutOfMemoryException(String)
  fullName: System.OutOfMemoryException.OutOfMemoryException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/OutOfMemoryException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/OutOfMemoryException.cs
    startLine: 26
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The content of the <em>message</em> parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public OutOfMemoryException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.OutOfMemoryException.#ctor(System.String,System.Exception)
  commentId: M:System.OutOfMemoryException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.OutOfMemoryException
  langs:
  - csharp
  - vb
  name: OutOfMemoryException(String, Exception)
  fullName: System.OutOfMemoryException.OutOfMemoryException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/OutOfMemoryException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/OutOfMemoryException.cs
    startLine: 31
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or a null reference (<strong>Nothing</strong> in Visual Basic) if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public OutOfMemoryException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: System.Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
