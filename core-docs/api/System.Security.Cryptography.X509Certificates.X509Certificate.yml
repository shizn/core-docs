items:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate
  id: X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  children:
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  - System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  - System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
  langs:
  - csharp
  - vb
  name: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: X509Certificate
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Provides methods that help you use X.509 v.3 certificates.</p>\n"
  remarks: "\n<p>ASN.1 DER is the only certificate format supported by this class.  </p>\n<p>For most scenarios, you should use the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> class instead.</p>\n<p>Starting with the .NET Framework 4.6, this type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>For apps that target the .NET Framework 4.5.2 and earlier versions, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class does not implement the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface and therefore does not have a <strong>Dispose</strong> method. </p>\n"
  example:
  - "\n<p>The following example loads an X.509 certificate from a file, calls the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method, and displays the results to the console.  </p>Cryptography.X509Certificates.X509Certificate#1"
  syntax:
    content: 'public class X509Certificate : IDisposable'
    content.vb: >-
      Public Class X509Certificate
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 18
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>ASN.1 DER is the only certificate format supported by this class.</p>\n"
  syntax:
    content: public X509Certificate()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 22
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class defined from a sequence of bytes representing an X.509v3 certificate.</p>\n"
  remarks: "\n<p>ASN.1 DER is the only certificate format supported by this class.</p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>data</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  example:
  - "\n<p>The following example loads an X.509 certificate file into an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object, exports the certificate as a byte array, and then imports the byte array into another <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Cryptography.X509Certificates.X509Certificate.Import-Export#1"
  syntax:
    content: public X509Certificate(byte[] data)
    content.vb: Public Sub New(data As Byte())
    parameters:
    - id: data
      type: System.Byte[]
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The length of the <em>rawData</em> parameter is 0.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte())
  name.vb: X509Certificate(Byte())
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate(Byte[], String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte[], System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 28
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class using a byte array and a password.</p>\n"
  remarks: "\n<p>ASN.1 DER is the only certificate format supported by this class.</p>\n<p>Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the Ildasm.exe (IL Disassembler), a hex editor, or by simply opening the assembly in a text editor such as Notepad.exe. </p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>rawData</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate(byte[] rawData, string password)
    content.vb: Public Sub New(rawData As Byte(), password As String)
    parameters:
    - id: rawData
      type: System.Byte[]
    - id: password
      type: System.String
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The length of the <em>rawData</em> parameter is 0.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte(), System.String)
  name.vb: X509Certificate(Byte(), String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate(Byte[], String, X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 33
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class using a byte array, a password, and a key storage flag.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object using a byte array, a password that is needed to access the certificate data, and a key storage flag.  Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP). </p>\n<p>The <xref href=\"System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\" data-throw-if-not-resolved=\"false\"></xref> value can be used to control where and how the private key is imported.</p>\n<p>ASN.1 DER is the only certificate format supported by this class.</p>\n<p>Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the Ildasm.exe (IL Disassembler), a hex editor, or by simply opening the assembly in a text editor such as Notepad.exe. </p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>rawData</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags)
    content.vb: Public Sub New(rawData As Byte(), password As String, keyStorageFlags As X509KeyStorageFlags)
    parameters:
    - id: rawData
      type: System.Byte[]
    - id: password
      type: System.String
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The length of the <em>rawData</em> parameter is 0.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte(), System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  name.vb: X509Certificate(Byte(), String, X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.IntPtr)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 101
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class using a handle to an unmanaged <strong>PCCERT_CONTEXT</strong> structure.</p>\n"
  remarks: "\n<p>This constructor creates a new <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object using a handle for the Microsoft Cryptographic API certificate context, <strong>PCCERT_CONTEXT</strong>.</p>\n<p>This constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current <strong>PCCERT_CONTEXT</strong> structure from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.Handle\" data-throw-if-not-resolved=\"false\"></xref> property, but it is valid only during the lifetime of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public X509Certificate(IntPtr handle)
    content.vb: Public Sub New(handle As IntPtr)
    parameters:
    - id: handle
      type: System.IntPtr
      description: "\n<p>A handle to an unmanaged <strong>PCCERT_CONTEXT</strong> structure.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The handle parameter does not represent a valid <strong>PCCERT_CONTEXT</strong> structure.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 54
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class using the name of a PKCS7 signed file. </p>\n"
  remarks: "\n<p>ASN.1 DER is the only certificate format supported by this class.</p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>fileName</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  example:
  - "\n<p>The following example loads an X.509 certificate from a file, calls the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method, and displays the results to the console.  </p>Cryptography.X509Certificates.X509Certificate#1"
  syntax:
    content: public X509Certificate(string fileName)
    content.vb: Public Sub New(fileName As String)
    parameters:
    - id: fileName
      type: System.String
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate(String, String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 59
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class using the name of a PKCS7 signed file and a password to access the certificate.</p>\n"
  remarks: "\n<p>ASN.1 DER is the only certificate format supported by this class.  Calling this constructor with the correct password decrypts the private key and saves it to a key container.</p>\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>fileName</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate(string fileName, string password)
    content.vb: Public Sub New(fileName As String, password As String)
    parameters:
    - id: fileName
      type: System.String
    - id: password
      type: System.String
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: X509Certificate(String, String, X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 64
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class using the name of a PKCS7 signed file, a password to access the certificate, and a key storage flag. </p>\n"
  remarks: "\n<p>If you create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> certificate by specifying a PKCS7 signed file store for <em>fileName</em>, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> is created for the certificate that signed the store rather than for any of the certificates within the store. </p>\n"
  syntax:
    content: public X509Certificate(string fileName, string password, X509KeyStorageFlags keyStorageFlags)
    content.vb: Public Sub New(fileName As String, password As String, keyStorageFlags As X509KeyStorageFlags)
    parameters:
    - id: fileName
      type: System.String
    - id: password
      type: System.String
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error with the certificate occurs. For example:</p>\n<ul><li>\n<p>The certificate file does not exist.</p>\n</li><li>\n<p>The certificate is invalid.</p>\n</li><li>\n<p>The certificate's password is incorrect.</p>\n</li></ul>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  id: Handle
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Handle
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Handle
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 74
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets a handle to a Microsoft Cryptographic API certificate context described by an unmanaged <strong>PCCERT_CONTEXT</strong> structure. </p>\n"
  remarks: "\n<p>The handle is valid only for the lifetime of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public IntPtr Handle { get; }
    content.vb: Public ReadOnly Property Handle As IntPtr
    parameters: []
    return:
      type: IntPtr
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  id: Issuer
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Issuer
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Issuer
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 85
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the name of the certificate authority that issued the X.509v3 certificate.</p>\n"
  syntax:
    content: public string Issuer { get; }
    content.vb: Public ReadOnly Property Issuer As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate handle is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  id: Subject
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Subject
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subject
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 98
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the subject distinguished name from the certificate.</p>\n"
  example:
  - 
  syntax:
    content: public string Subject { get; }
    content.vb: Public ReadOnly Property Subject As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate handle is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  id: Dispose
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 111
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Releases all resources used by the current <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class does not implement this interface, and therefore the <strong>Dispose</strong> method does not exist. </p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 116
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Releases all of the unmanaged resources used by this <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> class does not implement this interface, and therefore the <strong>Dispose</strong> method does not exist. </p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 127
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Compares two <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> objects for equality.</p>\n"
  remarks: "\n<p>Two objects are considered equal if they are <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> objects and they have the same issuer and serial number.</p>\n"
  example:
  - "\n<p>The following example compares two certificates for equality.</p>X509Certificate.Equals Method#1"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Equals(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 135
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Compares two <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> objects for equality.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> objects are considered equal if they have the same issuer and serial number.</p>\n"
  example:
  - "\n<p>The following example compares two certificates for equality.</p>X509Certificate.Equals Method#1"
  syntax:
    content: public virtual bool Equals(X509Certificate other)
    content.vb: Public Overridable Function Equals(other As X509Certificate) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.X509Certificates.X509Certificate
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  id: Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Export(X509ContentType)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Export
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 160
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Exports the current <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object to a byte array in a format described by one of the <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  remarks: "\n<p>The <em>contentType</em> parameter accepts only the following values of the <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\" data-throw-if-not-resolved=\"false\"></xref> enumeration: <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Cert\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.SerializedCert\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs12\" data-throw-if-not-resolved=\"false\"></xref>.  Passing any other value causes a <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  example:
  - "\n<p>The following example loads an X.509 certificate file into an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object, exports the certificate as a byte array, and then imports the byte array into another <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Cryptography.X509Certificates.X509Certificate.Import-Export#1"
  syntax:
    content: public virtual byte[] Export(X509ContentType contentType)
    content.vb: Public Overridable Function Export(contentType As X509ContentType) As Byte()
    parameters:
    - id: contentType
      type: System.Security.Cryptography.X509Certificates.X509ContentType
    return:
      type: System.Byte[]
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>A value other than <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Cert\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.SerializedCert\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs12\" data-throw-if-not-resolved=\"false\"></xref> was passed to the <em>contentType</em> parameter.</p>\n<p>-or-</p>\n<p>The certificate could not be exported.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  id: Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: Export(X509ContentType, String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType, System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Export
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 165
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Exports the current <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object to a byte array in a format described by one of the <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\" data-throw-if-not-resolved=\"false\"></xref> values, and using the specified password.</p>\n"
  remarks: "\n<p>The <em>contentType</em> parameter accepts only the following values of the <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType\" data-throw-if-not-resolved=\"false\"></xref> enumeration: <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Cert\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.SerializedCert\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs12\" data-throw-if-not-resolved=\"false\"></xref>.  Passing any other value causes a <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n<p>Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the Ildasm.exe (IL Disassembler), a hex editor, or by simply opening the assembly in a text editor such as Notepad.exe. </p>\n"
  syntax:
    content: public virtual byte[] Export(X509ContentType contentType, string password)
    content.vb: Public Overridable Function Export(contentType As X509ContentType, password As String) As Byte()
    parameters:
    - id: contentType
      type: System.Security.Cryptography.X509Certificates.X509ContentType
    - id: password
      type: System.String
    return:
      type: System.Byte[]
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>A value other than <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Cert\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.SerializedCert\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs12\" data-throw-if-not-resolved=\"false\"></xref> was passed to the <em>contentType</em> parameter.</p>\n<p>-or-</p>\n<p>The certificate could not be exported.</p>\n"
  see:
  - type: System.Security.Permissions.KeyContainerPermission
    commentId: T:System.Security.Permissions.KeyContainerPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  id: GetCertHash
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetCertHash()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCertHash
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 179
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the hash value for the X.509v3 certificate as an array of bytes.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\" data-throw-if-not-resolved=\"false\"></xref> method to fill an array of bytes with the hash value for an X.509 certificate.</p>X509Certificate.GetCertHash Method#1"
  syntax:
    content: public virtual byte[] GetCertHash()
    content.vb: Public Overridable Function GetCertHash As Byte()
    return:
      type: System.Byte[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  id: GetFormat
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetFormat()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFormat
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 191
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the name of the format of this X.509v3 certificate.</p>\n"
  remarks: "\n<p>The format X.509 is always returned in this implementation.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\" data-throw-if-not-resolved=\"false\"></xref> method to get the format of a certificate and displays it to the console.</p>X509Certificate.GetFormat Method#1"
  syntax:
    content: public virtual string GetFormat()
    content.vb: Public Overridable Function GetFormat As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 196
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the hash code for the X.509v3 certificate as an integer.</p>\n"
  remarks: "\n<p>If the X.509 certificate hash is an array of more than 4 bytes, any byte after the fourth byte is not seen in this integer representation.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method to return an integer representation of a certificate's hash code and displays it to the console.</p>X509Certificate.GetHashCode Method#1"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  id: GetKeyAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetKeyAlgorithm()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetKeyAlgorithm
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 210
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the key algorithm information for this X.509v3 certificate as a string.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> method to get a certificate's key algorithm in string format and displays it to the console.</p>X509Certificate.GetKeyAlgorithm Method#1"
  syntax:
    content: public virtual string GetKeyAlgorithm()
    content.vb: Public Overridable Function GetKeyAlgorithm As String
    return:
      type: System.String
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  id: GetKeyAlgorithmParameters
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetKeyAlgorithmParameters()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetKeyAlgorithmParameters
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 220
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the key algorithm parameters for the X.509v3 certificate as an array of bytes.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\" data-throw-if-not-resolved=\"false\"></xref> method to return a certificate's key algorithm parameters as an array of bytes and displays it to the console.</p>X509Certificate.GetKeyAlgorithmParameters Method#1"
  syntax:
    content: public virtual byte[] GetKeyAlgorithmParameters()
    content.vb: Public Overridable Function GetKeyAlgorithmParameters As Byte()
    return:
      type: System.Byte[]
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  id: GetKeyAlgorithmParametersString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetKeyAlgorithmParametersString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetKeyAlgorithmParametersString
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 230
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the key algorithm parameters for the X.509v3 certificate as a hexadecimal string.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\" data-throw-if-not-resolved=\"false\"></xref> method to return a certificate's key algorithm parameters in string format and displays it to the console.</p>X509Certificate.GetKeyAlgorithmParametersString#1"
  syntax:
    content: public virtual string GetKeyAlgorithmParametersString()
    content.vb: Public Overridable Function GetKeyAlgorithmParametersString As String
    return:
      type: System.String
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  id: GetPublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetPublicKey()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPublicKey
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 238
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the public key for the X.509v3 certificate as an array of bytes.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\" data-throw-if-not-resolved=\"false\"></xref> method to return a certificate's public key as an array of bytes and displays it to the console.</p>X509Certificate.GetPublicKey Method#1"
  syntax:
    content: public virtual byte[] GetPublicKey()
    content.vb: Public Overridable Function GetPublicKey As Byte()
    return:
      type: System.Byte[]
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  id: GetSerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: GetSerialNumber()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSerialNumber
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 248
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns the serial number of the X.509v3 certificate as an array of bytes.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\" data-throw-if-not-resolved=\"false\"></xref> method to return a certificate's serial number as an array of bytes and displays it to the console.</p>X509Certificate.GetSerialNumber Method#1"
  syntax:
    content: public virtual byte[] GetSerialNumber()
    content.vb: Public Overridable Function GetSerialNumber As Byte()
    return:
      type: System.Byte[]
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate context is invalid.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString
  id: ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 261
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns a string representation of the current <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to display the value of a certificate to the console.</p>X509Certificate.ToString Method#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate
  langs:
  - csharp
  - vb
  name: ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Certificate.cs
    startLine: 266
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns a string representation of the current <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate\" data-throw-if-not-resolved=\"false\"></xref> object, with extra information, if specified.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to display the value of a certificate to the console.</p>X509Certificate.ToString Method#1"
  syntax:
    content: public virtual string ToString(bool fVerbose)
    content.vb: Public Overridable Function ToString(fVerbose As Boolean) As String
    parameters:
    - id: fVerbose
      type: System.Boolean
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509KeyStorageFlags
  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Security.Cryptography.X509Certificates.X509ContentType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ContentType
  fullName: System.Security.Cryptography.X509Certificates.X509ContentType
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
