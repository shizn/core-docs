items:
- uid: System.Net.CredentialCache
  commentId: T:System.Net.CredentialCache
  id: CredentialCache
  parent: System.Net
  children:
  - System.Net.CredentialCache.#ctor
  - System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  - System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)
  - System.Net.CredentialCache.DefaultCredentials
  - System.Net.CredentialCache.DefaultNetworkCredentials
  - System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)
  - System.Net.CredentialCache.GetCredential(System.Uri,System.String)
  - System.Net.CredentialCache.GetEnumerator
  - System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)
  - System.Net.CredentialCache.Remove(System.Uri,System.String)
  langs:
  - csharp
  - vb
  name: CredentialCache
  fullName: System.Net.CredentialCache
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CredentialCache
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 77
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides storage for multiple credentials.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> class stores credentials for multiple Internet resources. Applications that need to access multiple resources can store the credentials for those resources in a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> instance that then provides the proper set of credentials to the Internet resource when required. When the <xref href=\"System.Net.CredentialCache.GetCredential(System.Uri,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is called, it compares the Uniform Resource Identifier (URI) and authentication type provided with those stored in the cache and returns the first set of credentials that match.</p>\n<p>The <xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> property contains the system credentials of the current security context. For client applications, these represent the user name, password, and domain of the user who is currently logged in. For ASP.NET applications, the default credentials are the user credentials of the logged-in user or the user being impersonated.</p>\n"
  example:
  - "\n<p>The following code example initializes a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> with multiple security credentials and uses those credentials with a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref>. </p>Classic CredentialCache.Add Example#1"
  syntax:
    content: 'public class CredentialCache : IEnumerable, ICredentials, ICredentialsByHost'
    content.vb: >-
      Public Class CredentialCache
          Implements IEnumerable, ICredentials, ICredentialsByHost
  seealso:
  - type: System.Net.ICredentials
    commentId: T:System.Net.ICredentials
  - type: System.Net.WebRequest.Credentials
    commentId: P:System.Net.WebRequest.Credentials
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Net.ICredentials
  - System.Net.ICredentialsByHost
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.CredentialCache.#ctor
  commentId: M:System.Net.CredentialCache.#ctor
  id: '#ctor'
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: CredentialCache()
  fullName: System.Net.CredentialCache.CredentialCache()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 79
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The constructor creates a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following code example initializes a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> with multiple security credentials and uses those credentials with a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref>. </p>Classic CredentialCache.Add Example#1"
  syntax:
    content: public CredentialCache()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.DefaultCredentials
  commentId: P:System.Net.CredentialCache.DefaultCredentials
  id: DefaultCredentials
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: DefaultCredentials
  fullName: System.Net.CredentialCache.DefaultCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultCredentials
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 80
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the system credentials of the application.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> property applies only to NTLM, negotiate, and Kerberos-based authentication.</p>\n<p>\n<xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> represents the system credentials for the current security context in which the application is running. For a client-side application, these are usually the Windows credentials (user name, password, and domain) of the user running the application. For ASP.NET applications, the default credentials are the user credentials of the logged-in user, or the user being impersonated.</p>\n<p>To get the credentials as a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance, use the <xref href=\"System.Net.CredentialCache.DefaultNetworkCredentials\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The supported values for <em>authType </em>are \"NTLM\", \"Digest\", \"Kerberos\", and \"Negotiate\". This method does not work for HTTP or FTP protocols.</p>\n<p>The <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref> instance returned by <xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> cannot be used to view the user name, password, or domain of the current security context.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> property to get the system credentials of the application.</p>CredentialCache_DefaultCredentials#1"
  syntax:
    content: public static ICredentials DefaultCredentials { get; }
    content.vb: Public Shared ReadOnly Property DefaultCredentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
      description: "\n<p>An <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref> that represents the system credentials of the application.</p>\n"
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.CredentialCache.DefaultNetworkCredentials
  commentId: P:System.Net.CredentialCache.DefaultNetworkCredentials
  id: DefaultNetworkCredentials
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: DefaultNetworkCredentials
  fullName: System.Net.CredentialCache.DefaultNetworkCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultNetworkCredentials
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 81
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the network credentials of the current security context.</p>\n"
  remarks: "\n<p>The credentials returned by the <xref href=\"System.Net.CredentialCache.DefaultNetworkCredentials\" data-throw-if-not-resolved=\"false\"></xref> property is applicable only for NTLM, negotiate, and Kerberos-based authentication.</p>\n<p>The credentials returned by <xref href=\"System.Net.CredentialCache.DefaultNetworkCredentials\" data-throw-if-not-resolved=\"false\"></xref> represents the authentication credentials for the current security context in which the application is running. For a client-side application, these are usually the Windows credentials (user name, password, and domain) of the user running the application. For ASP.NET applications, the default network credentials are the user credentials of the logged-in user, or the user being impersonated.</p>\n"
  example:
  - 
  syntax:
    content: public static NetworkCredential DefaultNetworkCredentials { get; }
    content.vb: Public Shared ReadOnly Property DefaultNetworkCredentials As NetworkCredential
    parameters: []
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>An <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> that represents the network credentials of the current user or application.</p>\n"
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  commentId: M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  id: Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Add(String, Int32, String, NetworkCredential)
  fullName: System.Net.CredentialCache.Add(System.String, System.Int32, System.String, System.Net.NetworkCredential)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 82
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Adds a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</p>\n"
  remarks: "\n<p>This method places a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance for use with SMTP into the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref>. The cache stores credentials in the order in which they are added to it. When the <xref href=\"System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is called, it returns a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance that is selected by matching the <em>host</em>, <em>port</em>, and <em>authType</em>. The comparison is done case-insensitively.</p>\n<p>The supported values for <em>authType </em>are \"NTLM\", \"Digest\", \"Kerberos\", and \"Negotiate\". </p>\n<p>Credentials added with this method are only valid for use with SMTP. This method does not work for HTTP or FTP protocols.</p>\n"
  example:
  - "\n<p>The following code example initializes a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> with multiple security credentials for use with SMTP and uses one of those credentials with a <xref href=\"System.Net.Mail.SmtpClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>NCL_Credential.Cache.Add_SMTP#1"
  syntax:
    content: public void Add(string host, int port, string authenticationType, NetworkCredential credential)
    content.vb: Public Sub Add(host As String, port As Integer, authenticationType As String, credential As NetworkCredential)
    parameters:
    - id: host
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the host computer.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the port to connect to on <em>host</em>.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the authentication scheme used when connecting to <em>host</em> using <em>cred</em>. See Remarks.</p>\n"
    - id: credential
      type: System.Net.NetworkCredential
      description: "\n<p>The <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> to add to the credential cache. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>host</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>authType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>authType</em> not an accepted value. See Remarks. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)
  commentId: M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)
  id: Add(System.Uri,System.String,System.Net.NetworkCredential)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Add(Uri, String, NetworkCredential)
  fullName: System.Net.CredentialCache.Add(System.Uri, System.String, System.Net.NetworkCredential)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 83
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Adds a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)\" data-throw-if-not-resolved=\"false\"></xref> method places a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance for use with protocols other than SMTP into the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref>. The cache stores credentials in the order in which they are added to it. When the <xref href=\"System.Net.CredentialCache.GetCredential(System.Uri,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is called, it returns the proper matching <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following code example initializes a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> with multiple security credentials and uses those credentials with a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic CredentialCache.Add Example#1"
  syntax:
    content: public void Add(Uri uriPrefix, string authType, NetworkCredential cred)
    content.vb: Public Sub Add(uriPrefix As Uri, authType As String, cred As NetworkCredential)
    parameters:
    - id: uriPrefix
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that specifies the URI prefix of the resources that the credential grants access to. </p>\n"
    - id: authType
      type: System.String
      description: "\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>. </p>\n"
    - id: cred
      type: System.Net.NetworkCredential
      description: "\n<p>The <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> to add to the credential cache. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>uriPrefix</em> is <strong>null</strong>. </p>\n<p>-or- </p>\n<p>\n<em>authType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The same credentials are added more than once. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)
  commentId: M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)
  id: GetCredential(System.String,System.Int32,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: GetCredential(String, Int32, String)
  fullName: System.Net.CredentialCache.GetCredential(System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCredential
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 84
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance associated with the specified host, port, and authentication protocol.</p>\n"
  remarks: "\n<p>This method searches the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> and returns the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance for the specified host, port, and authorization type. The <em>host</em>, <em>port</em>, and <em>authType</em> values passed to this method are case-insensitively compared to the values specified when the credential was added to the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> using the <see cref=\"Overload:System.Net.CredentialCache.Add\"></see> methods.</p>\n<p>The supported values for <em>authType</em> are \"NTLM\", \"Digest\", \"Kerberos\", and \"Negotiate\".</p>\n"
  example:
  - 
  syntax:
    content: public NetworkCredential GetCredential(string host, int port, string authenticationType)
    content.vb: Public Function GetCredential(host As String, port As Integer, authenticationType As String) As NetworkCredential
    parameters:
    - id: host
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the host computer.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the port to connect to on <em>host</em>.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the authentication scheme used when connecting to <em>host</em>. See Remarks.</p>\n"
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>A <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> or, if there is no matching credential in the cache, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>host</em> is <strong>null</strong>. </p>\n<p>-or- </p>\n<p>\n<em>authType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>authType</em> not an accepted value. See Remarks. </p>\n<p>-or-</p>\n<p>\n<em>host</em> is equal to the empty string (\"\").</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than zero.</p>\n"
  implements:
  - System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.GetCredential(System.Uri,System.String)
  commentId: M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)
  id: GetCredential(System.Uri,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: GetCredential(Uri, String)
  fullName: System.Net.CredentialCache.GetCredential(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCredential
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 85
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.CredentialCache.GetCredential(System.Uri,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method searches the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> and returns the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance for the specified URI and authorization type. If the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> contains no matching <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance, <strong>null</strong> is returned.</p>\n<p>\n<xref href=\"System.Net.CredentialCache.GetCredential(System.Uri,System.String)\" data-throw-if-not-resolved=\"false\"></xref> uses the longest matching URI prefix in the cache to determine which set of credentials to return for an authorization type. The following table shows examples.</p>\n<p>URI Prefix </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>\n<code>http://www.contoso.com/portal/news.htm </code>\n</p>\n</td><td>\n<p>Requests for the specific Web page <code>news.htm</code>. </p>\n</td></tr><tr><td>\n<p>\n<code>http://www.contoso.com/portal/ </code>\n</p>\n</td><td>\n<p>Requests for all content in the <code>portal</code> path, except the page <code>news.htm</code>. </p>\n</td></tr><tr><td>\n<p>\n<code>http://www.contoso.com/ </code>\n</p>\n</td><td>\n<p>Requests for all resources at <code>www.contoso.com</code>, except those in the <code>portal</code> path. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.CredentialCache.GetCredential(System.Uri,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to return the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance associated with the specified URI and authentication type.</p>CredentialCache_GetCredential#1"
  syntax:
    content: public NetworkCredential GetCredential(Uri uriPrefix, string authType)
    content.vb: Public Function GetCredential(uriPrefix As Uri, authType As String) As NetworkCredential
    parameters:
    - id: uriPrefix
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that specifies the URI prefix of the resources that the credential grants access to. </p>\n"
    - id: authType
      type: System.String
      description: "\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>. </p>\n"
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>A <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> or, if there is no matching credential in the cache, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>uriPrefix</em> or <em>authType</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Net.ICredentials.GetCredential(System.Uri,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.GetEnumerator
  commentId: M:System.Net.CredentialCache.GetEnumerator
  id: GetEnumerator
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Net.CredentialCache.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 86
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns an enumerator that can iterate through the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.CredentialCache.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method to return an enumerator that can iterate through the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>CredentialCache_GetEnumerator#1"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)
  commentId: M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)
  id: Remove(System.String,System.Int32,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Remove(String, Int32, String)
  fullName: System.Net.CredentialCache.Remove(System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 87
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Deletes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance from the cache if it is associated with the specified host, port, and authentication protocol.</p>\n"
  remarks: "\n<p>This method removes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance from the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> if the specified host, port, and authentication protocol match those associated with the credential. Multiple calls to the <xref href=\"System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method for the same <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> have no effect.</p>\n<p>If <em>authType</em> is <strong>null</strong> or <em>uriPrefix</em> is <strong>null</strong>, or no matching credential is found in the cache, this method does nothing.</p>\n"
  example:
  - 
  syntax:
    content: public void Remove(string host, int port, string authenticationType)
    content.vb: Public Sub Remove(host As String, port As Integer, authenticationType As String)
    parameters:
    - id: host
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the host computer.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the port to connect to on <em>host</em>.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the authentication scheme used when connecting to <em>host</em>. See Remarks.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.Remove(System.Uri,System.String)
  commentId: M:System.Net.CredentialCache.Remove(System.Uri,System.String)
  id: Remove(System.Uri,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Remove(Uri, String)
  fullName: System.Net.CredentialCache.Remove(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 88
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Deletes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</p>\n"
  remarks: "\n<p>This method removes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance from the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> if the specified URI prefix and authentication protocol match those associated with the credential. Multiple calls to the <xref href=\"System.Net.CredentialCache.Remove(System.Uri,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method for the same <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> have no effect.</p>\n<p>If <em>authType</em> is <strong>null</strong> or <em>uriPrefix</em> is <strong>null</strong>, or no matching credential is found in the cache, this method does nothing.</p>\n"
  example:
  - "\n<p>The following code example uses this method to delete a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance from the cache.</p>CredentialCache_Add_Remove#3"
  syntax:
    content: public void Remove(Uri uriPrefix, string authType)
    content.vb: Public Sub Remove(uriPrefix As Uri, authType As String)
    parameters:
    - id: uriPrefix
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that specifies the URI prefix of the resources that the credential is used for. </p>\n"
    - id: authType
      type: System.String
      description: "\n<p>The authentication scheme used by the host named in <em>uriPrefix</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.ICredentialsByHost
  parent: System.Net
  isExternal: false
  name: ICredentialsByHost
  fullName: System.Net.ICredentialsByHost
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: false
  name: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  fullName: System.Uri
- uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
  parent: System.Net.ICredentialsByHost
  isExternal: true
  name: GetCredential(String, Int32, String)
  fullName: System.Net.ICredentialsByHost.GetCredential(System.String, System.Int32, System.String)
  spec.csharp:
  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
    name: GetCredential
    fullName: System.Net.ICredentialsByHost.GetCredential
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
    name: GetCredential
    fullName: System.Net.ICredentialsByHost.GetCredential
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
  parent: System.Net.ICredentials
  isExternal: true
  name: GetCredential(Uri, String)
  fullName: System.Net.ICredentials.GetCredential(System.Uri, System.String)
  spec.csharp:
  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
    name: GetCredential
    fullName: System.Net.ICredentials.GetCredential
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
    name: GetCredential
    fullName: System.Net.ICredentials.GetCredential
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
