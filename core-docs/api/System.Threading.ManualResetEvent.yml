items:
- uid: System.Threading.ManualResetEvent
  commentId: T:System.Threading.ManualResetEvent
  id: ManualResetEvent
  parent: System.Threading
  children:
  - System.Threading.ManualResetEvent.#ctor(System.Boolean)
  langs:
  - csharp
  - vb
  name: ManualResetEvent
  fullName: System.Threading.ManualResetEvent
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ManualResetEvent
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 160
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.</p>\n"
  remarks: "\n<p>In the .NET Framework version 2.0, <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> derives from the new <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> class. A <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> is functionally equivalent to an <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> created with <xref href=\"System.Threading.EventResetMode.ManualReset\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>Unlike the <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> class, the <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> class provides access to named system synchronization events.</p>\n<p>\n<xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> allows threads to communicate with each other by signaling. Typically, this communication concerns a task which one thread must complete before other threads can proceed.</p>\n<p>When a thread begins an activity that must complete before other threads proceed, it calls <xref href=\"System.Threading.EventWaitHandle.Reset\" data-throw-if-not-resolved=\"false\"></xref> to put <strong>ManualResetEvent</strong> in the non-signaled state. This thread can be thought of as controlling the <strong>ManualResetEvent</strong>. Threads that call <xref href=\"System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> on the <strong>ManualResetEvent</strong> will block, awaiting the signal. When the controlling thread completes the activity, it calls <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> to signal that the waiting threads can proceed. All waiting threads are released.</p>\n<p>Once it has been signaled, <strong>ManualResetEvent</strong> remains signaled until it is manually reset. That is, calls to <strong>WaitOne</strong> return immediately.</p>\n<p>You can control the initial state of a <strong>ManualResetEvent</strong> by passing a Boolean value to the constructor, <strong>true</strong> if the initial state is signaled and <strong>false</strong> otherwise.</p>\n<p>\n<strong>ManualResetEvent</strong> can also be used with the <strong>static</strong><xref href=\"System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>For more information about thread synchronization mechanisms, see ManualResetEvent and ManualResetEventSlim in the conceptual documentation.</p>\n"
  example:
  - "\n<p>The following example demonstrates how <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> works. The example starts with a <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> in the unsignaled state (that is, <strong>false</strong> is passed to the constructor). The example creates three threads, each of which blocks on the <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> by calling its <xref href=\"System.Threading.WaitHandle.WaitOne\" data-throw-if-not-resolved=\"false\"></xref> method. When the user presses the Enter key, the example calls the <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method, which releases all three threads. Contrast this with the behavior of the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> class, which releases threads one at a time, resetting automatically after each release. </p>\n<p>Pressing the Enter key again demonstrates that the <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> remains in the signaled state until its <xref href=\"System.Threading.EventWaitHandle.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is called: The example starts two more threads. These threads do not block when they call the <xref href=\"System.Threading.WaitHandle.WaitOne\" data-throw-if-not-resolved=\"false\"></xref> method, but instead run to completion. </p>\n<p>Pressing the Enter key again causes the example to call the <xref href=\"System.Threading.EventWaitHandle.Reset\" data-throw-if-not-resolved=\"false\"></xref> method and to start one more thread, which blocks when it calls <xref href=\"System.Threading.WaitHandle.WaitOne\" data-throw-if-not-resolved=\"false\"></xref>. Pressing the Enter key one final time calls <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> to release the last thread, and the program ends.</p>System.Threading.ManualResetEvent#1"
  syntax:
    content: 'public sealed class ManualResetEvent : EventWaitHandle'
    content.vb: >-
      Public NotInheritable Class ManualResetEvent
          Inherits EventWaitHandle
  seealso:
  - type: System.Threading.WaitHandle
    commentId: T:System.Threading.WaitHandle
  inheritance:
  - System.Object
  - System.Threading.EventWaitHandle
  inheritedMembers:
  - System.Threading.EventWaitHandle.OpenExisting(System.String)
  - System.Threading.EventWaitHandle.Reset
  - System.Threading.EventWaitHandle.Set
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)
  commentId: M:System.Threading.ManualResetEvent.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.ManualResetEvent
  langs:
  - csharp
  - vb
  name: ManualResetEvent(Boolean)
  fullName: System.Threading.ManualResetEvent.ManualResetEvent(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 162
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> class with a Boolean value indicating whether to set the initial state to signaled.</p>\n"
  remarks: "\n<p>If the initial state of a <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> is signaled (that is, if it is created by passing <strong>true</strong> for <em>initialState</em>), threads that wait on the <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> do not block. If the initial state is nonsignaled, threads block until the <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  syntax:
    content: public ManualResetEvent(bool initialState)
    content.vb: Public Sub New(initialState As Boolean)
    parameters:
    - id: initialState
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to set the initial state signaled; <strong>false</strong> to set the initial state to nonsignaled. </p>\n"
  seealso:
  - type: System.Threading.WaitHandle
    commentId: T:System.Threading.WaitHandle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Threading.EventWaitHandle
  parent: System.Threading
  isExternal: false
  name: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)
  parent: System.Threading.EventWaitHandle
  isExternal: true
  name: OpenExisting(String)
  fullName: System.Threading.EventWaitHandle.OpenExisting(System.String)
  spec.csharp:
  - uid: System.Threading.EventWaitHandle.OpenExisting(System.String)
    name: OpenExisting
    fullName: System.Threading.EventWaitHandle.OpenExisting
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Threading.EventWaitHandle.OpenExisting(System.String)
    name: OpenExisting
    fullName: System.Threading.EventWaitHandle.OpenExisting
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.EventWaitHandle.Reset
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Reset()
  fullName: System.Threading.EventWaitHandle.Reset()
  spec.csharp:
  - uid: System.Threading.EventWaitHandle.Reset
    name: Reset
    fullName: System.Threading.EventWaitHandle.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Threading.EventWaitHandle.Reset
    name: Reset
    fullName: System.Threading.EventWaitHandle.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.EventWaitHandle.Set
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Set()
  fullName: System.Threading.EventWaitHandle.Set()
  spec.csharp:
  - uid: System.Threading.EventWaitHandle.Set
    name: Set
    fullName: System.Threading.EventWaitHandle.Set
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Threading.EventWaitHandle.Set
    name: Set
    fullName: System.Threading.EventWaitHandle.Set
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  isExternal: true
  name: TryOpenExisting(String, EventWaitHandle)
  fullName: System.Threading.EventWaitHandle.TryOpenExisting(System.String, System.Threading.EventWaitHandle)
  spec.csharp:
  - uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
    name: TryOpenExisting
    fullName: System.Threading.EventWaitHandle.TryOpenExisting
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.EventWaitHandle
    name: EventWaitHandle
    fullName: System.Threading.EventWaitHandle
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
    name: TryOpenExisting
    fullName: System.Threading.EventWaitHandle.TryOpenExisting
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.EventWaitHandle
    name: EventWaitHandle
    fullName: System.Threading.EventWaitHandle
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
