items:
- uid: System.Nullable
  commentId: T:System.Nullable
  id: Nullable
  parent: System
  children:
  - System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})
  - System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})
  - System.Nullable.GetUnderlyingType(System.Type)
  langs:
  - csharp
  - vb
  name: Nullable
  fullName: System.Nullable
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Nullable
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 103
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Supports a value type that can be assigned <strong>null</strong>. This class cannot be inherited.</p>\n"
  remarks: "\n<p>A type is said to be nullable if it can be assigned a value or can be assigned <strong>null</strong>, which means the type has no value whatsoever. By default, all reference types, such as <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, are nullable, but all value types, such as <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, are not. </p>\n<p>In C# and Visual Basic, you mark a value type as nullable by using the <strong>?</strong> notation after the value type. For example, <strong>int?</strong> in C# or <strong>Integer?</strong> in Visual Basic declares an integer value type that can be assigned <strong>null</strong>.</p>\n<p>The <xref href=\"System.Nullable\" data-throw-if-not-resolved=\"false\"></xref> class provides complementary support for the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure. The <xref href=\"System.Nullable\" data-throw-if-not-resolved=\"false\"></xref> class supports obtaining the underlying type of a nullable type, and comparison and equality operations on pairs of nullable types whose underlying value type does not support generic comparison and equality operations. </p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public class Nullable
    content.vb: >-
      <ComVisible(True)>

      Public Class Nullable
  seealso:
  - type: System.Nullable`1
    commentId: T:System.Nullable`1
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})
  commentId: M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})
  id: Compare``1(System.Nullable{``0},System.Nullable{``0})
  parent: System.Nullable
  langs:
  - csharp
  - vb
  name: Compare<T>(Nullable<T>, Nullable<T>)
  fullName: System.Nullable.Compare<T>(System.Nullable<T>, System.Nullable<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 106
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the relative values of two <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(true)]

      public static int Compare<T>(T? n1, T? n2)where T : struct
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Compare(Of T As Structure)(n1 As T?, n2 As T?) As Integer
    parameters:
    - id: n1
      type: System.Nullable{{T}}
    - id: n2
      type: System.Nullable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Nullable.Compare(Of T)(System.Nullable(Of T), System.Nullable(Of T))
  name.vb: Compare(Of T)(Nullable(Of T), Nullable(Of T))
- uid: System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})
  commentId: M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})
  id: Equals``1(System.Nullable{``0},System.Nullable{``0})
  parent: System.Nullable
  langs:
  - csharp
  - vb
  name: Equals<T>(Nullable<T>, Nullable<T>)
  fullName: System.Nullable.Equals<T>(System.Nullable<T>, System.Nullable<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 117
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two specified <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> objects are equal.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(true)]

      public static bool Equals<T>(T? n1, T? n2)where T : struct
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Equals(Of T As Structure)(n1 As T?, n2 As T?) As Boolean
    parameters:
    - id: n1
      type: System.Nullable{{T}}
    - id: n2
      type: System.Nullable{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Nullable.Equals(Of T)(System.Nullable(Of T), System.Nullable(Of T))
  name.vb: Equals(Of T)(Nullable(Of T), Nullable(Of T))
- uid: System.Nullable.GetUnderlyingType(System.Type)
  commentId: M:System.Nullable.GetUnderlyingType(System.Type)
  id: GetUnderlyingType(System.Type)
  parent: System.Nullable
  langs:
  - csharp
  - vb
  name: GetUnderlyingType(Type)
  fullName: System.Nullable.GetUnderlyingType(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnderlyingType
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 130
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the underlying type argument of the specified nullable type.</p>\n"
  remarks: "\n<p>A generic type definition is a type declaration, such as <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref>, that contains a type parameter list, and the type parameter list declares one or more type parameters. A closed generic type is a type declaration where a particular type is specified for a type parameter. </p>\n<p>For example, if the <em>nullableType</em> parameter is the type of <code>Nullable<Int32></code> in C# (<code>Nullable(Of Int32)</code> in Visual Basic), the return value is the type of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> (that is, the type argument of the closed generic type).</p>\n"
  example:
  - "\n<p>The following code example defines a method whose return value is of type <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. The code example uses the <xref href=\"System.Nullable.GetUnderlyingType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to display the type argument of the return value.</p>system.nullable_GetUnderlyingType#1"
  syntax:
    content: public static Type GetUnderlyingType(Type nullableType)
    content.vb: Public Shared Function GetUnderlyingType(nullableType As Type) As Type
    parameters:
    - id: nullableType
      type: System.Type
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>nullableType</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Nullable{{T}}
  parent: System
  definition: System.Nullable`1
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
