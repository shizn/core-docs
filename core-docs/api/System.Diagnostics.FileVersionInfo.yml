items:
- uid: System.Diagnostics.FileVersionInfo
  commentId: T:System.Diagnostics.FileVersionInfo
  id: FileVersionInfo
  parent: System.Diagnostics
  children:
  - System.Diagnostics.FileVersionInfo.Comments
  - System.Diagnostics.FileVersionInfo.CompanyName
  - System.Diagnostics.FileVersionInfo.FileBuildPart
  - System.Diagnostics.FileVersionInfo.FileDescription
  - System.Diagnostics.FileVersionInfo.FileMajorPart
  - System.Diagnostics.FileVersionInfo.FileMinorPart
  - System.Diagnostics.FileVersionInfo.FileName
  - System.Diagnostics.FileVersionInfo.FilePrivatePart
  - System.Diagnostics.FileVersionInfo.FileVersion
  - System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)
  - System.Diagnostics.FileVersionInfo.InternalName
  - System.Diagnostics.FileVersionInfo.IsDebug
  - System.Diagnostics.FileVersionInfo.IsPatched
  - System.Diagnostics.FileVersionInfo.IsPreRelease
  - System.Diagnostics.FileVersionInfo.IsPrivateBuild
  - System.Diagnostics.FileVersionInfo.IsSpecialBuild
  - System.Diagnostics.FileVersionInfo.Language
  - System.Diagnostics.FileVersionInfo.LegalCopyright
  - System.Diagnostics.FileVersionInfo.LegalTrademarks
  - System.Diagnostics.FileVersionInfo.OriginalFilename
  - System.Diagnostics.FileVersionInfo.PrivateBuild
  - System.Diagnostics.FileVersionInfo.ProductBuildPart
  - System.Diagnostics.FileVersionInfo.ProductMajorPart
  - System.Diagnostics.FileVersionInfo.ProductMinorPart
  - System.Diagnostics.FileVersionInfo.ProductName
  - System.Diagnostics.FileVersionInfo.ProductPrivatePart
  - System.Diagnostics.FileVersionInfo.ProductVersion
  - System.Diagnostics.FileVersionInfo.SpecialBuild
  - System.Diagnostics.FileVersionInfo.ToString
  langs:
  - csharp
  - vb
  name: FileVersionInfo
  fullName: System.Diagnostics.FileVersionInfo
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileVersionInfo
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 12
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Provides version information for a physical file on disk.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A file version number is a 64-bit number that holds the version number for a file as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FilePrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>Use the <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method of this class to get a <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> containing information about a file, then look at the properties for information about the file. The <xref href=\"System.Diagnostics.FileVersionInfo.FileVersion\" data-throw-if-not-resolved=\"false\"></xref> property provides version information about the file. The <xref href=\"System.Diagnostics.FileVersionInfo.ProductMajorPart\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.FileVersionInfo.ProductMinorPart\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.FileVersionInfo.ProductBuildPart\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.FileVersionInfo.ProductPrivatePart\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.FileVersionInfo.ProductVersion\" data-throw-if-not-resolved=\"false\"></xref> properties provide version information for the product that the specified file is a part of. Call <xref href=\"System.Diagnostics.FileVersionInfo.ToString\" data-throw-if-not-resolved=\"false\"></xref> to get a partial list of properties and their values for this file.</p>\n<p>The <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> properties are based on version resource information built into the file. Version resources are often built into binary files such as .exe or .dll files; text files do not have version resource information.</p>\n<p>Version resources are typically specified in a Win32 resource file, or in assembly attributes. For example the <xref href=\"System.Diagnostics.FileVersionInfo.IsDebug\" data-throw-if-not-resolved=\"false\"></xref> property reflects the <strong>VS_FF_DEBUG</strong> flag value in the file's <strong>VS_FIXEDFILEINFO</strong> block, which is built from the <strong>VERSIONINFO</strong> resource in a Win32 resource file.  For more information about specifying version resources in a Win32 resource file, see \"About Resource Files\" and \"VERSIONINFO Resource\" in the Platform SDK. For more information about specifying version resources in a .NET module, see the Setting Assembly Attributes topic.</p>\n<p>This class makes a link demand at the class level that applies to all members. A <xref href=\"System.Security.SecurityException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when the immediate caller does not have full trust permission. For details about link demands, see Link Demands.</p>\n<p></p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the file description and version number in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo Example#1"
  syntax:
    content: public sealed class FileVersionInfo
    content.vb: Public NotInheritable Class FileVersionInfo
  seealso:
  - type: System.Diagnostics.FileVersionInfo.FileVersion
    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  - type: System.Version
    commentId: T:System.Version
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.FileVersionInfo.Comments
  commentId: P:System.Diagnostics.FileVersionInfo.Comments
  id: Comments
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: Comments
  fullName: System.Diagnostics.FileVersionInfo.Comments
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comments
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 46
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the comments associated with the file.</p>\n"
  remarks: "\n<p>This property contains additional information that can be displayed for diagnostic purposes.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the comments in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.Comments Example#1"
  syntax:
    content: public string Comments { get; }
    content.vb: Public ReadOnly Property Comments As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.CompanyName
  commentId: P:System.Diagnostics.FileVersionInfo.CompanyName
  id: CompanyName
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: CompanyName
  fullName: System.Diagnostics.FileVersionInfo.CompanyName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompanyName
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 54
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the name of the company that produced the file.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.CompanyName\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.CompanyName Example#1"
  syntax:
    content: public string CompanyName { get; }
    content.vb: Public ReadOnly Property CompanyName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.FileBuildPart
  commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart
  id: FileBuildPart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: FileBuildPart
  fullName: System.Diagnostics.FileVersionInfo.FileBuildPart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileBuildPart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 62
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the build number of the file.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A file version number is a 64-bit number that holds the version number for a file as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FilePrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the third set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.FileBuildPart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.FileBuildPart Example#1"
  syntax:
    content: public int FileBuildPart { get; }
    content.vb: Public ReadOnly Property FileBuildPart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.FileMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart
  - type: System.Diagnostics.FileVersionInfo.FileMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart
  - type: System.Diagnostics.FileVersionInfo.FileVersion
    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  - type: System.Version
    commentId: T:System.Version
  - type: System.Diagnostics.FileVersionInfo.FilePrivatePart
    commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.FileDescription
  commentId: P:System.Diagnostics.FileVersionInfo.FileDescription
  id: FileDescription
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: FileDescription
  fullName: System.Diagnostics.FileVersionInfo.FileDescription
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileDescription
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 70
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the description of the file.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.FileDescription\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.FileDescription Example#1"
  syntax:
    content: public string FileDescription { get; }
    content.vb: Public ReadOnly Property FileDescription As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.FileMajorPart
  commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart
  id: FileMajorPart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: FileMajorPart
  fullName: System.Diagnostics.FileVersionInfo.FileMajorPart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileMajorPart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 78
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the major part of the version number.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A file version number is a 64-bit number that holds the version number for a file as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FilePrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the first set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.FileMajorPart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.FileMajorPart Example#1"
  syntax:
    content: public int FileMajorPart { get; }
    content.vb: Public ReadOnly Property FileMajorPart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.FileBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart
  - type: System.Diagnostics.FileVersionInfo.FileMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart
  - type: System.Diagnostics.FileVersionInfo.FileVersion
    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  - type: System.Version
    commentId: T:System.Version
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.FileMinorPart
  commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart
  id: FileMinorPart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: FileMinorPart
  fullName: System.Diagnostics.FileVersionInfo.FileMinorPart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileMinorPart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 86
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the minor part of the version number of the file.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A file version number is a 64-bit number that holds the version number for a file as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FilePrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the second set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.FileMinorPart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.FileMinorPart Example#1"
  syntax:
    content: public int FileMinorPart { get; }
    content.vb: Public ReadOnly Property FileMinorPart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.FileMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart
  - type: System.Diagnostics.FileVersionInfo.FileBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart
  - type: System.Diagnostics.FileVersionInfo.FileVersion
    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  - type: System.Version
    commentId: T:System.Version
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.FileName
  commentId: P:System.Diagnostics.FileVersionInfo.FileName
  id: FileName
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: FileName
  fullName: System.Diagnostics.FileVersionInfo.FileName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileName
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 94
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the name of the file that this instance of <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> describes.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.FileName Example#1"
  syntax:
    content: public string FileName { get; }
    content.vb: Public ReadOnly Property FileName As String
    parameters: []
    return:
      type: System.String
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.FilePrivatePart
  commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart
  id: FilePrivatePart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: FilePrivatePart
  fullName: System.Diagnostics.FileVersionInfo.FilePrivatePart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FilePrivatePart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 102
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the file private part number.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A file version number is a 64-bit number that holds the version number for a file as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FilePrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the last set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.FilePrivatePart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.FilePrivatePart Example#1"
  syntax:
    content: public int FilePrivatePart { get; }
    content.vb: Public ReadOnly Property FilePrivatePart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.FileBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart
  - type: System.Diagnostics.FileVersionInfo.FileMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart
  - type: System.Diagnostics.FileVersionInfo.FileVersion
    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  - type: System.Version
    commentId: T:System.Version
  - type: System.Diagnostics.FileVersionInfo.FileMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.FileVersion
  commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  id: FileVersion
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: FileVersion
  fullName: System.Diagnostics.FileVersionInfo.FileVersion
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileVersion
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 110
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the file version number.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A file version number is a 64-bit number that holds the version number for a file as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FileBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.FilePrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the file description and version number in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>classic fileversioninfo example#1"
  syntax:
    content: public string FileVersion { get; }
    content.vb: Public ReadOnly Property FileVersion As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Diagnostics.FileVersionInfo.FileBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart
  - type: System.Diagnostics.FileVersionInfo.FileMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart
  - type: System.Diagnostics.FileVersionInfo.FileMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart
  - type: System.Version
    commentId: T:System.Version
  - type: System.Diagnostics.FileVersionInfo.FilePrivatePart
    commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.InternalName
  commentId: P:System.Diagnostics.FileVersionInfo.InternalName
  id: InternalName
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: InternalName
  fullName: System.Diagnostics.FileVersionInfo.InternalName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalName
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 118
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the internal name of the file, if one exists.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.InternalName\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.InternalName Example#1"
  syntax:
    content: public string InternalName { get; }
    content.vb: Public ReadOnly Property InternalName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.IsDebug
  commentId: P:System.Diagnostics.FileVersionInfo.IsDebug
  id: IsDebug
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: IsDebug
  fullName: System.Diagnostics.FileVersionInfo.IsDebug
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDebug
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 127
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value that specifies whether the file contains debugging information or is compiled with debugging features enabled.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> properties are based on version resource information built into the file. Version resources are often built into binary files such as .exe or .dll files; text files do not have version resource information.</p>\n<p>Version resources are typically specified in a Win32 resource file, or in assembly attributes. The <xref href=\"System.Diagnostics.FileVersionInfo.IsDebug\" data-throw-if-not-resolved=\"false\"></xref> property reflects the <strong>VS_FF_DEBUG</strong> flag value in the file's <strong>VS_FIXEDFILEINFO</strong> block, which is built from the <strong>VERSIONINFO</strong> resource in a Win32 resource file. For more information about specifying version resources in a Win32 resource file, see the Platform SDK <strong>About Resource Files</strong> topic and <strong>VERSIONINFO Resource</strong> topic topics.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it displays the state of the Boolean <xref href=\"System.Diagnostics.FileVersionInfo.IsDebug\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.IsDebug Example#1"
  syntax:
    content: public bool IsDebug { get; }
    content.vb: Public ReadOnly Property IsDebug As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.IsPatched
  commentId: P:System.Diagnostics.FileVersionInfo.IsPatched
  id: IsPatched
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: IsPatched
  fullName: System.Diagnostics.FileVersionInfo.IsPatched
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPatched
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 136
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value that specifies whether the file has been modified and is not identical to the original shipping file of the same version number.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it displays the state of the Boolean <xref href=\"System.Diagnostics.FileVersionInfo.IsPatched\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.IsPatched Example#1"
  syntax:
    content: public bool IsPatched { get; }
    content.vb: Public ReadOnly Property IsPatched As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.IsPreRelease
  commentId: P:System.Diagnostics.FileVersionInfo.IsPreRelease
  id: IsPreRelease
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: IsPreRelease
  fullName: System.Diagnostics.FileVersionInfo.IsPreRelease
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPreRelease
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 153
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value that specifies whether the file is a development version, rather than a commercially released product.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it displays whether this version is a prerelease version in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.IsPreRelease Example#1"
  syntax:
    content: public bool IsPreRelease { get; }
    content.vb: Public ReadOnly Property IsPreRelease As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.IsPrivateBuild
  commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild
  id: IsPrivateBuild
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: IsPrivateBuild
  fullName: System.Diagnostics.FileVersionInfo.IsPrivateBuild
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPrivateBuild
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 144
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value that specifies whether the file was built using standard release procedures.</p>\n"
  remarks: "\n<p>If this value is <strong>true</strong>, <xref href=\"System.Diagnostics.FileVersionInfo.PrivateBuild\" data-throw-if-not-resolved=\"false\"></xref> will describe how this version of the file differs from the standard version.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it displays the private build information in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.IsPrivateBuild Example#1"
  syntax:
    content: public bool IsPrivateBuild { get; }
    content.vb: Public ReadOnly Property IsPrivateBuild As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.FileVersionInfo.PrivateBuild
    commentId: P:System.Diagnostics.FileVersionInfo.PrivateBuild
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.IsSpecialBuild
  commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild
  id: IsSpecialBuild
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: IsSpecialBuild
  fullName: System.Diagnostics.FileVersionInfo.IsSpecialBuild
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSpecialBuild
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 161
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value that specifies whether the file is a special build.</p>\n"
  remarks: "\n<p>A file that is a special build was built using standard release procedures, but the file differs from a standard file of the same version number. If this value is <strong>true</strong>, the <xref href=\"System.Diagnostics.FileVersionInfo.SpecialBuild\" data-throw-if-not-resolved=\"false\"></xref> property must specify how this file differs from the standard version.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it displays whether this version is a special build version in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.IsSpecialBuild Example#1"
  syntax:
    content: public bool IsSpecialBuild { get; }
    content.vb: Public ReadOnly Property IsSpecialBuild As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.FileVersionInfo.SpecialBuild
    commentId: P:System.Diagnostics.FileVersionInfo.SpecialBuild
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.Language
  commentId: P:System.Diagnostics.FileVersionInfo.Language
  id: Language
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: Language
  fullName: System.Diagnostics.FileVersionInfo.Language
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Language
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 169
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the default language string for the version info block.</p>\n"
  syntax:
    content: public string Language { get; }
    content.vb: Public ReadOnly Property Language As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.LegalCopyright
  commentId: P:System.Diagnostics.FileVersionInfo.LegalCopyright
  id: LegalCopyright
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: LegalCopyright
  fullName: System.Diagnostics.FileVersionInfo.LegalCopyright
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalCopyright
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 177
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets all copyright notices that apply to the specified file.</p>\n"
  remarks: "\n<p>This should include the full text of all notices, legal symbols, copyright dates, and so on or <strong>null</strong> if the file did not contain version information.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.LegalCopyright\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.LegalCopyright Example#1"
  syntax:
    content: public string LegalCopyright { get; }
    content.vb: Public ReadOnly Property LegalCopyright As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.LegalTrademarks
  commentId: P:System.Diagnostics.FileVersionInfo.LegalTrademarks
  id: LegalTrademarks
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: LegalTrademarks
  fullName: System.Diagnostics.FileVersionInfo.LegalTrademarks
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalTrademarks
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 185
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the trademarks and registered trademarks that apply to the file.</p>\n"
  remarks: "\n<p>The legal trademarks include the full text of all notices, legal symbols, and trademark numbers.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.LegalTrademarks\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.LegalTrademarks Example#1"
  syntax:
    content: public string LegalTrademarks { get; }
    content.vb: Public ReadOnly Property LegalTrademarks As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.OriginalFilename
  commentId: P:System.Diagnostics.FileVersionInfo.OriginalFilename
  id: OriginalFilename
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: OriginalFilename
  fullName: System.Diagnostics.FileVersionInfo.OriginalFilename
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OriginalFilename
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 193
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the name the file was created with.</p>\n"
  remarks: "\n<p>This property enables an application to determine whether a file has been renamed.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.OriginalFilename\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.OriginalFilename Example#1"
  syntax:
    content: public string OriginalFilename { get; }
    content.vb: Public ReadOnly Property OriginalFilename As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.PrivateBuild
  commentId: P:System.Diagnostics.FileVersionInfo.PrivateBuild
  id: PrivateBuild
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: PrivateBuild
  fullName: System.Diagnostics.FileVersionInfo.PrivateBuild
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivateBuild
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 201
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets information about a private version of the file.</p>\n"
  remarks: "\n<p>This information is present when <xref href=\"System.Diagnostics.FileVersionInfo.IsPrivateBuild\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the private build information in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.PrivateBuild Example#1"
  syntax:
    content: public string PrivateBuild { get; }
    content.vb: Public ReadOnly Property PrivateBuild As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Diagnostics.FileVersionInfo.IsPrivateBuild
    commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.ProductBuildPart
  commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart
  id: ProductBuildPart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: ProductBuildPart
  fullName: System.Diagnostics.FileVersionInfo.ProductBuildPart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProductBuildPart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 209
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the build number of the product this file is associated with.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A product version number is a 64-bit number that holds the version number as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductPrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the third set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.ProductBuildPart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.ProductBuildPart Example#1"
  syntax:
    content: public int ProductBuildPart { get; }
    content.vb: Public ReadOnly Property ProductBuildPart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.ProductVersion
    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion
  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart
  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart
  - type: System.Diagnostics.FileVersionInfo.ProductPrivatePart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.ProductMajorPart
  commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart
  id: ProductMajorPart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: ProductMajorPart
  fullName: System.Diagnostics.FileVersionInfo.ProductMajorPart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProductMajorPart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 217
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the major part of the version number for the product this file is associated with.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A product version number is a 64-bit number that holds the version number as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductPrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the first set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMajorPart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.ProductMajorPart Example#1"
  syntax:
    content: public int ProductMajorPart { get; }
    content.vb: Public ReadOnly Property ProductMajorPart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart
  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart
  - type: System.Diagnostics.FileVersionInfo.ProductVersion
    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.ProductMinorPart
  commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart
  id: ProductMinorPart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: ProductMinorPart
  fullName: System.Diagnostics.FileVersionInfo.ProductMinorPart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProductMinorPart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 225
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the minor part of the version number for the product the file is associated with.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A product version number is a 64-bit number that holds the version number as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductPrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the second set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMinorPart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.ProductMinorPart Example#1"
  syntax:
    content: public int ProductMinorPart { get; }
    content.vb: Public ReadOnly Property ProductMinorPart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart
  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart
  - type: System.Diagnostics.FileVersionInfo.ProductVersion
    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.ProductName
  commentId: P:System.Diagnostics.FileVersionInfo.ProductName
  id: ProductName
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: ProductName
  fullName: System.Diagnostics.FileVersionInfo.ProductName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProductName
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 233
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the name of the product this file is distributed with.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.ProductName\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.ProductName Example#1"
  syntax:
    content: public string ProductName { get; }
    content.vb: Public ReadOnly Property ProductName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.ProductPrivatePart
  commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart
  id: ProductPrivatePart
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: ProductPrivatePart
  fullName: System.Diagnostics.FileVersionInfo.ProductPrivatePart
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProductPrivatePart
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 241
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the private part number of the product this file is associated with.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A product version number is a 64-bit number that holds the version number as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductPrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n<p>This property gets the last set of 16 bits.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.ProductPrivatePart\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.ProductPrivatePart Example#1"
  syntax:
    content: public int ProductPrivatePart { get; }
    content.vb: Public ReadOnly Property ProductPrivatePart As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart
  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart
  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart
  - type: System.Diagnostics.FileVersionInfo.ProductVersion
    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.ProductVersion
  commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion
  id: ProductVersion
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: ProductVersion
  fullName: System.Diagnostics.FileVersionInfo.ProductVersion
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProductVersion
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 249
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the version of the product this file is distributed with.</p>\n"
  remarks: "\n<p>Typically, a version number is displayed as \"major number.minor number.build number.private part number\". A product version number is a 64-bit number that holds the version number as follows: </p>\n<ul><li>\n<p>The first 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMajorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The next 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductMinorPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The third set of 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductBuildPart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li><li>\n<p>The last 16 bits are the <xref href=\"System.Diagnostics.FileVersionInfo.ProductPrivatePart\" data-throw-if-not-resolved=\"false\"></xref> number.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the <xref href=\"System.Diagnostics.FileVersionInfo.ProductVersion\" data-throw-if-not-resolved=\"false\"></xref> in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.ProductVersion Example#1"
  syntax:
    content: public string ProductVersion { get; }
    content.vb: Public ReadOnly Property ProductVersion As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart
  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart
  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart
  - type: System.Diagnostics.FileVersionInfo.ProductPrivatePart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.SpecialBuild
  commentId: P:System.Diagnostics.FileVersionInfo.SpecialBuild
  id: SpecialBuild
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: SpecialBuild
  fullName: System.Diagnostics.FileVersionInfo.SpecialBuild
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SpecialBuild
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 257
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Gets the special build information for the file.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Diagnostics.FileVersionInfo.IsSpecialBuild\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.Diagnostics.FileVersionInfo.SpecialBuild\" data-throw-if-not-resolved=\"false\"></xref> must specify how this file differs from the standard version of the file.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it prints the special build information in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.SpecialBuild Example#1"
  syntax:
    content: public string SpecialBuild { get; }
    content.vb: Public ReadOnly Property SpecialBuild As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Diagnostics.FileVersionInfo.IsSpecialBuild
    commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)
  commentId: M:System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)
  id: GetVersionInfo(System.String)
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: GetVersionInfo(String)
  fullName: System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetVersionInfo
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 265
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Returns a <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> representing the version information associated with the specified file.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for Notepad and  displays the file description and version number in the console window. </p>classic fileversioninfo example#1"
  syntax:
    content: public static FileVersionInfo GetVersionInfo(string fileName)
    content.vb: Public Shared Function GetVersionInfo(fileName As String) As FileVersionInfo
    parameters:
    - id: fileName
      type: System.String
    return:
      type: System.Diagnostics.FileVersionInfo
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified cannot be found. </p>\n"
  seealso:
  - type: System.Diagnostics.FileVersionInfo.SpecialBuild
    commentId: P:System.Diagnostics.FileVersionInfo.SpecialBuild
  - type: System.Diagnostics.FileVersionInfo.ProductVersion
    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion
  - type: System.Diagnostics.FileVersionInfo.ProductPrivatePart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart
  - type: System.Diagnostics.FileVersionInfo.ProductName
    commentId: P:System.Diagnostics.FileVersionInfo.ProductName
  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart
  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart
  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart
  - type: System.Diagnostics.FileVersionInfo.PrivateBuild
    commentId: P:System.Diagnostics.FileVersionInfo.PrivateBuild
  - type: System.Diagnostics.FileVersionInfo.OriginalFilename
    commentId: P:System.Diagnostics.FileVersionInfo.OriginalFilename
  - type: System.Diagnostics.FileVersionInfo.LegalTrademarks
    commentId: P:System.Diagnostics.FileVersionInfo.LegalTrademarks
  - type: System.Diagnostics.FileVersionInfo.LegalCopyright
    commentId: P:System.Diagnostics.FileVersionInfo.LegalCopyright
  - type: System.Diagnostics.FileVersionInfo.IsSpecialBuild
    commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild
  - type: System.Diagnostics.FileVersionInfo.IsPreRelease
    commentId: P:System.Diagnostics.FileVersionInfo.IsPreRelease
  - type: System.Diagnostics.FileVersionInfo.IsPrivateBuild
    commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild
  - type: System.Diagnostics.FileVersionInfo.IsPatched
    commentId: P:System.Diagnostics.FileVersionInfo.IsPatched
  - type: System.Diagnostics.FileVersionInfo.IsDebug
    commentId: P:System.Diagnostics.FileVersionInfo.IsDebug
  - type: System.Diagnostics.FileVersionInfo.InternalName
    commentId: P:System.Diagnostics.FileVersionInfo.InternalName
  - type: System.Diagnostics.FileVersionInfo.FileVersion
    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  - type: System.Diagnostics.FileVersionInfo.FilePrivatePart
    commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart
  - type: System.Diagnostics.FileVersionInfo.FileName
    commentId: P:System.Diagnostics.FileVersionInfo.FileName
  - type: System.Diagnostics.FileVersionInfo.FileMinorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart
  - type: System.Diagnostics.FileVersionInfo.FileMajorPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart
  - type: System.Diagnostics.FileVersionInfo.FileDescription
    commentId: P:System.Diagnostics.FileVersionInfo.FileDescription
  - type: System.Diagnostics.FileVersionInfo.FileBuildPart
    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart
  - type: System.Diagnostics.FileVersionInfo.CompanyName
    commentId: P:System.Diagnostics.FileVersionInfo.CompanyName
  - type: System.Diagnostics.FileVersionInfo.Comments
    commentId: P:System.Diagnostics.FileVersionInfo.Comments
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.FileVersionInfo.ToString
  commentId: M:System.Diagnostics.FileVersionInfo.ToString
  id: ToString
  parent: System.Diagnostics.FileVersionInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Diagnostics.FileVersionInfo.ToString()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs
    startLine: 280
  assemblies:
  - System.Diagnostics.FileVersionInfo
  namespace: System.Diagnostics
  summary: "\n<p>Returns a partial list of properties in the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> and their values.</p>\n"
  example:
  - "\n<p>The following example calls <xref href=\"System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to get the <xref href=\"System.Diagnostics.FileVersionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the Notepad. Then it calls <xref href=\"System.Diagnostics.FileVersionInfo.ToString\" data-throw-if-not-resolved=\"false\"></xref> to print a list of the file version information in a text box. This code assumes <code>textBox1</code> has been instantiated.</p>Classic FileVersionInfo.ToString Example#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  seealso:
  - type: System.Diagnostics.FileVersionInfo.FileName
    commentId: P:System.Diagnostics.FileVersionInfo.FileName
  - type: System.Diagnostics.FileVersionInfo.InternalName
    commentId: P:System.Diagnostics.FileVersionInfo.InternalName
  - type: System.Diagnostics.FileVersionInfo.OriginalFilename
    commentId: P:System.Diagnostics.FileVersionInfo.OriginalFilename
  - type: System.Diagnostics.FileVersionInfo.FileVersion
    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion
  - type: System.Diagnostics.FileVersionInfo.FileDescription
    commentId: P:System.Diagnostics.FileVersionInfo.FileDescription
  - type: System.Diagnostics.FileVersionInfo.Language
    commentId: P:System.Diagnostics.FileVersionInfo.Language
  - type: System.Diagnostics.FileVersionInfo.ProductName
    commentId: P:System.Diagnostics.FileVersionInfo.ProductName
  - type: System.Diagnostics.FileVersionInfo.ProductVersion
    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion
  - type: System.Diagnostics.FileVersionInfo.IsDebug
    commentId: P:System.Diagnostics.FileVersionInfo.IsDebug
  - type: System.Diagnostics.FileVersionInfo.IsPatched
    commentId: P:System.Diagnostics.FileVersionInfo.IsPatched
  - type: System.Diagnostics.FileVersionInfo.IsPreRelease
    commentId: P:System.Diagnostics.FileVersionInfo.IsPreRelease
  - type: System.Diagnostics.FileVersionInfo.IsPrivateBuild
    commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild
  - type: System.Diagnostics.FileVersionInfo.IsSpecialBuild
    commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.FileVersionInfo
  parent: System.Diagnostics
  isExternal: false
  name: FileVersionInfo
  fullName: System.Diagnostics.FileVersionInfo
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
