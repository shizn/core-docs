items:
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  id: List`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.List`1.#ctor
  - System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.#ctor(System.Int32)
  - System.Collections.Generic.List`1.Add(`0)
  - System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.AsReadOnly
  - System.Collections.Generic.List`1.BinarySearch(`0)
  - System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Capacity
  - System.Collections.Generic.List`1.Clear
  - System.Collections.Generic.List`1.Contains(`0)
  - System.Collections.Generic.List`1.CopyTo(`0[])
  - System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Count
  - System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.ForEach(System.Action{`0})
  - System.Collections.Generic.List`1.GetEnumerator
  - System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Insert(System.Int32,`0)
  - System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.Item(System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Remove(`0)
  - System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Reverse
  - System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Sort
  - System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  - System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.ToArray
  - System.Collections.Generic.List`1.TrimExcess
  - System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  langs:
  - csharp
  - vb
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: List
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 258
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class is the generic equivalent of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class. It implements the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using an array whose size is dynamically increased as required.</p>\n<p>You can add items to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> by using the <xref href=\"System.Collections.Generic.List`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class uses both an equality comparer and an ordering comparer. </p>\n<ul><li>\n<p>Methods such as <xref href=\"System.Collections.Generic.List`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Generic.List`1.IndexOf(`0)\" data-throw-if-not-resolved=\"false\"></xref>, <see cref=\"Overload:System.Collections.Generic.List`1.LastIndexOf\"></see>, and <xref href=\"System.Collections.Generic.Dictionary`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> use an equality comparer for the list elements. The default equality comparer for type <em>T</em> is determined as follows. If type <em>T</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, then the equality comparer is the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method of that interface; otherwise, the default equality comparer is <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>Methods such as <see cref=\"Overload:System.Collections.Generic.List`1.BinarySearch\"></see> and <see cref=\"Overload:System.Collections.Generic.List`1.Sort\"></see> use an ordering comparer for the list elements. The default comparer for type <em>T</em> is determined as follows.  If type <em>T</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, then the default comparer is the <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> method of that interface; otherwise, if type <em>T</em> implements the nongeneric <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, then the default comparer is the <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method of that interface. If type <em>T</em> implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</p>\n</li></ul>\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is not guaranteed to be sorted.  You must sort the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> before performing operations (such as <see cref=\"Overload:System.Collections.Generic.List`1.BinarySearch\"></see>) that require the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to be sorted.</p>\n<p>Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.</p>\n<p>For very large <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <strong>enabled</strong> attribute of the  configuration element to <strong>true</strong> in the run-time environment.</p>\n<p>\n<xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value for reference types and allows duplicate elements.</p>\n<p>For an immutable version of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class, see <xref href=\"System.Collections.Immutable.ImmutableList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - <p>The following example demonstrates how to add, remove, and insert a simple business object in a <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. </p>System.Collections.Generic.List.AddRemoveInsert#1
  - >-
    <p>The following example demonstrates several properties and methods of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> generic class of type string. (For an example of a <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> of complex types, see the <xref href="System.Collections.Generic.List`1.Contains(`0)" data-throw-if-not-resolved="false"></xref> method.)</p>

    <p>The default constructor is used to create a list of strings with the default capacity. The <xref href="System.Collections.Generic.List`1.Capacity" data-throw-if-not-resolved="false"></xref> property is displayed and then the <xref href="System.Collections.Generic.List`1.Add(`0)" data-throw-if-not-resolved="false"></xref> method is used to add several items. The items are listed, and the <xref href="System.Collections.Generic.List`1.Capacity" data-throw-if-not-resolved="false"></xref> property is displayed again, along with the <xref href="System.Collections.Generic.List`1.Count" data-throw-if-not-resolved="false"></xref> property, to show that the capacity has been increased as needed. </p>

    <p>The <xref href="System.Collections.Generic.List`1.Contains(`0)" data-throw-if-not-resolved="false"></xref> method is used to test for the presence of an item in the list, the <xref href="System.Collections.Generic.List`1.Insert(System.Int32,`0)" data-throw-if-not-resolved="false"></xref> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again. </p>

    <p>The default <xref href="System.Collections.Generic.List`1.Item(System.Int32)" data-throw-if-not-resolved="false"></xref> property (the indexer in C#) is used to retrieve an item, the <xref href="System.Collections.Generic.List`1.Remove(`0)" data-throw-if-not-resolved="false"></xref> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again. The <xref href="System.Collections.Generic.List`1.Remove(`0)" data-throw-if-not-resolved="false"></xref> method always removes the first instance it encounters.</p>

    <p>The <xref href="System.Collections.Generic.List`1.TrimExcess" data-throw-if-not-resolved="false"></xref> method is used to reduce the capacity to match the count, and the <xref href="System.Collections.Generic.List`1.Capacity" data-throw-if-not-resolved="false"></xref> and <xref href="System.Collections.Generic.List`1.Count" data-throw-if-not-resolved="false"></xref> properties are displayed. If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</p>

    <p>Finally, the <xref href="System.Collections.Generic.List`1.Clear" data-throw-if-not-resolved="false"></xref> method is used to remove all items from the list, and the <xref href="System.Collections.Generic.List`1.Capacity" data-throw-if-not-resolved="false"></xref> and <xref href="System.Collections.Generic.List`1.Count" data-throw-if-not-resolved="false"></xref> properties are displayed.</p>List`1_Class#1
  syntax:
    content: 'public class List<T> : ICollection<T>, IEnumerable<T>, IList<T>, IReadOnlyCollection<T>, IReadOnlyList<T>, ICollection, IEnumerable, IList'
    content.vb: >-
      Public Class List(Of T)
          Inherits ICollection(Of T)
          Implements IEnumerable(Of T), IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), ICollection, IEnumerable, IList
    typeParameters:
    - id: T
      description: "\n<p>The type of elements in the list.</p>\n"
  seealso:
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.Immutable.ImmutableList`1
    commentId: T:System.Collections.Immutable.ImmutableList`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.IList
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
- uid: System.Collections.Generic.List`1.#ctor
  commentId: M:System.Collections.Generic.List`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List()
  fullName: System.Collections.Generic.List<T>.List()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 260
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the default initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, using the <xref href=\"System.Collections.Generic.List`1.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method or by setting the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates the default constructor of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. The default constructor creates a list with the default capacity, as demonstrated by displaying the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</p>List`1_Class#1"
  syntax:
    content: public List()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List()
- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 261
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</p>\n"
  remarks: "\n<p>The elements are copied onto the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> in the same order they are read by the enumerator of the collection.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>collection</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor and various methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</p>List`1_Ranges#1"
  syntax:
    content: public List(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection whose elements are copied to the new list.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerable`1
    commentId: T:System.Collections.Generic.IEnumerable`1
  - type: System.Collections.Generic.List`1.Capacity
    commentId: P:System.Collections.Generic.List`1.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List(System.Collections.Generic.IEnumerable(Of T))
  name.vb: List(IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List(Int32)
  fullName: System.Collections.Generic.List<T>.List(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 262
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the specified initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method or by setting the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and a read-only copy is created by using the <xref href=\"System.Collections.Generic.List`1.AsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method.</p>List`1_AsReadOnly#1"
  syntax:
    content: public List(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The number of elements that the new list can initially store.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than 0. </p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Capacity
    commentId: P:System.Collections.Generic.List`1.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List(System.Int32)
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  id: Capacity
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capacity
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 263
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets or sets the total number of elements the internal data structure can hold without resizing.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> can store before resizing is required, whereas <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>,  you can  decrease capacity by calling the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method or by setting the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly to a lower value. When the value of <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is an O(<em>n</em>) operation, where <em>n</em> is the new capacity.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to check the capacity and count of a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains a simple business object, and illustrates using the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method to remove extra capacity. </p>System.Collections.Generic.List.CapacityCount#1"
  - "\n<p>The following example shows the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property at several points in the life of a list. The default constructor is used to create a list of strings with a capacity of 0, and the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property is displayed to demonstrate this. After the <xref href=\"System.Collections.Generic.List`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> method has been used to add several items, the items are listed, and then the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property is displayed again, along with the <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property, to show that the capacity has been increased as needed. </p>\n<p>The <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property is displayed again after the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method is used to reduce the capacity to match the count. Finally, the <xref href=\"System.Collections.Generic.List`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method is used to remove all items from the list, and the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> properties are displayed again.</p>List`1_Class#1"
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements that the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> can contain before resizing is required.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Count
    commentId: P:System.Collections.Generic.List`1.Count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  id: Count
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.List<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 264
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> can store before resizing is required. <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to check the capacity and count of a  <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains a simple business object, and illustrates using the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method to remove extra capacity. </p>System.Collections.Generic.List.CapacityCount#1"
  - "\n<p>The following example shows the value of the <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property at various points in the life of a list. After the list has been created and populated and its elements displayed, the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> properties are displayed. These properties are displayed again after the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method has been called, and again after the contents of the list are cleared.</p>List`1_Class#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements contained in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Capacity
    commentId: P:System.Collections.Generic.List`1.Capacity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 265
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value for reference types and allows duplicate elements.</p>\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  example:
  - "\n<p>The example in this section demonstrates the <xref href=\"System.Collections.Generic.List`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) and various other properties and methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. After the list has been created and populated using the <xref href=\"System.Collections.Generic.List`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> method, an element is retrieved and displayed using the <xref href=\"System.Collections.Generic.List`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. (For an example that uses the <xref href=\"System.Collections.Generic.List`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property to set the value of a list element, see <xref href=\"System.Collections.Generic.List`1.AsReadOnly\" data-throw-if-not-resolved=\"false\"></xref>.)</p>\n<p>Visual Basic, C#, and C++ all have syntax for accessing the <xref href=\"System.Collections.Generic.List`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property without using its name. Instead, the variable containing the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is used as if it were an array.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Generic.List`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Generic.List`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>List`1_Class#2,3"
  syntax:
    content: public T this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to get or set.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The element at the specified index.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Count
    commentId: P:System.Collections.Generic.List`1.Count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 272
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds an object to the end of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value for reference types and allows duplicate elements.</p>\n<p>If <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to add, remove, and insert a simple business object in a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Collections.Generic.List.AddRemoveInsert#1"
  - "\n<p>The following example demonstrates several properties and methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.List`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. The default constructor is used to create a list of strings with a capacity of 0. The <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property is displayed, and then the <xref href=\"System.Collections.Generic.List`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to add several items. The items are listed, and the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property is displayed again, along with the <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property, to show that the capacity has been increased as needed.</p>\n<p>Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</p>List`1_Class#1"
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to be added to the end of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - type: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  - type: System.Collections.Generic.List`1.Remove(`0)
    commentId: M:System.Collections.Generic.List`1.Remove(`0)
  - type: System.Collections.Generic.List`1.Count
    commentId: P:System.Collections.Generic.List`1.Count
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 273
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds the elements of the specified collection to the end of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the elements in the collection is preserved in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the new <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> (the current <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> plus the size of the collection) will be greater than <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</p>\n<p>If the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> can accommodate the new elements without increasing the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements to be added and <em>m</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method and various other methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The <xref href=\"System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is called, with the list as its argument. The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</p>List`1_Ranges#1"
  syntax:
    content: public void AddRange(IEnumerable<T> collection)
    content.vb: Public Sub AddRange(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection whose elements should be added to the end of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>, if type <em>T</em> is a reference type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerable`1
    commentId: T:System.Collections.Generic.IEnumerable`1
  - type: System.Collections.Generic.List`1.Capacity
    commentId: P:System.Collections.Generic.List`1.Capacity
  - type: System.Collections.Generic.List`1.Count
    commentId: P:System.Collections.Generic.List`1.Count
  - type: System.Collections.Generic.List`1.Add(`0)
    commentId: M:System.Collections.Generic.List`1.Add(`0)
  - type: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - type: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - type: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  id: AsReadOnly
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsReadOnly
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 274
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns a read-only <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> wrapper for the current collection.</p>\n"
  remarks: "\n<p>To prevent any modifications to the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object, expose it only through this wrapper. A  <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> object does not expose methods that modify the collection. However, if changes are made to the underlying <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object, the read-only collection reflects those changes.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.AsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and the <xref href=\"System.Collections.Generic.List`1.AsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method is used to get a read-only <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation that wraps the original list. </p>\n<p>An element of the original list is set to \"Coelophysis\" using the <xref href=\"System.Collections.Generic.List`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</p>List`1_AsReadOnly#1"
  syntax:
    content: public ObjectModel.ReadOnlyCollection<T> AsReadOnly()
    content.vb: Public Function AsReadOnly As ObjectModel.ReadOnlyCollection(Of T)
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
      description: "\n<p>An object that acts as a read-only wrapper around the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  id: BinarySearch(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 275
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> for an element using the default comparer and returns the zero-based index of the element.</p>\n"
  remarks: "\n<p>This method uses the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for type <em>T</em> to determine the order of list elements. The <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property checks whether type <em>T</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.  If type <em>T</em> does not implement either interface, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</p>\n<p>Comparing <strong>null</strong> with any reference type is allowed and does not generate an exception when using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. When sorting, <strong>null</strong> is considered to be less than any other object.</p>\n<p>If the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</p>\n<p>If the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, this index should be used as the insertion point to maintain the sort order.</p>\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is the number of elements in the range.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> method overload and the <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload is then used to search for two strings that are not in the list, and the <xref href=\"System.Collections.Generic.List`1.Insert(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to insert them. The return value of the <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, <strong>Xor</strong> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.</p>List`1_SortSearch#1"
  syntax:
    content: public int BinarySearch(T item)
    content.vb: Public Function BinarySearch(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>item</em> in the sorted <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if <em>item</em> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <em>item</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 276
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches the entire sorted <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\n"
  remarks: "\n<p>The comparer customizes how the elements are compared. For example, you can use a <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> instance as the comparer to perform case-insensitive string searches.</p>\n<p>If <em>comparer</em> is provided, the elements of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are compared to the specified value using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.  If type <em>T</em> does not implement either interface, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> throws <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</p>\n<p>Comparing <strong>null</strong> with any reference type is allowed and does not generate an exception when using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. When sorting, <strong>null</strong> is considered to be less than any other object.</p>\n<p>If the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</p>\n<p>If the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, this index should be used as the insertion point to maintain the sort order.</p>\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is the number of elements in the range.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload and the <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer<string></code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer<String^></code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <strong>null</strong>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <xref href=\"System.Collections.Generic.List`1.Insert(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to insert the strings. These two methods are located in the function named <code>SearchAndInsert</code>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <strong>Xor</strong> -1 in Visual Basic) of the negative number returned by <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> and use it as an index for inserting the new string.</p>List`1_SortSearchComparer#1"
  syntax:
    content: public int BinarySearch(T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate. The value can be <strong>null</strong> for reference types.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>item</em> in the sorted <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if <em>item</em> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <em>item</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinarySearch
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 277
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches a range of elements in the sorted <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\n"
  remarks: "\n<p>The comparer customizes how the elements are compared. For example, you can use a <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> instance as the comparer to perform case-insensitive string searches.</p>\n<p>If <em>comparer</em> is provided, the elements of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are compared to the specified value using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.  If type <em>T</em> does not implement either interface, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> throws <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</p>\n<p>Comparing <strong>null</strong> with any reference type is allowed and does not generate an exception when using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. When sorting, <strong>null</strong> is considered to be less than any other object.</p>\n<p>If the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</p>\n<p>If the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, this index should be used as the insertion point to maintain the sort order.</p>\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is the number of elements in the range.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload and the <xref href=\"System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer<string></code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer<String^></code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <strong>null</strong>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload is then used to search only the range of herbivores for \"Brachiosaurus\". The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <strong>Xor</strong> -1 in Visual Basic) of the negative number returned by the <xref href=\"System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is used as an index for inserting the new string.</p>List`1_SortSearchComparerRange#1"
  syntax:
    content: public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the range to search.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate. The value can be <strong>null</strong> for reference types.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements, or <strong>null</strong> to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>item</em> in the sorted <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if <em>item</em> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <em>item</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  id: Clear
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 278
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to 0, and references to other objects from elements of the collection are also released.</p>\n<p>\n<xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. To reset the capacity of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, call the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method or set the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. Trimming an empty <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method and various other properties and methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. The <xref href=\"System.Collections.Generic.List`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method is used at the end of the program, to remove all items from the list, and the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> properties are then displayed.</p>List`1_Class#1"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  seealso:
  - type: System.Collections.Generic.List`1.TrimExcess
    commentId: M:System.Collections.Generic.List`1.TrimExcess
  - type: System.Collections.Generic.List`1.Capacity
    commentId: P:System.Collections.Generic.List`1.Capacity
  - type: System.Collections.Generic.List`1.Count
    commentId: P:System.Collections.Generic.List`1.Count
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 279
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method for <em>T</em> (the type of values in the list).</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Exists(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>methods on a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains a simple business object that implements <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Generic.List.ContainsExists#1"
  - "\n<p>The following example contains a list of complex objects of type <code>Cube</code>. The <code>Cube</code> class implements the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method so that two cubes are considered equal if their dimensions are the same. In this example, the <xref href=\"System.Collections.Generic.List`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong>, because a cube that has the specified dimensions is already in the collection.</p>System.Collections.Generic.List.Contains#1"
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>item</em> is found in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.IndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  - type: System.Collections.Generic.List`1.LastIndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 280
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional array, starting at the beginning of the target array.</p>\n"
  remarks: "\n<p>This method uses <see cref=\"Overload:System.Array.Copy\"></see> to copy the elements.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[])\" data-throw-if-not-resolved=\"false\"></xref> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[])\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref href=\"System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.</p>List`1_CopyTo#1"
  syntax:
    content: public void CopyTo(T[] array)
    content.vb: Public Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the number of elements that the destination <em>array</em> can contain.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 281
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>This method uses <see cref=\"Overload:System.Array.Copy\"></see> to copy the elements.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[])\" data-throw-if-not-resolved=\"false\"></xref> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[])\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref href=\"System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.</p>List`1_CopyTo#1"
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 282
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies a range of elements from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>This method uses <see cref=\"Overload:System.Array.Copy\"></see> to copy the elements.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[])\" data-throw-if-not-resolved=\"false\"></xref> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[])\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref href=\"System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref href=\"System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.</p>List`1_CopyTo#1"
  syntax:
    content: public void CopyTo(int index, T[] array, int arrayIndex, int count)
    content.vb: Public Sub CopyTo(index As Integer, array As T(), arrayIndex As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> at which copying begins.</p>\n"
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>arrayIndex</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> is equal to or greater than the <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> of the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The number of elements from <em>index</em> to the end of the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  id: Exists(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exists
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 283
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> contains elements that match the conditions defined by the specified predicate.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, and processing is stopped when a match is found.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Exists(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>methods on a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains a simple business object that implements <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Generic.List.ContainsExists#1"
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Exists(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method and several other methods that use the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> generic delegate.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\". </p>\n<p>The <xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> methods are used to search the list with the search predicate method, and then the <xref href=\"System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is used to remove all entries ending with \"saurus\". </p>\n<p>Finally, the <xref href=\"System.Collections.Generic.List`1.Exists(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is called. It traverses the list from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops and the method returns <strong>true</strong> if the <code>EndsWithSaurus</code> method returns <strong>true</strong> for any element. The <xref href=\"System.Collections.Generic.List`1.Exists(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong> because all such elements have been removed. </p>\n<p>In C# and Visual Basic, it is not necessary to create the <code>Predicate<string></code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </p>List`1_FindEtAl#1"
  syntax:
    content: public bool Exists(Predicate<T> match)
    content.vb: Public Function Exists(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the elements to search for.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  id: Find(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 284
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, moving forward in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.</p>\n<p>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <see cref=\"Overload:System.Collections.Generic.List`1.FindIndex\"></see> method instead.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method on a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains a simple complex object.</p>System.Collections.Generic.List.ContainsExists#1<p>The following example demonstrates the find methods for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class. The example for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the Sample XML File: Books (LINQ to XML). The <code>FillList</code> method in the example uses LINQ to XML to parse the values from the XML to property values of the <code>book</code> objects. </p><p>The following table describes the examples provided for the find methods.</p><p>Method</p><p>Example</p><table><tbody><tr><td><p><xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.</p><p>C# example uses an anonymous delegate.</p></td></tr><tr><td><p><xref href=\"System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref></p><p></p></td><td><p>Find all books that whose <code>Genre</code> property is \"Computer\" using the <code>FindComputer</code> predicate delegate.</p></td></tr><tr><td><p><xref href=\"System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref></p><p></p></td><td><p>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.</p><p>C# example uses an anonymous delegate.</p></td></tr><tr><td><p><xref href=\"System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref></p><p></p></td><td><p>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</p></td></tr><tr><td><p><xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</p></td></tr><tr><td><p><xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref></p><p></p></td><td><p>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p></td></tr><tr><td><p><xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p></td></tr></tbody></table>List`1_Find_Methods#1"
  syntax:
    content: public T Find(Predicate<T> match)
    content.vb: Public Function Find(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  id: FindAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 285
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Retrieves all the elements that match the conditions defined by the specified predicate.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, and the elements that match the conditions are saved in the returned <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the find methods for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class. The example for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the Sample XML File: Books (LINQ to XML). The <code>FillList</code> method in the example uses LINQ to XML to parse the values from the XML to property values of the <code>book</code> objects. </p>\n<p>The following table describes the examples provided for the find methods.</p>\n<p>Method</p>\n<p>Example</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Find all books that whose <code>Genre</code> property is \"Computer\" using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr></tbody></table>List`1_Find_Methods#1"
  syntax:
    content: public List<T> FindAll(Predicate<T> match)
    content.vb: Public Function FindAll(match As Predicate(Of T)) As List(Of T)
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the elements to search for.</p>\n"
    return:
      type: System.Collections.Generic.List`1
      description: "\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 286
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that starts at the specified index and contains the specified number of elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at <em>startIndex</em> and ending at <em>startIndex</em> plus <em>count</em> minus 1, if <em>count</em> is greater than 0.</p>\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate. The delegate has the signature:</p>\n<pre><code class=\"c#\">public bool methodName(T obj)</code></pre>\n<pre><code class=\"vb\">Public Function methodName(obj As T) As Boolean</code></pre>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>. </p>\n"
  example:
  - "\n<p>The following example defines an <code>Employee</code> class with two fields, <code>Name</code> and <code>Id</code>. It also defines an <code>EmployeeSearch</code> class with a single method, <code>StartsWith</code>, that indicates whether the <code>Employee.Name</code> field starts with a specified substring that is supplied to the <code>EmployeeSearch</code> class constructor. Note  the signature of this method</p>\n<pre><code class=\"c#\">public bool StartsWith(Employee e)</code></pre>\n<pre><code class=\"vb\">Public Function StartsWith(e As Employee) As Boolean</code></pre>\n<p>corresponds to the signature of the delegate that can be passed to the <see cref=\"Overload:System.Collections.Generic.List`1.FindIndex\"></see> method. The example instantiates a <code>List<Employee></code> object, adds a number of <code>Employee</code> objets to it, and then calls the <xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method twice  to search the entire collection (that is, the members from index 0 to index <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> - 1). The first time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with \"J\"; the second time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with \"Ju\".</p>System.Collections.Generic.List.FindIndex#1"
  syntax:
    content: public int FindIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 287
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from the specified index to the last element.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at <em>startIndex</em> and ending at the last element.</p>\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate. The delegate has the signature: </p>\n<pre><code class=\"c#\">public bool methodName(T obj)</code></pre>\n<pre><code class=\"vb\">Public Function methodName(obj As T) As Boolean</code></pre>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements from <em>startIndex</em> to the end of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines an <code>Employee</code> class with two fields, <code>Name</code> and <code>Id</code>. It also defines an <code>EmployeeSearch</code> class with a single method, <code>StartsWith</code>, that indicates whether the <code>Employee.Name</code> field starts with a specified substring that is supplied to the <code>EmployeeSearch</code> class constructor. Note  the signature of this method</p>\n<pre><code class=\"c#\">public bool StartsWith(Employee e)</code></pre>\n<pre><code class=\"vb\">Public Function StartsWith(e As Employee) As Boolean</code></pre>\n<p>corresponds to the signature of the delegate that can be passed to the <see cref=\"Overload:System.Collections.Generic.List`1.FindIndex\"></see> method. The example instantiates a <code>List<Employee></code> object, adds a number of <code>Employee</code> objets to it, and then calls the <xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method twice  to search the collection starting with its fifth member (that is, the member at index 4). The first time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with \"J\"; the second time, it searches for the first <code>Employee</code> object whose <code>Name</code> field begins with \"Ju\".</p>System.Collections.Generic.List.FindIndex#3"
  syntax:
    content: public int FindIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  id: FindIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 288
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at the first element and ending at the last element.</p>\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate. The delegate has the signature:</p>\n<pre><code class=\"c#\">public bool methodName(T obj)</code></pre>\n<pre><code class=\"vb\">Public Function methodName(obj As T) As Boolean</code></pre>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines an <code>Employee</code> class with two fields, <code>Name</code> and <code>Id</code>. It also defines an <code>EmployeeSearch</code> class with a single method, <code>StartsWith</code>, that indicates whether the <code>Employee.Name</code> field starts with a specified substring that is supplied to the <code>EmployeeSearch</code> class constructor. Note  the signature of this method</p>\n<pre><code class=\"c#\">public bool StartsWith(Employee e)</code></pre>\n<pre><code class=\"vb\">Public Function StartsWith(e As Employee) As Boolean</code></pre>\n<p>corresponds to the signature of the delegate that can be passed to the <see cref=\"Overload:System.Collections.Generic.List`1.FindIndex\"></see> method. The example instantiates a <code>List<Employee></code> object, adds a number of <code>Employee</code> objets to it, and then calls the <xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method twice  to search the entire collection , the first time for the first <code>Employee</code> object whose <code>Name</code> field begins with \"J\", and the second time for the first <code>Employee</code> object whose <code>Name</code> field begins with \"Ju\".</p>System.Collections.Generic.List.FindIndex#2"
  syntax:
    content: public int FindIndex(Predicate<T> match)
    content.vb: Public Function FindIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  id: FindLast(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLast
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 289
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, moving backward in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.</p>\n<p>When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <see cref=\"Overload:System.Collections.Generic.List`1.FindLastIndex\"></see> method instead.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the find methods for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class. The example for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the Sample XML File: Books (LINQ to XML). The <code>FillList</code> method in the example uses LINQ to XML to parse the values from the XML to property values of the <code>book</code> objects. </p>\n<p>The following table describes the examples provided for the find methods.</p>\n<p>Method</p>\n<p>Example</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Find all books that whose <code>Genre</code> property is \"Computer\" using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr></tbody></table>List`1_Find_Methods#1"
  syntax:
    content: public T FindLast(Predicate<T> match)
    content.vb: Public Function FindLast(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 290
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements and ends at the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at <em>startIndex</em> and ending at <em>startIndex</em> minus <em>count</em> plus 1, if <em>count</em> is greater than 0.</p>\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the find methods for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class. The example for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the Sample XML File: Books (LINQ to XML). The <code>FillList</code> method in the example uses LINQ to XML to parse the values from the XML to property values of the <code>book</code> objects. </p>\n<p>The following table describes the examples provided for the find methods.</p>\n<p>Method</p>\n<p>Example</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Find all books that whose <code>Genre</code> property is \"Computer\" using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr></tbody></table>List`1_Find_Methods#1"
  syntax:
    content: public int FindLastIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 291
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at <em>startIndex</em> and ending at the first element.</p>\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements from the beginning of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to <em>startIndex</em>.</p>\n"
  syntax:
    content: public int FindLastIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  id: FindLastIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLastIndex
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 292
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at the last element and ending at the first element.</p>\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the find methods for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class. The example for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class contains <code>book</code> objects, of class <code>Book</code>, using the data from the Sample XML File: Books (LINQ to XML). The <code>FillList</code> method in the example uses LINQ to XML to parse the values from the XML to property values of the <code>book</code> objects. </p>\n<p>The following table describes the examples provided for the find methods.</p>\n<p>Method</p>\n<p>Example</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds a book by an ID using the <code>IDToFind</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Find all books that whose <code>Genre</code> property is \"Computer\" using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the last book in the collection that has a publish date before 2001, using the <code>PubBefore2001</code> predicate delegate.</p>\n<p>C# example uses an anonymous delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of the last computer book using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p></p>\n</td><td>\n<p>Finds the index of first computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Finds the index of last computer book in the second half of the collection, using the <code>FindComputer</code> predicate delegate.</p>\n</td></tr></tbody></table>List`1_Find_Methods#1"
  syntax:
    content: public int FindLastIndex(Predicate<T> match)
    content.vb: Public Function FindLastIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the element to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  id: ForEach(System.Action{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForEach
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 293
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Performs the specified action on each element of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that performs an action on the object passed to it.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Modifying the underlying collection in the body of the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate is not supported and causes undefined behavior. </p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate to print the contents of a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object. In this example the <code>Print</code> method is used to display the contents of the list to the console.</p>\n<p>In addition to displaying the contents using the <code>Print</code> method, the C# example demonstrates the use of  to display the results to the console.</p>System.Action_PrintExample#01"
  syntax:
    content: public void ForEach(Action<T> action)
    content.vb: Public Sub ForEach(action As Action(Of T))
    parameters:
    - id: action
      type: System.Action{{T}}
      description: "\n<p>The <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate to perform on each element of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>action</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An element in the collection has been modified. </p>\n<p>This exception is thrown starting with the .NET Framework 4.5. </p>\n"
  seealso:
  - type: System.Action`1
    commentId: T:System.Action`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 294
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref href=\"System.Collections.Generic.List`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.Generic.List`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.List`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same object until <xref href=\"System.Collections.Generic.List`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.List`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.List`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.List`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.List`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.List`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.List`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.List`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.List`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public List<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As List(Of T).Enumerator
    return:
      type: System.Collections.Generic.List`1.Enumerator
      description: "\n<p>A <xref href=\"System.Collections.Generic.List`1.Enumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Enumerator
    commentId: T:System.Collections.Generic.List`1.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 295
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Creates a shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection. The objects themselves are not copied. The references in the new list point to the same objects as the references in the original list. </p>\n<p>A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection. However, if the elements of the collection contain references to other objects, those objects are not copied. The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</p>\n<p>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method and other methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that act on ranges. At the end of the example, the <xref href=\"System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to get three items from the list, beginning with index location 2. The <xref href=\"System.Collections.Generic.List`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is called on the resulting <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, creating an array of three elements. The elements of the array are displayed.</p>List`1_Ranges#1"
  syntax:
    content: public List<T> GetRange(int index, int count)
    content.vb: Public Function GetRange(index As Integer, count As Integer) As List(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> index at which the range starts.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the range.</p>\n"
    return:
      type: System.Collections.Generic.List`1
      description: "\n<p>A shallow copy of a range of elements in the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - type: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - type: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 296
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at the first element and ending at the last element.</p>\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the list.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <see cref=\"Overload:System.Collections.Generic.List`1.IndexOf\"></see> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref href=\"System.Collections.Generic.List`1.IndexOf(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref href=\"System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref href=\"System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</p>List`1_IndexOf#1"
  syntax:
    content: public int IndexOf(T item)
    content.vb: Public Function IndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>item</em> within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, –1.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.LastIndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  - type: System.Collections.Generic.List`1.Contains(`0)
    commentId: M:System.Collections.Generic.List`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 297
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from the specified index to the last element.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at <em>index</em> and ending at the last element.</p>\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the list.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements from <em>index</em> to the end of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <see cref=\"Overload:System.Collections.Generic.List`1.IndexOf\"></see> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref href=\"System.Collections.Generic.List`1.IndexOf(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref href=\"System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref href=\"System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</p>List`1_IndexOf#1"
  syntax:
    content: public int IndexOf(T item, int index)
    content.vb: Public Function IndexOf(item As T, index As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from <em>index</em> to the last element, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.LastIndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  - type: System.Collections.Generic.List`1.Contains(`0)
    commentId: M:System.Collections.Generic.List`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 298
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that starts at the specified index and contains the specified number of elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at <em>index</em> and ending at <em>index</em> plus <em>count</em> minus 1, if <em>count</em> is greater than 0.</p>\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the list.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <see cref=\"Overload:System.Collections.Generic.List`1.IndexOf\"></see> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref href=\"System.Collections.Generic.List`1.IndexOf(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref href=\"System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref href=\"System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</p>List`1_IndexOf#1"
  syntax:
    content: public int IndexOf(T item, int index, int count)
    content.vb: Public Function IndexOf(item As T, index As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that starts at <em>index</em> and contains <em>count</em> number of elements, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.LastIndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  - type: System.Collections.Generic.List`1.Contains(`0)
    commentId: M:System.Collections.Generic.List`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 299
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Inserts an element into the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value for reference types and allows duplicate elements.</p>\n<p>If <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If <em>index</em> is equal to <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>, <em>item</em> is added to the end of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to add, remove, and insert a simple business object in a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Collections.Generic.List.AddRemoveInsert#1"
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Insert(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method, along with various other properties and methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. After the list is created, elements are added. The <xref href=\"System.Collections.Generic.List`1.Insert(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to insert an item into the middle of the list. The item inserted is a duplicate, which is later removed using the <xref href=\"System.Collections.Generic.List`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>List`1_Class#1"
  syntax:
    content: public void Insert(int index, T item)
    content.vb: Public Sub Insert(index As Integer, item As T)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The object to insert. The value can be <strong>null</strong> for reference types.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - type: System.Collections.Generic.List`1.Add(`0)
    commentId: M:System.Collections.Generic.List`1.Add(`0)
  - type: System.Collections.Generic.List`1.Remove(`0)
    commentId: M:System.Collections.Generic.List`1.Remove(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 300
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Inserts the elements of a collection into the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value for reference types and allows duplicate elements.</p>\n<p>If the new <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> (the current <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> plus the size of the collection) will be greater than <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</p>\n<p>If <em>index</em> is equal to <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>, the elements are added to the end of <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The order of the elements in the collection is preserved in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements to be added and <em>m</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates <xref href=\"System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method and various other methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that act on ranges. After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref href=\"System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3. </p>List`1_Ranges#1"
  syntax:
    content: public void InsertRange(int index, IEnumerable<T> collection)
    content.vb: Public Sub InsertRange(index As Integer, collection As IEnumerable(Of T))
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which the new elements should be inserted.</p>\n"
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection whose elements should be inserted into the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>, if type <em>T</em> is a reference type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  - type: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - type: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  - type: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 301
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at the last element and ending at the first element.</p>\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the list.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <see cref=\"Overload:System.Collections.Generic.List`1.LastIndexOf\"></see> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</p>List`1_LastIndexOf#1"
  syntax:
    content: public int LastIndexOf(T item)
    content.vb: Public Function LastIndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>item</em> within the entire the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, –1.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.IndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  - type: System.Collections.Generic.List`1.Contains(`0)
    commentId: M:System.Collections.Generic.List`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 302
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at <em>index</em> and ending at the first element.</p>\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the list.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements from the beginning of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to <em>index</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <see cref=\"Overload:System.Collections.Generic.List`1.LastIndexOf\"></see> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</p>List`1_LastIndexOf#1"
  syntax:
    content: public int LastIndexOf(T item, int index)
    content.vb: Public Function LastIndexOf(item As T, index As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to <em>index</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.IndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  - type: System.Collections.Generic.List`1.Contains(`0)
    commentId: M:System.Collections.Generic.List`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 303
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements and ends at the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at <em>index</em> and ending at <em>index</em> minus <em>count</em> plus 1, if <em>count</em> is greater than 0.</p>\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the list.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - "\n<p>The following example demonstrates all three overloads of the <see cref=\"Overload:System.Collections.Generic.List`1.LastIndexOf\"></see> method. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref href=\"System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</p>List`1_LastIndexOf#1"
  syntax:
    content: public int LastIndexOf(T item, int index, int count)
    content.vb: Public Function LastIndexOf(item As T, index As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <em>count</em> number of elements and ends at <em>index</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.IndexOf(`0)
    commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  - type: System.Collections.Generic.List`1.Contains(`0)
    commentId: M:System.Collections.Generic.List`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 304
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If type <em>T</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the equality comparer is the <xref href=\"System.IEquatable`1.Equals(`0)\" data-throw-if-not-resolved=\"false\"></xref> method of that interface; otherwise, the default equality comparer is <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to add, remove, and insert a simple business object in a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Collections.Generic.List.AddRemoveInsert#1"
  - "\n<p>The following example demonstrates <xref href=\"System.Collections.Generic.List`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. Several properties and methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> generic class are used to add, insert, and search the list. After these operations, the list contains a duplicate. The <xref href=\"System.Collections.Generic.List`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to remove the first instance of the duplicate item, and the contents are displayed. The <xref href=\"System.Collections.Generic.List`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method always removes the first instance it encounters.</p>List`1_Class#1"
  syntax:
    content: public bool Remove(T item)
    content.vb: Public Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to remove from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>item</em> is successfully removed; otherwise, <strong>false</strong>.  This method also returns <strong>false</strong> if <em>item</em> was not found in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - type: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - type: System.Collections.Generic.List`1.Add(`0)
    commentId: M:System.Collections.Generic.List`1.Add(`0)
  - type: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  id: RemoveAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAll
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 305
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all the elements that match the conditions defined by the specified predicate.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, and the elements that match the conditions are removed from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method and several other methods that use the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> generic delegate.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\". </p>\n<p>The <xref href=\"System.Collections.Generic.List`1.Find(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Generic.List`1.FindLast(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.Generic.List`1.FindAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> methods are used to search the list with the search predicate method.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is used to remove all entries ending with \"saurus\". It traverses the list from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The element is removed if the <code>EndsWithSaurus</code> method returns <strong>true</strong>. </p>\n<p>In C# and Visual Basic, it is not necessary to create the <code>Predicate<string></code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context, and create it automatically. </p>\n<p>Finally, the <xref href=\"System.Collections.Generic.List`1.Exists(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method verifies that there are no strings in the list that end with \"saurus\".</p>List`1_FindEtAl#1"
  syntax:
    content: public int RemoveAll(Predicate<T> match)
    content.vb: Public Function RemoveAll(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the elements to remove.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of elements removed from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> .</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  - type: System.Collections.Generic.List`1.Remove(`0)
    commentId: M:System.Collections.Generic.List`1.Remove(`0)
  - type: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - type: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 306
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When you call <xref href=\"System.Collections.Generic.List`1.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to remove an item, the remaining items in the list are renumbered to replace the removed item. For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position. In addition, the number of items in the list (as represented by the <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property) is reduced by 1.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is (<xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> - <em>index</em>).</p>\n"
  example:
  - "\n<p>The following example demonstrates how to add, remove, and insert a simple business object in a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Collections.Generic.List.AddRemoveInsert#1"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to remove.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Remove(`0)
    commentId: M:System.Collections.Generic.List`1.Remove(`0)
  - type: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - type: System.Collections.Generic.List`1.Add(`0)
    commentId: M:System.Collections.Generic.List`1.Add(`0)
  - type: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveRange
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 307
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes a range of elements from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The items are removed and all the elements following them in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> have their indexes reduced by <em>count</em>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method and various other methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that act on ranges. After the list has been created and modified, the <xref href=\"System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to remove two elements from the list, beginning at index location 2.</p>List`1_Ranges#1"
  syntax:
    content: public void RemoveRange(int index, int count)
    content.vb: Public Sub RemoveRange(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range of elements to remove.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to remove.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Remove(`0)
    commentId: M:System.Collections.Generic.List`1.Remove(`0)
  - type: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - type: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  - type: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - type: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 308
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Reverses the order of the elements in the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method uses <xref href=\"System.Array.Reverse(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> to reverse the order of the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates both overloads of the <xref href=\"System.Collections.Generic.List`1.Reverse\" data-throw-if-not-resolved=\"false\"></xref> method. The example creates a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings and adds six strings. The <xref href=\"System.Collections.Generic.List`1.Reverse\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to reverse the list, and then the <xref href=\"System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</p>List`1_Reverse#1"
  syntax:
    content: public void Reverse()
    content.vb: Public Sub Reverse
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 309
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Reverses the order of the elements in the specified range.</p>\n"
  remarks: "\n<p>This method uses <xref href=\"System.Array.Reverse(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> to reverse the order of the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates both overloads of the <xref href=\"System.Collections.Generic.List`1.Reverse\" data-throw-if-not-resolved=\"false\"></xref> method. The example creates a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings and adds six strings. The <xref href=\"System.Collections.Generic.List`1.Reverse\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to reverse the list, and then the <xref href=\"System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</p>List`1_Reverse#1"
  syntax:
    content: public void Reverse(int index, int count)
    content.vb: Public Sub Reverse(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to reverse.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the range to reverse.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  id: Sort
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 310
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> using the default comparer.</p>\n"
  remarks: "\n<p>This method uses the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for type <em>T</em> to determine the order of list elements. The <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property checks whether type <em>T</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.  If type <em>T</em> does not implement either interface, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method uses the <xref href=\"System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method, which applies the introspective sort as follows:</p>\n<ul><li>\n<p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</p>\n</li><li>\n<p>If the number of partitions exceeds 2 * LogN, where N is the range of the input array, it uses a Heapsort algorithm.</p>\n</li><li>\n<p>Otherwise, it uses a Quicksort algorithm.</p>\n</li></ul>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</p>\n<p>On average, this method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>; in the worst case it is an O(<em>n</em> ^ 2) operation.</p>\n"
  example:
  - "\n<p>The following example adds some names to a <strong>List<String></strong> object, displays the list in unsorted order, calls the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> method, and then displays the sorted list. </p>System.Collections.Generic.List.Sort#2"
  - "\n<p>The following code demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Sort(System.Comparison{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overloads on a simple business object. Calling the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> method results in the use of the default comparer for the Part type, and the <xref href=\"System.Collections.Generic.List`1.Sort(System.Comparison{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is implemented by using an anonymous method.</p>System.Collections.Generic.List.Sort#1"
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> method overload and the <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload. A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0)\" data-throw-if-not-resolved=\"false\"></xref> method overload is then used to search for two strings that are not in the list, and the <xref href=\"System.Collections.Generic.List`1.Insert(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to insert them. The return value of the <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, <strong>Xor</strong> -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.</p>List`1_SortSearch#1"
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 311
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> using the specified comparer.</p>\n"
  remarks: "\n<p>If <em>comparer</em> is provided, the elements of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are sorted using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.  If type <em>T</em> does not implement either interface, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method uses the <xref href=\"System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method, which applies the introspective sort as follows:</p>\n<ul><li>\n<p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</p>\n</li><li>\n<p>If the number of partitions exceeds 2 * LogN, where N is the range of the input array, it uses a Heapsort algorithm.</p>\n</li><li>\n<p>Otherwise, it uses a Quicksort algorithm.</p>\n</li></ul>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</p>\n<p>On average, this method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>; in the worst case it is an O(<em>n</em> ^ 2) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload and the <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer<string></code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer<String^></code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <strong>null</strong>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <xref href=\"System.Collections.Generic.List`1.Insert(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to insert the strings. These two methods are located in the function named <code>SearchAndInsert</code>, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, <strong>Xor</strong> -1 in Visual Basic) of the negative number returned by <xref href=\"System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> and use it as an index for inserting the new string.</p>List`1_SortSearchComparer#1"
  syntax:
    content: public void Sort(IComparer<T> comparer)
    content.vb: Public Sub Sort(comparer As IComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements, or <strong>null</strong> to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  id: Sort(System.Comparison{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 312
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sorts the elements in the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Comparison`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If <em>comparison</em> is provided, the elements of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are sorted using the method represented by the delegate.</p>\n<p>If <em>comparison</em> is <strong>null</strong>, an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n<p>This method uses <xref href=\"System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref>, which applies the introspective sort as follows:</p>\n<ul><li>\n<p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</p>\n</li><li>\n<p>If the number of partitions exceeds 2 * LogN, where N is the range of the input array, it uses a <see href=\"http://en.wikipedia.org/wiki/Heapsort\">Heapsort</see> algorithm.</p>\n</li><li>\n<p>Otherwise, it uses a Quicksort algorithm.</p>\n</li></ul>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</p>\n<p>\n    On average, this method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>; in the worst case it is an O(<em>n</em> ^ 2) operation.</p>\n"
  example:
  - "\n<p>The following code demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Sort(System.Comparison{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overloads on a simple business object. Calling the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> method results in the use of the default comparer for the Part type, and the <xref href=\"System.Collections.Generic.List`1.Sort(System.Comparison{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is implemented using an anonymous method.</p>System.Collections.Generic.List.Sort#1"
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort(System.Comparison{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>The example defines an alternative comparison method for strings, named <code>CompareDinosByLength</code>. This method works as follows: First, the comparands are tested for <strong>null</strong>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a <xref href=\"System.Comparison`1\" data-throw-if-not-resolved=\"false\"></xref> generic delegate representing the <code>CompareDinosByLength</code> method, and displayed again.</p>List`1_SortComparison#1"
  syntax:
    content: public void Sort(Comparison<T> comparison)
    content.vb: Public Sub Sort(comparison As Comparison(Of T))
    parameters:
    - id: comparison
      type: System.Comparison{{T}}
      description: "\n<p>The <xref href=\"System.Comparison`1\" data-throw-if-not-resolved=\"false\"></xref> to use when comparing elements.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>comparison</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The implementation of <em>comparison</em> caused an error during the sort. For example, <em>comparison</em> might not return 0 when comparing an item with itself.</p>\n"
  seealso:
  - type: System.Comparison`1
    commentId: T:System.Comparison`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 313
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sorts the elements in a range of elements in <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> using the specified comparer.</p>\n"
  remarks: "\n<p>If <em>comparer</em> is provided, the elements of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are sorted using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether type <em>T</em> implements the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.  If type <em>T</em> does not implement either interface, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method uses <xref href=\"System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref>, which applies the introspective sort as follows:</p>\n<ul><li>\n<p>If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</p>\n</li><li>\n<p>If the number of partitions exceeds 2 * LogN, where N is the range of the input array, it uses a <see href=\"http://en.wikipedia.org/wiki/Heapsort\">Heapsort</see>  algorithm.</p>\n</li><li>\n<p>Otherwise, it uses a Quicksort algorithm.</p>\n</li></ul>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.</p>\n<p>\n    On average, this method is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>; in the worst case it is an O(<em>n</em> ^ 2) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload and the <xref href=\"System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>The example defines an alternative comparer for strings named DinoCompare, which implements the <code>IComparer<string></code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer<String^></code> in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for <strong>null</strong>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</p>\n<p>The <xref href=\"System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method overload is then used to search only the range of herbivores for \"Brachiosaurus\". The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, <strong>Xor</strong> -1 in Visual Basic) of the negative number returned by the <xref href=\"System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is used as an index for inserting the new string.</p>List`1_SortSearchComparerRange#1"
  syntax:
    content: public void Sort(int index, int count, IComparer<T> comparer)
    content.vb: Public Sub Sort(index As Integer, count As Integer, comparer As IComparer(Of T))
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to sort.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the range to sort.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements, or <strong>null</strong> to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 322
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to a new array.</p>\n"
  remarks: "\n<p>The elements are copied using <see cref=\"Overload:System.Array.Copy\"></see>, which is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method and other methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class that act on ranges. At the end of the example, the <xref href=\"System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to get three items from the list, beginning with index location 2. The <xref href=\"System.Collections.Generic.List`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is called on the resulting <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, creating an array of three elements. The elements of the array are displayed.</p>List`1_Ranges#1"
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: "\n<p>An array containing copies of the elements of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 323
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if that number is less than a threshold value.</p>\n"
  remarks: "\n<p>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> can be considerable, however, so the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.</p>\n<p>The current threshold of 90 percent might change in future releases.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To reset a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to its initial state, call the <xref href=\"System.Collections.Generic.List`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method before calling the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method. Trimming an empty <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>The capacity can also be set using the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to check the capacity and count of a  <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains a simple business object, and illustrates using the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method to remove extra capacity. </p>System.Collections.Generic.List.CapacityCount#1"
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method. Several properties and methods of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class are used to add, insert, and remove items from a list of strings. Then the <xref href=\"System.Collections.Generic.List`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method is used to reduce the capacity to match the count, and the <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> properties are displayed. If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized. Finally, the contents of the list are cleared.</p>List`1_Class#1"
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  seealso:
  - type: System.Collections.Generic.List`1.Clear
    commentId: M:System.Collections.Generic.List`1.Clear
  - type: System.Collections.Generic.List`1.Capacity
    commentId: P:System.Collections.Generic.List`1.Capacity
  - type: System.Collections.Generic.List`1.Count
    commentId: P:System.Collections.Generic.List`1.Count
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  id: TrueForAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrueForAll
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 324
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether every element in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> matches the conditions defined by the specified predicate.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, and processing is stopped when the delegate returns <strong>false</strong> for any element. The elements are processed in order, and all calls are made on a single thread.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method and several other methods that use <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> generic delegate.</p>\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\". </p>\n<p>The <xref href=\"System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method traverses the list from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <strong>false</strong>. </p>\n<p>In C# and Visual Basic, it is not necessary to create the <code>Predicate<string></code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically. </p>List`1_FindEtAl#1"
  syntax:
    content: public bool TrueForAll(Predicate<T> match)
    content.vb: Public Function TrueForAll(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions to check against the elements.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every element in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> matches the conditions defined by the specified predicate; otherwise, <strong>false</strong>. If the list has no elements, the return value is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: Collections.Generic.IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: Collections.Generic.IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<>
  fullName: System.Predicate<>
  fullname.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.List<>
  fullName: System.Collections.Generic.List<>
  fullname.vb: System.Collections.Generic.List(Of )
  name.vb: Collections.Generic.List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Action{{T}}
  definition: System.Action`1
  name: Action<T>
  fullName: System.Action<T>
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: List.Enumerator<>
  fullName: System.Collections.Generic.List.Enumerator<>
  fullname.vb: System.Collections.Generic.List.Enumerator(Of )
  name.vb: List.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Comparison{{T}}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
