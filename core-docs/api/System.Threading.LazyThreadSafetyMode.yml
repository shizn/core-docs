items:
- uid: System.Threading.LazyThreadSafetyMode
  commentId: T:System.Threading.LazyThreadSafetyMode
  id: LazyThreadSafetyMode
  parent: System.Threading
  children:
  - System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  - System.Threading.LazyThreadSafetyMode.None
  - System.Threading.LazyThreadSafetyMode.PublicationOnly
  langs:
  - csharp
  - vb
  name: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
  type: Enum
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LazyThreadSafetyMode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3190
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Specifies how a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance synchronizes access among multiple threads.</p>\n"
  remarks: "\n<p>Use this enumeration to specify the <em>mode</em> parameter of <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> constructors. The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have <em>mode</em> parameters.</p>\n<p>\n    A <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance is initialized either by a user-specified initialization method or by the default constructor for <em>T</em>. The initialization method is specified by the <em>valueFactory</em> parameter of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> constructor. The method returns an instance of <em>T</em>, which is the type that is lazily instantiated by the instance of <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref>. If a constructor does not have a <em>valueFactory</em> parameter, the default constructor for <em>T</em> is used to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. In either case, initialization occurs the first time you call the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>\n    In addition to specifying the thread safety of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance, this enumeration affects exception caching. When exceptions are cached for a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance, you get only one chance to initialize the instance. If an exception is thrown the first time you call the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property, that exception is cached and rethrown on all subsequent calls to the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property. The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</p>\n<p>\n    When you specify the <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref> mode, exceptions are never cached. When you specify <xref href=\"System.Threading.LazyThreadSafetyMode.None\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.LazyThreadSafetyMode.ExecutionAndPublication\" data-throw-if-not-resolved=\"false\"></xref>, caching depends on whether you specify an initialization method or allow the default constructor for <em>T</em> to be used. Specifying an initialization method enables exception caching for these two modes. The initialization method can be very simple. For example, it might call the default constructor for <em>T</em>: <code>new Lazy<Contents>(() => new Contents(), mode)</code> in C#, or <code>New Lazy(Of Contents)(Function() New Contents())</code> in Visual Basic. If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <em>T</em> are not cached. The following table summarizes exception caching behavior.</p>\n<p>Mode</p>\n<p>Using initialization method</p>\n<p>Using default constructor for <em>T</em></p>\n"
  example:
  - 
  syntax:
    content: public enum LazyThreadSafetyMode
    content.vb: Public Enum LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  commentId: F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  id: ExecutionAndPublication
  parent: System.Threading.LazyThreadSafetyMode
  langs:
  - csharp
  - vb
  name: ExecutionAndPublication
  fullName: System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecutionAndPublication
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3192
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Locks are used to ensure that only a single thread can initialize a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance in a thread-safe manner. If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur. If you use a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> constructor that specifies an initialization method (<em>valueFactory</em> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property, then the exception is cached and thrown again on subsequent calls to the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property. If you use a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <em>T</em> are not cached. In that case, a subsequent call to the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property might successfully initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. If the initialization method recursively accesses the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  syntax:
    content: ExecutionAndPublication = 2
    return:
      type: System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.LazyThreadSafetyMode.None
  commentId: F:System.Threading.LazyThreadSafetyMode.None
  id: None
  parent: System.Threading.LazyThreadSafetyMode
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Threading.LazyThreadSafetyMode.None
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: None
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3193
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>The <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined. Use this mode only when high performance is crucial and the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance is guaranteed never to be initialized from more than one thread. If you use a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> constructor that specifies an initialization method (<em>valueFactory</em> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property, then the exception is cached and thrown again on subsequent calls to the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property. If you use a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <em>T</em> are not cached. In that case, a subsequent call to the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property might successfully initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. If the initialization method recursively accesses the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  syntax:
    content: None = 0
    return:
      type: System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.LazyThreadSafetyMode.PublicationOnly
  commentId: F:System.Threading.LazyThreadSafetyMode.PublicationOnly
  id: PublicationOnly
  parent: System.Threading.LazyThreadSafetyMode
  langs:
  - csharp
  - vb
  name: PublicationOnly
  fullName: System.Threading.LazyThreadSafetyMode.PublicationOnly
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PublicationOnly
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3194
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>When multiple threads try to initialize a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method). The first thread to complete initialization sets the value of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads. Any instances of <em>T</em> that were created by the competing threads are discarded. If the initialization method throws an exception on any thread, the exception is propagated out of the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property on that thread. The exception is not cached. The value of the <xref href=\"System.Lazy`1.IsValueCreated\" data-throw-if-not-resolved=\"false\"></xref> property remains <strong>false</strong>, and subsequent calls to the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again. If the initialization method recursively accesses the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance, no exception is thrown.</p>\n"
  syntax:
    content: PublicationOnly = 1
    return:
      type: System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: false
  name: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
