items:
- uid: System.Diagnostics.Stopwatch
  commentId: T:System.Diagnostics.Stopwatch
  id: Stopwatch
  parent: System.Diagnostics
  children:
  - System.Diagnostics.Stopwatch.#ctor
  - System.Diagnostics.Stopwatch.Elapsed
  - System.Diagnostics.Stopwatch.ElapsedMilliseconds
  - System.Diagnostics.Stopwatch.ElapsedTicks
  - System.Diagnostics.Stopwatch.Frequency
  - System.Diagnostics.Stopwatch.GetTimestamp
  - System.Diagnostics.Stopwatch.IsHighResolution
  - System.Diagnostics.Stopwatch.IsRunning
  - System.Diagnostics.Stopwatch.Reset
  - System.Diagnostics.Stopwatch.Restart
  - System.Diagnostics.Stopwatch.Start
  - System.Diagnostics.Stopwatch.StartNew
  - System.Diagnostics.Stopwatch.Stop
  langs:
  - csharp
  - vb
  name: Stopwatch
  fullName: System.Diagnostics.Stopwatch
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stopwatch
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 594
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Provides a set of methods and properties that you can use to accurately measure elapsed time.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Stopwatch.cs#ceb0ba9cc88de82e\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>A <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance can measure elapsed time for one interval, or the total of elapsed time across multiple intervals. In a typical <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> scenario, you call the <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> method, then eventually call the <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> method, and then you check elapsed time using the <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>A <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance is either running or stopped; use <xref href=\"System.Diagnostics.Stopwatch.IsRunning\" data-throw-if-not-resolved=\"false\"></xref> to determine the current state of a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref>. Use <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> to begin measuring elapsed time; use <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> to stop measuring elapsed time. Query the elapsed time value through the properties <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Stopwatch.ElapsedMilliseconds\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Diagnostics.Stopwatch.ElapsedTicks\" data-throw-if-not-resolved=\"false\"></xref>. You can query the elapsed time properties while the instance is running or stopped. The elapsed time properties steadily increase while the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> is running; they remain constant when the instance is stopped.</p>\n<p>By default, the elapsed time value of a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance equals the total of all measured time intervals. Each call to <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> begins counting at the cumulative elapsed time; each call to <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> method to clear the cumulative elapsed time in an existing <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>The <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> measures elapsed time by counting timer ticks in the underlying timer mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class uses that counter to measure elapsed time. Otherwise, the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class uses the system timer to measure elapsed time. Use the <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Stopwatch.IsHighResolution\" data-throw-if-not-resolved=\"false\"></xref> fields to determine the precision and resolution of the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timing implementation.</p>\n<p>The <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class assists the manipulation of timing-related performance counters within managed code. Specifically, the <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref> field and <xref href=\"System.Diagnostics.Stopwatch.GetTimestamp\" data-throw-if-not-resolved=\"false\"></xref> method can be used in place of the unmanaged Win32 APIs <strong>QueryPerformanceFrequency</strong> and <strong>QueryPerformanceCounter</strong>.</p>\n<p>On a multiprocessor computer, it does not matter which processor the thread runs on. However, because of bugs in the BIOS or the Hardware Abstraction Layer (HAL), you can get different timing results on different processors. To specify processor affinity for a thread, use the <xref href=\"System.Diagnostics.ProcessThread.ProcessorAffinity\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class to determine the execution time for an application.</p>System.Diagnostics.Stopwatch#1<p>The following example demonstrates the use of the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class to calculate performance data.</p>StopWatchPerfSample#1"
  syntax:
    content: public class Stopwatch
    content.vb: Public Class Stopwatch
  seealso:
  - type: System.TimeSpan
    commentId: T:System.TimeSpan
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.Stopwatch.Frequency
  commentId: F:System.Diagnostics.Stopwatch.Frequency
  id: Frequency
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: Frequency
  fullName: System.Diagnostics.Stopwatch.Frequency
  type: Field
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Frequency
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 596
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Gets the frequency of the timer as the number of ticks per second. This field is read-only.</p>\n"
  remarks: "\n<p>The timer frequency indicates the timer precision and resolution. For example, a timer frequency of 2 million ticks per second equals a timer resolution of 500 nanoseconds per tick. In other words, because one second equals 1 billion nanoseconds, a timer frequency of 2 million ticks per second is equivalent to 2 million ticks per 1 billion nanoseconds, which can be further simplified to 1 tick per 500 nanoseconds.</p>\n<p>The <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref> value depends on the resolution of the underlying timing mechanism. If the installed hardware and operating system support a high-resolution performance counter, then the <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref> value reflects the frequency of that counter. Otherwise, the <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref> value is based on the system timer frequency.</p>\n<p>Because the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> frequency depends on the installed hardware and operating system, the <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref> value remains constant while the system is running.</p>\n"
  example:
  - "\n<p>The following example displays the frequency and resolution of a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timer. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class.</p>StopWatchPerfSample#2"
  syntax:
    content: public static readonly long Frequency
    content.vb: Public Shared ReadOnly Frequency As Long
    return:
      type: System.Int64
  seealso:
  - type: System.Diagnostics.Stopwatch.IsHighResolution
    commentId: F:System.Diagnostics.Stopwatch.IsHighResolution
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Diagnostics.Stopwatch.IsHighResolution
  commentId: F:System.Diagnostics.Stopwatch.IsHighResolution
  id: IsHighResolution
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: IsHighResolution
  fullName: System.Diagnostics.Stopwatch.IsHighResolution
  type: Field
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsHighResolution
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 597
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.</p>\n"
  remarks: "\n<p>The timer used by the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class depends on the system hardware and operating system. <xref href=\"System.Diagnostics.Stopwatch.IsHighResolution\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> if the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timer is based on a high-resolution performance counter. Otherwise, <xref href=\"System.Diagnostics.Stopwatch.IsHighResolution\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>, which indicates that the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timer is based on the system timer.</p>\n"
  example:
  - "\n<p>The following example displays the frequency and resolution of a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timer. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class.</p>StopWatchPerfSample#2"
  syntax:
    content: public static readonly bool IsHighResolution
    content.vb: Public Shared ReadOnly IsHighResolution As Boolean
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.Stopwatch.Frequency
    commentId: F:System.Diagnostics.Stopwatch.Frequency
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Diagnostics.Stopwatch.#ctor
  commentId: M:System.Diagnostics.Stopwatch.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: Stopwatch()
  fullName: System.Diagnostics.Stopwatch.Stopwatch()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 598
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance is stopped, and the elapsed time property of the instance is zero.</p>\n<p>Use the <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> method to begin measuring elapsed time with the new <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance. Use the <xref href=\"System.Diagnostics.Stopwatch.StartNew\" data-throw-if-not-resolved=\"false\"></xref> method to initialize a new <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance and immediately start it.</p>\n"
  example:
  - "\n<p>The following example initializes a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance by using a simple class constructor. </p>System.Diagnostics.Stopwatch#1"
  syntax:
    content: public Stopwatch()
    content.vb: Public Sub New
  seealso:
  - type: System.Diagnostics.Stopwatch.StartNew
    commentId: M:System.Diagnostics.Stopwatch.StartNew
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Stopwatch.Elapsed
  commentId: P:System.Diagnostics.Stopwatch.Elapsed
  id: Elapsed
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: Elapsed
  fullName: System.Diagnostics.Stopwatch.Elapsed
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Elapsed
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 599
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Gets the total elapsed time measured by the current instance.</p>\n"
  remarks: "\n<p>In a typical <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> scenario, you call the <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> method, then eventually call the <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> method, and then you check elapsed time using the <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Use the <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> property to retrieve the elapsed time value using <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> methods and properties. For example, you can format the returned <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> instance into a text representation, or pass it to another class that requires a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> parameter.</p>\n<p>You can query the properties <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Stopwatch.ElapsedMilliseconds\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.Stopwatch.ElapsedTicks\" data-throw-if-not-resolved=\"false\"></xref> while the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance is running or stopped. The elapsed time properties steadily increase while the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> is running; they remain constant when the instance is stopped.</p>\n<p>By default, the elapsed time value of a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance equals the total of all measured time intervals. Each call to <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> begins counting at the cumulative elapsed time; each call to <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> method to clear the cumulative elapsed time in an existing <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> property to determine the execution time for an application.</p>System.Diagnostics.Stopwatch#1"
  syntax:
    content: public TimeSpan Elapsed { get; }
    content.vb: Public ReadOnly Property Elapsed As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A read-only <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing the total elapsed time measured by the current instance.</p>\n"
  seealso:
  - type: System.TimeSpan
    commentId: T:System.TimeSpan
  - type: System.Diagnostics.Stopwatch.ElapsedMilliseconds
    commentId: P:System.Diagnostics.Stopwatch.ElapsedMilliseconds
  - type: System.Diagnostics.Stopwatch.ElapsedTicks
    commentId: P:System.Diagnostics.Stopwatch.ElapsedTicks
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Stopwatch.ElapsedMilliseconds
  commentId: P:System.Diagnostics.Stopwatch.ElapsedMilliseconds
  id: ElapsedMilliseconds
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: ElapsedMilliseconds
  fullName: System.Diagnostics.Stopwatch.ElapsedMilliseconds
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElapsedMilliseconds
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 600
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Gets the total elapsed time measured by the current instance, in milliseconds.</p>\n"
  remarks: "\n<p>This property represents elapsed time rounded down to the nearest whole millisecond value. For higher precision measurements, use the <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Diagnostics.Stopwatch.ElapsedTicks\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n<p>You can query the properties <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Stopwatch.ElapsedMilliseconds\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.Stopwatch.ElapsedTicks\" data-throw-if-not-resolved=\"false\"></xref> while the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance is running or stopped. The elapsed time properties steadily increase while the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> is running; they remain constant when the instance is stopped.</p>\n<p>By default, the elapsed time value of a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance equals the total of all measured time intervals. Each call to <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> begins counting at the cumulative elapsed time; each call to <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> method to clear the cumulative elapsed time in an existing <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class to measure the performance of four different implementations for parsing an integer from a string. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class.</p>StopWatchPerfSample#3"
  syntax:
    content: public long ElapsedMilliseconds { get; }
    content.vb: Public ReadOnly Property ElapsedMilliseconds As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>A read-only long integer representing the total number of milliseconds measured by the current instance.</p>\n"
  seealso:
  - type: System.Diagnostics.Stopwatch.Elapsed
    commentId: P:System.Diagnostics.Stopwatch.Elapsed
  - type: System.Diagnostics.Stopwatch.ElapsedTicks
    commentId: P:System.Diagnostics.Stopwatch.ElapsedTicks
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Stopwatch.ElapsedTicks
  commentId: P:System.Diagnostics.Stopwatch.ElapsedTicks
  id: ElapsedTicks
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: ElapsedTicks
  fullName: System.Diagnostics.Stopwatch.ElapsedTicks
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElapsedTicks
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 601
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Gets the total elapsed time measured by the current instance, in timer ticks.</p>\n"
  remarks: "\n<p>This property represents the number of elapsed ticks in the underlying timer mechanism. A tick is the smallest unit of time that the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timer can measure. Use the <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref> field to convert the <xref href=\"System.Diagnostics.Stopwatch.ElapsedTicks\" data-throw-if-not-resolved=\"false\"></xref> value into a number of seconds.</p>\n<p>You can query the properties <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Stopwatch.ElapsedMilliseconds\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.Stopwatch.ElapsedTicks\" data-throw-if-not-resolved=\"false\"></xref> while the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance is running or stopped. The elapsed time properties steadily increase while the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> is running; they remain constant when the instance is stopped.</p>\n<p>By default, the elapsed time value of a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance equals the total of all measured time intervals. Each call to <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> begins counting at the cumulative elapsed time; each call to <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> ends the current interval measurement and freezes the cumulative elapsed time value. Use the <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> method to clear the cumulative elapsed time in an existing <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>\n<xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> ticks are different from <xref href=\"System.DateTime.Ticks\" data-throw-if-not-resolved=\"false\"></xref>. Each tick in the <xref href=\"System.DateTime.Ticks\" data-throw-if-not-resolved=\"false\"></xref> value represents one 100-nanosecond interval. Each tick in the <xref href=\"System.Diagnostics.Stopwatch.ElapsedTicks\" data-throw-if-not-resolved=\"false\"></xref> value represents the time interval equal to 1 second divided by the <xref href=\"System.Diagnostics.Stopwatch.Frequency\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class to measure the performance of four different implementations for parsing an integer from a string. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class.</p>StopWatchPerfSample#4"
  syntax:
    content: public long ElapsedTicks { get; }
    content.vb: Public ReadOnly Property ElapsedTicks As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>A read-only long integer representing the total number of timer ticks measured by the current instance.</p>\n"
  seealso:
  - type: System.Diagnostics.Stopwatch.Elapsed
    commentId: P:System.Diagnostics.Stopwatch.Elapsed
  - type: System.Diagnostics.Stopwatch.ElapsedMilliseconds
    commentId: P:System.Diagnostics.Stopwatch.ElapsedMilliseconds
  - type: System.Diagnostics.Stopwatch.Frequency
    commentId: F:System.Diagnostics.Stopwatch.Frequency
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Stopwatch.IsRunning
  commentId: P:System.Diagnostics.Stopwatch.IsRunning
  id: IsRunning
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: IsRunning
  fullName: System.Diagnostics.Stopwatch.IsRunning
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsRunning
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 602
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timer is running.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance begins running with a call to <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Diagnostics.Stopwatch.StartNew\" data-throw-if-not-resolved=\"false\"></xref>. The instance stops running with a call to <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsRunning { get; }
    content.vb: Public ReadOnly Property IsRunning As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance is currently running and measuring elapsed time for an interval; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Diagnostics.Stopwatch.StartNew
    commentId: M:System.Diagnostics.Stopwatch.StartNew
  - type: System.Diagnostics.Stopwatch.Stop
    commentId: M:System.Diagnostics.Stopwatch.Stop
  - type: System.Diagnostics.Stopwatch.Start
    commentId: M:System.Diagnostics.Stopwatch.Start
  - type: System.Diagnostics.Stopwatch.Reset
    commentId: M:System.Diagnostics.Stopwatch.Reset
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Stopwatch.GetTimestamp
  commentId: M:System.Diagnostics.Stopwatch.GetTimestamp
  id: GetTimestamp
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: GetTimestamp()
  fullName: System.Diagnostics.Stopwatch.GetTimestamp()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTimestamp
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 603
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Gets the current number of ticks in the timer mechanism.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class uses a high-resolution performance counter, <xref href=\"System.Diagnostics.Stopwatch.GetTimestamp\" data-throw-if-not-resolved=\"false\"></xref> returns the current value of that counter. If the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class uses the system timer, <xref href=\"System.Diagnostics.Stopwatch.GetTimestamp\" data-throw-if-not-resolved=\"false\"></xref> returns the current <xref href=\"System.DateTime.Ticks\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.DateTime.Now\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Diagnostics.Stopwatch.GetTimestamp\" data-throw-if-not-resolved=\"false\"></xref> method to update a performance counter. </p>PerformanceCounterType.ElapsedTime#2"
  syntax:
    content: public static long GetTimestamp()
    content.vb: Public Shared Function GetTimestamp As Long
    return:
      type: System.Int64
      description: "\n<p>A long integer representing the tick counter value of the underlying timer mechanism.</p>\n"
  seealso:
  - type: System.Diagnostics.Stopwatch.IsHighResolution
    commentId: F:System.Diagnostics.Stopwatch.IsHighResolution
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Stopwatch.Reset
  commentId: M:System.Diagnostics.Stopwatch.Reset
  id: Reset
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Diagnostics.Stopwatch.Reset()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 604
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Stops time interval measurement and resets the elapsed time to zero.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> to stop any interval measurement in progress and clear the elapsed time value. </p>\n"
  example:
  - 
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  seealso:
  - type: System.Diagnostics.Stopwatch.StartNew
    commentId: M:System.Diagnostics.Stopwatch.StartNew
  - type: System.Diagnostics.Stopwatch.Stop
    commentId: M:System.Diagnostics.Stopwatch.Stop
  - type: System.Diagnostics.Stopwatch.IsRunning
    commentId: P:System.Diagnostics.Stopwatch.IsRunning
  - type: System.Diagnostics.Stopwatch.Start
    commentId: M:System.Diagnostics.Stopwatch.Start
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Stopwatch.Restart
  commentId: M:System.Diagnostics.Stopwatch.Restart
  id: Restart
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: Restart()
  fullName: System.Diagnostics.Stopwatch.Restart()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Restart
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 605
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset or restarted. Use <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> to stop the current interval measurement and retain the cumulative elapsed time value. Use <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> to stop any interval measurement in progress and clear the elapsed time value. Use <xref href=\"System.Diagnostics.Stopwatch.Restart\" data-throw-if-not-resolved=\"false\"></xref> to stop current interval measurement and start a new interval measurement.</p>\n"
  example:
  - 
  syntax:
    content: public void Restart()
    content.vb: Public Sub Restart
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Stopwatch.Start
  commentId: M:System.Diagnostics.Stopwatch.Start
  id: Start
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: Start()
  fullName: System.Diagnostics.Stopwatch.Start()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 606
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Starts, or resumes, measuring elapsed time for an interval.</p>\n"
  remarks: "\n<p>In a typical <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> scenario, you call the <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> method, then eventually call the <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> method, and then you check elapsed time using the <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Once started, a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> timer measures the current interval, in elapsed timer ticks, until the instance is stopped or reset. Starting a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> that is already running does not change the timer state or reset the elapsed time properties.</p>\n<p>When a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance measures more than one interval, the <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> method resumes measuring time from the current elapsed time value. A <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance calculates and retains the cumulative elapsed time across multiple time intervals, until the instance is reset. Use the <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> method before calling <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> to clear the cumulative elapsed time in a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance. Use the <xref href=\"System.Diagnostics.Stopwatch.Restart\" data-throw-if-not-resolved=\"false\"></xref> method to <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> with a single command.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> method to start a timer that measures the execution time of an application.</p>System.Diagnostics.Stopwatch#1"
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  seealso:
  - type: System.Diagnostics.Stopwatch.StartNew
    commentId: M:System.Diagnostics.Stopwatch.StartNew
  - type: System.Diagnostics.Stopwatch.Stop
    commentId: M:System.Diagnostics.Stopwatch.Stop
  - type: System.Diagnostics.Stopwatch.IsRunning
    commentId: P:System.Diagnostics.Stopwatch.IsRunning
  - type: System.Diagnostics.Stopwatch.Reset
    commentId: M:System.Diagnostics.Stopwatch.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Stopwatch.StartNew
  commentId: M:System.Diagnostics.Stopwatch.StartNew
  id: StartNew
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: StartNew()
  fullName: System.Diagnostics.Stopwatch.StartNew()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 607
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance, sets the elapsed time property to zero, and starts measuring elapsed time.</p>\n"
  remarks: "\n<p>This method is equivalent to calling the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> constructor and then calling <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> on the new instance.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class to measure the performance of four different implementations for parsing an integer from a string. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> class.</p>StopWatchPerfSample#4"
  syntax:
    content: public static Stopwatch StartNew()
    content.vb: Public Shared Function StartNew As Stopwatch
    return:
      type: System.Diagnostics.Stopwatch
      description: "\n<p>A <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> that has just begun measuring elapsed time.</p>\n"
  seealso:
  - type: System.Diagnostics.Stopwatch.Start
    commentId: M:System.Diagnostics.Stopwatch.Start
  - type: System.Diagnostics.Stopwatch.Stop
    commentId: M:System.Diagnostics.Stopwatch.Stop
  - type: System.Diagnostics.Stopwatch.IsRunning
    commentId: P:System.Diagnostics.Stopwatch.IsRunning
  - type: System.Diagnostics.Stopwatch.Reset
    commentId: M:System.Diagnostics.Stopwatch.Reset
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Stopwatch.Stop
  commentId: M:System.Diagnostics.Stopwatch.Stop
  id: Stop
  parent: System.Diagnostics.Stopwatch
  langs:
  - csharp
  - vb
  name: Stop()
  fullName: System.Diagnostics.Stopwatch.Stop()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stop
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 608
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Diagnostics
  summary: "\n<p>Stops measuring elapsed time for an interval.</p>\n"
  remarks: "\n<p>In a typical <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> scenario, you call the <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> method, then eventually call the <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> method, and then you check elapsed time using the <xref href=\"System.Diagnostics.Stopwatch.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> method ends the current time interval measurement. Stopping a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> that is not running does not change the timer state or reset the elapsed time properties.</p>\n<p>When a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance measures more than one interval, the <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to pausing the elapsed time measurement. A subsequent call to <xref href=\"System.Diagnostics.Stopwatch.Start\" data-throw-if-not-resolved=\"false\"></xref> resumes measuring time from the current elapsed time value. Use the <xref href=\"System.Diagnostics.Stopwatch.Reset\" data-throw-if-not-resolved=\"false\"></xref> method to clear the cumulative elapsed time in a <xref href=\"System.Diagnostics.Stopwatch\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Diagnostics.Stopwatch.Stop\" data-throw-if-not-resolved=\"false\"></xref> method to stop a timer that measures the execution time of an application.</p>System.Diagnostics.Stopwatch#1"
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  seealso:
  - type: System.Diagnostics.Stopwatch.StartNew
    commentId: M:System.Diagnostics.Stopwatch.StartNew
  - type: System.Diagnostics.Stopwatch.IsRunning
    commentId: P:System.Diagnostics.Stopwatch.IsRunning
  - type: System.Diagnostics.Stopwatch.Start
    commentId: M:System.Diagnostics.Stopwatch.Start
  - type: System.Diagnostics.Stopwatch.Reset
    commentId: M:System.Diagnostics.Stopwatch.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Diagnostics.Stopwatch
  parent: System.Diagnostics
  isExternal: false
  name: Stopwatch
  fullName: System.Diagnostics.Stopwatch
