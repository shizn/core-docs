items:
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  id: CultureInfo
  parent: System.Globalization
  children:
  - System.Globalization.CultureInfo.#ctor(System.String)
  - System.Globalization.CultureInfo.Calendar
  - System.Globalization.CultureInfo.Clone
  - System.Globalization.CultureInfo.CompareInfo
  - System.Globalization.CultureInfo.CurrentCulture
  - System.Globalization.CultureInfo.CurrentUICulture
  - System.Globalization.CultureInfo.DateTimeFormat
  - System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  - System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  - System.Globalization.CultureInfo.DisplayName
  - System.Globalization.CultureInfo.EnglishName
  - System.Globalization.CultureInfo.Equals(System.Object)
  - System.Globalization.CultureInfo.GetFormat(System.Type)
  - System.Globalization.CultureInfo.GetHashCode
  - System.Globalization.CultureInfo.InvariantCulture
  - System.Globalization.CultureInfo.IsNeutralCulture
  - System.Globalization.CultureInfo.IsReadOnly
  - System.Globalization.CultureInfo.Name
  - System.Globalization.CultureInfo.NativeName
  - System.Globalization.CultureInfo.NumberFormat
  - System.Globalization.CultureInfo.OptionalCalendars
  - System.Globalization.CultureInfo.Parent
  - System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  - System.Globalization.CultureInfo.TextInfo
  - System.Globalization.CultureInfo.ToString
  - System.Globalization.CultureInfo.TwoLetterISOLanguageName
  langs:
  - csharp
  - vb
  name: CultureInfo
  fullName: System.Globalization.CultureInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CultureInfo
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 44
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers. </p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/globalization/cultureinfo.cs#e319c6636909012f\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> class provides culture-specific information, such as the language, sublanguage, country/region, calendar, and conventions associated with a particular culture. This class also provides access to culture-specific instances of the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> objects. These objects contain the information required for culture-specific operations, such as casing, formatting dates and numbers, and comparing strings. The <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> class is used either directly or indirectly by classes that format, parse, or manipulate culture-specific data, such as <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>, and the numeric types.</p>\n<p>In this section:</p>\n<p>Culture names and identifiersInvariant, neutral, and specific culturesCustom culturesDynamic culture dataThe current culture and current UI cultureGetting all culturesCulture and threadsCulture and application domainsCulture and task-based asynchronous operationsCultureInfo object serializationControl Panel overridesAlternate sort ordersCulture and Windows apps</p>\n"
  example:
  - <p>The following example shows how to create a <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> object for Spanish (Spain) with the international sort and another <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> object with the traditional sort.</p>System.Globalization.CultureInfo_esES#1
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class CultureInfo : ICloneable, IFormatProvider
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class CultureInfo
          Implements ICloneable, IFormatProvider
  seealso:
  - type: System.Globalization.CultureAndRegionInfoBuilder
    commentId: T:System.Globalization.CultureAndRegionInfoBuilder
  - type: System.Globalization.RegionInfo
    commentId: T:System.Globalization.RegionInfo
  inheritance:
  - System.Object
  implements:
  - System.IFormatProvider
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.CultureInfo.#ctor(System.String)
  commentId: M:System.Globalization.CultureInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: CultureInfo(String)
  fullName: System.Globalization.CultureInfo.CultureInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 321
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> class based on the culture specified by name.</p>\n"
  remarks: "\n<p>For a list of predefined culture names, see the <see href=\"http://go.microsoft.com/fwlink/?LinkId=200048\">National Language Support (NLS) API Reference</see> at the Go Global Developer Center. In addition, starting with Windows 10, <em>name</em> can be any valid BCP-47 language tag. </p>\n<p>If <em>name</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the constructor creates an instance of the invariant culture; this is equivalent to retrieving the value of the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the culture identifier associated with <em>name</em> matches the culture identifier of the current Windows culture, this constructor creates a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that uses those overrides, including user settings for the properties of the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instance returned by the <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> property, and the properties of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instance returned by the <xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref> property. If the user settings are incompatible with the culture associated with the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>, for example, if the selected calendar is not one of the <xref href=\"System.Globalization.CultureInfo.OptionalCalendars\" data-throw-if-not-resolved=\"false\"></xref>, the results of the methods and the values of the properties are undefined.</p>\n<p>If the culture identifier associated with <em>name</em> does not match the culture identifier of the current Windows culture, this constructor creates a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that uses the default values for the specified culture.</p>\n<p>The <xref href=\"System.Globalization.CultureInfo.UseUserOverride\" data-throw-if-not-resolved=\"false\"></xref> property is always set to <strong>true</strong>.</p>\n<p>For example, suppose that Arabic (Saudi Arabia) is the current culture of Windows and the user changed the calendar from Hijri to Gregorian.</p>\n<ul><li>\n<p>With <code>CultureInfo(\"ar-SA\")</code>, <xref href=\"System.Globalization.CultureInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Globalization.GregorianCalendar\" data-throw-if-not-resolved=\"false\"></xref> (which is the user setting) and <xref href=\"System.Globalization.CultureInfo.UseUserOverride\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong>.</p>\n</li><li>\n<p>With <code>CultureInfo(\"th-TH\")</code>, <xref href=\"System.Globalization.CultureInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Globalization.ThaiBuddhistCalendar\" data-throw-if-not-resolved=\"false\"></xref> (which is the default calendar for th-TH) and <xref href=\"System.Globalization.CultureInfo.UseUserOverride\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong>.</p>\n</li></ul>\n<p>The <xref href=\"System.Globalization.CultureInfo.LCID\" data-throw-if-not-resolved=\"false\"></xref> property of the new <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> is set to the culture identifier associated with the specified name.</p>\n<p>For cultures that use the euro, the .NET Framework and Windows XP set the default currency as euro. However, older versions of Windows do not do this. Therefore, if the user of an older version of Windows has not changed the currency setting through the regional and language options portion of Control Panel, the currency might be incorrect. To use the .NET Framework default setting for the currency, the application should use a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> constructor overload that accepts a <em>useUserOverride</em> parameter and set it to <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example retrieves the current culture. If it is anything other than the French (France) culture, it calls the <xref href=\"System.Globalization.CultureInfo.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the French (France) culture and makes it the current thread culture. Otherwise, it instantiates a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the French (Luxembourg) culture and makes it the current culture.</p>System.Globalization.CultureInfo#3"
  syntax:
    content: public CultureInfo(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is null. </p>\n"
  - type: System.Globalization.CultureNotFoundException
    commentId: T:System.Globalization.CultureNotFoundException
    description: "\n<p>\n<em>name</em> is not a valid culture name. For more information, see the Notes to Callers section. </p>\n"
  seealso:
  - type: System.Globalization.CultureInfo.LCID
    commentId: P:System.Globalization.CultureInfo.LCID
  - type: System.Globalization.CultureInfo.UseUserOverride
    commentId: P:System.Globalization.CultureInfo.UseUserOverride
  - type: System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
    commentId: M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.CultureInfo.Calendar
  commentId: P:System.Globalization.CultureInfo.Calendar
  id: Calendar
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: Calendar
  fullName: System.Globalization.CultureInfo.Calendar
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Calendar
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1496
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the default calendar used by the culture.</p>\n"
  remarks: "\n<p>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</p>\n<p>If <xref href=\"System.Globalization.CultureInfo.UseUserOverride\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> and the specified culture matches the current culture of Windows, the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> uses those overrides, including user settings for the properties of the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instance returned by the <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> property, and the properties of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instance returned by the <xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref> property. If the user settings are incompatible with the culture associated with the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>, for example, if the selected calendar is not one of the <xref href=\"System.Globalization.CultureInfo.OptionalCalendars\" data-throw-if-not-resolved=\"false\"></xref>, the results of the methods and the values of the properties are undefined.</p>\n<p>Therefore, if <xref href=\"System.Globalization.CultureInfo.UseUserOverride\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, the value of this property might be different from the default calendar used by the culture.</p>\n<p>Your application changes the calendar used by the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> by setting the <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref>, which is an instance of the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class. The new calendar must be one of the calendars listed in <xref href=\"System.Globalization.CultureInfo.OptionalCalendars\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> also includes other properties that customize the date and time formatting associated with that <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Calendar Calendar { get; }
    content.vb: Public Overridable ReadOnly Property Calendar As Calendar
    parameters: []
    return:
      type: System.Globalization.Calendar
  seealso:
  - type: System.Globalization.Calendar
    commentId: T:System.Globalization.Calendar
  - type: System.Globalization.CultureInfo.DateTimeFormat
    commentId: P:System.Globalization.CultureInfo.DateTimeFormat
  - type: System.Globalization.DateTimeFormatInfo
    commentId: T:System.Globalization.DateTimeFormatInfo
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.CompareInfo
  commentId: P:System.Globalization.CultureInfo.CompareInfo
  id: CompareInfo
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: CompareInfo
  fullName: System.Globalization.CultureInfo.CompareInfo
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareInfo
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1162
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> that defines how to compare strings for the culture.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.CultureInfo.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information used in culture-sensitive sorting and string comparison operations. </p>\n<p>The user might choose to override some of the values associated with the current culture of Windows through the regional and language options portion of Control Panel. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture.</p>\n<p>If <xref href=\"System.Globalization.CultureInfo.UseUserOverride\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> and the specified culture matches the current culture of Windows, the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> uses those overrides, including user settings for the properties of the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instance returned by the <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> property, and the properties of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instance returned by the <xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref> property. If the user settings are incompatible with the culture associated with the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>, for example, if the selected calendar is not one of the <xref href=\"System.Globalization.CultureInfo.OptionalCalendars\" data-throw-if-not-resolved=\"false\"></xref>, the results of the methods and the values of the properties are undefined.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> for Spanish (Spain) with the international sort and another <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> with the traditional sort.</p>System.Globalization.CultureInfo_esES#1"
  syntax:
    content: public virtual CompareInfo CompareInfo { get; }
    content.vb: Public Overridable ReadOnly Property CompareInfo As CompareInfo
    parameters: []
    return:
      type: System.Globalization.CompareInfo
  seealso:
  - type: System.Globalization.CompareInfo
    commentId: T:System.Globalization.CompareInfo
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.CurrentCulture
  commentId: P:System.Globalization.CultureInfo.CurrentCulture
  id: CurrentCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: CurrentCulture
  fullName: System.Globalization.CultureInfo.CurrentCulture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentCulture
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 673
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture used by the current thread.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is returned by this property and its associated objects determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons. </p>\n<p>The current culture is a property of the executing thread, which is returned by the static <xref href=\"System.Threading.Thread.CurrentThread\" data-throw-if-not-resolved=\"false\"></xref> property. The value of the <xref href=\"System.Globalization.CultureInfo.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property corresponds to the value of the <xref href=\"System.Threading.Thread.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property. Retrieving the value of the <xref href=\"System.Globalization.CultureInfo.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property is equivalent to retrieving the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <strong>Thread.CurrentThread.CurrentCulture</strong> property. Starting with the .NET Framework 4.6, setting the value of the <xref href=\"System.Globalization.CultureInfo.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property also changes the current thread culture. </p>\n<p>In the .NET Framework 4.5.2 and earlier versions, the <xref href=\"System.Globalization.CultureInfo.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property is read-only;  that is, you can retrieve the property value, but you cannot set it. To change the current culture, you assign the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the new culture to the <strong>Thread.CurrentThread.CurrentCulture</strong> property. Starting with the .NET Framework 4.6, the <xref href=\"System.Globalization.CultureInfo.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property is read-write; you can both set and retrieve the property's value. If you do set the property value to a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a new culture, the value of the <strong>Thread.CurrentThread.CurrentCulture</strong> property also changes. </p>\n<p>In this section:</p>\n<p>How a Thread's Culture Is DeterminedGetting the Current CultureExplicitly Setting the CurrentCulture PropertyThe Current Culture and User OverridesCulture and Windows Apps</p>\n"
  example:
  - <p>The following code example demonstrates how to change the <xref href="System.Globalization.CultureInfo.CurrentCulture" data-throw-if-not-resolved="false"></xref> and <xref href="System.Globalization.CultureInfo.CurrentUICulture" data-throw-if-not-resolved="false"></xref> of the current thread.</p>System.Globalization.CultureInfo.CurrentCulture2#11
  syntax:
    content: public static CultureInfo CurrentCulture { get; set; }
    content.vb: Public Shared Property CurrentCulture As CultureInfo
    parameters: []
    return:
      type: System.Globalization.CultureInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The property is set to <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Globalization.CultureInfo.DefaultThreadCurrentCulture
    commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  - type: System.Threading.Thread.CurrentCulture
    commentId: P:System.Threading.Thread.CurrentCulture
  - type: System.Globalization.CultureInfo.CurrentUICulture
    commentId: P:System.Globalization.CultureInfo.CurrentUICulture
  - type: System.Globalization.CultureInfo.InstalledUICulture
    commentId: P:System.Globalization.CultureInfo.InstalledUICulture
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  - type: System.Globalization.CultureInfo.Parent
    commentId: P:System.Globalization.CultureInfo.Parent
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermissionAttribute
    commentId: T:System.Security.Permissions.SecurityPermissionAttribute
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CultureInfo.CurrentUICulture
  commentId: P:System.Globalization.CultureInfo.CurrentUICulture
  id: CurrentUICulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: CurrentUICulture
  fullName: System.Globalization.CultureInfo.CurrentUICulture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentUICulture
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 772
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time.</p>\n"
  remarks: "\n<p>The current UI culture is a per-thread property. That is, each thread has its own current UI culture. This property is equivalent to retrieving or, starting with the .NET Framework 4.6, setting the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object assigned to the  <strong>System.Threading.Thread.CurrentThread.CurrentUICulture</strong> property. When a thread is started, its UI culture is initially determined as follows: </p>\n<ul><li>\n<p>By retrieving the culture that is specified by the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property in the application domain in which the thread is executing, if the property value is not <strong>null</strong>.</p>\n</li><li>\n<p>If the thread is a thread pool thread that is executing a task-based asynchronous operation and the app targets the .NET Framework 4.6 or a later version of the .NET Framework, its UI culture is determined by the UI culture of the calling thread.  The following example changes the current UI culture to Portuguese (Brazil) and launches six tasks, each of which displays its thread ID, its task ID, and its current UI culture. Each of the tasks (and the threads) has inherited the UI culture of the calling thread.</p>System.Globalization.CultureInfo.CurrentUICulture#14<p>For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> topic.</p></li><li>\n<p>By calling the Windows <strong>GetUserDefaultUILanguage</strong> function.</p>\n</li></ul>\n<p>In the .NET Compact Framework, the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property is read-only. The current UI culture is determined by the system's regional settings and cannot be changed programmatically. </p>\n<p>Starting with the .NET Framework 4.6, to change the user interface culture used by a thread, set the <xref href=\"System.Threading.Thread.CurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property to the new culture. If you explicitly change a thread's UI culture in this way, that change persists if the thread crosses application domain boundaries.</p>\n<p>In the .NET Framework 4.5.2 and earlier versions, the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property is read-only;  that is, you can retrieve the property value, but you cannot set it. To change the current UI culture, you assign the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the new UI culture to the <strong>Thread.CurrentThread.CurrentUICulture</strong> property. Starting with the .NET Framework 4.6, the <xref href=\"System.Globalization.CultureInfo.CurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property is read-write; you can both set and retrieve the property's value. If you do set the property value to a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a new culture, the value of the <strong>Thread.CurrentThread.CurrentCulture</strong> property also changes. </p>\n<p>In this section:</p>\n<p>Getting the Current UI CultureExplicitly Setting the Current UI CultureImplicitly Setting the Current UI CultureSecurity ConsiderationsThe Current UI Culture and Windows apps</p>\n"
  example:
  - <p>The following code example demonstrates how to change the <xref href="System.Globalization.CultureInfo.CurrentCulture" data-throw-if-not-resolved="false"></xref> and <xref href="System.Globalization.CultureInfo.CurrentUICulture" data-throw-if-not-resolved="false"></xref> of the current thread.</p>System.Globalization.CultureInfo.CurrentCulture2#11
  syntax:
    content: public static CultureInfo CurrentUICulture { get; set; }
    content.vb: Public Shared Property CurrentUICulture As CultureInfo
    parameters: []
    return:
      type: System.Globalization.CultureInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The property is set to <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The property is set to a culture name that cannot be used to locate a resource file. Resource filenames can include only letters, numbers, hyphens, or underscores. </p>\n"
  seealso:
  - type: System.Resources.ResourceManager
    commentId: T:System.Resources.ResourceManager
  - type: System.Threading.Thread.CurrentUICulture
    commentId: P:System.Threading.Thread.CurrentUICulture
  - type: System.Globalization.CultureInfo.CurrentCulture
    commentId: P:System.Globalization.CultureInfo.CurrentCulture
  - type: System.Globalization.CultureInfo.InstalledUICulture
    commentId: P:System.Globalization.CultureInfo.InstalledUICulture
  - type: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
    commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CultureInfo.DateTimeFormat
  commentId: P:System.Globalization.CultureInfo.DateTimeFormat
  id: DateTimeFormat
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: DateTimeFormat
  fullName: System.Globalization.CultureInfo.DateTimeFormat
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DateTimeFormat
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1386
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets a <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> that defines the culturally appropriate format of displaying dates and times.</p>\n"
  example:
  - <p>The following code example shows that CultureInfo.Clone also clones the <xref href="System.Globalization.DateTimeFormatInfo" data-throw-if-not-resolved="false"></xref> and <xref href="System.Globalization.NumberFormatInfo" data-throw-if-not-resolved="false"></xref> instances associated with the <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref>.</p>System.Globalization.CultureInfo.Clone#1
  syntax:
    content: public virtual DateTimeFormatInfo DateTimeFormat { get; set; }
    content.vb: Public Overridable Property DateTimeFormat As DateTimeFormatInfo
    parameters: []
    return:
      type: System.Globalization.DateTimeFormatInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The property is set to null. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> property or any of the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> properties is set, and the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  seealso:
  - type: System.Globalization.DateTimeFormatInfo
    commentId: T:System.Globalization.DateTimeFormatInfo
  - type: System.Globalization.CultureInfo.GetFormat(System.Type)
    commentId: M:System.Globalization.CultureInfo.GetFormat(System.Type)
  - type: System.Globalization.CultureInfo.NumberFormat
    commentId: P:System.Globalization.CultureInfo.NumberFormat
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  id: DefaultThreadCurrentCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: DefaultThreadCurrentCulture
  fullName: System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefaultThreadCurrentCulture
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 844
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the default culture for threads in the current application domain.</p>\n"
  remarks: "\n<p>In the .NET Framework 4 and previous versions, by default, the culture of all threads is set to the Windows system culture. For applications whose current culture differs from the default system culture, this behavior is often undesirable. In the .NET Framework 4.5, the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property enables an application to define the default culture of all threads in an application domain.</p>\n<p>If you have not explicitly set the culture of any existing threads executing in an application domain, setting the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread, and not rely on the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property to define the culture of the main application thread.</p>\n<p>Unless it is set explicitly, the value of the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>, and the culture of threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.</p>\n<p>For more information about cultures, threads, and application domains, see the \"Culture and threads\" and \"Culture and application domains\" sections in the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - "\n<p>The following example illustrates the default behavior of the .NET Framework in defining the current culture of a new thread. At startup, the example sets the current culture and the current UI culture to French (France) on all systems except those on which the default system culture is already French (France). If the default system culture is already French (France), the code sets the current culture and the current UI culture to English (United States). It then calls the <code>DisplayRandomNumbers</code> routine, which generates three random numbers and displays them as currency values. Next, it creates a new thread, which also executes the <code>DisplayRandomNumbers</code> routine.</p>System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1<p>As the output from the example shows, when the example is run on a computer whose system culture is English (United States), the main thread displays its currency values using the formatting conventions of the French (France) culture. However, because the worker thread's culture is derived from the current Windows system culture rather than the application's current culture, the work thread displays its currency values using the formatting conventions of the English (United States) culture.</p>"
  - "\n<p>The following example uses the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> properties  to define the current culture and current UI culture of a new application thread. At startup, the example sets the current culture and the current UI culture to French (France) on all systems except those on which the default system culture is already French (France). If the default system culture is already French (France), it sets the current culture and the current UI culture to English (United States). It then calls the <code>DisplayRandomNumbers</code> routine, which generates three random numbers and displays them as currency values. Next, it creates a new thread, which also executes the <code>DisplayRandomNumbers</code> routine.</p>System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2<p>As the output from the example shows, when the example is run on a computer whose system culture is English (United States), both the main thread and the worker thread display their currency values using the formatting conventions of the French (France) culture.</p>"
  syntax:
    content: >-
      public static CultureInfo DefaultThreadCurrentCulture

      {
          get;
          [SecuritySafeCritical]
          [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
          set;
      }
    content.vb: Public Shared Property DefaultThreadCurrentCulture As CultureInfo
    parameters: []
    return:
      type: System.Globalization.CultureInfo
  seealso:
  - type: System.Globalization.CultureInfo.CurrentCulture
    commentId: P:System.Globalization.CultureInfo.CurrentCulture
  - type: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
    commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  id: DefaultThreadCurrentUICulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: DefaultThreadCurrentUICulture
  fullName: System.Globalization.CultureInfo.DefaultThreadCurrentUICulture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefaultThreadCurrentUICulture
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 862
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the default UI culture for threads in the current application domain.</p>\n"
  remarks: "\n<p>In the .NET Framework 4 and previous versions, by default, the UI culture of all threads is set to the Windows system culture. For applications whose current UI culture differs from the default system culture, this behavior is often undesirable. In the .NET Framework 4.5, the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property lets you define the default UI culture of all threads in an application domain.</p>\n<p>If you have not explicitly set the UI culture of any existing threads executing in an application domain, setting the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property also changes the culture of these threads. However, if these threads execute in another application domain, their culture is defined by the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property in that application domain or, if no default value is defined, by the default system culture. Because of this, we recommend that you always explicitly set the culture of your main application thread and do not rely on the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property to define the culture of the main application thread.</p>\n<p>Unless it is set explicitly, the value of the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>, and the current culture of all threads in an application domain that have not been assigned an explicit culture is defined by the default Windows system culture.</p>\n<p>For more information about cultures, threads, and application domains, see the \"Culture and threads\" and \"Culture and application domains\" sections in the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - "\n<p>The following example illustrates the default behavior of the .NET Framework in defining the current culture of a new thread. It uses English and Russian language resources. The following text file named GreetingStrings.txt contains the English language resources: </p>\n<pre><code>greeting =Hello again!\nnewGreeting=Hello!</code></pre>\n<p>It is compiled to a binary .resources file named GreetingStrings.resources by using the  Resource File Generator with the following command.</p>\n<pre><code>resgen greetingstrings.txt</code></pre>\n<p>The following text file named GreetingStrings.ru-RU.txt contains the Russian language resources:</p>\n<pre><code>greeting=Еще раз привет!\nnewGreeting=Привет!</code></pre>\n<p>It is compiled to a binary .resources file named GreetingStrings.ru-RU.resources by using the  Resource File Generator with the following command.</p>\n<pre><code>resgen greetingstrings.ru-RU.txt</code></pre>\n<p>The application code, which is shown below, resides in a file named Example1.vb or Example1.cs. It is compiled to an executable by using the following command for the Visual Basic compiler:</p>\n<pre><code>vbc Example1.vb /resource:GreetingStrings.resources</code></pre>\n<p>For the C# compiler, the command is similar:</p>\n<pre><code>csc /resource:GreetingStrings.resources Example1.cs</code></pre>\n<p>This creates an assembly that includes the example's executable code along with the resources for its fallback culture. You can also use the  Assembly Linker to create the resource file for the Russian (Russia) culture with the following command:</p>\n<pre><code>>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\\Example1.resources.dll</code></pre>\n<p>At startup, the example sets the current culture and the current UI culture to Russian (Russia) on all systems except those on which the default system culture is already Russian (Russia). If the default system culture is already Russian (Russia), the code sets the current culture and the current UI culture to English (United States). It then calls the <code>ShowGreeting</code> routine, which displays a simple string the first time it is called and a slightly different string on subsequent method calls. Next, it creates a new thread, which also executes the <code>ShowGreeting</code> routine.</p>System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1<p>As the output from the example shows, when the example is run on a computer whose system culture is English (United States), the main thread displays its initial string in Russian. However, because the worker thread's culture is derived from the current Windows system culture rather than the application's current culture, the worker thread displays its string in English.</p>"
  - "\n<p>The following example uses the <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CultureInfo.DefaultThreadCurrentUICulture\" data-throw-if-not-resolved=\"false\"></xref> properties  to define the current culture and current UI culture of a new application thread. </p>\n<p>The example uses the same resources files as the previous example. The commands to compile and to embed the localized Russian language resources into a satellite assembly are also identical, except that the name of the executable assembly changes.</p>\n<p>At startup, the example sets the current culture and the current UI culture to Russian (Russia) on all systems except those on which the default system culture is already Russian (Russia). If the default system culture is already Russian (Russia), it sets the current culture and the current UI culture to English (United States). It then calls the <code>ShowGreeting</code> routine, which displays a simple string the first time it is called and a slightly different string on subsequent method calls. Next, it creates a new thread, which also executes the <code>ShowGreeting</code> routine.</p>System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2<p>As the output from the example shows, when the example is run on a computer whose system culture is English (United States), both the main thread and the worker thread display their strings in the Russian language.</p>"
  syntax:
    content: >-
      public static CultureInfo DefaultThreadCurrentUICulture

      {
          get;
          [SecuritySafeCritical]
          [SecurityPermission(SecurityAction.Demand, ControlThread = true)]
          set;
      }
    content.vb: Public Shared Property DefaultThreadCurrentUICulture As CultureInfo
    parameters: []
    return:
      type: System.Globalization.CultureInfo
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>In a set operation, the <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property value is invalid. </p>\n"
  seealso:
  - type: System.Globalization.CultureInfo.CurrentUICulture
    commentId: P:System.Globalization.CultureInfo.CurrentUICulture
  - type: System.Globalization.CultureInfo.DefaultThreadCurrentCulture
    commentId: P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CultureInfo.DisplayName
  commentId: P:System.Globalization.CultureInfo.DisplayName
  id: DisplayName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: DisplayName
  fullName: System.Globalization.CultureInfo.DisplayName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DisplayName
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1073
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the full localized culture name. </p>\n"
  remarks: "\n<p>This property represents the localized name of the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>Culture names may vary due to scripting or formatting conventions. You should use the returned name for display, and not attempt to parse it.</p>\n<p>If a custom culture is created by means of the <xref href=\"System.Globalization.CultureAndRegionInfoBuilder\" data-throw-if-not-resolved=\"false\"></xref> class, the <xref href=\"System.Globalization.CultureInfo.DisplayName\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to the value of the <xref href=\"System.Globalization.CultureInfo.NativeName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following code example displays several properties of the neutral cultures.</p>\n<p>The example displays the zh-CHS and zh-CHT cultures with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>System.Globalization.CultureInfo.GetCultures#1"
  syntax:
    content: >-
      public virtual string DisplayName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property DisplayName As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Globalization.CultureInfo.Name
    commentId: P:System.Globalization.CultureInfo.Name
  - type: System.Globalization.CultureInfo.NativeName
    commentId: P:System.Globalization.CultureInfo.NativeName
  - type: System.Globalization.CultureInfo.EnglishName
    commentId: P:System.Globalization.CultureInfo.EnglishName
  - type: System.Globalization.CultureInfo.TwoLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.TwoLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.EnglishName
  commentId: P:System.Globalization.CultureInfo.EnglishName
  id: EnglishName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: EnglishName
  fullName: System.Globalization.CultureInfo.EnglishName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnglishName
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1111
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the culture name in the format languagefull [country/regionfull] in English.</p>\n"
  remarks: "\n<p>For example, the <xref href=\"System.Globalization.CultureInfo.EnglishName\" data-throw-if-not-resolved=\"false\"></xref> for the specific culture name en-US is \"English (United States)\".</p>\n<p>The value of this property is the same, regardless of the language version of the .NET Framework.</p>\n"
  example:
  - "\n<p>The following code example displays several properties of the neutral cultures.</p>\n<p>The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>System.Globalization.CultureInfo.GetCultures#1"
  syntax:
    content: >-
      public virtual string EnglishName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property EnglishName As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Globalization.CultureInfo.Name
    commentId: P:System.Globalization.CultureInfo.Name
  - type: System.Globalization.CultureInfo.DisplayName
    commentId: P:System.Globalization.CultureInfo.DisplayName
  - type: System.Globalization.CultureInfo.NativeName
    commentId: P:System.Globalization.CultureInfo.NativeName
  - type: System.Globalization.CultureInfo.TwoLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.TwoLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.InvariantCulture
  commentId: P:System.Globalization.CultureInfo.InvariantCulture
  id: InvariantCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: InvariantCulture
  fullName: System.Globalization.CultureInfo.InvariantCulture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InvariantCulture
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 902
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is culture-independent (invariant).</p>\n"
  remarks: "\n<p>The invariant culture is culture-insensitive; it is associated with the English language but not with any country/region. You specify the invariant culture by name by using an empty string (\"\") in the call to a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> instantiation method. <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> also retrieves an instance of the invariant culture. It can be used in almost any method in the <xref href=\"System.Globalization\" data-throw-if-not-resolved=\"false\"></xref> namespace that requires a culture. The objects returned by properties such as <xref href=\"System.Globalization.CultureInfo.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref> also reflect the string comparison and formatting conventions of the invariant culture.</p>\n<p>Unlike culture-sensitive data, which is subject to change by user customization or by updates to the .NET Framework or the operating system, invariant culture data is stable over time and across installed cultures and cannot be customized by users. This makes the invariant culture particularly useful for operations that require culture-independent results, such as formatting and parsing operations that persist formatted data, or sorting and ordering operations that require that data be displayed in a fixed order regardless of culture. </p>\n"
  syntax:
    content: public static CultureInfo InvariantCulture { get; }
    content.vb: Public Shared ReadOnly Property InvariantCulture As CultureInfo
    parameters: []
    return:
      type: System.Globalization.CultureInfo
  seealso:
  - type: System.Globalization.CultureInfo.CurrentCulture
    commentId: P:System.Globalization.CultureInfo.CurrentCulture
  - type: System.Globalization.CultureInfo.CurrentUICulture
    commentId: P:System.Globalization.CultureInfo.CurrentUICulture
  - type: System.Globalization.CultureInfo.InstalledUICulture
    commentId: P:System.Globalization.CultureInfo.InstalledUICulture
  - type: System.Globalization.CultureInfo.Parent
    commentId: P:System.Globalization.CultureInfo.Parent
  - type: System.Globalization.CultureInfo.IsNeutralCulture
    commentId: P:System.Globalization.CultureInfo.IsNeutralCulture
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Globalization.CultureInfo.IsNeutralCulture
  commentId: P:System.Globalization.CultureInfo.IsNeutralCulture
  id: IsNeutralCulture
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: IsNeutralCulture
  fullName: System.Globalization.CultureInfo.IsNeutralCulture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsNeutralCulture
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1319
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> represents a neutral culture.</p>\n"
  remarks: "\n<p>A neutral culture is a culture that is associated with a language but not with a country or region. It differs from a specific culture, which is a culture that is associated with both a language and a country or region. For example, fr is the name for the neutral French culture, while fr-FR is the name for the French culture in France. </p>\n<p>If this property returns <strong>false</strong>, the culture is either a specific culture or the invariant culture.</p>\n"
  example:
  - "\n<p>The following code example determines which cultures using the Chinese language are neutral cultures.</p>\n<p>The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>System.Globalization.CultureInfo.IsNeutralCulture2#1"
  syntax:
    content: public virtual bool IsNeutralCulture { get; }
    content.vb: Public Overridable ReadOnly Property IsNeutralCulture As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.IsReadOnly
  commentId: P:System.Globalization.CultureInfo.IsReadOnly
  id: IsReadOnly
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Globalization.CultureInfo.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1651
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> is read-only, the <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref> instances are also read-only.</p>\n"
  example:
  - "\n<p>The following code example shows that <xref href=\"System.Globalization.CultureInfo.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> also helps protect the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instances associated with the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Globalization.CultureInfo.ReadOnly#1"
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
    commentId: M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.CultureInfo.Name
  commentId: P:System.Globalization.CultureInfo.Name
  id: Name
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Globalization.CultureInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1013
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the culture name in the format languagecode2-country/regioncode2.</p>\n"
  remarks: "\n<p>For a list of predefined culture names and identifiers that the <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property can return, see the <see href=\"http://go.microsoft.com/fwlink/?LinkId=200048\">National Language Support (NLS) API Reference</see> at the Go Global Developer Center. In addition, starting with Windows 10, <em>name</em> can be any valid BCP-47 language tag. Note that culture names are subject to change, and that they also can reflect the names of custom cultures.</p>\n<p>The <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property follows the naming standards provided in the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> class topic. It returns the short form of the culture name that excludes any indication of an alternate sort order. For example, if you instantiate a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object by using the string \"de-DE_phoneb\" to reflect an alternate sort order, the <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property returns \"de-DE\". </p>\n<p>To get the full name of the culture, you should use the <xref href=\"System.Globalization.CultureInfo.DisplayName\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CultureInfo.EnglishName\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Globalization.CultureInfo.NativeName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following code example displays several properties of the neutral cultures.</p>\n<p>The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>System.Globalization.CultureInfo.GetCultures#1"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Globalization.CultureInfo.DisplayName
    commentId: P:System.Globalization.CultureInfo.DisplayName
  - type: System.Globalization.CultureInfo.NativeName
    commentId: P:System.Globalization.CultureInfo.NativeName
  - type: System.Globalization.CultureInfo.EnglishName
    commentId: P:System.Globalization.CultureInfo.EnglishName
  - type: System.Globalization.CultureInfo.TwoLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.TwoLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.NativeName
  commentId: P:System.Globalization.CultureInfo.NativeName
  id: NativeName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: NativeName
  fullName: System.Globalization.CultureInfo.NativeName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NativeName
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1094
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the culture name, consisting of the language, the country/region, and the optional script, that the culture is set to display.</p>\n"
  remarks: "\n<p>The value of this property is the same, regardless of the language version of the .NET Framework.</p>\n"
  syntax:
    content: >-
      public virtual string NativeName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property NativeName As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Globalization.CultureInfo.Name
    commentId: P:System.Globalization.CultureInfo.Name
  - type: System.Globalization.CultureInfo.DisplayName
    commentId: P:System.Globalization.CultureInfo.DisplayName
  - type: System.Globalization.CultureInfo.EnglishName
    commentId: P:System.Globalization.CultureInfo.EnglishName
  - type: System.Globalization.CultureInfo.TwoLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.TwoLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.NumberFormat
  commentId: P:System.Globalization.CultureInfo.NumberFormat
  id: NumberFormat
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: NumberFormat
  fullName: System.Globalization.CultureInfo.NumberFormat
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NumberFormat
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1353
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> that defines the culturally appropriate format of displaying numbers, currency, and percentage.</p>\n"
  example:
  - <p>The following code example shows that CultureInfo.Clone also clones the <xref href="System.Globalization.DateTimeFormatInfo" data-throw-if-not-resolved="false"></xref> and <xref href="System.Globalization.NumberFormatInfo" data-throw-if-not-resolved="false"></xref> instances associated with the <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref>.</p>System.Globalization.CultureInfo.Clone#1
  syntax:
    content: public virtual NumberFormatInfo NumberFormat { get; set; }
    content.vb: Public Overridable Property NumberFormat As NumberFormatInfo
    parameters: []
    return:
      type: System.Globalization.NumberFormatInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The property is set to null. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref> property or any of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> properties is set, and the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  seealso:
  - type: System.Globalization.NumberFormatInfo
    commentId: T:System.Globalization.NumberFormatInfo
  - type: System.Globalization.CultureInfo.GetFormat(System.Type)
    commentId: M:System.Globalization.CultureInfo.GetFormat(System.Type)
  - type: System.Globalization.CultureInfo.DateTimeFormat
    commentId: P:System.Globalization.CultureInfo.DateTimeFormat
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CultureInfo.OptionalCalendars
  commentId: P:System.Globalization.CultureInfo.OptionalCalendars
  id: OptionalCalendars
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: OptionalCalendars
  fullName: System.Globalization.CultureInfo.OptionalCalendars
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OptionalCalendars
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1521
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the list of calendars that can be used by the culture.</p>\n"
  remarks: "\n<p>Your application changes the calendar used by the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> by setting the <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref>, which is an instance of the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> class. The new calendar must be one of the calendars listed in <xref href=\"System.Globalization.CultureInfo.OptionalCalendars\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> also includes other properties that customize the date and time formatting associated with that <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to determine the <xref href=\"System.Globalization.GregorianCalendar\" data-throw-if-not-resolved=\"false\"></xref> versions supported by the culture.</p>System.Globalization.GregorianCalendarTypes#1"
  syntax:
    content: public virtual Calendar[] OptionalCalendars { get; }
    content.vb: Public Overridable ReadOnly Property OptionalCalendars As Calendar()
    parameters: []
    return:
      type: System.Globalization.Calendar[]
  seealso:
  - type: System.Globalization.Calendar
    commentId: T:System.Globalization.Calendar
  - type: System.Globalization.CultureInfo.DateTimeFormat
    commentId: P:System.Globalization.CultureInfo.DateTimeFormat
  - type: System.Globalization.DateTimeFormatInfo
    commentId: T:System.Globalization.DateTimeFormatInfo
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.Parent
  commentId: P:System.Globalization.CultureInfo.Parent
  id: Parent
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: Parent
  fullName: System.Globalization.CultureInfo.Parent
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parent
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 919
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the parent culture of the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The cultures have a hierarchy in which the parent of a specific culture is a neutral culture, the parent of a neutral culture is the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref>, and the parent of the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> is the invariant culture itself. The parent culture encompasses only the set of information that is common among its children.</p>\n<p>If the resources for the specific culture are not available in the system, the resources for the neutral culture are used. If the resources for the neutral culture are not available, the resources embedded in the main assembly are used. For more information on the resource fallback process, see Packaging and Deploying Resources in Desktop Apps.</p>\n"
  example:
  - "\n<p>The following code example determines the parent culture of each specific culture using the Chinese language.</p>\n<p>The example displays the older zh-CHS and zh-CHT culture names with the 0x0004 and 0x7C04 culture identifiers, respectively. However, your Windows Vista applications should use the zh-Hans name instead of zh-CHS and the zh-Hant name instead of zh-CHT. The zh-Hans and zh-Hant names represent the current standard, and should be used unless you have a reason for using the older names.  </p>System.Globalization.CultureInfo.Parent#1"
  syntax:
    content: >-
      public virtual CultureInfo Parent

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property Parent As CultureInfo
    parameters: []
    return:
      type: System.Globalization.CultureInfo
  seealso:
  - type: System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
    commentId: M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)
  - type: System.Globalization.CultureInfo.CurrentCulture
    commentId: P:System.Globalization.CultureInfo.CurrentCulture
  - type: System.Globalization.CultureInfo.CurrentUICulture
    commentId: P:System.Globalization.CultureInfo.CurrentUICulture
  - type: System.Globalization.CultureInfo.InstalledUICulture
    commentId: P:System.Globalization.CultureInfo.InstalledUICulture
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.TextInfo
  commentId: P:System.Globalization.CultureInfo.TextInfo
  id: TextInfo
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: TextInfo
  fullName: System.Globalization.CultureInfo.TextInfo
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TextInfo
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1222
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> that defines the writing system associated with the culture.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.CultureInfo.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> property provides culture-specific casing information for strings. To perform culture-insensitive casing, the application should use the <xref href=\"System.Globalization.CultureInfo.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> for Spanish (Spain) with the international sort order and another <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> with the traditional sort order.</p>System.Globalization.CultureInfo_esES#1"
  syntax:
    content: public virtual TextInfo TextInfo { get; }
    content.vb: Public Overridable ReadOnly Property TextInfo As TextInfo
    parameters: []
    return:
      type: System.Globalization.TextInfo
  seealso:
  - type: System.Globalization.TextInfo
    commentId: T:System.Globalization.TextInfo
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.TwoLetterISOLanguageName
  commentId: P:System.Globalization.CultureInfo.TwoLetterISOLanguageName
  id: TwoLetterISOLanguageName
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: TwoLetterISOLanguageName
  fullName: System.Globalization.CultureInfo.TwoLetterISOLanguageName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TwoLetterISOLanguageName
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1120
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the ISO 639-1 two-letter code for the language of the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>For example, the two-letter abbreviation for English is \"en\". The <xref href=\"System.Globalization.CultureInfo.TwoLetterISOLanguageName\" data-throw-if-not-resolved=\"false\"></xref> property value for the invariant culture is \"iv\". </p>\n<p>When communicating between processes or persisting data it is usually better to use the full <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref>. Using just the language can lose context and data.</p>\n<p>If ISO 639-1 does not define a two-letter language code for a particular culture, the <xref href=\"System.Globalization.CultureInfo.TwoLetterISOLanguageName\" data-throw-if-not-resolved=\"false\"></xref> property returns a string that consists of three or more letters. For more information, see the example.</p>\n"
  example:
  - "\n<p>The following example lists the cultures whose <xref href=\"System.Globalization.CultureInfo.TwoLetterISOLanguageName\" data-throw-if-not-resolved=\"false\"></xref> property does not consist of a two-letter language code.</p>System.Globalization.CultureInfo.TwoLetterISOLanguageName#1"
  syntax:
    content: >-
      public virtual string TwoLetterISOLanguageName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property TwoLetterISOLanguageName As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Globalization.CultureInfo.Name
    commentId: P:System.Globalization.CultureInfo.Name
  - type: System.Globalization.CultureInfo.DisplayName
    commentId: P:System.Globalization.CultureInfo.DisplayName
  - type: System.Globalization.CultureInfo.NativeName
    commentId: P:System.Globalization.CultureInfo.NativeName
  - type: System.Globalization.CultureInfo.EnglishName
    commentId: P:System.Globalization.CultureInfo.EnglishName
  - type: System.Globalization.CultureInfo.ThreeLetterISOLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName
  - type: System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
    commentId: P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CultureInfo.Clone
  commentId: M:System.Globalization.CultureInfo.Clone
  id: Clone
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Globalization.CultureInfo.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1562
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Creates a copy of the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The clone is writable even if the original <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> is read-only. Therefore, the properties of the clone can be modified.</p>\n<p>A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</p>\n<p>The <xref href=\"System.Globalization.CultureInfo.Clone\" data-throw-if-not-resolved=\"false\"></xref> method creates an enhanced shallow copy. The objects returned by the <xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CultureInfo.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CultureInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> properties are also copied. Consequently, the cloned <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object can modify its copied properties without affecting the original <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following code example shows that CultureInfo.Clone also clones the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instances associated with the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Globalization.CultureInfo.Clone#1"
  syntax:
    content: public virtual object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: System.Object
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CultureInfo.Equals(System.Object)
  commentId: M:System.Globalization.CultureInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Globalization.CultureInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1255
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified object is the same culture as the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Two <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> objects are considered equal if their <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CultureInfo.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> properties are equal.</p>\n"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  seealso:
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.CultureInfo.GetFormat(System.Type)
  commentId: M:System.Globalization.CultureInfo.GetFormat(System.Type)
  id: GetFormat(System.Type)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: GetFormat(Type)
  fullName: System.Globalization.CultureInfo.GetFormat(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFormat
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1309
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets an object that defines how to format the specified type.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> implements <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>NumberFormatInfo</strong> provides the culture-specific numeric format used in conjunction with the Format methods in the base data types. <strong>DateTimeFormatInfo</strong> controls how the date and time values are formatted for a specific culture.</p>\n"
  syntax:
    content: public virtual object GetFormat(Type formatType)
    content.vb: Public Overridable Function GetFormat(formatType As Type) As Object
    parameters:
    - id: formatType
      type: System.Type
    return:
      type: System.Object
  seealso:
  - type: System.Type
    commentId: T:System.Type
  - type: System.Globalization.NumberFormatInfo
    commentId: T:System.Globalization.NumberFormatInfo
  - type: System.Globalization.DateTimeFormatInfo
    commentId: T:System.Globalization.DateTimeFormatInfo
  - type: System.Globalization.CultureInfo.NumberFormat
    commentId: P:System.Globalization.CultureInfo.NumberFormat
  - type: System.Globalization.CultureInfo.DateTimeFormat
    commentId: P:System.Globalization.CultureInfo.DateTimeFormat
  implements:
  - System.IFormatProvider.GetFormat(System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CultureInfo.GetHashCode
  commentId: M:System.Globalization.CultureInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Globalization.CultureInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1284
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Serves as a hash function for the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method generates the same hash code for two objects that are equal according to the <xref href=\"System.Globalization.CultureInfo.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Globalization.CultureInfo.Equals(System.Object)
    commentId: M:System.Globalization.CultureInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  commentId: M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  id: ReadOnly(System.Globalization.CultureInfo)
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: ReadOnly(CultureInfo)
  fullName: System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadOnly
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1603
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns a read-only wrapper around the specified <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  remarks: "\n<p>This wrapper prevents any modifications to <em>ci</em>, or the objects returned by the <em>ci</em>.<xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> and <em>ci</em>.<xref href=\"System.Globalization.CultureInfo.NumberFormat\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  example:
  - "\n<p>The following example shows that the <xref href=\"System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method helps protect the <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> instances associated with the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Globalization.CultureInfo.ReadOnly#1"
  syntax:
    content: public static CultureInfo ReadOnly(CultureInfo ci)
    content.vb: Public Shared Function ReadOnly(ci As CultureInfo) As CultureInfo
    parameters:
    - id: ci
      type: System.Globalization.CultureInfo
    return:
      type: System.Globalization.CultureInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>ci</em> is null. </p>\n"
  seealso:
  - type: System.Globalization.CultureInfo.IsReadOnly
    commentId: P:System.Globalization.CultureInfo.IsReadOnly
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CultureInfo.ToString
  commentId: M:System.Globalization.CultureInfo.ToString
  id: ToString
  parent: System.Globalization.CultureInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Globalization.CultureInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CultureInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Globalization/CultureInfo.cs
    startLine: 1300
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns a string containing the name of the current <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> in the format languagecode2-country/regioncode2.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>. It returns a normalized version of the culture name that is passed to the <xref href=\"System.Globalization.CultureInfo.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor or to the <xref href=\"System.Globalization.CultureInfo.CreateSpecificCulture(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CultureInfo.GetCultureInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. It normalizes the result string by converting characters in languagecode2 to lowercase and converting characters in country/regioncode2 to uppercase if necessary. </p>\n<p>Predefined culture names are listed in the <see href=\"http://go.microsoft.com/fwlink/?LinkId=200048\">National Language Support (NLS) API Reference</see> page at the Go Global Developer Center.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  seealso:
  - type: System.Object.ToString
    commentId: M:System.Object.ToString
  - type: System.Globalization.CultureInfo.Name
    commentId: P:System.Globalization.CultureInfo.Name
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Globalization.Calendar
  parent: System.Globalization
  isExternal: false
  name: Calendar
  fullName: System.Globalization.Calendar
- uid: System.Globalization.CompareInfo
  parent: System.Globalization
  isExternal: false
  name: CompareInfo
  fullName: System.Globalization.CompareInfo
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization.DateTimeFormatInfo
  parent: System.Globalization
  isExternal: false
  name: DateTimeFormatInfo
  fullName: System.Globalization.DateTimeFormatInfo
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Globalization.NumberFormatInfo
  parent: System.Globalization
  isExternal: false
  name: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
- uid: System.Globalization.Calendar[]
  isExternal: false
  name: Calendar[]
  fullName: System.Globalization.Calendar[]
  fullname.vb: System.Globalization.Calendar()
  name.vb: Calendar()
  spec.csharp:
  - uid: System.Globalization.Calendar
    name: Calendar
    fullName: System.Globalization.Calendar
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Globalization.Calendar
    name: Calendar
    fullName: System.Globalization.Calendar
  - name: ()
    fullName: ()
- uid: System.Globalization.TextInfo
  parent: System.Globalization
  isExternal: false
  name: TextInfo
  fullName: System.Globalization.TextInfo
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IFormatProvider.GetFormat(System.Type)
  parent: System.IFormatProvider
  isExternal: true
  name: GetFormat(Type)
  fullName: System.IFormatProvider.GetFormat(System.Type)
  spec.csharp:
  - uid: System.IFormatProvider.GetFormat(System.Type)
    name: GetFormat
    fullName: System.IFormatProvider.GetFormat
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormatProvider.GetFormat(System.Type)
    name: GetFormat
    fullName: System.IFormatProvider.GetFormat
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Globalization.CultureNotFoundException
  isExternal: false
  name: CultureNotFoundException
  fullName: System.Globalization.CultureNotFoundException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
