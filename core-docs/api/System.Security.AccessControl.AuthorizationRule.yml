items:
- uid: System.Security.AccessControl.AuthorizationRule
  commentId: T:System.Security.AccessControl.AuthorizationRule
  id: AuthorizationRule
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.AuthorizationRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  langs:
  - csharp
  - vb
  name: AuthorizationRule
  fullName: System.Security.AccessControl.AuthorizationRule
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthorizationRule
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 124
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Determines access to securable objects. The derived classes <xref href=\"System.Security.AccessControl.AccessRule\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref> offer specializations for access and audit functionality.</p>\n"
  example:
  - 
  syntax:
    content: 'public abstract class AuthorizationRule : object'
    content.vb: >-
      Public MustInherit Class AuthorizationRule
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.AccessControl.AuthorizationRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  commentId: M:System.Security.AccessControl.AuthorizationRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)'
  parent: System.Security.AccessControl.AuthorizationRule
  langs:
  - csharp
  - vb
  name: AuthorizationRule(Principal.IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags)
  fullName: System.Security.AccessControl.AuthorizationRule.AuthorizationRule(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 126
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.AccessRule\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified values.</p>\n"
  example:
  - 
  syntax:
    content: protected AuthorizationRule(Principal.IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags)
    content.vb: Protected Sub New(identity As Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity to which the access rule applies. This parameter must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inherit this rule from a parent container.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>The inheritance properties of the access rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value of the <em>identity</em> parameter cannot be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>accessMask</em> parameter is zero, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.AuthorizationRule.AccessMask
  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask
  id: AccessMask
  parent: System.Security.AccessControl.AuthorizationRule
  langs:
  - csharp
  - vb
  name: AccessMask
  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessMask
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 127
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the access mask for this rule.</p>\n"
  example:
  - 
  syntax:
    content: protected int AccessMask { get; }
    content.vb: Protected ReadOnly Property AccessMask As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The access mask for this rule.</p>\n"
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference
  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference
  id: IdentityReference
  parent: System.Security.AccessControl.AuthorizationRule
  langs:
  - csharp
  - vb
  name: IdentityReference
  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IdentityReference
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 128
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> to which this rule applies.</p>\n"
  example:
  - 
  syntax:
    content: public Principal.IdentityReference IdentityReference { get; }
    content.vb: Public ReadOnly Property IdentityReference As Principal.IdentityReference
    parameters: []
    return:
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> to which this rule applies.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  id: InheritanceFlags
  parent: System.Security.AccessControl.AuthorizationRule
  langs:
  - csharp
  - vb
  name: InheritanceFlags
  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InheritanceFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 129
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the value of flags that determine how this rule is inherited by child objects.</p>\n"
  example:
  - 
  syntax:
    content: public InheritanceFlags InheritanceFlags { get; }
    content.vb: Public ReadOnly Property InheritanceFlags As InheritanceFlags
    parameters: []
    return:
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>A bitwise combination of the enumeration values.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.AuthorizationRule.IsInherited
  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited
  id: IsInherited
  parent: System.Security.AccessControl.AuthorizationRule
  langs:
  - csharp
  - vb
  name: IsInherited
  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInherited
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 130
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a value indicating whether this rule is explicitly set or is inherited from a parent container object.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsInherited { get; }
    content.vb: Public ReadOnly Property IsInherited As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this rule is not explicitly set but is instead inherited from a parent container.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags
  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags
  id: PropagationFlags
  parent: System.Security.AccessControl.AuthorizationRule
  langs:
  - csharp
  - vb
  name: PropagationFlags
  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropagationFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 131
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the value of the propagation flags, which determine how inheritance of this rule is propagated to child objects. This property is significant only when the value of the <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> enumeration is not <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public PropagationFlags PropagationFlags { get; }
    content.vb: Public ReadOnly Property PropagationFlags As PropagationFlags
    parameters: []
    return:
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>A bitwise combination of the enumeration values.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
