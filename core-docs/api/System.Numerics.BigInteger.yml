items:
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  id: BigInteger
  parent: System.Numerics
  children:
  - System.Numerics.BigInteger.#ctor(System.Byte[])
  - System.Numerics.BigInteger.#ctor(System.Decimal)
  - System.Numerics.BigInteger.#ctor(System.Double)
  - System.Numerics.BigInteger.#ctor(System.Int32)
  - System.Numerics.BigInteger.#ctor(System.Int64)
  - System.Numerics.BigInteger.#ctor(System.Single)
  - System.Numerics.BigInteger.#ctor(System.UInt32)
  - System.Numerics.BigInteger.#ctor(System.UInt64)
  - System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.CompareTo(System.Int64)
  - System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.CompareTo(System.UInt64)
  - System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.Equals(System.Int64)
  - System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Equals(System.Object)
  - System.Numerics.BigInteger.Equals(System.UInt64)
  - System.Numerics.BigInteger.GetHashCode
  - System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.IsEven
  - System.Numerics.BigInteger.IsOne
  - System.Numerics.BigInteger.IsPowerOfTwo
  - System.Numerics.BigInteger.IsZero
  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  - System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.MinusOne
  - System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.One
  - System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64
  - System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Parse(System.String)
  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  - System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Sign
  - System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)
  - System.Numerics.BigInteger.ToByteArray
  - System.Numerics.BigInteger.ToString
  - System.Numerics.BigInteger.ToString(System.IFormatProvider)
  - System.Numerics.BigInteger.ToString(System.String)
  - System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  - System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.Zero
  langs:
  - csharp
  - vb
  name: BigInteger
  fullName: System.Numerics.BigInteger
  type: Struct
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BigInteger
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 10
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Represents an arbitrarily large signed integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds. The members of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> type closely parallel those of other integral types (the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> types). This type differs from the other integral types in the .NET Framework, which have a range indicated by their <strong>MinValue</strong> and <strong>MaxValue</strong> properties. </p>\n<p>Because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> type is immutable (see Mutability and the BigInteger Structure) and because it has no upper or lower bounds, an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> can be thrown for any operation that causes a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value to grow too large. </p>\n"
  example:
  - 
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct BigInteger : IComparable, IComparable<BigInteger>, IEquatable<BigInteger>, IFormattable
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure BigInteger
          Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable
  implements:
  - System.IComparable
  - System.IComparable{System.Numerics.BigInteger}
  - System.IEquatable{System.Numerics.BigInteger}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Numerics.BigInteger.#ctor(System.Byte[])
  commentId: M:System.Numerics.BigInteger.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Byte[])
  fullName: System.Numerics.BigInteger.BigInteger(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 13
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure using the values in a byte array.</p>\n"
  remarks: "\n<p>The individual bytes in the <em>value</em> array should be in little-endian order, from lowest-order byte to highest-order byte. For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:</p>\n<table><tbody><tr><td>\n<p>Hexadecimal string</p>\n</td><td>\n<p>E8D4A51000</p>\n</td></tr><tr><td>\n<p>Byte array (lowest index first)</p>\n</td><td>\n<p>00 10 A5 D4 E8 00 </p>\n</td></tr></tbody></table>\n<p>Most methods that convert numeric values to byte arrays, such as <xref href=\"System.Numerics.BigInteger.ToByteArray\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.BitConverter.GetBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, return byte arrays in little-endian order.</p>\n<p>The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation. In other words, if the highest-order bit of the highest-order byte in <em>value</em> is set, the resulting <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is negative. Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value. Byte arrays are typically generated in the following ways:</p>\n<ul><li>\n<p>By calling the <xref href=\"System.Numerics.BigInteger.ToByteArray\" data-throw-if-not-resolved=\"false\"></xref> method. Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative. Unmodified byte arrays created by the <xref href=\"System.Numerics.BigInteger.ToByteArray\" data-throw-if-not-resolved=\"false\"></xref> method always successfully round-trip when they are passed to the <xref href=\"System.Numerics.BigInteger.#ctor(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n</li><li>\n<p>By calling the <xref href=\"System.BitConverter.GetBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method and passing it a signed integer as a parameter. Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.</p>\n</li><li>\n<p>By calling the <xref href=\"System.BitConverter.GetBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method and passing it an unsigned integer as a parameter. Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values. To prevent this misinterpretation, you can add a zero-byte value to the end of the array. The example in the next section provides an illustration.</p>\n</li><li>\n<p>By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array. To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.</p>\n</li></ul>\n<p>If <em>value</em> is an empty <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array, the new <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is initialized to a value of <xref href=\"System.Numerics.BigInteger.Zero\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <strong>null</strong>, the constructor throws an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following example instantiates a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}. It then displays the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, represented as both decimal and hexadecimal numbers, to the console. A comparison of the input array with the text output makes it clear why this overload of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> class constructor creates a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object whose value is 4328719365 (or 0x102030405). The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object, which is 0x05. The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object, which is 0x04, and so on.</p>System.Numerics.BigInteger.ctors#1<p>The following example instantiates a positive and a negative <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, passes them to the <xref href=\"System.Numerics.BigInteger.ToByteArray\" data-throw-if-not-resolved=\"false\"></xref> method, and then restores the original <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values from the resulting byte array. Note that the two values are represented by identical byte arrays. The only difference between them is in the most significant bit of the last element in the byte array. This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value. The bit is not set (the value of the byte is zero), if the array is created from a positive <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.Numerics.BigInteger.ctors#2<p>The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.</p>System.Numerics.BigInteger.ctors#3"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public BigInteger(byte[] value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(value As Byte())
    parameters:
    - id: value
      type: System.Byte[]
      description: "\n<p>An array of byte values in little-endian order.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.ToByteArray
    commentId: M:System.Numerics.BigInteger.ToByteArray
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Numerics.BigInteger.BigInteger(System.Byte())
  name.vb: BigInteger(Byte())
- uid: System.Numerics.BigInteger.#ctor(System.Decimal)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Decimal)
  id: '#ctor(System.Decimal)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Decimal)
  fullName: System.Numerics.BigInteger.BigInteger(System.Decimal)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 15
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure using a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The result of calling this constructor is identical to explicitly assigning a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable.</p>\n<p>Calling this constructor can cause data loss; any fractional part of <em>value</em> is truncated when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Numerics.BigInteger.#ctor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object. It defines an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values, and then passes each value to the <xref href=\"System.Numerics.BigInteger.#ctor(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> constructor. Note that the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value is truncated instead of rounded when it is assigned to the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Numerics.BigInteger.ctors#4"
  syntax:
    content: public BigInteger(decimal value)
    content.vb: Public Sub New(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>A decimal number.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Double)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Double)
  fullName: System.Numerics.BigInteger.BigInteger(System.Double)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 16
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure using a double-precision floating-point value.</p>\n"
  remarks: "\n<p>Any fractional part of the <em>value</em> parameter is truncated when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Because of the lack of precision of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type, calling this constructor can cause data loss.</p>\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Numerics.BigInteger.#ctor(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object. It also illustrates the loss of precision that may occur when you use the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type. A <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> is assigned a large value, which is then assigned to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object. As the output shows, this assignment involves a loss of precision. Both values are then incremented by one. The output shows that the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object reflects the changed value, whereas the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> object does not.</p>System.Numerics.BigInteger.ctors#5"
  syntax:
    content: public BigInteger(double value)
    content.vb: Public Sub New(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>A double-precision floating-point value.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of <em>value</em> is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The value of <em>value</em> is <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The value of <em>value</em> is <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Int32)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Int32)
  fullName: System.Numerics.BigInteger.BigInteger(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 17
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure using a 32-bit signed integer value.</p>\n"
  remarks: "\n<p>There is no loss of precision when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object by using this constructor.</p>\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that results from calling this constructor is identical to the value that results from assigning an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure does not include constructors with a parameter of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>. However, the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers. As a result, this constructor is called if <em>value</em> is any one of these four integral types.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Numerics.BigInteger.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values from an array of 32-bit integers. It also uses implicit conversion to assign each 32-bit integer value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable. It then compares the two values to establish that the resulting <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values are the same.</p>System.Numerics.BigInteger.ctors#6"
  syntax:
    content: public BigInteger(int value)
    content.vb: Public Sub New(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>A 32-bit signed integer.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Int64)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Int64)
  fullName: System.Numerics.BigInteger.BigInteger(System.Int64)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 18
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure using a 64-bit signed integer value.</p>\n"
  remarks: "\n<p>There is no loss of precision when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object by using this constructor.</p>\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that results from calling this constructor is identical to the value that results from assigning an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Numerics.BigInteger.#ctor(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values from an array of 64-bit integers. It also uses implicit conversion to assign each 64-bit integer value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable. It then compares the two values to establish that the resulting <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values are the same.</p>System.Numerics.BigInteger.ctors#7"
  syntax:
    content: public BigInteger(long value)
    content.vb: Public Sub New(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>A 64-bit signed integer.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Single)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Single)
  fullName: System.Numerics.BigInteger.BigInteger(System.Single)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 19
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure using a single-precision floating-point value.</p>\n"
  remarks: "\n<p>Any fractional part of the <em>value</em> parameter is truncated when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Because of the lack of precision of the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> data type, calling this constructor can result in data loss.</p>\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Numerics.BigInteger.#ctor(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object. It also illustrates the loss of precision that may occur when you use the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> data type. A <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> is assigned a large negative value, which is then assigned to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object. As the output shows, this assignment involves a loss of precision. Both values are then incremented by one. The output shows that the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object reflects the changed value, whereas the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> object does not.</p>System.Numerics.BigInteger.ctors#8"
  syntax:
    content: public BigInteger(float value)
    content.vb: Public Sub New(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>A single-precision floating-point value.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of <em>value</em> is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The value of <em>value</em> is <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The value of <em>value</em> is <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.UInt32)
  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt32)
  id: '#ctor(System.UInt32)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(UInt32)
  fullName: System.Numerics.BigInteger.BigInteger(System.UInt32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 20
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure using an unsigned 32-bit integer value.</p>\n"
  remarks: "\n<p>There is no loss of precision when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> using this constructor.</p>\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that results from calling this constructor is identical to the value that results from assigning a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.BigInteger.#ctor(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> constructor and an assignment statement to initialize <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values from an array of unsigned 32-bit integers. It then compares the two values to demonstrate that the two methods of initializing a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value produce identical results.</p>System.Numerics.BigInteger.ctors#9"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public BigInteger(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>An unsigned 32-bit integer value.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.UInt64)
  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt64)
  id: '#ctor(System.UInt64)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(UInt64)
  fullName: System.Numerics.BigInteger.BigInteger(System.UInt64)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 22
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> structure with an unsigned 64-bit integer value.</p>\n"
  remarks: "\n<p>There is no loss of precision when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> using this constructor.</p>\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that results from calling this constructor is identical to the value that results from assigning a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.BigInteger.#ctor(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object whose value is equal to <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Numerics.BigInteger.ctors#10"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public BigInteger(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>An unsigned 64-bit integer.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.IsEven
  commentId: P:System.Numerics.BigInteger.IsEven
  id: IsEven
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsEven
  fullName: System.Numerics.BigInteger.IsEven
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEven
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 24
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is an even number.</p>\n"
  remarks: "\n<p>This property is a convenience feature that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is evenly divisible by two. It is equivalent to the following expression:</p>\n<p>[C#]</p>\n<pre><code>value % 2 == 0;</code></pre>\n<p>[Visual Basic]</p>\n<pre><code>value Mod 2 = 0</code></pre>\n<p>If the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\" data-throw-if-not-resolved=\"false\"></xref>, the property returns <strong>true</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsEven { get; }
    content.vb: Public ReadOnly Property IsEven As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is an even number; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.IsOne
  commentId: P:System.Numerics.BigInteger.IsOne
  id: IsOne
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsOne
  fullName: System.Numerics.BigInteger.IsOne
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsOne
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 25
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property offers significantly better performance than other comparisons with one, such as <code>thisBigInteger.Equals(BigInteger.One)</code>.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsOne { get; }
    content.vb: Public ReadOnly Property IsOne As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.One
    commentId: P:System.Numerics.BigInteger.One
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.IsPowerOfTwo
  commentId: P:System.Numerics.BigInteger.IsPowerOfTwo
  id: IsPowerOfTwo
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsPowerOfTwo
  fullName: System.Numerics.BigInteger.IsPowerOfTwo
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPowerOfTwo
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 26
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is a power of two.</p>\n"
  remarks: "\n<p>This property determines whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value has a single non-zero bit set. This means that it returns <strong>true</strong> if the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is 1 (that is, 20) or any greater power of two. It returns <strong>false</strong> if the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is 0.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsPowerOfTwo { get; }
    content.vb: Public ReadOnly Property IsPowerOfTwo As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is a power of two; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.IsZero
  commentId: P:System.Numerics.BigInteger.IsZero
  id: IsZero
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsZero
  fullName: System.Numerics.BigInteger.IsZero
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsZero
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 27
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property offers significantly better performance than <code>BigInteger.Equals(BigInteger.Zero)</code>.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsZero { get; }
    content.vb: Public ReadOnly Property IsZero As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Zero
    commentId: P:System.Numerics.BigInteger.Zero
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.MinusOne
  commentId: P:System.Numerics.BigInteger.MinusOne
  id: MinusOne
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: MinusOne
  fullName: System.Numerics.BigInteger.MinusOne
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinusOne
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 28
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets a value that represents the number negative one (-1).</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.MinusOne\" data-throw-if-not-resolved=\"false\"></xref> property is used to compare a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value to -1 or to assign -1 to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public static BigInteger MinusOne { get; }
    content.vb: Public Shared ReadOnly Property MinusOne As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An integer whose value is negative one (-1).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.One
    commentId: P:System.Numerics.BigInteger.One
  - type: System.Numerics.BigInteger.IsOne
    commentId: P:System.Numerics.BigInteger.IsOne
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.BigInteger.One
  commentId: P:System.Numerics.BigInteger.One
  id: One
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: One
  fullName: System.Numerics.BigInteger.One
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: One
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 29
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets a value that represents the number one (1).</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.One\" data-throw-if-not-resolved=\"false\"></xref> property is usually used to compare a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value to 1 or to assign 1 to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public static BigInteger One { get; }
    content.vb: Public Shared ReadOnly Property One As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object whose value is one (1).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.IsOne
    commentId: P:System.Numerics.BigInteger.IsOne
  - type: System.Numerics.BigInteger.MinusOne
    commentId: P:System.Numerics.BigInteger.MinusOne
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.BigInteger.Sign
  commentId: P:System.Numerics.BigInteger.Sign
  id: Sign
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Sign
  fullName: System.Numerics.BigInteger.Sign
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sign
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 30
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets a number that indicates the sign (negative, positive, or zero) of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.Sign\" data-throw-if-not-resolved=\"false\"></xref> property is equivalent to the <xref href=\"System.Math.Sign(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method for the primitive numeric types.</p>\n"
  example:
  - 
  syntax:
    content: public int Sign { get; }
    content.vb: Public ReadOnly Property Sign As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A number that indicates the sign of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object, as shown in the following table.</p>\n<p>Number</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>-1</p>\n</td><td>\n<p>The value of this object is negative.</p>\n</td></tr><tr><td>\n<p>0</p>\n</td><td>\n<p>The value of this object is 0 (zero).</p>\n</td></tr><tr><td>\n<p>1</p>\n</td><td>\n<p>The value of this object is positive.</p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.Zero
  commentId: P:System.Numerics.BigInteger.Zero
  id: Zero
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Zero
  fullName: System.Numerics.BigInteger.Zero
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zero
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 31
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets a value that represents the number 0 (zero).</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.</p>\n"
  example:
  - 
  syntax:
    content: public static BigInteger Zero { get; }
    content.vb: Public Shared ReadOnly Property Zero As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An integer whose value is 0 (zero).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.IsZero
    commentId: P:System.Numerics.BigInteger.IsZero
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  id: Abs(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Abs(BigInteger)
  fullName: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abs
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 32
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Gets the absolute value of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The absolute value of a number is that number without its sign, as shown in the following table.</p>\n<p>\n<em>value</em> parameter</p>\n<p>Return value</p>\n<table><tbody><tr><td>\n<p>\n<em>value</em> >= 0</p>\n</td><td>\n<p>\n<em>value</em>\n</p>\n</td></tr><tr><td>\n<p>\n<em>value</em> < 0</p>\n</td><td>\n<p>\n<em>value</em> * -1</p>\n</td></tr></tbody></table>\n<p>The <xref href=\"System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the <xref href=\"System.Math.Abs(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method for the primitive numeric types.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value from two's complement representation to sign-and-magnitude representation before serializing it to a file. Data in the file is then deserialized and assigned to a new <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Numerics.BigInteger.Abs#1"
  syntax:
    content: public static BigInteger Abs(BigInteger value)
    content.vb: Public Shared Function Abs(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>A number.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The absolute value of <em>value</em>.</p>\n"
  seealso:
  - type: System.Math.Abs(System.SByte)
    commentId: M:System.Math.Abs(System.SByte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Add(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Add(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 33
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Adds two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values and returns the result.</p>\n"
  remarks: "\n<p>Languages that do not support operator overloading or custom operators can use the <xref href=\"System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to perform addition using <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n<p>The <xref href=\"System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is a useful substitute for the addition operator when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable by assigning it a sum that results from addition, as shown in the following example.</p>System.Numerics.BigInteger.OperationMethods#2"
  example:
  - 
  syntax:
    content: public static BigInteger Add(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Add(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to add.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to add.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The sum of <em>left</em> and <em>right</em>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Compare(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 34
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Compares two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</p>\n"
  remarks: "\n<p>Although the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> type has no fixed range, comparisons of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values that differ by one and that each have 1,896 digits. The <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method correctly reports that the two values are not equal.</p>System.Numerics.BigInteger.Compare#1"
  example:
  - 
  syntax:
    content: public static int Compare(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Compare(left As BigInteger, right As BigInteger) As Integer
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative values of <em>left</em> and <em>right</em>, as shown in the following table.</p>\n<p>Value</p>\n<p>Condition</p>\n<table><tbody><tr><td>\n<p>Less than zero</p>\n</td><td>\n<p>\n<em>left</em> is less than <em>right</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>\n<em>left</em> equals <em>right</em>.</p>\n</td></tr><tr><td>\n<p>Greater than zero</p>\n</td><td>\n<p>\n<em>left</em> is greater than <em>right</em>.</p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.CompareTo(System.Int64)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.Int64)
  id: CompareTo(System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: CompareTo(Int64)
  fullName: System.Numerics.BigInteger.CompareTo(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 35
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</p>\n"
  remarks: "\n<p>If <em>other</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  example:
  - "\n<p>The following example illustrates the result of calling the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method with integral values.</p>System.Numerics.BigInteger.CompareTo#3"
  syntax:
    content: public int CompareTo(long other)
    content.vb: Public Function CompareTo(other As Long) As Integer
    parameters:
    - id: other
      type: System.Int64
      description: "\n<p>The signed 64-bit integer to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.</p>\n<p>Return value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>Less than zero</p>\n</td><td>\n<p>The current instance is less than <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>The current instance equals <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Greater than zero</p>\n</td><td>\n<p>The current instance is greater than <em>other</em>.</p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  id: CompareTo(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: CompareTo(BigInteger)
  fullName: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 36
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Compares this instance to a second <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</p>\n"
  remarks: "\n<p>This overload of the <see cref=\"Overload:System.Numerics.BigInteger.CompareTo\"></see> method implements the <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. It is used by generic collection objects to order the items in the collection.</p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to order a list of <code>StarInfo</code> objects. Each <code>StarInfo</code> object provides information about a star's name and its distance from the Earth in miles. <code>StarInfo</code> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, which enables <code>StarInfo</code> objects to be sorted by generic collection classes. Its <xref href=\"System.IComparable`1.CompareTo(`0)\" data-throw-if-not-resolved=\"false\"></xref> implementation just wraps a call to <xref href=\"System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Numerics.BigInteger.CompareTo#1<p>The following code then instantiates four <code>StarInfo</code> objects and stores them in a generic <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object. After the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> method is called, <code>StarInfo</code> objects are displayed in order of their distance from the Earth.</p>System.Numerics.BigInteger.CompareTo#2"
  syntax:
    content: public int CompareTo(BigInteger other)
    content.vb: Public Function CompareTo(other As BigInteger) As Integer
    parameters:
    - id: other
      type: System.Numerics.BigInteger
      description: "\n<p>The object to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.</p>\n<p>Return value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>Less than zero</p>\n</td><td>\n<p>The current instance is less than <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>The current instance equals <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Greater than zero</p>\n</td><td>\n<p>The current instance is greater than <em>other</em>.</p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  implements:
  - System.IComparable{System.Numerics.BigInteger}.CompareTo(System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.CompareTo(System.UInt64)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.UInt64)
  id: CompareTo(System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: CompareTo(UInt64)
  fullName: System.Numerics.BigInteger.CompareTo(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 37
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public int CompareTo(ulong other)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function CompareTo(other As ULong) As Integer
    parameters:
    - id: other
      type: System.UInt64
      description: "\n<p>The unsigned 64-bit integer to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative value of this instance and <em>other</em>, as shown in the following table.</p>\n<p>Return value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>Less than zero</p>\n</td><td>\n<p>The current instance is less than <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>The current instance equals <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Greater than zero</p>\n</td><td>\n<p>The current instance is greater than <em>other</em>.</p>\n</td></tr></tbody></table>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Divide(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 39
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Divides one <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by another and returns the result.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method performs integer division; any remainder that results from the division is discarded. To perform integer division while preserving the remainder, call the <xref href=\"System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method. To retrieve only the remainder, call the <xref href=\"System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method can be used by languages that do not support operator overloading. Its behavior is identical to division using the division operator.</p>\n"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It then uses each element as the quotient in a division operation that uses the <xref href=\"System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method, the division operator (/), and the <xref href=\"System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Numerics.BigInteger.Divide#1"
  syntax:
    content: public static BigInteger Divide(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Function Divide(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: "\n<p>The value to be divided.</p>\n"
    - id: divisor
      type: System.Numerics.BigInteger
      description: "\n<p>The value to divide by.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The quotient of the division.</p>\n"
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>divisor</em> is 0 (zero).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - type: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
    commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  - type: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  id: DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: DivRem(BigInteger, BigInteger, out BigInteger)
  fullName: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, out System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivRem
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 40
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Divides one <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by another, returns the result, and returns the remainder in an output parameter.</p>\n"
  remarks: "\n<p>This method preserves both the quotient and the remainder that results from integer division. If you are not interested in the remainder, use the <xref href=\"System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method or the division operator; if you are only interested in the remainder, use the <xref href=\"System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The sign of the returned <em>remainder</em> value is the same as the sign of the <em>dividend</em> parameter.</p>\n<p>The behavior of the <xref href=\"System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method is identical to that of the <xref href=\"System.Math.DivRem(System.Int32,System.Int32,System.Int32@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It then uses each element as the quotient in a division operation that uses the <xref href=\"System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method, the division operator (/), and the <xref href=\"System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Numerics.BigInteger.Divide#1"
  syntax:
    content: public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, out BigInteger remainder)
    content.vb: Public Shared Function DivRem(dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: "\n<p>The value to be divided.</p>\n"
    - id: divisor
      type: System.Numerics.BigInteger
      description: "\n<p>The value to divide by.</p>\n"
    - id: remainder
      type: System.Numerics.BigInteger
      description: "\n<p>When this method returns, contains a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that represents the remainder from the division. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The quotient of the division.</p>\n"
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>divisor</em> is 0 (zero).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, ByRef System.Numerics.BigInteger)
  name.vb: DivRem(BigInteger, BigInteger, ByRef BigInteger)
- uid: System.Numerics.BigInteger.Equals(System.Int64)
  commentId: M:System.Numerics.BigInteger.Equals(System.Int64)
  id: Equals(System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(Int64)
  fullName: System.Numerics.BigInteger.Equals(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 41
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</p>\n"
  remarks: "\n<p>If <em>other</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the method is called.</p>\n<p>To determine the relationship between the two objects instead of just testing for equality, call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example instantiates a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object from each integral type except <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>. It then calls the <xref href=\"System.Numerics.BigInteger.Equals(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to compare the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value with the original integer value that was passed to the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> constructor. As the output shows, the values are equal in each case.</p>System.Numerics.BigInteger.Equals#1"
  syntax:
    content: public bool Equals(long other)
    content.vb: Public Function Equals(other As Long) As Boolean
    parameters:
    - id: other
      type: System.Int64
      description: "\n<p>The signed 64-bit integer value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the signed 64-bit integer and the current instance have the same value; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  id: Equals(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(BigInteger)
  fullName: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 42
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether the current instance and a specified <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object have the same value.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and performs slightly better than <xref href=\"System.Numerics.BigInteger.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> because it does not have to convert the <em>other</em> parameter to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>To determine the relationship between the two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects instead of just testing for equality, call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal. The example uses each overload of the <see cref=\"Overload:System.Numerics.BigInteger.Equals\"></see> method to test for equality.</p>System.Numerics.BigInteger.Equals#2"
  syntax:
    content: public bool Equals(BigInteger other)
    content.vb: Public Function Equals(other As BigInteger) As Boolean
    parameters:
    - id: other
      type: System.Numerics.BigInteger
      description: "\n<p>The object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object and <em>other</em> have the same value; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Numerics.BigInteger}.Equals(System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.Equals(System.Object)
  commentId: M:System.Numerics.BigInteger.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Numerics.BigInteger.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 43
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether the current instance and a specified object have the same value.</p>\n"
  remarks: "\n<p>If the <em>obj</em> parameter is not a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, but it is a data type for which an implicit conversion is defined, the <xref href=\"System.Numerics.BigInteger.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method converts <em>obj</em> to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value before it performs the comparison. If <em>obj</em> is not a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value and cannot be implicitly converted to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>, the method returns <strong>false</strong>. If no conversion from <em>obj</em> to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value exists, the method does not throw an exception; instead, it returns <strong>false</strong>.</p>\n<p>To determine the relationship between the two objects instead of just testing for equality, call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal. The example uses each overload of the <see cref=\"Overload:System.Numerics.BigInteger.Equals\"></see> method to test for equality.</p>System.Numerics.BigInteger.Equals#2"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object or a type capable of implicit conversion to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, and its value is equal to the value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.BigInteger.Equals(System.UInt64)
  commentId: M:System.Numerics.BigInteger.Equals(System.UInt64)
  id: Equals(System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(UInt64)
  fullName: System.Numerics.BigInteger.Equals(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 44
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</p>\n"
  remarks: "\n<p>To determine the relationship between the two objects instead of just testing for equality, call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal. The example uses each overload of the <see cref=\"Overload:System.Numerics.BigInteger.Equals\"></see> method to test for equality.</p>System.Numerics.BigInteger.Equals#2"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public bool Equals(ulong other)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Equals(other As ULong) As Boolean
    parameters:
    - id: other
      type: System.UInt64
      description: "\n<p>The unsigned 64-bit integer to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.GetHashCode
  commentId: M:System.Numerics.BigInteger.GetHashCode
  id: GetHashCode
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Numerics.BigInteger.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 46
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the hash code for the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreatestCommonDivisor(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreatestCommonDivisor
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 47
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Finds the greatest common divisor of two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The greatest common divisor is the largest number into which the two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values can be divided without returning a remainder.</p>\n<p>If the <em>left</em> and <em>right</em> parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1. If either parameter is zero, the method returns the absolute value of the non-zero parameter. If both values are zero, the method returns zero.</p>\n<p>Computing the greatest common divisor of very large values of <em>left</em> and <em>right</em> can be a very time-consuming operation. </p>\n<p>The value returned by the <xref href=\"System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is always positive regardless of the sign of the <em>left</em> and <em>right</em> parameters.</p>\n"
  example:
  - "\n<p>The following example illustrates a call to the <xref href=\"System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method and the exception handling necessary to provide useful information about an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>. The result indicates that the greatest common divisor of these two numbers is 1.</p>System.Numeric.BigInteger.Class#10"
  syntax:
    content: public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right)
    content.vb: Public Shared Function GreatestCommonDivisor(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The greatest common divisor of <em>left</em> and <em>right</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  id: Log(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Log(BigInteger)
  fullName: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 48
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the natural (base <strong>e</strong>) logarithm of a specified number.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter is specified as a base 10 number.</p>\n<p>The precise return value of this method depends on the sign of <em>value</em>, as the following table shows.</p>\n<p>Sign of <em>value</em> parameter</p>\n<p>Return value</p>\n<table><tbody><tr><td>\n<p>Positive</p>\n</td><td>\n<p>The natural logarithm of <em>value</em>; that is, ln <em>value</em>, or log e<em>value</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>\n<xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr><tr><td>\n<p>Negative</p>\n</td><td>\n<p>\n<xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr></tbody></table>\n<p>To calculate the base 10 logarithm of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, call the <xref href=\"System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the logarithm of a number in another base, call the <xref href=\"System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>You can find the square root of a number by calling the <xref href=\"System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method along with the <xref href=\"System.Math.Exp(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method. Note that the result is <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> if the result is greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. The following example calculates the square root of each element in an array of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Numerics.BigInteger.Log#1<p>This method corresponds to the <xref href=\"System.Math.Log(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for the primitive numeric types.</p>"
  example:
  - 
  syntax:
    content: public static double Log(BigInteger value)
    content.vb: Public Shared Function Log(value As BigInteger) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The number whose logarithm is to be found.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The natural (base <strong>e</strong>) logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The natural log of <em>value</em> is out of range of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  id: Log(System.Numerics.BigInteger,System.Double)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Log(BigInteger, Double)
  fullName: System.Numerics.BigInteger.Log(System.Numerics.BigInteger, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 49
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the logarithm of a specified number in a specified base.</p>\n"
  remarks: "\n<p>The <em>value</em> and <em>baseValue</em> parameters are specified as base 10 numbers.</p>\n<p>The precise return value of the method depends on the sign of <em>value</em> and on the sign and value of <em>baseValue</em>, as the following table shows.</p>\n<p>\n<em>value</em> parameter</p>\n<p>\n<em>baseValue</em> parameter</p>\n<p>Return value</p>\n<p>To calculate the base 10 logarithm of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, call the <xref href=\"System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the natural logarithm of a number, call the <xref href=\"System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method corresponds to the <xref href=\"System.Math.Log(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for the primitive numeric types.</p>\n"
  example:
  - 
  syntax:
    content: public static double Log(BigInteger value, double baseValue)
    content.vb: Public Shared Function Log(value As BigInteger, baseValue As Double) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>A number whose logarithm is to be found.</p>\n"
    - id: baseValue
      type: System.Double
      description: "\n<p>The base of the logarithm.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The base <em>baseValue</em> logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The log of <em>value</em> is out of range of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  id: Log10(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Log10(BigInteger)
  fullName: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log10
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 50
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the base 10 logarithm of a specified number.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter is specified as a base 10 number.</p>\n<p>The precise return value of the method depends on the sign of <em>value</em>, as the following table shows.</p>\n<p>Sign of value parameter</p>\n<p>Return value</p>\n<table><tbody><tr><td>\n<p>Positive</p>\n</td><td>\n<p>The base 10 log of <em>value</em>; that is, log10<em>value</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>\n<xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr><tr><td>\n<p>Negative</p>\n</td><td>\n<p>\n<xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr></tbody></table>\n<p>To calculate the natural logarithm of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, call the <xref href=\"System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the logarithm of a number in another base, call the <xref href=\"System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method corresponds to the <xref href=\"System.Math.Log10(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for the primitive numeric types.</p>\n"
  example:
  - 
  syntax:
    content: public static double Log10(BigInteger value)
    content.vb: Public Shared Function Log10(value As BigInteger) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>A number whose logarithm is to be found.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The base 10 logarithm of <em>value</em>, as shown in the table in the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The base 10 log of <em>value</em> is out of range of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Max(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Max(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 51
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the larger of two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method corresponds to the <xref href=\"System.Math.Max(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method for primitive numeric types.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to select the largest number in an array of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Numerics.BigInteger.Max#1"
  syntax:
    content: public static BigInteger Max(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Max(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The <em>left</em> or <em>right</em> parameter, whichever is larger.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Min(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Min(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 52
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the smaller of two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method corresponds to the <xref href=\"System.Math.Min(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method for primitive numeric types.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to select the smallest number in an array of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Numerics.BigInteger.Min#1"
  syntax:
    content: public static BigInteger Min(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Min(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The <em>left</em> or <em>right</em> parameter, whichever is smaller.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ModPow(BigInteger, BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger, System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModPow
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 53
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Performs modulus division on a number raised to the power of another number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method evaluates the following expression:</p>\n<p>(baseValue ^ exponent) Mod modulus</p>\n<p>To perform exponentiation on <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values without modulus division, use the <xref href=\"System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example provides a simple illustration of calling the <xref href=\"System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Numerics.BigInteger.ModPow#1"
  syntax:
    content: public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus)
    content.vb: Public Shared Function ModPow(value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The number to raise to the <em>exponent</em> power.</p>\n"
    - id: exponent
      type: System.Numerics.BigInteger
      description: "\n<p>The exponent to raise <em>value</em> by.</p>\n"
    - id: modulus
      type: System.Numerics.BigInteger
      description: "\n<p>The number by which to divide <em>value</em> raised to the <em>exponent</em> power.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The remainder after dividing <em>value</em>exponent by <em>modulus</em>.</p>\n"
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>modulus</em> is zero.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>exponent</em> is negative.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
    commentId: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Multiply(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 54
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the product of two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is implemented for languages that do not support operator overloading. Its behavior is identical to multiplication using the multiplication operator. In addition, the <xref href=\"System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is a useful substitute for the multiplication operator when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable by assigning it a product that results from multiplication, as shown in the following example.</p>System.Numerics.BigInteger.OperationMethods#1<p>If necessary, this method automatically performs implicit conversion of other integral types to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects. This is illustrated in the example in the next section, where the <xref href=\"System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is passed two <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>"
  example:
  - "\n<p>The following example tries to perform multiplication with two long integers. Because the result exceeds the range of a long integer, an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> is thrown, and the <xref href=\"System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is called to handle the multiplication. Note that C# requires that you use either the <strong>checked</strong> keyword (as in this example) or the <strong>/checked+</strong> compiler option to make sure an exception is thrown on a numeric overflow.</p>System.Numeric.BigInteger.Class#7"
  syntax:
    content: public static BigInteger Multiply(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Multiply(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first number to multiply.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second number to multiply.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The product of the <em>left</em> and <em>right</em> parameters.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  id: Negate(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Negate(BigInteger)
  fullName: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 55
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Negates a specified <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>Negation obtains the additive inverse of a number. The additive inverse of a number is a number that produces a value of zero when it is added to the original number.</p>\n<p>The <xref href=\"System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator. In addition, the <xref href=\"System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is a useful substitute for the negation operator when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable, as shown in the following example.</p>System.Numerics.BigInteger.OperationMethods#4"
  example:
  - "\n<p>The following example illustrates three ways to negate the value of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Numeric.BigInteger.Class#16"
  syntax:
    content: public static BigInteger Negate(BigInteger value)
    content.vb: Public Shared Function Negate(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to negate.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of the <em>value</em> parameter multiplied by negative one (-1).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Addition(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Addition(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Addition
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 56
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Adds the values of two specified <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the addition operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#12<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator +(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator +(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to add.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to add.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The sum of <em>left</em> and <em>right</em>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BitwiseAnd(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.BitwiseAnd(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_BitwiseAnd
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 57
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Performs a bitwise <strong>And</strong> operation on two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the bitwise <strong>And</strong> operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. The bitwise <strong>And</strong> operation sets a result bit only if the corresponding bits in <em>left</em> and <em>right</em> are also set, as shown in the following table.</p>\n<p>Bit in <em>left</em></p>\n<p>Bit in <em>right</em></p>\n<p>Bit in result</p>\n<p>The <xref href=\"System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method enables code such as the following:</p>System.Numerics.BigInteger.Operators#1<p>The <xref href=\"System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method performs the bitwise <strong>And</strong> operation on two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values as if they were both in two's complement representation with virtual sign extension.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator &(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator And(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of the bitwise <strong>And</strong> operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BitwiseOr(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.BitwiseOr(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_BitwiseOr
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 58
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Performs a bitwise <strong>Or</strong> operation on two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the bitwise <strong>Or</strong> operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. The bitwise <strong>Or</strong> operation sets a result bit only if either or both of the corresponding bits in <em>left</em> and <em>right</em> are set, as shown in the following table.</p>\n<p>Bit in <em>left</em></p>\n<p>Bit in <em>right</em></p>\n<p>Bit in result</p>\n<p>The <xref href=\"System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method enables code such as the following:</p>System.Numerics.BigInteger.Operators#2<p>The <xref href=\"System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method performs the bitwise <strong>Or</strong> operation on two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values as if they were both in two's complement representation with virtual sign extension.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator |(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator Or(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of the bitwise <strong>Or</strong> operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  id: op_Decrement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Decrement(BigInteger)
  fullName: System.Numerics.BigInteger.Decrement(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Decrement
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 59
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Decrements a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by 1.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the decrement operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#17<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead. For example:</p>System.Numerics.BigInteger.Operators#3<p>Because <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable, the <xref href=\"System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> operator creates a new <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object whose value is one less than the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object represented by <em>value</em>. This means that repeated calls to <xref href=\"System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> may be expensive.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator --(BigInteger value)
    content.vb: VB cannot support this operator.
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to decrement.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The value of the <em>value</em> parameter decremented by 1.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Division(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Division(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Division
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 60
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Divides a specified <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by another specified <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by using integer division.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the division operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#13<p>Languages that do not support custom operators and operator overloading can call the <xref href=\"System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It then uses each element as the quotient in a division operation that uses the <xref href=\"System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method, the division operator (/), and the <xref href=\"System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Numerics.BigInteger.Divide#1"
  syntax:
    content: public static BigInteger operator /(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Operator /(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: "\n<p>The value to be divided.</p>\n"
    - id: divisor
      type: System.Numerics.BigInteger
      description: "\n<p>The value to divide by.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The integral result of the division.</p>\n"
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>divisor</em> is 0 (zero).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  id: op_Equality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.Equality(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 61
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a signed long integer value and a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the equality comparison operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#4<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Equals(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> instance method instead.</p><p>If <em>left</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator ==(long left, BigInteger right)
    content.vb: Public Shared Operator =(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  id: op_Equality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 62
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value and a signed long integer value are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method defines the equality comparison operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#5<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Equals(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> instance method instead.</p><p>If <em>right</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator ==(BigInteger left, long right)
    content.vb: Public Shared Operator =(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Int64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 63
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether the values of two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the equality operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#19<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> instance method instead.</p>"
  example:
  - 
  syntax:
    content: public static bool operator ==(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator =(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  id: op_Equality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 64
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value and an unsigned long integer value are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method defines the equality comparison operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#6<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Equals(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> instance method instead.</p>"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator ==(BigInteger left, ulong right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator =(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.UInt64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  id: op_Equality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.Equality(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 66
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether an unsigned long integer value and a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the equality comparison operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#7<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Equals(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> instance method instead.</p>"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator ==(ulong left, BigInteger right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator =(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ExclusiveOr(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.ExclusiveOr(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_ExclusiveOr
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 68
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Performs a bitwise exclusive <strong>Or</strong> (<strong>XOr</strong>) operation on two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The result of a bitwise exclusive <strong>Or</strong> operation is <strong>true</strong> if the values of the two bits are different; otherwise, it is <strong>false</strong>. The following table illustrates the exclusive <strong>Or</strong> operation.</p>\n<p>Bit x in <em>left</em></p>\n<p>Bit x in <em>right</em></p>\n<p>Return value</p>\n<p>The <xref href=\"System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method enables code such as the following:</p>System.Numerics.BigInteger.Operators#8<p>The <xref href=\"System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method performs the bitwise exclusive <strong>Or</strong> operation on two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values as if they were both in two's complement representation with virtual sign extension.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator ^(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator Xor(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of the bitwise <strong>Or</strong> operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger
  id: op_Explicit(System.Decimal)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to BigInteger)
  fullName: System.Numerics.BigInteger.Explicit(System.Decimal to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 69
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>Any fractional part of the <em>value</em> parameter is truncated before conversion.</p>\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Because the conversion from <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> can involve truncating any fractional part of <em>value</em>, language compilers do not perform this conversion automatically. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n"
  example:
  - "\n<p>The following example converts the individual elements in an array of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects, and then displays the result of each conversion. Note that any fractional part of a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value is truncated during the conversion.</p>System.Numerics.BigInteger.Explicit#1"
  syntax:
    content: public static explicit operator BigInteger(decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As BigInteger
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Decimal to System.Numerics.BigInteger)
  name.vb: Narrowing(Decimal to BigInteger)
- uid: System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger
  id: op_Explicit(System.Double)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(Double to BigInteger)
  fullName: System.Numerics.BigInteger.Explicit(System.Double to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 70
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>Any fractional part of the <em>value</em> parameter is truncated before conversion.</p>\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Because the conversion from <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> can involve truncating any fractional part of <em>value</em>, language compilers do not perform this conversion automatically. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n"
  example:
  - "\n<p>The following example converts the individual elements in an array of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects, and then displays the result of each conversion. Note that any fractional part of a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value is truncated during the conversion.</p>System.Numerics.BigInteger.Explicit#2"
  syntax:
    content: public static explicit operator BigInteger(double value)
    content.vb: Public Shared Narrowing Operator CType(value As Double) As BigInteger
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Double to System.Numerics.BigInteger)
  name.vb: Narrowing(Double to BigInteger)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte
  id: op_Explicit(System.Numerics.BigInteger)~System.Byte
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Byte)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Byte)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 71
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to an unsigned byte value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CByte</strong> in Visual Basic) is used. Otherwise, they display a compiler error. </p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#1"
  syntax:
    content: public static explicit operator byte (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Byte
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Byte)
  name.vb: Narrowing(BigInteger to Byte)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal
  id: op_Explicit(System.Numerics.BigInteger)~System.Decimal
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Decimal)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 72
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CDec</strong> in Visual Basic) is used.</p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#2"
  syntax:
    content: public static explicit operator decimal (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Decimal
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Decimal)
  name.vb: Narrowing(BigInteger to Decimal)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double
  id: op_Explicit(System.Numerics.BigInteger)~System.Double
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Double)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Double)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 73
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CDbl</strong> in Visual Basic) is used.</p>\n<p>Because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value can be outside the range of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type, this operation is a narrowing conversion. If the conversion is unsuccessful, it does not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. Instead, if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the resulting <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value is <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. If the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, the resulting <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value is <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> may involve a loss of precision. In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> data type. The following example provides an illustration. It assigns the maximum value of a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> to two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variables, increments one <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable by 9.999e291, and tests the two variables for equality. As expected, the call to the <xref href=\"System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method shows that they are unequal. However, the conversion of the larger <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value back to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> succeeds, although the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value now exceeds <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Numerics.BigInteger.Explicit#4"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Numeric.BigInteger.Explicit#3"
  syntax:
    content: public static explicit operator double (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Double)
  name.vb: Narrowing(BigInteger to Double)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16
  id: op_Explicit(System.Numerics.BigInteger)~System.Int16
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Int16)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int16)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 74
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to a 16-bit signed integer value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CShort</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#4"
  syntax:
    content: public static explicit operator short (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Short
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a 16-bit signed integer.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int16)
  name.vb: Narrowing(BigInteger to Int16)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32
  id: op_Explicit(System.Numerics.BigInteger)~System.Int32
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Int32)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 75
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to a 32-bit signed integer value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CInt</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#5"
  syntax:
    content: public static explicit operator int (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Integer
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a 32-bit signed integer. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int32)
  name.vb: Narrowing(BigInteger to Int32)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64
  id: op_Explicit(System.Numerics.BigInteger)~System.Int64
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Int64)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 76
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to a 64-bit signed integer value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CLng</strong> in Visual Basic) is used. Otherwise, they display a compiler error. </p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#6"
  syntax:
    content: public static explicit operator long (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Long
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a 64-bit signed integer.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int64)
  name.vb: Narrowing(BigInteger to Int64)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte
  id: op_Explicit(System.Numerics.BigInteger)~System.SByte
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to SByte)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.SByte)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 77
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to a signed 8-bit value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CSByte</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#7"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator sbyte (BigInteger value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As BigInteger) As SByte
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a signed 8-bit value.</p>\n"
    return:
      type: System.SByte
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.SByte)
  name.vb: Narrowing(BigInteger to SByte)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single
  id: op_Explicit(System.Numerics.BigInteger)~System.Single
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Single)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 79
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to a single-precision floating-point value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss or a loss of precision. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CSng</strong> in Visual Basic) is used. Otherwise, they display a compiler error. </p>\n<p>Because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value can be outside the range of the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> data type, this operation is a narrowing conversion. If the conversion is unsuccessful, it does not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. Instead, if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, the resulting <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. If the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, the resulting <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> may involve a loss of precision. In some cases, the loss of precision may cause the casting or conversion operation to succeed even if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> data type. The following example provides an illustration. It assigns the maximum value of a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> to two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variables, increments one <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable by 9.999e291, and tests the two variables for equality. As expected, the call to the <xref href=\"System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method shows that they are unequal. However, the conversion of the larger <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value back to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> succeeds, although the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value now exceeds <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Numerics.BigInteger.Explicit#5"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Numeric.BigInteger.Explicit#8"
  syntax:
    content: public static explicit operator float (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Single
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to a single-precision floating-point value.</p>\n"
    return:
      type: System.Single
      description: "\n<p>An object that contains the closest possible representation of the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Single)
  name.vb: Narrowing(BigInteger to Single)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16
  id: op_Explicit(System.Numerics.BigInteger)~System.UInt16
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to UInt16)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt16)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 80
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to an unsigned 16-bit integer value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CUShort</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#9"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator ushort (BigInteger value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As BigInteger) As UShort
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to an unsigned 16-bit integer.</p>\n"
    return:
      type: System.UInt16
      description: "\n<p>An object that contains the value of the <em>value</em> parameter</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt16)
  name.vb: Narrowing(BigInteger to UInt16)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32
  id: op_Explicit(System.Numerics.BigInteger)~System.UInt32
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to UInt32)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 82
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to an unsigned 32-bit integer value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CUInt</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#10"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator uint (BigInteger value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As BigInteger) As UInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to an unsigned 32-bit integer.</p>\n"
    return:
      type: System.UInt32
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt32)
  name.vb: Narrowing(BigInteger to UInt32)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64
  id: op_Explicit(System.Numerics.BigInteger)~System.UInt64
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to UInt64)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 84
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to an unsigned 64-bit integer value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can be converted. Language compilers do not perform this conversion automatically because it can involve data loss. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> or <strong>CULng</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n<p>Because this operation defines a narrowing conversion, it can throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> at run time if the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> data type. There is no loss of precision in the resulting <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value if the conversion is successful.</p>\n"
  example:
  - "\n<p>The following example illustrates the conversion of <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values. It also handles an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> that is thrown because the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is outside the range of the <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> data type.</p>System.Numeric.BigInteger.Explicit#11"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator ulong (BigInteger value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(value As BigInteger) As ULong
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to convert to an unsigned 64-bit integer.</p>\n"
    return:
      type: System.UInt64
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt64)
  name.vb: Narrowing(BigInteger to UInt64)
- uid: System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger
  id: op_Explicit(System.Single)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(Single to BigInteger)
  fullName: System.Numerics.BigInteger.Explicit(System.Single to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 86
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> object to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>Any fractional part of the <em>value</em> parameter is truncated before conversion.</p>\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types to which or from which a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> can be converted. Because the conversion from <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> can involve truncating any fractional part of <em>value</em>, language compilers do not perform this conversion automatically. Instead, they perform the conversion only if a casting operator (in C#) or a conversion function (such as <strong>CType</strong> in Visual Basic) is used. Otherwise, they display a compiler error.</p>\n"
  example:
  - "\n<p>The following example converts the individual elements in an array of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects, and then displays the result of each conversion. Note that any fractional part of a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is truncated during the conversion.</p>System.Numerics.BigInteger.Explicit#3"
  syntax:
    content: public static explicit operator BigInteger(float value)
    content.vb: Public Shared Narrowing Operator CType(value As Single) As BigInteger
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Single to System.Numerics.BigInteger)
  name.vb: Narrowing(Single to BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  id: op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 87
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit signed integer is greater than a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#9<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> instance method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#10<p>If <em>left</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator>(long left, BigInteger right)
    content.vb: Public Shared Operator>(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  id: op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 88
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> is greater than a 64-bit signed integer value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#11<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#12<p>If <em>right</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator>(BigInteger left, long right)
    content.vb: Public Shared Operator>(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Int64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 89
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than another <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#20<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numeric.BigInteger.Class#21"
  example:
  - 
  syntax:
    content: public static bool operator>(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator>(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  id: op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 90
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than a 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#13<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#14"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator>(BigInteger left, ulong right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator>(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.UInt64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  id: op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThan(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 92
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than a 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#15<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#16"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator>(ulong left, BigInteger right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator>(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 94
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#17<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#18<p>If <em>left</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator >=(long left, BigInteger right)
    content.vb: Public Shared Operator >=(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 95
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than or equal to a 64-bit signed integer value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#19<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#20<p>If <em>right</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator >=(BigInteger left, long right)
    content.vb: Public Shared Operator >=(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Int64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 96
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than or equal to another <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#22<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numeric.BigInteger.Class#23"
  example:
  - 
  syntax:
    content: public static bool operator >=(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator >=(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 97
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is greater than or equal to a 64-bit unsigned integer value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#21<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#22"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator >=(BigInteger left, ulong right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator >=(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.UInt64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 99
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#23<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#24"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator >=(ulong left, BigInteger right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator >=(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger
  id: op_Implicit(System.Byte)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Byte to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Byte to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 101
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of an unsigned byte to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#1"
  example:
  - 
  syntax:
    content: public static implicit operator BigInteger(byte value)
    content.vb: Public Shared Widening Operator CType(value As Byte) As BigInteger
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Byte to System.Numerics.BigInteger)
  name.vb: Widening(Byte to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger
  id: op_Implicit(System.Int16)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Int16 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Int16 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 102
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a signed 16-bit integer to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#2"
  example:
  - 
  syntax:
    content: public static implicit operator BigInteger(short value)
    content.vb: Public Shared Widening Operator CType(value As Short) As BigInteger
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Int16 to System.Numerics.BigInteger)
  name.vb: Widening(Int16 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  id: op_Implicit(System.Int32)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Int32 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 103
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a signed 32-bit integer to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#3"
  example:
  - 
  syntax:
    content: public static implicit operator BigInteger(int value)
    content.vb: Public Shared Widening Operator CType(value As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Int32 to System.Numerics.BigInteger)
  name.vb: Widening(Int32 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  id: op_Implicit(System.Int64)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Int64 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 104
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a signed 64-bit integer to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#4"
  example:
  - 
  syntax:
    content: public static implicit operator BigInteger(long value)
    content.vb: Public Shared Widening Operator CType(value As Long) As BigInteger
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Int64 to System.Numerics.BigInteger)
  name.vb: Widening(Int64 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger
  id: op_Implicit(System.SByte)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(SByte to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.SByte to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 105
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of an 8-bit signed integer to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from an <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#5"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator BigInteger(sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As SByte) As BigInteger
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.SByte to System.Numerics.BigInteger)
  name.vb: Widening(SByte to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt16)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(UInt16 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.UInt16 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 107
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 16-bit unsigned integer to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#6"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator BigInteger(ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As UShort) As BigInteger
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt16 to System.Numerics.BigInteger)
  name.vb: Widening(UInt16 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt32)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(UInt32 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.UInt32 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 109
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 32-bit unsigned integer to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#7"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator BigInteger(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As UInteger) As BigInteger
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt32 to System.Numerics.BigInteger)
  name.vb: Widening(UInt32 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt64)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(UInt64 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.UInt64 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 111
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Defines an implicit conversion of a 64-bit unsigned integer to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The overloads of the <xref href=\"System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> method define the types from which a compiler can automatically convert a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value without an explicit casting operator (in C#) or a call to a conversion function (in Visual Basic). They are widening conversions that do not involve data loss and do not throw an <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>. This overload lets the compiler handle conversions from a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, as the following example shows. </p>System.Numeric.BigInteger.Implicit#8"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator BigInteger(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(value As ULong) As BigInteger
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The value to convert to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>An object that contains the value of the <em>value</em> parameter.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt64 to System.Numerics.BigInteger)
  name.vb: Widening(UInt64 to BigInteger)
- uid: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  id: op_Increment(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Increment(BigInteger)
  fullName: System.Numerics.BigInteger.Increment(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Increment
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 113
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Increments a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by 1.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the increment operation for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#24<p>Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref href=\"System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numeric.BigInteger.Class#25<p>Because <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable, the <xref href=\"System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> operator creates a new <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object whose value is one more than the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object represented by <em>value</em>. Therefore, repeated calls to <xref href=\"System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> may be expensive.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator ++(BigInteger value)
    content.vb: VB cannot support this operator.
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to increment.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The value of the <em>value</em> parameter incremented by 1.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  id: op_Inequality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.Inequality(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 114
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit signed integer and a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value are not equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#25<p>Languages that do not support custom operators can test for inequality by using one of the following techniques:</p><ul><li><p>Calling the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> instance method, which indicates the relationship between a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> and a signed long integer value.</p></li><li><p>Calling the <xref href=\"System.Numerics.BigInteger.Equals(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> instance method and reversing its value.</p></li></ul><p>If <em>left</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator !=(long left, BigInteger right)
    content.vb: Public Shared Operator <>(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  id: op_Inequality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 115
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value and a 64-bit signed integer are not equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#26<p>Languages that do not support custom operators can test for inequality by using one of the following techniques:</p><ul><li><p>Calling the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates the relationship between a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> and a signed long integer value.</p></li><li><p>Calling the <xref href=\"System.Numerics.BigInteger.Equals(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method and reversing its value.</p></li></ul><p>If <em>right</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator !=(BigInteger left, long right)
    content.vb: Public Shared Operator <>(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Int64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 116
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects have different values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#26<p>Languages that do not support custom operators can test for inequality by using one of the following techniques:</p><ul><li><p>Calling the <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates the relationship between two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects. </p></li><li><p>Calling the <xref href=\"System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method and reversing its value.</p></li></ul>"
  example:
  - 
  syntax:
    content: public static bool operator !=(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator <>(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  id: op_Inequality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 117
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value and a 64-bit unsigned integer are not equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#27<p>Languages that do not support custom operators can test for inequality by using one of the following techniques:</p><ul><li><p>Calling the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates the relationship between a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> and an unsigned long integer value.</p></li><li><p>Calling the <xref href=\"System.Numerics.BigInteger.Equals(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method and reversing its value.</p></li></ul>"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator !=(BigInteger left, ulong right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator <>(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.UInt64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  id: op_Inequality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.Inequality(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 119
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit unsigned integer and a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value are not equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#28<p>Languages that do not support custom operators can test for inequality by using one of the following techniques:</p><ul><li><p>Calling the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates the relationship between a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> and an unsigned long integer value.</p></li><li><p>Calling the <xref href=\"System.Numerics.BigInteger.Equals(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method and reversing its value.</p></li></ul>"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator !=(ulong left, BigInteger right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator <>(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  id: op_LeftShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LeftShift(BigInteger, Int32)
  fullName: System.Numerics.BigInteger.LeftShift(System.Numerics.BigInteger, System.Int32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LeftShift
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 121
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Shifts a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value a specified number of bits to the left.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the bitwise left-shift operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#29<p>Unlike the bitwise left-shift operation with integer primitives, the <xref href=\"System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method preserves the sign of the original <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p><p>Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying <em>value</em> by <strong>BigInteger.Pow(2,</strong><em>shift</em><strong>)</strong>. The following example shows that the results are identical to the results of using this operator.</p>System.Numerics.BigInteger.Operators#30"
  example:
  - 
  syntax:
    content: public static BigInteger operator <<(BigInteger value, int shift)
    content.vb: Public Shared Operator <<(value As BigInteger, shift As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value whose bits are to be shifted.</p>\n"
    - id: shift
      type: System.Int32
      description: "\n<p>The number of bits to shift <em>value</em> to the left.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>A value that has been shifted to the left by the specified number of bits.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
    commentId: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  id: op_LessThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThan(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 122
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit signed integer is less than a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#31<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#32<p>If <em>left</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator <(long left, BigInteger right)
    content.vb: Public Shared Operator <(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  id: op_LessThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 123
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than a 64-bit signed integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#33<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#34<p>If <em>right</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator <(BigInteger left, long right)
    content.vb: Public Shared Operator <(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Int64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 124
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than another <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#27<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead. Some languages can also call the <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numeric.BigInteger.Class#28"
  example:
  - 
  syntax:
    content: public static bool operator <(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator <(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  id: op_LessThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 125
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than a 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#35<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#36"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator <(BigInteger left, ulong right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator <(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.UInt64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  id: op_LessThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThan(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 127
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit unsigned integer is less than a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#37<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#38"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator <(ulong left, BigInteger right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator <(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 129
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#39<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#40<p>If <em>left</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator <=(long left, BigInteger right)
    content.vb: Public Shared Operator <=(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 130
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than or equal to a 64-bit signed integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#41<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#42<p>If <em>right</em> is a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value, it is implicitly converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value when the operation is performed.</p>"
  example:
  - 
  syntax:
    content: public static bool operator <=(BigInteger left, long right)
    content.vb: Public Shared Operator <=(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Int64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 131
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than or equal to another <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#29<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numeric.BigInteger.Class#30"
  example:
  - 
  syntax:
    content: public static bool operator <=(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator <=(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 132
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is less than or equal to a 64-bit unsigned integer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#43<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#44"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator <=(BigInteger left, ulong right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator <=(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.UInt64
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 134
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less than or equal to operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#45<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.CompareTo(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method instead. They can also call the <xref href=\"System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly, as the following example shows.</p>System.Numerics.BigInteger.Operators#46"
  example:
  - 
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static bool operator <=(ulong left, BigInteger right)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Operator <=(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Modulus(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Modulus(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Modulus
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 136
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the remainder that results from division with two specified <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the modulus operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#31<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p><p>The sign of the value returned by the modulus operation depends on the sign of <em>dividend</em>: If <em>dividend</em> is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. The behavior of the modulus operation with <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values is identical to the modulus operation with other integral types.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator %(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Operator Mod(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: "\n<p>The value to be divided.</p>\n"
    - id: divisor
      type: System.Numerics.BigInteger
      description: "\n<p>The value to divide by.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The remainder that results from the division.</p>\n"
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>divisor</em> is 0 (zero).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - type: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
    commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Multiply(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Multiply
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 137
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Multiplies two specified <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the multiplication operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#11"
  example:
  - 
  syntax:
    content: public static BigInteger operator *(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator *(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The first value to multiply.</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The second value to multiply.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The product of <em>left</em> and <em>right</em>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  id: op_OnesComplement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: OnesComplement(BigInteger)
  fullName: System.Numerics.BigInteger.OnesComplement(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_OnesComplement
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 138
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the bitwise one's complement of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the bitwise one's complement operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. The bitwise one's complement operator reverses each bit in a numeric value. That is, bits in <em>value</em> that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result. The <xref href=\"System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method enables code such as the following:</p>System.Numerics.BigInteger.OnesComplement#1<p>Languages that do not support custom operators may be able to call the <xref href=\"System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method directly to perform a bitwise one's complement operation. For example:</p>System.Numerics.BigInteger.OnesComplement#2"
  example:
  - 
  syntax:
    content: public static BigInteger operator ~(BigInteger value)
    content.vb: Public Shared Operator Not(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>An integer value.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The bitwise one's complement of <em>value</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  id: op_RightShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: RightShift(BigInteger, Int32)
  fullName: System.Numerics.BigInteger.RightShift(System.Numerics.BigInteger, System.Int32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_RightShift
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 139
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Shifts a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value a specified number of bits to the right.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the bitwise right-shift operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numerics.BigInteger.Operators#47<p>Languages that do not support custom operators can perform a bitwise right-shift operation by dividing <em>value</em> by <strong>BigInteger.Pow(2,</strong><em>shift</em><strong>)</strong> and subtracting 1 times <em>shift</em> for negative values. The following example shows that the results are identical to the results of using this operator.</p>System.Numerics.BigInteger.Operators#48<p>If <em>shift</em> is greater than or equal to the number of bits in a positive <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, the result of the right-shift operation is <xref href=\"System.Numerics.BigInteger.Zero\" data-throw-if-not-resolved=\"false\"></xref>. If <em>shift</em> is greater than the number of bits in a negative <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, the result of the right-shift operation is <xref href=\"System.Numerics.BigInteger.MinusOne\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator >>(BigInteger value, int shift)
    content.vb: Public Shared Operator >>(value As BigInteger, shift As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value whose bits are to be shifted.</p>\n"
    - id: shift
      type: System.Int32
      description: "\n<p>The number of bits to shift <em>value</em> to the right.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>A value that has been shifted to the right by the specified number of bits.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
    commentId: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Subtraction(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Subtraction(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Subtraction
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 140
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Subtracts a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value from another <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the subtraction operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. It enables code such as the following:</p>System.Numeric.BigInteger.Class#14<p>Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>"
  example:
  - 
  syntax:
    content: public static BigInteger operator -(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator -(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The value to subtract from (the minuend).</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The value to subtract (the subtrahend).</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  id: op_UnaryNegation(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: UnaryNegation(BigInteger)
  fullName: System.Numerics.BigInteger.UnaryNegation(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_UnaryNegation
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 141
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Negates a specified BigInteger value. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <xref href=\"System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  example:
  - "\n<p>The following example illustrates three different ways to negate the value of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Numeric.BigInteger.Class#16"
  syntax:
    content: public static BigInteger operator -(BigInteger value)
    content.vb: Public Shared Operator -(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The value to negate.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of the <em>value</em> parameter multiplied by negative one (-1).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  id: op_UnaryPlus(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: UnaryPlus(BigInteger)
  fullName: System.Numerics.BigInteger.UnaryPlus(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_UnaryPlus
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 142
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Returns the value of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> operand. (The sign of the operand is unchanged.)</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the unary positive operator for <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - 
  syntax:
    content: public static BigInteger operator +(BigInteger value)
    content.vb: Public Shared Operator +(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>An integer value.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The value of the <em>value</em> operand.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String)
  commentId: M:System.Numerics.BigInteger.Parse(System.String)
  id: Parse(System.String)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Numerics.BigInteger.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 143
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the string representation of a number to its <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter should be the string representation of a number in the following form.  </p>\n<p>[ws][sign]digits[ws]</p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. Valid sign characters are determined by the <xref href=\"System.Globalization.NumberFormatInfo.NegativeSign\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.PositiveSign\" data-throw-if-not-resolved=\"false\"></xref> properties of the current culture.</p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.</p>\n</td></tr></tbody></table>\n<p>The string specified by the <em>value</em> parameter is interpreted by using the <xref href=\"System.Globalization.NumberStyles.Integer\" data-throw-if-not-resolved=\"false\"></xref> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</p>\n<p>The <em>value</em> parameter is parsed by using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is initialized for the current system culture. For more information, see <xref href=\"System.Globalization.NumberFormatInfo.CurrentInfo\" data-throw-if-not-resolved=\"false\"></xref>. To parse a string by using the formatting information of a specific culture, use the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to round-trip the string representation of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that was output by the <see cref=\"Overload:System.Numerics.BigInteger.ToString\"></see> method, you should use the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the \"R\" format specifier to generate the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value. Otherwise, the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to restore the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects. It multiplies each object by another number and then calls the <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the relationship between the two values. </p>System.Numerics.BigInteger.Parse#1"
  syntax:
    content: public static BigInteger Parse(string value)
    content.vb: Public Shared Function Parse(value As String) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains the number to convert.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in the correct format.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String, NumberStyles)
  fullName: System.Numerics.BigInteger.Parse(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 144
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the string representation of a number in a specified style to its <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent.</p>\n"
  remarks: "\n<p>The <em>style</em> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the <em>value</em> parameter for the parse operation to succeed. <em>styles</em> must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The <em>style</em> parameter makes this method overload useful when <em>value</em> contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by <em>value</em> is known only at run time, or when you want to disallow white space or a sign symbol in <em>value</em>.</p>\n<p>Depending on the value of <em>style</em>, the <em>value</em> parameter may include the following elements: </p>\n<p>[ws][$][sign][digits,]digits[.fractional_digits][E[sign]exponential_digits][ws] </p>\n<p>If <em>style</em> includes <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>, the <em>value</em> parameter may contain the following elements:</p>\n<p>[ws]hexdigits[ws]</p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. White space can appear at the start of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the current culture. The current culture's currency symbol can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. The sign can appear at the start of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>value</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>digits</p>\n<p>fractional_digits</p>\n<p>exponential_digits</p>\n</td><td>\n<p>A sequence of digits from 0 through 9. For fractional_digits, only the digit 0 is valid.</p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific group separator symbol. The current culture's group separator can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if fractional_digits includes any other digit, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>E</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The <em>value</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>hexdigits</p>\n</td><td>\n<p>A sequence of hexadecimal digits from 0 through f, or 0 through F. </p>\n</td></tr></tbody></table>\n<p>A string with digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> style) always parses successfully. Most of the remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members affect the elements that may be present in <em>value</em>.</p>\n<p>\n<strong>NumberStyles</strong> value</p>\n<p>Elements permitted in <em>value</em> in addition to digits</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The digits element only.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The decimal point (.) and fractional-digits elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates exponential notation, along with exponential_digits. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the start of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the end of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the start of <em>value</em>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the end of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element in the form of parentheses enclosing the numeric value.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The group separator (,) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The currency ($) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>value</em> cannot represent a hexadecimal number or a number in exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the start or end of <em>value</em>, sign at the start of <em>value</em>, and the decimal point (.) symbol. The <em>value</em> parameter can also use exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>ws</em>, <em>sign</em>, group separator (,), and decimal point (.) elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>value</em> cannot represent a hexadecimal number.</p>\n</td></tr></tbody></table>\n<p>If you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to round-trip the string representation of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that was output by the <see cref=\"Overload:System.Numerics.BigInteger.ToString\"></see> method, you should use the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the \"R\" format specifier to generate the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value. Otherwise, the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to restore the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>Unlike the other <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> values, which allow for, but do not require, the presence of particular style elements in <em>value</em>, the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> style value means that the individual numeric characters in <em>value</em> are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the <em>style</em> parameter are <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>. (The <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration includes a composite number style, <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>, that includes both white-space flags.)</p>\n<p>If <em>value</em> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <strong>0x</strong> or <strong>&h</strong>) that differentiates it as a hexadecimal number. This causes the conversion to fail.</p>\n<p>If <em>value</em> is a hexadecimal string, the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref> method interprets <em>value</em> as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to <strong>0x80</strong>. In other words, the method interprets the highest-order bit of the first byte in <em>value</em> as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <em>value</em> must have a value of zero. For example, the method interprets <strong>0x80</strong> as a negative value, but it interprets either <strong>0x080</strong> or <strong>0x0080</strong> as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</p>System.Numerics.BigInteger.Parse#3<p>The <em>value</em> parameter is parsed by using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>"
  example:
  - "\n<p>The following example illustrates calls to the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref> method with several possible values for the <em>style</em> parameter. It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.</p>System.Numeric.BigInteger.Parse#5"
  syntax:
    content: public static BigInteger Parse(string value, NumberStyles style)
    content.vb: Public Shared Function Parse(value As String, style As NumberStyles) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    - id: style
      type: System.Globalization.NumberStyles
      description: "\n<p>A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref> flag along with another value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not comply with the input pattern specified by <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String, NumberStyles, IFormatProvider)
  fullName: System.Numerics.BigInteger.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 145
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent.</p>\n"
  remarks: "\n<p>The <em>style</em> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the <em>value</em> parameter for the parse operation to succeed. <em>styles</em> must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The <em>style</em> parameter makes this method overload useful when <em>value</em> contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by <em>value</em> is known only at run time, or when you want to disallow white space or a sign symbol in <em>value</em>.</p>\n<p>Depending on the value of <em>style</em>, the <em>value</em> parameter may include the following elements: </p>\n<p>[ws][$][sign][digits,]digits[.fractional_digits][E[sign]exponential_digits][ws] </p>\n<p>If <em>style</em> includes <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>, the <em>value</em> parameter may include the following elements:</p>\n<p>[ws]hexdigits[ws]</p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. White space can appear at the start of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the culture indicated by the <em>provider</em> parameter. The current culture's currency symbol can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. The sign can appear at the start of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>value</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>digits</p>\n<p>fractional_digits</p>\n<p>exponential_digits</p>\n</td><td>\n<p>A sequence of digits from 0 through 9. For fractional_digits, only the digit 0 is valid.</p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific group separator symbol. The group separator symbol of the culture specified by <em>provider</em> can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. The decimal point symbol of the culture designated by <em>provider</em> can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if fractional_digits includes any other digit, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>E</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The <em>value</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>hexdigits</p>\n</td><td>\n<p>A sequence of hexadecimal digits from 0 through f, or 0 through F. </p>\n</td></tr></tbody></table>\n<p>A string with digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> style) always parses successfully. Most of the remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members affect the elements that may be present in <em>value</em>.</p>\n<p>NumberStyles value</p>\n<p>Elements permitted in value in addition to digits</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The digits element only.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The decimal point (.) and fractional-digits elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates exponential notation. along with exponential_digits. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the start of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the end of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the start of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the end of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element in the form of parentheses enclosing the numeric value.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The group separator (,) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The currency ($) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>value</em> cannot represent a hexadecimal number or a number in exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the start or end of <em>value</em>, sign at the start of <em>value</em>, and the decimal point (.) symbol. The <em>value</em> parameter can also use exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>ws</em>, <em>sign</em>, group separator (,), and decimal point (.) elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>value</em> cannot represent a hexadecimal number.</p>\n</td></tr></tbody></table>\n<p>If you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to round-trip the string representation of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that was output by the <see cref=\"Overload:System.Numerics.BigInteger.ToString\"></see> method, you should use the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the \"R\" format specifier to generate the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value. Otherwise, the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to restore the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>Unlike the other <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> values, which allow for but do not require the presence of particular style elements in <em>value</em>, the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> style value means that the individual numeric characters in <em>value</em> are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the <em>style</em> parameter are <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>. (The <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration includes a composite number style, <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>, that includes both white-space flags.)</p>\n<p>If <em>value</em> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <strong>0x</strong> or <strong>&h</strong>) that differentiates it as a hexadecimal number. This causes the conversion to fail.</p>\n<p>If <em>value</em> is a hexadecimal string, the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref> method interprets <em>value</em> as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to <strong>0x80</strong>. In other words, the method interprets the highest-order bit of the first byte in <em>value</em> as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <em>value</em> must have a value of zero. For example, the method interprets <strong>0x80</strong> as a negative value, but it interprets either <strong>0x080</strong> or <strong>0x0080</strong> as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</p>System.Numerics.BigInteger.Parse#3<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information about the format of <em>value</em>. Typically, <em>provider</em> can be any one of the following: </p><ul><li><p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that provides numeric formatting information. Its <xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information.</p></li><li><p>A <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information. (Its implementation of <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> just returns itself.)</p></li><li><p>A custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> and uses the <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate and return the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p></li></ul><p>If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture is used.</p>"
  example:
  - "\n<p>The following example makes several calls to the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method using various combinations of values for the <em>style</em> and <em>provider</em> parameters. </p>System.Numerics.BigInteger.Parse#2<p>A number of the individual calls to the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method pass an instance of the following <code>BigIntegerFormatProvider</code> class, which defines a tilde (~) as the negative sign.</p>System.Numerics.BigInteger.Parse#4"
  syntax:
    content: public static BigInteger Parse(string value, NumberStyles style, IFormatProvider provider)
    content.vb: Public Shared Function Parse(value As String, style As NumberStyles, provider As IFormatProvider) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains a number to convert.</p>\n"
    - id: style
      type: System.Globalization.NumberStyles
      description: "\n<p>A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information about <em>value</em>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref> flag along with another value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> does not comply with the input pattern specified by <em>style</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String, IFormatProvider)
  fullName: System.Numerics.BigInteger.Parse(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 146
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the string representation of a number in a specified culture-specific format to its <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent.</p>\n"
  remarks: "\n<p>The <em>value</em> parameter should be the string representation of a number in the following form:</p>\n<p>[ws][sign]digits[ws]</p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. Valid sign characters are determined by the <xref href=\"System.Globalization.NumberFormatInfo.NegativeSign\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.PositiveSign\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is returned by the <em>provider</em> object's <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.</p>\n</td></tr></tbody></table>\n<p>The string specified by the <em>value</em> parameter is interpreted using the <xref href=\"System.Globalization.NumberStyles.Integer\" data-throw-if-not-resolved=\"false\"></xref> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.</p>\n<p>If you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to round-trip the string representation of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that was output by the <see cref=\"Overload:System.Numerics.BigInteger.ToString\"></see> method, you should use the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the \"R\" format specifier to generate the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value. Otherwise, the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to restore the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information. When the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked, it calls the <em>provider</em> parameter's <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method and passes it a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> type. The <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method then returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides information about the format of the <em>value</em> parameter. There are three ways to use the <em>provider</em> parameter to supply custom formatting information to the parse operation: </p>\n<ul><li>\n<p>You can pass a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information. Its <xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information for that culture.</p>\n</li><li>\n<p>You can pass the actual <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information. (Its implementation of <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> just returns itself.)</p>\n</li><li>\n<p>You can pass a custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method instantiates and returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p>\n</li></ul>\n<p>If <em>provider</em> is <strong>null</strong>, the formatting of <em>value</em> is interpreted based on the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of the current culture.</p>\n"
  example:
  - "\n<p>The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. Note that to display the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values in the same format as the original strings, your code must call the <xref href=\"System.Numerics.BigInteger.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method and pass it the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p>\n<p>The first example defines a class that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> and uses the <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to return the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p>System.Numeric.BigInteger.Parse#2<p>A <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object can then be instantiated with the following code:</p>System.Numeric.BigInteger.Parse#3<p>The second example is more straightforward. It passes the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information to the <em>provider</em> parameter.</p>System.Numeric.BigInteger.Parse#4"
  syntax:
    content: public static BigInteger Parse(string value, IFormatProvider provider)
    content.vb: Public Shared Function Parse(value As String, provider As IFormatProvider) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: "\n<p>A string that contains a number to convert.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information about <em>value</em>.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>A value that is equivalent to the number specified in the <em>value</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>value</em> is not in the correct format.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  id: Pow(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Pow(BigInteger, Int32)
  fullName: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pow
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 147
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Raises a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value to the power of a specified value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns 1 if the value of the exponent parameter is 0, or if the values of both the <em>value</em> and <em>exponent</em> parameters are 0. If <em>exponent</em> is 1, the <xref href=\"System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns <em>value</em>. If <em>value</em> is negative, the method returns a negative result.</p>\n<p>This method corresponds to the <xref href=\"System.Math.Pow(System.Double,System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method for primitive numeric types.</p>\n"
  example:
  - "\n<p>The following example illustrates exponentiation using a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value and an exponent whose value ranges from 0 to 10.</p>System.Numeric.BigInteger.Class#32"
  syntax:
    content: public static BigInteger Pow(BigInteger value, int exponent)
    content.vb: Public Shared Function Pow(value As BigInteger, exponent As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: "\n<p>The number to raise to the <em>exponent</em> power.</p>\n"
    - id: exponent
      type: System.Int32
      description: "\n<p>The exponent to raise <em>value</em> by.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of raising <em>value</em> to the <em>exponent</em> power.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>exponent</em> parameter is negative.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Remainder(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remainder
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 148
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Performs integer division on two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values and returns the remainder.</p>\n"
  remarks: "\n<p>The sign of the remainder is the sign of the <em>dividend</em> parameter.</p>\n<p>The <xref href=\"System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is implemented for languages that do not support custom operators. Its behavior is identical to division using the modulus operator.</p>\n<p>If necessary, the method automatically performs implicit conversion of other integral types to <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects before it performs the modulus operation. </p>\n"
  example:
  - "\n<p>The following example compares the remainder from the <xref href=\"System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method with the remainder returned by the <xref href=\"System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to establish that the two methods calculate identical remainders.</p>System.Numerics.BigInteger.Remainder#1"
  syntax:
    content: public static BigInteger Remainder(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Function Remainder(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: "\n<p>The value to be divided.</p>\n"
    - id: divisor
      type: System.Numerics.BigInteger
      description: "\n<p>The value to divide by.</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The remainder after dividing <em>dividend</em> by <em>divisor</em>.</p>\n"
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<p>\n<em>divisor</em> is 0 (zero).</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
    commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  - type: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Subtract(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 149
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Subtracts one <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value from another and returns the result.</p>\n"
  remarks: "\n<p>Languages that do not support custom operators can use the <xref href=\"System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to perform subtraction using <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n<p>The <xref href=\"System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method is a useful substitute for the subtraction operator when instantiating a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> variable by assigning it the difference that results from subtraction, as shown in the following example.</p>System.Numerics.BigInteger.OperationMethods#3"
  example:
  - 
  syntax:
    content: public static BigInteger Subtract(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Subtract(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: "\n<p>The value to subtract from (the minuend).</p>\n"
    - id: right
      type: System.Numerics.BigInteger
      description: "\n<p>The value to subtract (the subtrahend).</p>\n"
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
    commentId: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Numerics.BigInteger.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 150
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  syntax:
    content: int IComparable.CompareTo(object obj)
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Numerics.BigInteger.ToByteArray
  commentId: M:System.Numerics.BigInteger.ToByteArray
  id: ToByteArray
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToByteArray()
  fullName: System.Numerics.BigInteger.ToByteArray()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByteArray
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 151
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value to a byte array.</p>\n"
  remarks: "\n<p>The individual bytes in the array returned by this method appear in little-endian order. That is, the lower-order bytes of the value precede the higher-order bytes. The first byte of the array reflects the first eight bits of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, the second byte reflects the next eight bits, and so on. For example, the value 1024, or 0x0400, is stored as the following array of two bytes:</p>\n<p>Element</p>\n<p>Byte value</p>\n<table><tbody><tr><td>\n<p>0</p>\n</td><td>\n<p>0x00</p>\n</td></tr><tr><td>\n<p>1</p>\n</td><td>\n<p>0x04</p>\n</td></tr></tbody></table>\n<p>Negative values are written to the array using two's complement representation in the most compact form possible. For example, -1 is represented as a single byte whose value is <strong>0xFF</strong> instead of as an array with multiple elements, such as <strong>0xFF</strong>, <strong>0xFF</strong> or <strong>0xFF</strong>, <strong>0xFF</strong>, <strong>0xFF</strong>, <strong>0xFF</strong>.</p>\n<p>Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref href=\"System.Array.Length\" data-throw-if-not-resolved=\"false\"></xref><strong>- 1</strong>) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set. For example, the value 120 or <strong>0x78</strong> is represented as a single-byte array: <strong>0x78</strong>. However, 128, or <strong>0x80</strong>, is represented as a two-byte array: <strong>0x80</strong>, <strong>0x00</strong>. </p>\n<p>You can round-trip a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by storing it to a byte array and then restoring it using the <xref href=\"System.Numerics.BigInteger.#ctor(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n<p> If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit. For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.</p>\n"
  example:
  - "\n<p>The following example illustrates how some <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> values are represented in byte arrays.</p>System.Numerics.BigInteger.ToByteArray#1"
  syntax:
    content: public byte[] ToByteArray()
    content.vb: Public Function ToByteArray As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>The value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object converted to an array of bytes.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.ToString
  commentId: M:System.Numerics.BigInteger.ToString
  id: ToString
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Numerics.BigInteger.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 152
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.ToString\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value in the \"R\", or round-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture. </p>\n"
  example:
  - "\n<p>The following example displays a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value by using the default <xref href=\"System.Numerics.BigInteger.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. It also displays the string representations of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that results from using some standard format specifiers. The examples are displayed using the formatting conventions of the en-US culture.</p>System.Numerics.BigInteger.ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.BigInteger.ToString(System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.Numerics.BigInteger.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 153
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation by using the specified culture-specific formatting information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value in the \"R\", or round-trip, format by using the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information about the format of the string returned by this method. If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value is formatted using the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of the current culture. The only property of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that controls the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value using the general format specifier is <xref href=\"System.Globalization.NumberFormatInfo.NegativeSign\" data-throw-if-not-resolved=\"false\"></xref>, which defines the character that represents the negative sign.</p>\n<p>The <em>provider</em> parameter can be one of the following:</p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information. </p>\n</li><li>\n<p>The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that supplies formatting information.</p>\n</li><li>\n<p>A custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that supplies formatting information. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example instantiates a custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that defines the tilde (~) as a negative sign. The <xref href=\"System.Numerics.BigInteger.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method then uses the custom <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object to display a negative <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>System.Numeric.BigInteger.ToString#1"
  syntax:
    content: public string ToString(IFormatProvider provider)
    content.vb: Public Function ToString(provider As IFormatProvider) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value in the format specified by the <em>provider</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.ToString(System.String)
  commentId: M:System.Numerics.BigInteger.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Numerics.BigInteger.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 154
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation by using the specified format.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value in a specified format by using a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the conventions of the current culture. If you want to use the \"R\", or round-trip, format or specify a different culture, use the other overloads of the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The <em>format</em> parameter can be any valid standard numeric string, or any combination of custom numeric format strings. If <em>format</em> is equal to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or is <strong>null</strong>, the return value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is formatted with the round-trip format specifier (\"R\"). If <em>format</em> is any other value, the method throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings.</p>\n</li><li>\n<p>For more information about support for formatting in the .NET Framework, see Formatting Types in the .NET Framework.</p>\n</li></ul>\n<p>The format of the returned string is determined by the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture. Depending on the <em>format</em> parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref href=\"System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  example:
  - "\n<p>The following example initializes a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value and displays it by using each standard format string and some custom format strings. </p>System.Numerics.BigInteger.ToString#3"
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A standard or custom numeric format string.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value in the format specified by the <em>format</em> parameter.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid format string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  fullName: System.Numerics.BigInteger.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 155
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation by using the specified format and culture-specific format information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value in a specified format by using the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of a specified culture. If you want to use the round-trip format or default culture settings, use the other overloads of the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The <em>format</em> parameter can be any valid  standard numeric string, or any combination of custom numeric format strings. If <em>format</em> is equal to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> or is <strong>null</strong>, the return value of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> object is formatted with the round-trip format specifier (\"R\"). If <em>format</em> is any other value, the method throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings.</p>\n</li><li>\n<p>For more information about support for formatting in the .NET Framework, see Formatting Types in the .NET Framework.</p>\n</li></ul>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information about the format of the string returned by this method. When the <xref href=\"System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked, it calls the <em>provider</em> parameter's <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method and passes it a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> type. The <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method then returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides information for formatting the <em>value</em> parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the <em>provider</em> parameter to supply formatting information to the <xref href=\"System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method: </p>\n<ul><li>\n<p>You can pass a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information. Its <xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information for that culture.</p>\n</li><li>\n<p>You can pass the actual <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information. (Its implementation of <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> just returns itself.)</p>\n</li><li>\n<p>You can pass a custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method instantiates and returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p>\n</li></ul>\n<p>If <em>provider</em> is <strong>null</strong>, the formatting of the returned string is based on the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of the current culture.</p>\n"
  example:
  - "\n<p>The following example initializes a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value, and displays it to the console using a standard format string and a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that defines the tilde (~) as a negative sign.</p>System.Numerics.BigInteger.ToString#4"
  syntax:
    content: public string ToString(string format, IFormatProvider provider)
    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A standard or custom numeric format string.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the current <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value as specified by the <em>format</em> and <em>provider</em> parameters.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is not a valid format string.</p>\n"
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: TryParse(String, NumberStyles, IFormatProvider, out BigInteger)
  fullName: System.Numerics.BigInteger.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 156
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Tries to convert the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method is like the <xref href=\"System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is invalid and cannot be parsed successfully.</p>\n<p>The <em>style</em> parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the <em>value</em> parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. Depending on the value of <em>style</em>, the <em>value</em> parameter may include the following elements: </p>\n<p>[ws][$][sign][digits,]digits[.fractional_digits][E[sign]exponential_digits][ws] </p>\n<p>If the <em>style</em> parameter includes <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>, the <em>value</em> parameter may include the following elements:</p>\n<p>[ws]hexdigits[ws]</p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. White space can appear at the start of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag, or at the end of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method of the <em>provider</em> parameter. The currency symbol can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. The sign can appear at the start of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>value</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of digits from 0 through 9.</p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific group separator. The group separator of the culture specified by <em>provider</em> can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. The decimal point symbol of the culture specified by <em>provider</em> can appear in <em>value</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>fractional_digits</p>\n</td><td>\n<p>One or more occurrences of the digit 0. Fractional digits can appear in <em>value</em> only if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>E</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The <em>value</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>exponential_digits</p>\n</td><td>\n<p>A sequence of digits from 0 through 9. The <em>value</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>hexdigits</p>\n</td><td>\n<p>A sequence of hexadecimal digits from 0 through f, or 0 through F. </p>\n</td></tr></tbody></table>\n<p>A string with decimal digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> flag) always parses successfully. Most of the remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members affect the elements that may be present in <em>value</em>.</p>\n<p>Non-composite <strong>NumberStyles</strong> values</p>\n<p>Elements permitted in value in addition to digits</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Decimal digits only.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The decimal point (.) and fractional_digits elements. However, fractional_digits must consist of only one or more 0 digits, or the method returns <strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates exponential notation, along with exponential_digits. If <em>value</em> represents a number in exponential notation, it cannot have a non-zero, fractional component.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the start of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the end of <em>value</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element before digits. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element after digits. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element in the form of parentheses enclosing the numeric value.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The group separator (,) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The currency ($) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>value</em> cannot represent a hexadecimal number or a number in exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the start or end of <em>value</em>, sign at the start of <em>value</em>, and the decimal point (.) symbol. The <em>value</em> parameter can also use exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws, sign, group separator (,), and decimal point (.) elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>value</em> cannot represent a hexadecimal number.</p>\n</td></tr></tbody></table>\n<p>If you use the <see cref=\"Overload:System.Numerics.BigInteger.TryParse\"></see> method to round-trip the string representation of a <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value that was output by the <see cref=\"Overload:System.Numerics.BigInteger.ToString\"></see> method, you should use the <xref href=\"System.Numerics.BigInteger.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the \"R\" format specifier to generate the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value. Otherwise, the string representation of the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <see cref=\"Overload:System.Numerics.BigInteger.TryParse\"></see> method to restore the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>If the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> flag is used, <em>value</em> must be a hexadecimal value. The only other flags that can be present in <em>style</em> are <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>. (The <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration has a composite style, <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>, that includes both white-space flags.) </p>\n<p>If <em>value</em> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <strong>0x</strong> or <strong>&h</strong>) that differentiates it as a hexadecimal number. This causes the conversion to fail.</p>\n<p>If <em>value</em> is a hexadecimal string, the <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method interprets <em>value</em> as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to <strong>0x80</strong>. In other words, the method interprets the highest-order bit of the first byte in <em>value</em> as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <em>value</em> must have a value of zero. For example, the method interprets <strong>0x80</strong> as a negative value, but it interprets either <strong>0x080</strong> or <strong>0x0080</strong> as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.</p>System.Numerics.BigInteger.TryParse#1<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information about the format of <em>value</em>. The <em>provider</em> parameter can be any one of the following:</p><ul><li><p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information. Its <xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information for that culture.</p></li><li><p>A <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information. (Its implementation of <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> just returns itself.)</p></li><li><p>A custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method instantiates and returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p></li></ul><p>If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture is used.</p>"
  example:
  - "\n<p>The following example makes some calls to the <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method using various combinations of values for the <em>style</em> and <em>provider</em> parameters. </p>System.Numerics.BigInteger.TryParse#2<p>A number of the individual calls to the <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method pass an instance of the following <code>BigIntegerFormatProvider</code> class, which defines a tilde (~) as the negative sign.</p>System.Numerics.BigInteger.TryParse#3"
  syntax:
    content: public static bool TryParse(string value, NumberStyles style, IFormatProvider provider, out BigInteger result)
    content.vb: Public Shared Function TryParse(value As String, style As NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string representation of a number. The string is interpreted using the style specified by <em>style</em>.</p>\n"
    - id: style
      type: System.Globalization.NumberStyles
      description: "\n<p>A bitwise combination of enumeration values that indicates the style elements that can be present in <em>value</em>. A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Integer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information about <em>value</em>.</p>\n"
    - id: result
      type: System.Numerics.BigInteger
      description: "\n<p>When this method returns, contains the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent to the number that is contained in <em>value</em>, or <xref href=\"System.Numerics.BigInteger.Zero\" data-throw-if-not-resolved=\"false\"></xref> if the conversion failed. The conversion fails if the <em>value</em> parameter is <strong>null</strong> or is not in a format that is compliant with <em>style</em>. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref> flag along with another value. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Numerics.BigInteger)
  name.vb: TryParse(String, NumberStyles, IFormatProvider, ByRef BigInteger)
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  id: TryParse(System.String,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: TryParse(String, out BigInteger)
  fullName: System.Numerics.BigInteger.TryParse(System.String, out System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 157
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: "\n<p>Tries to convert the string representation of a number to its <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method is like the <xref href=\"System.Numerics.BigInteger.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> if <em>value</em> is invalid and cannot be successfully parsed.</p>\n<p>The <em>value</em> parameter should be the string representation of a decimal number in the following form:</p>\n<p>[ws][sign]digits[ws]</p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. Valid sign characters are determined by the <xref href=\"System.Globalization.NumberFormatInfo.NegativeSign\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.PositiveSign\" data-throw-if-not-resolved=\"false\"></xref> properties of the current culture.</p>\n</td></tr><tr><td>\n<p>digits</p>\n</td><td>\n<p>A sequence of decimal digits ranging from 0 to 9.</p>\n</td></tr></tbody></table>\n<p>The string specified by the <em>value</em> parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion. </p>\n<p>The <em>value</em> parameter is interpreted by using the <xref href=\"System.Globalization.NumberStyles.Integer\" data-throw-if-not-resolved=\"false\"></xref> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in <em>value</em>, call the <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <em>value</em> parameter is parsed by using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture. For more information, see <xref href=\"System.Globalization.NumberFormatInfo.CurrentInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This overload interprets all digits in the <em>value</em> parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> overload instead. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate two <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> objects. If the conversions succeed, it multiplies each object by another number and then calls the <xref href=\"System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the relationship between the two objects. </p>System.Numeric.BigInteger.TryParse#1"
  syntax:
    content: public static bool TryParse(string value, out BigInteger result)
    content.vb: Public Shared Function TryParse(value As String, ByRef result As BigInteger) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string representation of a number.</p>\n"
    - id: result
      type: System.Numerics.BigInteger
      description: "\n<p>When this method returns, contains the <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref> equivalent to the number that is contained in <em>value</em>, or zero (0) if the conversion fails. The conversion fails if the <em>value</em> parameter is <strong>null</strong> or is not of the correct format. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Numerics.BigInteger.ToString(System.String)
    commentId: M:System.Numerics.BigInteger.ToString(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.TryParse(System.String, ByRef System.Numerics.BigInteger)
  name.vb: TryParse(String, ByRef BigInteger)
references:
- uid: System.Numerics
  isExternal: false
  name: System.Numerics
  fullName: System.Numerics
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Numerics.BigInteger}
  parent: System
  definition: System.IComparable`1
  name: IComparable<BigInteger>
  fullName: System.IComparable<System.Numerics.BigInteger>
  fullname.vb: System.IComparable(Of System.Numerics.BigInteger)
  name.vb: IComparable(Of BigInteger)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
- uid: System.IEquatable{System.Numerics.BigInteger}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<BigInteger>
  fullName: System.IEquatable<System.Numerics.BigInteger>
  fullname.vb: System.IEquatable(Of System.Numerics.BigInteger)
  name.vb: IEquatable(Of BigInteger)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: false
  name: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.IComparable{System.Numerics.BigInteger}.CompareTo(System.Numerics.BigInteger)
  parent: System.IComparable{System.Numerics.BigInteger}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(BigInteger)
  fullName: System.IComparable<System.Numerics.BigInteger>.CompareTo(System.Numerics.BigInteger)
  fullname.vb: System.IComparable(Of System.Numerics.BigInteger).CompareTo(System.Numerics.BigInteger)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.Numerics.BigInteger>.CompareTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.Numerics.BigInteger).CompareTo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable{System.Numerics.BigInteger}.Equals(System.Numerics.BigInteger)
  parent: System.IEquatable{System.Numerics.BigInteger}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(BigInteger)
  fullName: System.IEquatable<System.Numerics.BigInteger>.Equals(System.Numerics.BigInteger)
  fullname.vb: System.IEquatable(Of System.Numerics.BigInteger).Equals(System.Numerics.BigInteger)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Numerics.BigInteger>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Numerics.BigInteger).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.DivideByZeroException
  isExternal: false
  name: DivideByZeroException
  fullName: System.DivideByZeroException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
