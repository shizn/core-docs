items:
- uid: System.IO.File
  commentId: T:System.IO.File
  id: File
  parent: System.IO
  children:
  - System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - System.IO.File.AppendAllText(System.String,System.String)
  - System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  - System.IO.File.AppendText(System.String)
  - System.IO.File.Copy(System.String,System.String)
  - System.IO.File.Copy(System.String,System.String,System.Boolean)
  - System.IO.File.Create(System.String)
  - System.IO.File.Create(System.String,System.Int32)
  - System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  - System.IO.File.CreateText(System.String)
  - System.IO.File.Delete(System.String)
  - System.IO.File.Exists(System.String)
  - System.IO.File.GetAttributes(System.String)
  - System.IO.File.GetCreationTime(System.String)
  - System.IO.File.GetCreationTimeUtc(System.String)
  - System.IO.File.GetLastAccessTime(System.String)
  - System.IO.File.GetLastAccessTimeUtc(System.String)
  - System.IO.File.GetLastWriteTime(System.String)
  - System.IO.File.GetLastWriteTimeUtc(System.String)
  - System.IO.File.Move(System.String,System.String)
  - System.IO.File.Open(System.String,System.IO.FileMode)
  - System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.File.OpenRead(System.String)
  - System.IO.File.OpenText(System.String)
  - System.IO.File.OpenWrite(System.String)
  - System.IO.File.ReadAllBytes(System.String)
  - System.IO.File.ReadAllLines(System.String)
  - System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  - System.IO.File.ReadAllText(System.String)
  - System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  - System.IO.File.ReadLines(System.String)
  - System.IO.File.ReadLines(System.String,System.Text.Encoding)
  - System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  - System.IO.File.SetCreationTime(System.String,System.DateTime)
  - System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  - System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  - System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  - System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  - System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  - System.IO.File.WriteAllBytes(System.String,System.Byte[])
  - System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - System.IO.File.WriteAllText(System.String,System.String)
  - System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  langs:
  - csharp
  - vb
  name: File
  fullName: System.IO.File
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: File
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 35
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>Use the <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> class for typical operations such as copying, moving, renaming, creating, opening, deleting, and appending to a single file at a time. You can also use the <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> class to get and set file attributes or <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> information related to the creation, access, and writing of a file. If you want to perform operations on multiple files, see <xref href=\"System.IO.Directory.GetFiles(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Many of the <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> methods return other I/O types when you create or open files. You can use these other types to further manipulate a file. For more information, see specific <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> members such as <xref href=\"System.IO.File.OpenText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.File.CreateText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.File.Create(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Because all <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> methods are static, it might be more efficient to use a <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> method rather than a corresponding <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> instance method if you want to perform only one action. All <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> methods require the path to the file that you are manipulating.</p>\n<p>The static methods of the <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> instead, because the security check will not always be necessary.</p>\n<p>By default, full read/write access to new files is granted to all users.</p>\n<p>The following table describes the enumerations that are used to customize the behavior of various <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>Enumeration </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies read and write access to a file. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies the level of access permitted for a file that is already in use. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies whether the contents of an existing file are preserved or overwritten, and whether requests to create an existing file cause an exception. </p>\n</td></tr></tbody></table>\n<p>In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.</p>\n<p>In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths: </p>\n<ul><li>\n<p>\"c:\\\\MyDir\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.</p>\n</li><li>\n<p>\"c:\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.</p>\n</li><li>\n<p>\"MyDir\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.</p>\n</li><li>\n<p>\"\\\\\\\\MyServer\\\\MyShare\" in C#, or \"\\\\MyServer\\MyShare\" in Visual Basic.</p>\n</li></ul>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> class to check whether a file exists, and depending on the result, either create a new file and write to it, or open the existing file and read from it. Before running the code, create a c:\\temp folder.</p>File Class Example#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public class File
    content.vb: >-
      <ComVisible(True)>

      Public Class File
  seealso:
  - type: System.IO.DriveInfo
    commentId: T:System.IO.DriveInfo
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: AppendAllLines(String, IEnumerable<String>)
  fullName: System.IO.File.AppendAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendAllLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 983
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</p>\n"
  remarks: "\n<p>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the <em>path</em> parameter must contain existing directories.</p>\n"
  example:
  - "\n<p>The following example writes selected lines from a sample data file to a file, and then appends more lines. The directory named <strong>temp</strong> on drive C must exist for the example to complete successfully.</p>System.IO.File.WriteAllAppendAll#1"
  syntax:
    content: public static void AppendAllLines(string path, IEnumerable<string> contents)
    content.vb: Public Shared Sub AppendAllLines(path As String, contents As IEnumerable(Of String))
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Either<em> path </em>or <em>contents</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>path</em> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified by <em>path</em> was not found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have permission to write to the file.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specifies a file that is read-only.</p>\n<p>-or-</p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or-</p>\n<p>\n<em>path</em> is a directory.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IO.File.AppendAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AppendAllLines(String, IEnumerable(Of String))
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  commentId: M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: AppendAllLines(String, IEnumerable<String>, Encoding)
  fullName: System.IO.File.AppendAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendAllLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 996
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</p>\n"
  remarks: "\n<p>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the <em>path</em> parameter must contain existing directories.</p>\n<p>You can use this method to create a file that contains the following:</p>\n<ul><li>\n<p>The results of a LINQ to Objects query on the lines of a file, as obtained by using the <see cref=\"Overload:System.IO.File.ReadLines\"></see> method.</p>\n</li><li>\n<p>The contents of a collection that implements an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of strings. </p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public static void AppendAllLines(string path, IEnumerable<string> contents, Encoding encoding)
    content.vb: Public Shared Sub AppendAllLines(path As String, contents As IEnumerable(Of String), encoding As Encoding)
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: encoding
      type: System.Text.Encoding
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Either<em> path</em>, <em>contents</em>, or <em>encoding</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>path</em> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified by <em>path</em> was not found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specifies a file that is read-only.</p>\n<p>-or-</p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or-</p>\n<p>\n<em>path</em> is a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IO.File.AppendAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Text.Encoding)
  name.vb: AppendAllLines(String, IEnumerable(Of String), Encoding)
- uid: System.IO.File.AppendAllText(System.String,System.String)
  commentId: M:System.IO.File.AppendAllText(System.String,System.String)
  id: AppendAllText(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: AppendAllText(String, String)
  fullName: System.IO.File.AppendAllText(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendAllText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 949
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</p>\n"
  remarks: "\n<p>Given a string and a file path, this method opens the specified file, appends the string to the end of the file, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</p>\n<p>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the <em>path</em> parameter must contain existing directories.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.AppendAllText(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to add extra text to the end of a file. In this example, a file is created if it doesn't already exist, and text is added to it. However, the directory named <strong>temp</strong> on drive C must exist for the example to complete successfully.</p>System.IO.File.AllText#00"
  syntax:
    content: public static void AppendAllText(string path, string contents)
    content.vb: Public Shared Sub AppendAllText(path As String, contents As String)
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  commentId: M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  id: AppendAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: AppendAllText(String, String, Encoding)
  fullName: System.IO.File.AppendAllText(System.String, System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendAllText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 960
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Appends the specified string to the file, creating the file if it does not already exist.</p>\n"
  remarks: "\n<p>Given a string and a file path, this method opens the specified file, appends the string to the end of the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</p>\n<p>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the <em>path</em> parameter must contain existing directories.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method to add extra text to the end of a file. In this example, a file is created if it doesn't already exist, and text is added to it. However, the directory named <strong>temp</strong> on drive C must exist for the example to complete successfully.</p>System.IO.File.AllText_Encoding#00"
  syntax:
    content: public static void AppendAllText(string path, string contents, Encoding encoding)
    content.vb: Public Shared Sub AppendAllText(path As String, contents As String, encoding As Encoding)
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.String
    - id: encoding
      type: System.Text.Encoding
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.AppendText(System.String)
  commentId: M:System.IO.File.AppendText(System.String)
  id: AppendText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: AppendText(String)
  fullName: System.IO.File.AppendText(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 56
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</p>\n"
  remarks: "\n<p>This method is equivalent to the <xref href=\"System.IO.StreamWriter.#ctor(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload. If the file specified by <em>path</em> does not exist, it is created. If the file does exist, write operations to the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> append text to the file. Additional threads are permitted to read the file while it is open.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <em>path</em> parameter is not case-sensitive.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example appends text to a file. The method creates a new file if the file doesn’t exist. However, the directory named <strong>temp</strong> on drive C must exist for the example to complete successfully.</p>File_AppendText#1"
  syntax:
    content: public static StreamWriter AppendText(string path)
    content.vb: Public Shared Function AppendText(path As String) As StreamWriter
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.StreamWriter
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Copy(System.String,System.String)
  commentId: M:System.IO.File.Copy(System.String,System.String)
  id: Copy(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Copy(String, String)
  fullName: System.IO.File.Copy(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 74
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</p>\n"
  remarks: "\n<p>This method is equivalent to the <xref href=\"System.IO.File.Copy(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>  method overload with the <em>overwrite</em> parameter set to <strong>false</strong>.</p>\n<p>The <em>sourceFileName</em> and <em>destFileName</em> parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see the <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref> method. This method does not support wildcard characters in the parameters.</p>\n<p>The attributes of the original file are retained in the copied file.</p>\n"
  example:
  - "\n<p>The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <see cref=\"Overload:System.IO.File.Copy\"></see> method as follows:</p>\n<ul><li>\n<p>It first uses the <xref href=\"System.IO.File.Copy(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>method overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied. </p>\n</li><li>\n<p>It then uses the <xref href=\"System.IO.File.Copy(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied.</p>\n</li></ul>FileCopyDelete#1"
  syntax:
    content: public static void Copy(string sourceFileName, string destFileName)
    content.vb: Public Shared Sub Copy(sourceFileName As String, destFileName As String)
    parameters:
    - id: sourceFileName
      type: System.String
    - id: destFileName
      type: System.String
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> specifies a directory. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path specified in <em>sourceFileName</em> or <em>destFileName</em> is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>sourceFileName</em> was not found. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>destFileName</em> exists.</p>\n<p>-or- </p>\n<p>An I/O error has occurred. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.Directory.Move(System.String,System.String)
    commentId: M:System.IO.Directory.Move(System.String,System.String)
  - type: System.IO.File.Move(System.String,System.String)
    commentId: M:System.IO.File.Move(System.String,System.String)
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Copy(System.String,System.String,System.Boolean)
  commentId: M:System.IO.File.Copy(System.String,System.String,System.Boolean)
  id: Copy(System.String,System.String,System.Boolean)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Copy(String, String, Boolean)
  fullName: System.IO.File.Copy(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 97
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</p>\n"
  remarks: "\n<p>The <em>sourceFileName</em> and <em>destFileName</em> parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. This method does not support wildcard characters in the parameters.</p>\n<p>The attributes of the original file are retained in the copied file.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <see cref=\"Overload:System.IO.File.Copy\"></see> method as follows:</p>\n<ul><li>\n<p>It first uses the <xref href=\"System.IO.File.Copy(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied. </p>\n</li></ul>\n<p>It then uses the <xref href=\"System.IO.File.Copy(System.String,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied. </p>FileCopyDelete#1"
  syntax:
    content: public static void Copy(string sourceFileName, string destFileName, bool overwrite)
    content.vb: Public Shared Sub Copy(sourceFileName As String, destFileName As String, overwrite As Boolean)
    parameters:
    - id: sourceFileName
      type: System.String
    - id: destFileName
      type: System.String
    - id: overwrite
      type: System.Boolean
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n<p>-or-</p>\n<p>\n<em>destFileName</em> is read-only.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> specifies a directory. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path specified in <em>sourceFileName</em> or <em>destFileName</em> is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>sourceFileName</em> was not found. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>destFileName</em> exists and <em>overwrite</em> is <strong>false</strong>.</p>\n<p>-or- </p>\n<p>An I/O error has occurred. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.Directory.Move(System.String,System.String)
    commentId: M:System.IO.Directory.Move(System.String,System.String)
  - type: System.IO.File.Move(System.String,System.String)
    commentId: M:System.IO.File.Move(System.String,System.String)
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Create(System.String)
  commentId: M:System.IO.File.Create(System.String)
  id: Create(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Create(String)
  fullName: System.IO.File.Create(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 187
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates or overwrites a file in the specified path.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object created by this method has a default <xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.FileShare.None\" data-throw-if-not-resolved=\"false\"></xref>; no other process or code can access the created file until the original file handle is closed.</p>\n<p>This method is equivalent to the <xref href=\"System.IO.File.Create(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload using the default buffer size.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.</p>\n<p>By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example creates a file in the specified path, writes some information to the file, and reads from the file.</p>File Create1#1"
  syntax:
    content: public static FileStream Create(string path)
    content.vb: Public Shared Function Create(path As String) As FileStream
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a file that is read-only. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while creating the file. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Create(System.String,System.Int32)
  commentId: M:System.IO.File.Create(System.String,System.Int32)
  id: Create(System.String,System.Int32)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Create(String, Int32)
  fullName: System.IO.File.Create(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 199
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates or overwrites the specified file.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object created by this method has a default <xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.FileShare.None\" data-throw-if-not-resolved=\"false\"></xref>; no other process or code can access the created file until the original file handle is closed.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is equivalent to the <xref href=\"System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.</p>\n<p>By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example creates a file with the specified buffer size.</p>File Create2#1"
  syntax:
    content: public static FileStream Create(string path, int bufferSize)
    content.vb: Public Shared Function Create(path As String, bufferSize As Integer) As FileStream
    parameters:
    - id: path
      type: System.String
    - id: bufferSize
      type: System.Int32
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a file that is read-only. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while creating the file. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  commentId: M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  id: Create(System.String,System.Int32,System.IO.FileOptions)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Create(String, Int32, FileOptions)
  fullName: System.IO.File.Create(System.String, System.Int32, System.IO.FileOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 203
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates or overwrites the specified file, specifying a buffer size and a <xref href=\"System.IO.FileOptions\" data-throw-if-not-resolved=\"false\"></xref> value that describes how to create or overwrite the file.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is equivalent to the <xref href=\"System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.</p>\n<p>By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - 
  syntax:
    content: public static FileStream Create(string path, int bufferSize, FileOptions options)
    content.vb: Public Shared Function Create(path As String, bufferSize As Integer, options As FileOptions) As FileStream
    parameters:
    - id: path
      type: System.String
    - id: bufferSize
      type: System.Int32
    - id: options
      type: System.IO.FileOptions
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a file that is read-only. </p>\n<p>-or-</p>\n<p>\n<xref href=\"System.IO.FileOptions.Encrypted\" data-throw-if-not-resolved=\"false\"></xref> is specified for <em>options</em> and file encryption is not supported on the current platform.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while creating the file. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a file that is read-only. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a file that is read-only. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.CreateText(System.String)
  commentId: M:System.IO.File.CreateText(System.String)
  id: CreateText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: CreateText(String)
  fullName: System.IO.File.CreateText(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 48
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates or opens a file for writing UTF-8 encoded text.</p>\n"
  remarks: "\n<p>This method is equivalent to the <xref href=\"System.IO.StreamWriter.#ctor(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload with the <em>append</em> parameter set to <strong>false</strong>. If the file specified by <em>path</em> does not exist, it is created. If the file does exist, its contents are overwritten. Additional threads are permitted to read the file while it is open.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example creates a file for text writing and reading.</p>File CreateText#1"
  syntax:
    content: public static StreamWriter CreateText(string path)
    content.vb: Public Shared Function CreateText(path As String) As StreamWriter
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.StreamWriter
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Delete(System.String)
  commentId: M:System.IO.File.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Delete(String)
  fullName: System.IO.File.Delete(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delete
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 224
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Deletes the specified file. </p>\n"
  remarks: "\n<p>Specify a file name with any relative or absolute path information for the <em>path</em> parameter. Wildcard characters cannot be included. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the file to be deleted does not exist, no exception is thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example copies groups of files to the C:\\archives\\2008 backup folder and then deletes them from the source folder.</p>FileCopyDelete#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void Delete(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub Delete(path As String)
    parameters:
    - id: path
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The specified file is in use. </p>\n<p>-or-</p>\n<p>There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n<p>-or- </p>\n<p>The file is an executable file that is in use.</p>\n<p>-or- </p>\n<p>\n<em>path</em> is a directory.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a read-only file. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Exists(System.String)
  commentId: M:System.IO.File.Exists(System.String)
  id: Exists(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Exists(String)
  fullName: System.IO.File.Exists(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 325
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Determines whether the specified file exists.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method should not be used for path validation, this method merely checks if the file specified in <em>path</em> exists. Passing an invalid path to <xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. To check whether the path contains any invalid characters, you can call the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the characters that are invalid for the file system. You can also create a regular expression to test the whether the path is valid for your environment. For examples of acceptable paths, see <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To check if a directory exists, see <xref href=\"System.IO.Directory.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Be aware that another process can potentially do something with the file in between the time you call the <xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and perform another operation on the file, such as <xref href=\"System.IO.File.Delete(System.String)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>path</em> describes a directory, this method returns <strong>false</strong>. Trailing spaces are removed from the <em>path</em> parameter before determining if the file exists.</p>\n<p>The <xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong> if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</p>\n"
  example:
  - "\n<p>The following example determines if a file exists.</p>File Exists#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool Exists(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Exists(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Boolean
  seealso:
  - type: System.IO.Directory.Exists(System.String)
    commentId: M:System.IO.Directory.Exists(System.String)
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.GetAttributes(System.String)
  commentId: M:System.IO.File.GetAttributes(System.String)
  id: GetAttributes(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: GetAttributes(String)
  fullName: System.IO.File.GetAttributes(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAttributes
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 564
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the <xref href=\"System.IO.FileAttributes\" data-throw-if-not-resolved=\"false\"></xref> of the file on the path.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <strong>GetAttributes</strong> and <strong>SetAttributes</strong> methods by applying the <strong>Archive</strong> and <strong>Hidden</strong> attributes to a file.</p>File GetAttributes#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static FileAttributes GetAttributes(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetAttributes(path As String) As FileAttributes
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.FileAttributes
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>path</em> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>path</em> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>This file is being used by another process.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.GetCreationTime(System.String)
  commentId: M:System.IO.File.GetCreationTime(System.String)
  id: GetCreationTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: GetCreationTime(String)
  fullName: System.IO.File.GetCreationTime(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCreationTime
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 419
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the creation date and time of the specified file or directory.</p>\n"
  remarks: "\n<p>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the file described in the <em>path</em> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</p>\n<p>NTFS-formatted drives may cache information about a file, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates <strong>GetCreationTime</strong>.</p>System.IO.File.GetCreationTime#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static DateTime GetCreationTime(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetCreationTime(path As String) As Date
    parameters:
    - id: path
      type: System.String
    return:
      type: System.DateTime
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.GetCreationTimeUtc(System.String)
  commentId: M:System.IO.File.GetCreationTimeUtc(System.String)
  id: GetCreationTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: GetCreationTimeUtc(String)
  fullName: System.IO.File.GetCreationTimeUtc(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCreationTimeUtc
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 425
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</p>\n"
  remarks: "\n<p>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>If the file described in the <em>path</em> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).</p>\n<p>NTFS-formatted drives may cache information about a file, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.IO.File.GetCreationTimeUtc(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.File.GetCreationTime#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static DateTime GetCreationTimeUtc(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetCreationTimeUtc(path As String) As Date
    parameters:
    - id: path
      type: System.String
    return:
      type: System.DateTime
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.GetLastAccessTime(System.String)
  commentId: M:System.IO.File.GetLastAccessTime(System.String)
  id: GetLastAccessTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: GetLastAccessTime(String)
  fullName: System.IO.File.GetLastAccessTime(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetLastAccessTime
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 474
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the date and time the specified file or directory was last accessed.</p>\n"
  remarks: "\n<p>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>If the file described in the <em>path</em> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates <strong>GetLastAccessTime</strong>.</p>File GetLastAccess#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static DateTime GetLastAccessTime(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetLastAccessTime(path As String) As Date
    parameters:
    - id: path
      type: System.String
    return:
      type: System.DateTime
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.GetLastAccessTimeUtc(System.String)
  commentId: M:System.IO.File.GetLastAccessTimeUtc(System.String)
  id: GetLastAccessTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: GetLastAccessTimeUtc(String)
  fullName: System.IO.File.GetLastAccessTimeUtc(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetLastAccessTimeUtc
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 480
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</p>\n"
  remarks: "\n<p>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>If the file described in the <em>path</em> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static DateTime GetLastAccessTimeUtc(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetLastAccessTimeUtc(path As String) As Date
    parameters:
    - id: path
      type: System.String
    return:
      type: System.DateTime
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.GetLastWriteTime(System.String)
  commentId: M:System.IO.File.GetLastWriteTime(System.String)
  id: GetLastWriteTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: GetLastWriteTime(String)
  fullName: System.IO.File.GetLastWriteTime(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetLastWriteTime
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 529
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the date and time the specified file or directory was last written to.</p>\n"
  remarks: "\n<p>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. Each operating system manages the last write time according to its own rules. To improve performance, an operating system might not set the last write time value to the exact time of the last write operation, but might set it to a close approximation instead.</p>\n<p>If the file described in the <em>path</em> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates <strong>GetLastWriteTime</strong>.</p>File GetLastWrite#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static DateTime GetLastWriteTime(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetLastWriteTime(path As String) As Date
    parameters:
    - id: path
      type: System.String
    return:
      type: System.DateTime
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.GetLastWriteTimeUtc(System.String)
  commentId: M:System.IO.File.GetLastWriteTimeUtc(System.String)
  id: GetLastWriteTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: GetLastWriteTimeUtc(String)
  fullName: System.IO.File.GetLastWriteTimeUtc(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetLastWriteTimeUtc
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 535
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</p>\n"
  remarks: "\n<p>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. Each operating system manages the last write time according to its own rules. To improve performance, an operating system might not set the last write time value to the exact time of the last write operation, but might set it to a close approximation instead. </p>\n<p>If the file described in the <em>path</em> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static DateTime GetLastWriteTimeUtc(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetLastWriteTimeUtc(path As String) As Date
    parameters:
    - id: path
      type: System.String
    return:
      type: System.DateTime
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Move(System.String,System.String)
  commentId: M:System.IO.File.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Move(String, String)
  fullName: System.IO.File.Move(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Move
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 1019
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\n"
  remarks: "\n<p>This method works across disk volumes, and it does not throw an exception if the source and destination are the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>. You cannot use the Move method to overwrite an existing file.</p>\n<p>The <em>sourceFileName</em> and <em>destFileName</em> arguments can include relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If you try to move a file across disk volumes and that file is in use, the file is copied to the destination, but it is not deleted from the source.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example moves a file.</p>File Move#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void Move(string sourceFileName, string destFileName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub Move(sourceFileName As String, destFileName As String)
    parameters:
    - id: sourceFileName
      type: System.String
    - id: destFileName
      type: System.String
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The destination file already exists.</p>\n<p>-or-</p>\n<p>\n<em>sourceFileName</em> was not found. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is a zero-length string, contains only white space, or contains invalid characters as defined in <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path specified in <em>sourceFileName</em> or <em>destFileName</em> is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>sourceFileName</em> or <em>destFileName</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Open(System.String,System.IO.FileMode)
  commentId: M:System.IO.File.Open(System.String,System.IO.FileMode)
  id: Open(System.String,System.IO.FileMode)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Open(String, FileMode)
  fullName: System.IO.File.Open(System.String, System.IO.FileMode)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Open
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 387
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> on the specified path with read/write access.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example creates a temporary file and writes some text to it. The example then opens the file, using T:System.IO.FileMode.Open; that is, if the file did not already exist, it would not be created.</p>File Open1#1"
  syntax:
    content: public static FileStream Open(string path, FileMode mode)
    content.vb: Public Shared Function Open(path As String, mode As FileMode) As FileStream
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.FileMode.Create\" data-throw-if-not-resolved=\"false\"></xref> and the specified file is a hidden file.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> specified an invalid value. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  commentId: M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Open(String, FileMode, FileAccess)
  fullName: System.IO.File.Open(System.String, System.IO.FileMode, System.IO.FileAccess)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Open
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 391
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> on the specified path, with the specified mode and access.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example opens a file with read-only access.</p>file open2#1"
  syntax:
    content: public static FileStream Open(string path, FileMode mode, FileAccess access)
    content.vb: Public Shared Function Open(path As String, mode As FileMode, access As FileAccess) As FileStream
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>access</em> specified <strong>Read</strong> and <em>mode</em> specified <strong>Create</strong>, <strong>CreateNew</strong>, <strong>Truncate</strong>, or <strong>Append</strong>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only and <em>access</em> is not <strong>Read</strong>.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.FileMode.Create\" data-throw-if-not-resolved=\"false\"></xref> and the specified file is a hidden file.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> or <em>access</em> specified an invalid value. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  commentId: M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: Open(String, FileMode, FileAccess, FileShare)
  fullName: System.IO.File.Open(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Open
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 395
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example opens a file with read-only access and with file sharing disallowed.</p>file open3#1"
  syntax:
    content: public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share)
    content.vb: Public Shared Function Open(path As String, mode As FileMode, access As FileAccess, share As FileShare) As FileStream
    parameters:
    - id: path
      type: System.String
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    - id: share
      type: System.IO.FileShare
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>access</em> specified <strong>Read</strong> and <em>mode</em> specified <strong>Create</strong>, <strong>CreateNew</strong>, <strong>Truncate</strong>, or <strong>Append</strong>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only and <em>access</em> is not <strong>Read</strong>.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.FileMode.Create\" data-throw-if-not-resolved=\"false\"></xref> and the specified file is a hidden file.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em>, <em>access</em>, or <em>share</em> specified an invalid value. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.OpenRead(System.String)
  commentId: M:System.IO.File.OpenRead(System.String)
  id: OpenRead(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: OpenRead(String)
  fullName: System.IO.File.OpenRead(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenRead
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 628
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens an existing file for reading.</p>\n"
  remarks: "\n<p>This method is equivalent to the <xref href=\"System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload with a <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.FileMode.Open\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.FileAccess.Read\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.FileShare.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example opens a file for reading.</p>file openread#1"
  syntax:
    content: public static FileStream OpenRead(string path)
    content.vb: Public Shared Function OpenRead(path As String) As FileStream
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.OpenText(System.String)
  commentId: M:System.IO.File.OpenText(System.String)
  id: OpenText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: OpenText(String)
  fullName: System.IO.File.OpenText(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 40
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens an existing UTF-8 encoded text file for reading.</p>\n"
  remarks: "\n<p>This method is equivalent to the <xref href=\"System.IO.StreamReader.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload.</p>\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example opens a text file for reading.</p>file opentext#1"
  syntax:
    content: public static StreamReader OpenText(string path)
    content.vb: Public Shared Function OpenText(path As String) As StreamReader
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.StreamReader
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.OpenWrite(System.String)
  commentId: M:System.IO.File.OpenWrite(System.String)
  id: OpenWrite(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: OpenWrite(String)
  fullName: System.IO.File.OpenWrite(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenWrite
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 633
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens an existing file or creates a new file for writing.</p>\n"
  remarks: "\n<p>This method is equivalent to the <xref href=\"System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\" data-throw-if-not-resolved=\"false\"></xref> constructor overload with file mode set to <xref href=\"System.IO.FileMode.OpenOrCreate\" data-throw-if-not-resolved=\"false\"></xref>, the access set to <xref href=\"System.IO.FileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref>, and the share mode set to <xref href=\"System.IO.FileShare.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.IO.File.OpenWrite(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method opens a file if one already exists for the file path, or creates a new file if one does not exist. For an existing file, it does not append the new text to the existing text. Instead, it overwrites the existing characters with the new characters. If you overwrite a longer string (such as “This is a test of the OpenWrite method”) with a shorter string (such as “Second run”), the file will contain a mix of the strings (“Second runtest of the OpenWrite method”).</p>\n<p>The <em>path</em> parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, use the <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example opens a file for reading and writing.</p>file openwrite#1"
  syntax:
    content: public static FileStream OpenWrite(string path)
    content.vb: Public Shared Function OpenWrite(path As String) As FileStream
    parameters:
    - id: path
      type: System.String
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a read-only file or directory. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.ReadAllBytes(System.String)
  commentId: M:System.IO.File.ReadAllBytes(System.String)
  id: ReadAllBytes(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: ReadAllBytes(String)
  fullName: System.IO.File.ReadAllBytes(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAllBytes
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 736
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</p>\n"
  remarks: "\n<p>Given a file path, this method opens the file, reads the contents of the file into a byte array, and then closes the file.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static byte[] ReadAllBytes(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ReadAllBytes(path As String) As Byte()
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.ReadAllLines(System.String)
  commentId: M:System.IO.File.ReadAllLines(System.String)
  id: ReadAllLines(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: ReadAllLines(String)
  fullName: System.IO.File.ReadAllLines(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAllLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 815
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a text file, reads all lines of the file, and then closes the file.</p>\n"
  remarks: "\n<p>This method opens a file, reads each line of the file, then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.</p>\n<p>This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.ReadAllLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.</p>System.IO.File.AllLines#00"
  syntax:
    content: public static string[] ReadAllLines(string path)
    content.vb: Public Shared Function ReadAllLines(path As String) As String()
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  commentId: M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  id: ReadAllLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: ReadAllLines(String, Encoding)
  fullName: System.IO.File.ReadAllLines(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAllLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 826
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</p>\n"
  remarks: "\n<p>This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.</p>\n<p>This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.ReadAllLines(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.</p>System.IO.File.AllLines_Encoding#00"
  syntax:
    content: public static string[] ReadAllLines(string path, Encoding encoding)
    content.vb: Public Shared Function ReadAllLines(path As String, encoding As Encoding) As String()
    parameters:
    - id: path
      type: System.String
    - id: encoding
      type: System.Text.Encoding
    return:
      type: System.String[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.ReadAllText(System.String)
  commentId: M:System.IO.File.ReadAllText(System.String)
  id: ReadAllText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: ReadAllText(String)
  fullName: System.IO.File.ReadAllText(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAllText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 638
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a text file, reads all lines of the file, and then closes the file.</p>\n"
  remarks: "\n<p>This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.</p>\n<p>This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.</p>\n<p>Use the <xref href=\"System.IO.File.ReadAllText(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method overload when reading files that might contain imported text, because unrecognized characters may not be read correctly.  </p>\n<p>The file handle is guaranteed to be closed by this method, even if exceptions are raised.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.ReadAllText(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.</p>System.IO.File.AllText#00"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string ReadAllText(string path)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ReadAllText(path As String) As String
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  commentId: M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  id: ReadAllText(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: ReadAllText(String, Encoding)
  fullName: System.IO.File.ReadAllText(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAllText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 650
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</p>\n"
  remarks: "\n<p>This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.</p>\n<p>This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.</p>\n<p>The file handle is guaranteed to be closed by this method, even if exceptions are raised.</p>\n<p>To use the encoding settings as configured for your operating system, specify the <xref href=\"System.Text.Encoding.Default\" data-throw-if-not-resolved=\"false\"></xref> property for the <em>encoding</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.ReadAllText(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.</p>System.IO.File.AllText_Encoding#00"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string ReadAllText(string path, Encoding encoding)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ReadAllText(path As String, encoding As Encoding) As String
    parameters:
    - id: path
      type: System.String
    - id: encoding
      type: System.Text.Encoding
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>path</em> was not found. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.ReadLines(System.String)
  commentId: M:System.IO.File.ReadLines(System.String)
  id: ReadLines(System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: ReadLines(String)
  fullName: System.IO.File.ReadLines(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 855
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Reads the lines of a file.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.File.ReadLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.File.ReadAllLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: When you use <xref href=\"System.IO.File.ReadLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of strings before the whole collection is returned; when you use <xref href=\"System.IO.File.ReadAllLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of strings be returned before you can access the array. Therefore, when you are working with very large files, <xref href=\"System.IO.File.ReadLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient. </p>\n<p>You can use the <xref href=\"System.IO.File.ReadLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to do the following:</p>\n<ul><li>\n<p>Perform LINQ to Objects queries on a file to obtain a filtered set of its lines.</p>\n</li><li>\n<p>Write the returned collection of lines to a file with the <xref href=\"System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method, or append them to an existing file with the <xref href=\"System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li><li>\n<p>Create an immediately populated instance of a collection that takes an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection of strings for its constructor, such as a <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> or a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>This method uses <xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref> for the encoding value.</p>\n"
  example:
  - "\n<p>The following example reads the lines of a file to find lines that contain specified strings.</p>System.IO.File.ReadLines#1"
  - "\n<p>The following example uses the <xref href=\"System.IO.File.ReadLines(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method in a LINQ query that enumerates all directories for files that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Microsoft\".</p>System.IO.Directory.EnumerateFiles#1"
  syntax:
    content: public static IEnumerable<string> ReadLines(string path)
    content.vb: Public Shared Function ReadLines(path As String) As IEnumerable(Of String)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>path</em> is invalid (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified by <em>path</em> was not found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specifies a file that is read-only.</p>\n<p>-or-</p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or-</p>\n<p>\n<em>path</em> is a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.ReadLines(System.String,System.Text.Encoding)
  commentId: M:System.IO.File.ReadLines(System.String,System.Text.Encoding)
  id: ReadLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: ReadLines(String, Encoding)
  fullName: System.IO.File.ReadLines(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 866
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Read the lines of a file that has a specified encoding.</p>\n"
  remarks: "\n<p>Use this method to specify an encoding to use read the file.</p>\n<p>The <xref href=\"System.IO.File.ReadLines(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.File.ReadAllLines(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: When you use <xref href=\"System.IO.File.ReadLines(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of strings before the whole collection is returned. When you use <xref href=\"System.IO.File.ReadAllLines(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of strings be returned before you can access the array. Therefore, when you are working with very large files, <xref href=\"System.IO.File.ReadLines(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient. </p>\n<p>You can use the <xref href=\"System.IO.File.ReadLines(System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref>  method to do the following:</p>\n<ul><li>\n<p>Perform LINQ to Objects queries on a file to obtain a filtered set of its lines.</p>\n</li><li>\n<p>Write the returned collection of lines to a file with the <xref href=\"System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method, or append them to an existing file with the <xref href=\"System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li><li>\n<p>Create an immediately populated instance of a collection that takes an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection of strings for its constructor, such as a <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> or a <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p></p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<string> ReadLines(string path, Encoding encoding)
    content.vb: Public Shared Function ReadLines(path As String, encoding As Encoding) As IEnumerable(Of String)
    parameters:
    - id: path
      type: System.String
    - id: encoding
      type: System.Text.Encoding
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>path</em> is invalid (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified by <em>path</em> was not found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specifies a file that is read-only.</p>\n<p>-or-</p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or-</p>\n<p>\n<em>path</em> is a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  commentId: M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  id: SetAttributes(System.String,System.IO.FileAttributes)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: SetAttributes(String, FileAttributes)
  fullName: System.IO.File.SetAttributes(System.String, System.IO.FileAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetAttributes
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 584
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the specified <xref href=\"System.IO.FileAttributes\" data-throw-if-not-resolved=\"false\"></xref> of the file on the specified path.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Certain file attributes, such as <xref href=\"System.IO.FileAttributes.Hidden\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileAttributes.ReadOnly\" data-throw-if-not-resolved=\"false\"></xref>, can be combined. Other attributes, such as <xref href=\"System.IO.FileAttributes.Normal\" data-throw-if-not-resolved=\"false\"></xref>, must be used alone.  </p>\n<p>It is not possible to change the compression status of a <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> object using the <xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <strong>GetAttributes</strong> and <strong>SetAttributes</strong> methods by applying the <strong>Archive</strong> and <strong>Hidden</strong> attributes to a file.</p>File GetAttributes#1"
  syntax:
    content: >-
      [SecurityCritical]

      public static void SetAttributes(string path, FileAttributes fileAttributes)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub SetAttributes(path As String, fileAttributes As FileAttributes)
    parameters:
    - id: path
      type: System.String
    - id: fileAttributes
      type: System.IO.FileAttributes
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file cannot be found.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.SetCreationTime(System.String,System.DateTime)
  commentId: M:System.IO.File.SetCreationTime(System.String,System.DateTime)
  id: SetCreationTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: SetCreationTime(String, DateTime)
  fullName: System.IO.File.SetCreationTime(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCreationTime
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 399
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the date and time the file was created.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public static void SetCreationTime(string path, DateTime creationTime)
    content.vb: Public Shared Sub SetCreationTime(path As String, creationTime As Date)
    parameters:
    - id: path
      type: System.String
    - id: creationTime
      type: System.DateTime
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The specified path was not found. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while performing the operation. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>creationTime</em> specifies a value outside the range of dates, times, or both permitted for this operation. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  commentId: M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  id: SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: SetCreationTimeUtc(String, DateTime)
  fullName: System.IO.File.SetCreationTimeUtc(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCreationTimeUtc
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 404
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the date and time, in coordinated universal time (UTC), that the file was created.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub SetCreationTimeUtc(path As String, creationTimeUtc As Date)
    parameters:
    - id: path
      type: System.String
    - id: creationTimeUtc
      type: System.DateTime
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The specified path was not found. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while performing the operation. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>creationTime</em> specifies a value outside the range of dates, times, or both permitted for this operation. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  commentId: M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  id: SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: SetLastAccessTime(String, DateTime)
  fullName: System.IO.File.SetLastAccessTime(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetLastAccessTime
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 454
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the date and time the specified file was last accessed.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example checks the file system for the specified file, creating it if necessary, and then sets and gets the last access time.</p>file setlastaccess#1"
  syntax:
    content: public static void SetLastAccessTime(string path, DateTime lastAccessTime)
    content.vb: Public Shared Sub SetLastAccessTime(path As String, lastAccessTime As Date)
    parameters:
    - id: path
      type: System.String
    - id: lastAccessTime
      type: System.DateTime
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The specified path was not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>lastAccessTime</em> specifies a value outside the range of dates or times permitted for this operation.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  commentId: M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  id: SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: SetLastAccessTimeUtc(String, DateTime)
  fullName: System.IO.File.SetLastAccessTimeUtc(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetLastAccessTimeUtc
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 459
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub SetLastAccessTimeUtc(path As String, lastAccessTimeUtc As Date)
    parameters:
    - id: path
      type: System.String
    - id: lastAccessTimeUtc
      type: System.DateTime
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The specified path was not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>lastAccessTimeUtc</em> specifies a value outside the range of dates or times permitted for this operation.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  commentId: M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  id: SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: SetLastWriteTime(String, DateTime)
  fullName: System.IO.File.SetLastWriteTime(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetLastWriteTime
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 509
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the date and time that the specified file was last written to.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example checks the file system for the specified file, creating the file if necessary, and then sets and gets the last write time of the file.</p>file setlastwrite#1"
  syntax:
    content: public static void SetLastWriteTime(string path, DateTime lastWriteTime)
    content.vb: Public Shared Sub SetLastWriteTime(path As String, lastWriteTime As Date)
    parameters:
    - id: path
      type: System.String
    - id: lastWriteTime
      type: System.DateTime
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The specified path was not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>lastWriteTime</em> specifies a value outside the range of dates or times permitted for this operation.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  commentId: M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  id: SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: SetLastWriteTimeUtc(String, DateTime)
  fullName: System.IO.File.SetLastWriteTimeUtc(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetLastWriteTimeUtc
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 514
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</p>\n"
  remarks: "\n<p>The <em>path</em> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub SetLastWriteTimeUtc(path As String, lastWriteTimeUtc As Date)
    parameters:
    - id: path
      type: System.String
    - id: lastWriteTimeUtc
      type: System.DateTime
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The specified path was not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>lastWriteTimeUtc</em> specifies a value outside the range of dates or times permitted for this operation.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.WriteAllBytes(System.String,System.Byte[])
  commentId: M:System.IO.File.WriteAllBytes(System.String,System.Byte[])
  id: WriteAllBytes(System.String,System.Byte[])
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: WriteAllBytes(String, Byte[])
  fullName: System.IO.File.WriteAllBytes(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAllBytes
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 773
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</p>\n"
  remarks: "\n<p>Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void WriteAllBytes(string path, byte[] bytes)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub WriteAllBytes(path As String, bytes As Byte())
    parameters:
    - id: path
      type: System.String
    - id: bytes
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong> or the byte array is empty. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IO.File.WriteAllBytes(System.String, System.Byte())
  name.vb: WriteAllBytes(String, Byte())
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: WriteAllLines(String, IEnumerable<String>)
  fullName: System.IO.File.WriteAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAllLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 907
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a new file, writes a collection of strings to the file, and then closes the file.</p>\n"
  remarks: "\n<p>The default behavior of the <xref href=\"System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})\" data-throw-if-not-resolved=\"false\"></xref> method is to write out data by using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <xref href=\"System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method overload with <xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref> encoding.</p>\n<p>If the target file already exists, it is overwritten.</p>\n<p>You can use this method to create the contents for a collection class that takes an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> in its constructor, such as a <xref href=\"System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Generic.HashSet`1.#ctor\" data-throw-if-not-resolved=\"false\"></xref>, or a <xref href=\"System.Collections.Generic.SortedSet`1.#ctor\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example writes selected lines from a sample data file to a file.</p>System.IO.File.WriteAllAppendAll#1"
  syntax:
    content: public static void WriteAllLines(string path, IEnumerable<string> contents)
    content.vb: Public Shared Sub WriteAllLines(path As String, contents As IEnumerable(Of String))
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Either<em> path </em>or <em>contents</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>path</em> is invalid (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specifies a file that is read-only.</p>\n<p>-or-</p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or-</p>\n<p>\n<em>path</em> is a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IO.File.WriteAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: WriteAllLines(String, IEnumerable(Of String))
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  commentId: M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: WriteAllLines(String, IEnumerable<String>, Encoding)
  fullName: System.IO.File.WriteAllLines(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAllLines
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 920
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</p>\n"
  remarks: "\n<p>If the target file already exists, it is overwritten.</p>\n<p>You can use this method to create a file that contains the following:</p>\n<ul><li>\n<p>The results of a LINQ to Objects query on the lines of a file, as obtained by using the <see cref=\"Overload:System.IO.File.ReadLines\"></see> method.</p>\n</li><li>\n<p>The contents of a collection that implements an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of strings.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public static void WriteAllLines(string path, IEnumerable<string> contents, Encoding encoding)
    content.vb: Public Shared Sub WriteAllLines(path As String, contents As IEnumerable(Of String), encoding As Encoding)
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: encoding
      type: System.Text.Encoding
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Either<em> path</em>,<em> contents</em>, or <em>encoding</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>path</em> is invalid (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specifies a file that is read-only.</p>\n<p>-or-</p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or-</p>\n<p>\n<em>path</em> is a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IO.File.WriteAllLines(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Text.Encoding)
  name.vb: WriteAllLines(String, IEnumerable(Of String), Encoding)
- uid: System.IO.File.WriteAllText(System.String,System.String)
  commentId: M:System.IO.File.WriteAllText(System.String,System.String)
  id: WriteAllText(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: WriteAllText(String, String)
  fullName: System.IO.File.WriteAllText(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAllText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 687
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</p>\n"
  remarks: "\n<p>This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method will return an empty byte array. If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <xref href=\"System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method overload with <xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref> encoding.</p>\n<p>Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.WriteAllText(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.</p>System.IO.File.AllText#00"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void WriteAllText(string path, string contents)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub WriteAllText(path As String, contents As String)
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong> or <em>contents</em> is empty.  </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  commentId: M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  id: WriteAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  - vb
  name: WriteAllText(String, String, Encoding)
  fullName: System.IO.File.WriteAllText(System.String, System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/File.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAllText
    path: src/mscorlib/src/System/IO/File.cs
    startLine: 699
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</p>\n"
  remarks: "\n<p>Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.</p>System.IO.File.AllText_Encoding#00"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void WriteAllText(string path, string contents, Encoding encoding)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub WriteAllText(path As String, contents As String, encoding As Encoding)
    parameters:
    - id: path
      type: System.String
    - id: contents
      type: System.String
    - id: encoding
      type: System.Text.Encoding
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong> or <em>contents</em> is empty. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> specified a file that is read-only.</p>\n<p>-or- </p>\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>\n<em>path</em> specified a directory.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> is in an invalid format. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: false
  name: StreamWriter
  fullName: System.IO.StreamWriter
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  fullName: System.IO.FileStream
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.FileOptions
  parent: System.IO
  isExternal: false
  name: FileOptions
  fullName: System.IO.FileOptions
- uid: System.IO.FileAttributes
  parent: System.IO
  isExternal: false
  name: FileAttributes
  fullName: System.IO.FileAttributes
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: false
  name: StreamReader
  fullName: System.IO.StreamReader
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
