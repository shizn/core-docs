items:
- uid: System.Runtime.Versioning.FrameworkName
  commentId: T:System.Runtime.Versioning.FrameworkName
  id: FrameworkName
  parent: System.Runtime.Versioning
  children:
  - System.Runtime.Versioning.FrameworkName.#ctor(System.String)
  - System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)
  - System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)
  - System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  - System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  - System.Runtime.Versioning.FrameworkName.FullName
  - System.Runtime.Versioning.FrameworkName.GetHashCode
  - System.Runtime.Versioning.FrameworkName.Identifier
  - System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  - System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  - System.Runtime.Versioning.FrameworkName.Profile
  - System.Runtime.Versioning.FrameworkName.ToString
  - System.Runtime.Versioning.FrameworkName.Version
  langs:
  - csharp
  - vb
  name: FrameworkName
  fullName: System.Runtime.Versioning.FrameworkName
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FrameworkName
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 652
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Represents the name of a version of the .NET Framework.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class FrameworkName : IEquatable<FrameworkName>'
    content.vb: >-
      Public NotInheritable Class FrameworkName
          Implements IEquatable(Of FrameworkName)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Runtime.Versioning.FrameworkName}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String)
  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FrameworkName(String)
  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 654
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class from a string that contains information about a version of the .NET Framework.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Versioning.FrameworkName.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor parses a string in the following format. </p>\n<p>identifier, Version=versionNumber[, Profile=profileName]</p>\n<p>Components in square brackets are optional. The following table describes each component.</p>\n<p>Component</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>identifier</p>\n</td><td>\n<p>An arbitrary string that identifies this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n</td></tr><tr><td>\n<p>versionNumber</p>\n</td><td>\n<p>A string that represents the version of the .NET Framework, in the form [v]major.minor[.build.revision], where \"v\" can be either uppercase or lowercase, and the brackets denote optional elements of a version number.</p>\n</td></tr><tr><td>\n<p>profileName</p>\n</td><td>\n<p>An arbitrary string that represents the profile of the .NET Framework version. Typically, it is used to denote some subset of the .NET Framework, such as the .NET Compact Framework or Silverlight.</p>\n</td></tr></tbody></table>\n<p>If both versionNumber and profileName are present, they can appear in any order after identifier. These strings are defined by the \"Version\" and \"Profile\" keywords, which are not case-sensitive. </p>\n<p>The values of the identifier, versionNumber, and profileName components define the values of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object's properties as follows:</p>\n<ul><li>\n<p>Any leading or trailing white space in the identifier component is removed and the resulting string is assigned to the <xref href=\"System.Runtime.Versioning.FrameworkName.Identifier\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li><li>\n<p>Any leading or trailing white space and the initial \"v\" or \"V\", if present, are removed from the <em>versionNumber</em>. The returned string is then passed to the <xref href=\"System.Version.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and the resulting <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is assigned to the <xref href=\"System.Runtime.Versioning.FrameworkName.Version\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li><li>\n<p>Any leading or trailing white space in the <em>profileName</em> component is removed and the resulting string is assigned to the <xref href=\"System.Runtime.Versioning.FrameworkName.Profile\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ul>\n<p>The following are examples of valid strings that can be passed to the <xref href=\"System.Runtime.Versioning.FrameworkName.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor: </p>\n<ul><li>\n<p>.NET Framework, Version=4.0</p>\n</li><li>\n<p>.NETFramework, Version=4.0</p>\n</li><li>\n<p>.NET Framework, Version=2.0, Profile=Compact</p>\n</li><li>\n<p>.NET Framework, Version=v4.0, Profile=Compact</p>\n</li><li>\n<p>.NET Framework, Profile=Full, Version=2.0.0</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public FrameworkName(string frameworkName)
    content.vb: Public Sub New(frameworkName As String)
    parameters:
    - id: frameworkName
      type: System.String
      description: "\n<p>A string that contains .NET Framework version information.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>frameworkName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>frameworkName</em> has fewer than two components or more than three components.</p>\n<p>-or-</p>\n<p>\n<em>frameworkName</em> does not include a major and minor version number.</p>\n<p>-or-</p>\n<p>\n<em>frameworkName </em>does not include a valid version number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>frameworkName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)
  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)
  id: '#ctor(System.String,System.Version)'
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FrameworkName(String, Version)
  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String, System.Version)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 655
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class from a string and a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object that identify a .NET Framework version.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class requires that a <xref href=\"System.Runtime.Versioning.FrameworkName.Version\" data-throw-if-not-resolved=\"false\"></xref> object include at least a major and minor version number. </p>\n"
  example:
  - 
  syntax:
    content: public FrameworkName(string identifier, Version version)
    content.vb: Public Sub New(identifier As String, version As Version)
    parameters:
    - id: identifier
      type: System.String
      description: "\n<p>A string that identifies a .NET Framework version.</p>\n"
    - id: version
      type: System.Version
      description: "\n<p>An object that contains .NET Framework version information.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identifier</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identifier</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>version</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)
  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)
  id: '#ctor(System.String,System.Version,System.String)'
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FrameworkName(String, Version, String)
  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String, System.Version, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 656
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class from a string, a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object that identifies a .NET Framework version, and a profile name.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class requires that a <xref href=\"System.Runtime.Versioning.FrameworkName.Version\" data-throw-if-not-resolved=\"false\"></xref> object include at least a major and minor version number.</p>\n"
  example:
  - 
  syntax:
    content: public FrameworkName(string identifier, Version version, string profile)
    content.vb: Public Sub New(identifier As String, version As Version, profile As String)
    parameters:
    - id: identifier
      type: System.String
      description: "\n<p>A string that identifies a .NET Framework version.</p>\n"
    - id: version
      type: System.Version
      description: "\n<p>An object that contains .NET Framework version information.</p>\n"
    - id: profile
      type: System.String
      description: "\n<p>A profile name.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identifier</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identifier</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>version</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Versioning.FrameworkName.FullName
  commentId: P:System.Runtime.Versioning.FrameworkName.FullName
  id: FullName
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Runtime.Versioning.FrameworkName.FullName
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 657
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the full name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The string returned by the <xref href=\"System.Runtime.Versioning.FrameworkName.FullName\" data-throw-if-not-resolved=\"false\"></xref> property has the following format:</p>\n<p>identifier, Version=version[, Profile=profile]</p>\n<p>where identifier corresponds to the <xref href=\"System.Runtime.Versioning.FrameworkName.Identifier\" data-throw-if-not-resolved=\"false\"></xref> property, <em>version</em> is equivalent to calling <xref href=\"System.Version.ToString\" data-throw-if-not-resolved=\"false\"></xref> on the value of the <xref href=\"System.Runtime.Versioning.FrameworkName.Version\" data-throw-if-not-resolved=\"false\"></xref> property, and <em>profile</em> corresponds to the <xref href=\"System.Runtime.Versioning.FrameworkName.Profile\" data-throw-if-not-resolved=\"false\"></xref> property. If a profile has not been assigned to the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object, the profile component is not included in the string.</p>\n<p>The value of the <xref href=\"System.Runtime.Versioning.FrameworkName.FullName\" data-throw-if-not-resolved=\"false\"></xref> property is identical to the string returned by the <xref href=\"System.Runtime.Versioning.FrameworkName.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public string FullName { get; }
    content.vb: Public ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The full name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Versioning.FrameworkName.Identifier
  commentId: P:System.Runtime.Versioning.FrameworkName.Identifier
  id: Identifier
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Identifier
  fullName: System.Runtime.Versioning.FrameworkName.Identifier
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Identifier
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 658
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the identifier of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The value of the read-only <xref href=\"System.Runtime.Versioning.FrameworkName.Identifier\" data-throw-if-not-resolved=\"false\"></xref> property is set in the <see cref=\"Overload:System.Runtime.Versioning.FrameworkName.#ctor\"></see> class constructor.</p>\n"
  example:
  - 
  syntax:
    content: public string Identifier { get; }
    content.vb: Public ReadOnly Property Identifier As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The identifier of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Versioning.FrameworkName.Profile
  commentId: P:System.Runtime.Versioning.FrameworkName.Profile
  id: Profile
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Profile
  fullName: System.Runtime.Versioning.FrameworkName.Profile
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Profile
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 659
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the profile name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The value of the read-only <xref href=\"System.Runtime.Versioning.FrameworkName.Profile\" data-throw-if-not-resolved=\"false\"></xref> property is set in the <see cref=\"Overload:System.Runtime.Versioning.FrameworkName.#ctor\"></see> class constructor.</p>\n"
  example:
  - 
  syntax:
    content: public string Profile { get; }
    content.vb: Public ReadOnly Property Profile As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The profile name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Versioning.FrameworkName.Version
  commentId: P:System.Runtime.Versioning.FrameworkName.Version
  id: Version
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Runtime.Versioning.FrameworkName.Version
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Version
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 660
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the version of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The value of the read-only <xref href=\"System.Runtime.Versioning.FrameworkName.Version\" data-throw-if-not-resolved=\"false\"></xref> property is set in the <see cref=\"Overload:System.Runtime.Versioning.FrameworkName.#ctor\"></see> class constructor.</p>\n"
  example:
  - 
  syntax:
    content: public Version Version { get; }
    content.vb: Public ReadOnly Property Version As Version
    parameters: []
    return:
      type: System.Version
      description: "\n<p>An object that contains version information about this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  commentId: M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 661
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> instance represents the same .NET Framework version as a specified object.</p>\n"
  remarks: "\n<p>The method converts <em>obj</em> to a <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object and calls the <xref href=\"System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)\" data-throw-if-not-resolved=\"false\"></xref> overload to test for equality. If the conversion does not succeed or if <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare to the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every component of the current <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object matches the corresponding component of <em>obj</em>; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  commentId: M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  id: Equals(System.Runtime.Versioning.FrameworkName)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Equals(FrameworkName)
  fullName: System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 662
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> instance represents the same .NET Framework version as a specified <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The method tests for equality by returning the result of the following comparisons:</p>\n<ul><li>\n<p>An ordinal comparison of the <xref href=\"System.Runtime.Versioning.FrameworkName.Identifier\" data-throw-if-not-resolved=\"false\"></xref> property values of the current instance and <em>other</em>.</p>\n</li><li>\n<p>An ordinal comparison of the <xref href=\"System.Runtime.Versioning.FrameworkName.Profile\" data-throw-if-not-resolved=\"false\"></xref> property values of the current instance and <em>other</em>.</p>\n</li><li>\n<p>A comparison of the version properties by calling the <xref href=\"System.Version.Equals(System.Version)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public bool Equals(FrameworkName other)
    content.vb: Public Function Equals(other As FrameworkName) As Boolean
    parameters:
    - id: other
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The object to compare to the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every component of the current <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object matches the corresponding component of <em>other</em>; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Versioning.FrameworkName.GetHashCode
  commentId: M:System.Runtime.Versioning.FrameworkName.GetHashCode
  id: GetHashCode
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Runtime.Versioning.FrameworkName.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 663
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns the hash code for the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that represents the hash code of this instance.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  commentId: M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  id: op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Equality(FrameworkName, FrameworkName)
  fullName: System.Runtime.Versioning.FrameworkName.Equality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 664
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> objects represent the same .NET Framework version.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the equality operator for <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>Languages that do not support custom operators can call the <xref href=\"System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  example:
  - "\n<p>The following example uses the equality operator to determine whether a  <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object that represents the running version of the .NET Framework is equal to a supported version of the .NET Framework. Note that the two versions are not equal because they do not have identical version numbers. </p>System.Runtime.Versioning.FrameworkName.Operators#1"
  syntax:
    content: public static bool operator ==(FrameworkName left, FrameworkName right)
    content.vb: Public Shared Operator =(left As FrameworkName, right As FrameworkName) As Boolean
    parameters:
    - id: left
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The first object to compare.</p>\n"
    - id: right
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent the same .NET Framework version; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  commentId: M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  id: op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Inequality(FrameworkName, FrameworkName)
  fullName: System.Runtime.Versioning.FrameworkName.Inequality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 665
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> objects represent different .NET Framework versions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>Languages that do not support custom operators can test for inequality by calling the <xref href=\"System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)\" data-throw-if-not-resolved=\"false\"></xref> method and reversing its value.</p>\n"
  example:
  - "\n<p>The following example uses the equality operator to determine whether a <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object that represents the running version of the .NET Framework is equal to a supported version of the .NET Framework. Note that the two versions are not equal because they do not have identical version numbers. </p>System.Runtime.Versioning.FrameworkName.Operators#2"
  syntax:
    content: public static bool operator !=(FrameworkName left, FrameworkName right)
    content.vb: Public Shared Operator <>(left As FrameworkName, right As FrameworkName) As Boolean
    parameters:
    - id: left
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The first object to compare.</p>\n"
    - id: right
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent different .NET Framework versions; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.Versioning.FrameworkName.ToString
  commentId: M:System.Runtime.Versioning.FrameworkName.ToString
  id: ToString
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Runtime.Versioning.FrameworkName.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 666
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns the string representation of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The string returned by the <xref href=\"System.Runtime.Versioning.FrameworkName.ToString\" data-throw-if-not-resolved=\"false\"></xref> method has the following format:</p>\n<p>identifier, Version=version[, Profile=profile]</p>\n<p>where identifier corresponds to the <xref href=\"System.Runtime.Versioning.FrameworkName.Identifier\" data-throw-if-not-resolved=\"false\"></xref> property, <em>version</em> is equivalent to calling <xref href=\"System.Version.ToString\" data-throw-if-not-resolved=\"false\"></xref> on the value of the <xref href=\"System.Runtime.Versioning.FrameworkName.Version\" data-throw-if-not-resolved=\"false\"></xref> property, and <em>profile</em> corresponds to the <xref href=\"System.Runtime.Versioning.FrameworkName.Profile\" data-throw-if-not-resolved=\"false\"></xref> property. If a profile has not been assigned to the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object, the profile component is not included in the returned string.</p>\n<p>The value returned by the <xref href=\"System.Runtime.Versioning.FrameworkName.ToString\" data-throw-if-not-resolved=\"false\"></xref> method is identical to the value of the <xref href=\"System.Runtime.Versioning.FrameworkName.FullName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Runtime.Versioning
  isExternal: false
  name: System.Runtime.Versioning
  fullName: System.Runtime.Versioning
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IEquatable{System.Runtime.Versioning.FrameworkName}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<FrameworkName>
  fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>
  fullname.vb: System.IEquatable(Of System.Runtime.Versioning.FrameworkName)
  name.vb: IEquatable(Of FrameworkName)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  fullName: System.Version
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)
  parent: System.IEquatable{System.Runtime.Versioning.FrameworkName}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(FrameworkName)
  fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>.Equals(System.Runtime.Versioning.FrameworkName)
  fullname.vb: System.IEquatable(Of System.Runtime.Versioning.FrameworkName).Equals(System.Runtime.Versioning.FrameworkName)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Runtime.Versioning.FrameworkName).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: )
    fullName: )
- uid: System.Runtime.Versioning.FrameworkName
  parent: System.Runtime.Versioning
  isExternal: false
  name: FrameworkName
  fullName: System.Runtime.Versioning.FrameworkName
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
