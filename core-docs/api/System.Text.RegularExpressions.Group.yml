items:
- uid: System.Text.RegularExpressions.Group
  commentId: T:System.Text.RegularExpressions.Group
  id: Group
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.Group.Captures
  - System.Text.RegularExpressions.Group.Success
  langs:
  - csharp
  - vb
  name: Group
  fullName: System.Text.RegularExpressions.Group
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Group
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 28
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Represents the results from a single capturing group. </p>\n"
  remarks: "\n<p>A capturing group can capture zero, one, or more strings in a single match because of quantifiers. (For more information, see Quantifiers in Regular Expressions.) All the substrings matched by a single capturing group are available from the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property. Information about the last substring captured can be accessed directly from the <strong>Value</strong> and <strong>Index</strong> properties. (That is, the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> instance is equivalent to the last item of the collection returned by the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property, which reflects the last capture made by the capturing group.)</p>\n<p>An example helps to clarify this relationship between a <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object and the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> that is returned by the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property. The regular expression pattern <code>(\\b(\\w+?)[,:;]?\\s?)+[?.!]</code> matches entire sentences. The regular expression is defined as shown in the following table.</p>\n<p>Pattern</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>\n<code>\\b</code>\n</p>\n</td><td>\n<p>Begin the match at a word boundary.</p>\n</td></tr><tr><td>\n<p>\n<code>(\\w+?)</code>\n</p>\n</td><td>\n<p>Match one or more word characters, but as few characters as possible. This is the second (inner) capturing group. (The first capturing group includes the <strong>\\b</strong> language element.)</p>\n</td></tr><tr><td>\n<p>\n<code>[,:;]?</code>\n</p>\n</td><td>\n<p>Match zero or one occurrence of a comma, colon, or semicolon.</p>\n</td></tr><tr><td>\n<p>\n<code>\\s?</code>\n</p>\n</td><td>\n<p>Match zero or one occurrence of a white-space character.</p>\n</td></tr><tr><td>\n<p>\n<code>(\\b(\\w+?)[,:;]?\\s?)+</code>\n</p>\n</td><td>\n<p>Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times. This is the first capturing group.</p>\n</td></tr><tr><td>\n<p>\n<code>[?.!]</code>\n</p>\n</td><td>\n<p>Match any occurrence of a period, question mark, or exclamation point.</p>\n</td></tr></tbody></table>\n<p>In this regular expression pattern, the subpattern <code>(\\w+?)</code> is designed to match multiple words within a sentence. However, the value of the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object represents only the last match that <code>(\\w+?)</code> captures, whereas the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> that represents all captured text. As the output shows, the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> for the second capturing group contains four objects. The last of these corresponds to the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Text.RegularExpressions.Group.Class#1"
  syntax:
    content: 'public class Group : Capture'
    content.vb: >-
      Public Class Group
          Inherits Capture
  inheritance:
  - System.Object
  - System.Text.RegularExpressions.Capture
  inheritedMembers:
  - System.Text.RegularExpressions.Capture.Index
  - System.Text.RegularExpressions.Capture.Length
  - System.Text.RegularExpressions.Capture.Value
  - System.Text.RegularExpressions.Capture.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.RegularExpressions.Group.Captures
  commentId: P:System.Text.RegularExpressions.Group.Captures
  id: Captures
  parent: System.Text.RegularExpressions.Group
  langs:
  - csharp
  - vb
  name: Captures
  fullName: System.Text.RegularExpressions.Group.Captures
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Captures
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 31
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\" data-throw-if-not-resolved=\"false\"></xref> option). The collection may have zero or more items.</p>\n"
  remarks: "\n<p>If a quantifier is not applied to a capturing group, the collection returned by the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property contains a single <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object that provides information about the same substring as the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object. This is illustrated in the following example. It defines a regular expression, <code>\\b(\\w+)\\b</code>, that extracts a single word from a sentence. The <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object captures the word \"This\", and the single object in the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> contains information about the same capture. </p>System.Text.RegularExpressions.Group.Captures#1<p>The real utility of the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression. In this case, the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object contains information about the last captured substring, whereas the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property contains information about all the substrings captured by the group. In the following example, the regular expression <code>\\b(\\w+\\s*)+\\.</code> matches an entire sentence that ends in a period. The group <code>(\\w+\\s*)+</code> captures the individual words in the collection. Because the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> collection contains information only about the last captured substring, it captures the last word in the sentence, \"sentence\". However, each word captured by the group is available from the collection returned by the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Text.RegularExpressions.Group.Captures#2"
  example:
  - 
  syntax:
    content: public CaptureCollection Captures { get; }
    content.vb: Public ReadOnly Property Captures As CaptureCollection
    parameters: []
    return:
      type: System.Text.RegularExpressions.CaptureCollection
      description: "\n<p>The collection of substrings matched by the group.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.Group.Success
  commentId: P:System.Text.RegularExpressions.Group.Success
  id: Success
  parent: System.Text.RegularExpressions.Group
  langs:
  - csharp
  - vb
  name: Success
  fullName: System.Text.RegularExpressions.Group.Success
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Success
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 32
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets a value indicating whether the match is successful.</p>\n"
  remarks: "\n<p>The <strong>Success</strong> property is true if at least one substring was captured by this group. It is equivalent to the Boolean expression (Group.Captures.Count > 0).</p>\n"
  syntax:
    content: public bool Success { get; }
    content.vb: Public ReadOnly Property Success As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the match is successful; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Text.RegularExpressions.Capture
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Capture
  fullName: System.Text.RegularExpressions.Capture
- uid: System.Text.RegularExpressions.Capture.Index
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Index
  fullName: System.Text.RegularExpressions.Capture.Index
- uid: System.Text.RegularExpressions.Capture.Length
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Length
  fullName: System.Text.RegularExpressions.Capture.Length
- uid: System.Text.RegularExpressions.Capture.Value
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Value
  fullName: System.Text.RegularExpressions.Capture.Value
- uid: System.Text.RegularExpressions.Capture.ToString
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: ToString()
  fullName: System.Text.RegularExpressions.Capture.ToString()
  spec.csharp:
  - uid: System.Text.RegularExpressions.Capture.ToString
    name: ToString
    fullName: System.Text.RegularExpressions.Capture.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Text.RegularExpressions.Capture.ToString
    name: ToString
    fullName: System.Text.RegularExpressions.Capture.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Text.RegularExpressions.CaptureCollection
  parent: System.Text.RegularExpressions
  isExternal: false
  name: CaptureCollection
  fullName: System.Text.RegularExpressions.CaptureCollection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
