items:
- uid: System.Data.SqlClient.SqlTransaction
  commentId: T:System.Data.SqlClient.SqlTransaction
  id: SqlTransaction
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlTransaction.Commit
  - System.Data.SqlClient.SqlTransaction.Connection
  - System.Data.SqlClient.SqlTransaction.DbConnection
  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlTransaction.IsolationLevel
  - System.Data.SqlClient.SqlTransaction.Rollback
  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  - System.Data.SqlClient.SqlTransaction.Save(System.String)
  langs:
  - csharp
  - vb
  name: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlTransaction
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 13
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Represents a Transact-SQL transaction to be made in a SQL Server database. This class cannot be inherited. </p>\n"
  remarks: "\n<p>The application creates a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref> object by calling <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>\n<strong>Try</strong>/<strong>Catch</strong> exception handling should always be used when committing or rolling back a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. Both <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> generate an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> if the connection is terminated or if the transaction has already been rolled back on the server.</p>\n<p>For more information on SQL Server transactions, see <see href=\"http://msdn.microsoft.com/library/ms175127(SQL.105).aspx\">Explicit Transactions</see> and <see href=\"http://msdn.microsoft.com/library/ms187484(SQL.105).aspx\">Coding Efficient Transactions</see>.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. <strong>Try</strong>/<strong>Catch</strong> error handling is used to handle any errors when attempting to commit or roll back the transaction.</p>Classic WebData SqlConnection.BeginTransaction Example#1"
  syntax:
    content: 'public sealed class SqlTransaction : DbTransaction'
    content.vb: >-
      Public NotInheritable Class SqlTransaction
          Inherits DbTransaction
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlTransaction.Connection
  commentId: P:System.Data.SqlClient.SqlTransaction.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 44
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object associated with the transaction, or <strong>null</strong> if the transaction is no longer valid.</p>\n"
  remarks: "\n<p>A single application may have multiple database connections, each with zero or more transactions. This property lets you determine the connection object associated with a particular transaction created by <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlConnection Connection { get; }
    content.vb: Public ReadOnly Property Connection As SqlConnection
    parameters: []
    return:
      type: System.Data.SqlClient.SqlConnection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  commentId: P:System.Data.SqlClient.SqlTransaction.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbConnection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 59
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override DbConnection DbConnection { get; }
    content.vb: Protected Overrides ReadOnly Property DbConnection As DbConnection
    parameters: []
    return:
      type: DbConnection
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  commentId: P:System.Data.SqlClient.SqlTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsolationLevel
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 75
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Specifies the <xref href=\"System.Data.IsolationLevel\" data-throw-if-not-resolved=\"false\"></xref> for this transaction.</p>\n"
  remarks: "\n<p>Parallel transactions are not supported. Therefore, the <xref href=\"System.Data.IsolationLevel\" data-throw-if-not-resolved=\"false\"></xref> applies to the whole transaction.</p>\n<p>For more information on SQL Server isolation levels, see \"Isolation Levels in the Database Engine\" in SQL Server Books Online.</p>\n"
  syntax:
    content: public override IsolationLevel IsolationLevel { get; }
    content.vb: Public Overrides ReadOnly Property IsolationLevel As IsolationLevel
    parameters: []
    return:
      type: IsolationLevel
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlTransaction.Commit
  commentId: M:System.Data.SqlClient.SqlTransaction.Commit
  id: Commit
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Commit
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 120
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Commits the database transaction.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement. You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database. For more information, see SQL Server Books Online.</p>\n<p>\n<strong>Try</strong>/<strong>Catch</strong> exception handling should always be used when committing or rolling back a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. Both <strong>Commit</strong> and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> generates an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> if the connection is terminated or if the transaction has already been rolled back on the server.</p>\n<p>For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods. The transaction is rolled back on any error. <strong>Try</strong>/<strong>Catch</strong> error handling is used to handle any errors when attempting to commit or roll back the transaction.</p>Classic WebData SqlConnection.BeginTransaction Example#1"
  syntax:
    content: public override void Commit()
    content.vb: Public Overrides Sub Commit
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "\n<p>An error occurred while trying to commit the transaction. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The transaction has already been committed or rolled back.</p>\n<p>-or- </p>\n<p>The connection is broken. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  commentId: M:System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 141
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  commentId: M:System.Data.SqlClient.SqlTransaction.Rollback
  id: Rollback
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rollback
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 153
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Rolls back a transaction from a pending state.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see SQL Server Books Online.</p>\n<p>The transaction can only be rolled back from a pending state (after <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref> has been called, but before <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> is called). The transaction is rolled back in the event it is disposed before <strong>Commit</strong> or <strong>Rollback</strong> is called.</p>\n<p>\n<strong>Try</strong>/<strong>Catch</strong> exception handling should always be used when rolling back a transaction. A <strong>Rollback</strong> generates an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> if the connection is terminated or if the transaction has already been rolled back on the server.</p>\n<p>For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods. The transaction is rolled back on any error. <strong>Try</strong>/<strong>Catch</strong> error handling is used to handle any errors when attempting to commit or roll back the transaction.</p>Classic WebData SqlConnection.BeginTransaction Example#1"
  syntax:
    content: public override void Rollback()
    content.vb: Public Overrides Sub Rollback
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "\n<p>An error occurred while trying to commit the transaction. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The transaction has already been committed or rolled back.</p>\n<p>-or- </p>\n<p>The connection is broken. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  commentId: M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  id: Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rollback
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 182
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see \"Explicit Transactions\" and \"Transaction Savepoints\" in SQL Server Books Online.</p>\n<p>The transaction can only be rolled back from a pending state (after <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref> has been called, but before <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> is called). The transaction is rolled back if it is disposed before <strong>Commit</strong> or <strong>Rollback</strong> is called. </p>\n<p>\n<strong>Try</strong>/<strong>Catch</strong> exception handling should always be used when rolling back a transaction. A <strong>Rollback</strong> generates an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> if the connection is terminated or if the transaction has already been rolled back on the server.</p>\n<p>For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods. The transaction is rolled back on any error. <strong>Try</strong>/<strong>Catch</strong> error handling is used to handle any errors when attempting to commit or roll back the transaction.</p>Classic WebData SqlConnection.BeginTransaction2 Example#1"
  syntax:
    content: public void Rollback(string transactionName)
    content.vb: Public Sub Rollback(transactionName As String)
    parameters:
    - id: transactionName
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>No transaction name was specified. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The transaction has already been committed or rolled back.</p>\n<p>-or- </p>\n<p>The connection is broken. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  commentId: M:System.Data.SqlClient.SqlTransaction.Save(System.String)
  id: Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  - vb
  name: Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlTransaction.cs
    startLine: 203
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlTransaction.Save(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to the Transact-SQL SAVE TRANSACTION statement. </p>\n<p>The value used in the <em>savePoint</em> parameter can be the same value used in the <em>transactionName</em> parameter of some implementations of the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Savepoints offer a mechanism to roll back parts of transactions. You create a savepoint using the <xref href=\"System.Data.SqlClient.SqlTransaction.Save(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, and then later call the <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> method to roll back to the savepoint instead of rolling back to the start of the transaction. </p>\n"
  syntax:
    content: public void Save(string savePointName)
    content.vb: Public Sub Save(savePointName As String)
    parameters:
    - id: savePointName
      type: System.String
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "\n<p>An error occurred while trying to commit the transaction. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The transaction has already been committed or rolled back.</p>\n<p>-or- </p>\n<p>The connection is broken. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Common
  isExternal: false
  name: System.Data.Common
  fullName: System.Data.Common
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
