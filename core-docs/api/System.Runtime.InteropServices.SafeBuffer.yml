items:
- uid: System.Runtime.InteropServices.SafeBuffer
  commentId: T:System.Runtime.InteropServices.SafeBuffer
  id: SafeBuffer
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  - System.Runtime.InteropServices.SafeBuffer.ByteLength
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.IsInvalid
  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SafeBuffer
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 80
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.
  syntax:
    content: 'public abstract class SafeBuffer : SafeHandle'
    content.vb: >-
      Public MustInherit Class SafeBuffer
          Inherits SafeHandle
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: SafeBuffer(Boolean)
  fullName: System.Runtime.InteropServices.SafeBuffer.SafeBuffer(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 89
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: 'Creates a new instance of the <xref href="System.Runtime.InteropServices.SafeBuffer" data-throw-if-not-resolved="false"></xref> class, and specifies whether the buffer handle is to be reliably released. '
  syntax:
    content: protected SafeBuffer(bool ownsHandle)
    content.vb: Protected Sub New(ownsHandle As Boolean)
    parameters:
    - id: ownsHandle
      type: System.Boolean
      description: true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeBuffer.IsInvalid
  id: IsInvalid
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: IsInvalid
  fullName: System.Runtime.InteropServices.SafeBuffer.IsInvalid
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInvalid
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 704
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: public override bool IsInvalid { get; }
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength
  commentId: P:System.Runtime.InteropServices.SafeBuffer.ByteLength
  id: ByteLength
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: ByteLength
  fullName: System.Runtime.InteropServices.SafeBuffer.ByteLength
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ByteLength
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 355
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Gets the size of the buffer, in bytes.
  syntax:
    content: public ulong ByteLength { get; }
    content.vb: Public ReadOnly Property ByteLength As ULong
    parameters: []
    return:
      type: System.UInt64
      description: The number of bytes in the memory buffer.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  id: AcquirePointer(System.Byte*@)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: AcquirePointer(ref Byte*)
  fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(ref System.Byte*)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AcquirePointer
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 176
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Obtains a pointer from a <xref href="System.Runtime.InteropServices.SafeBuffer" data-throw-if-not-resolved="false"></xref> object for a block of memory.
  syntax:
    content: public void AcquirePointer(ref byte *pointer)
    content.vb: Public Sub AcquirePointer(ByRef pointer As Byte *)
    parameters:
    - id: pointer
      type: System.Byte*
      description: A byte pointer, passed by reference, to receive the pointer from within the <xref href="System.Runtime.InteropServices.SafeBuffer" data-throw-if-not-resolved="false"></xref> object. You must set this pointer to null before you call this method.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(ByRef System.Byte*)
  name.vb: AcquirePointer(ByRef Byte*)
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  id: Initialize(System.UInt32,System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Initialize(UInt32, UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 118
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <xref href="System.Runtime.InteropServices.SafeBuffer" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: public void Initialize(uint numElements, uint sizeOfEachElement)
    content.vb: Public Sub Initialize(numElements As UInteger, sizeOfEachElement As UInteger)
    parameters:
    - id: numElements
      type: System.UInt32
      description: The number of elements in the buffer.
    - id: sizeOfEachElement
      type: System.UInt32
      description: The size of each element in the buffer.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>numElements</em> is less than zero. -or-<em>sizeOfEachElement</em> is less than zero.-or-<em>numElements</em> multiplied by <em>sizeOfEachElement</em> is greater than the available address space."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  id: Initialize(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Initialize(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 99
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Defines the allocation size of the memory region in bytes. You must call this method before you use the <xref href="System.Runtime.InteropServices.SafeBuffer" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: public void Initialize(ulong numBytes)
    content.vb: Public Sub Initialize(numBytes As ULong)
    parameters:
    - id: numBytes
      type: System.UInt64
      description: The number of bytes in the buffer.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>numBytes</em> is less than zero.-or-<em>numBytes</em> is greater than the available address space."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  id: Initialize``1(System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Initialize<T>(UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize<T>(System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 140
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <xref href="System.Runtime.InteropServices.SafeBuffer" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: 'public void Initialize<T>(uint numElements)where T : struct'
    content.vb: Public Sub Initialize(Of T As Structure)(numElements As UInteger)
    parameters:
    - id: numElements
      type: System.UInt32
      description: The number of elements of the value type to allocate memory for.
    typeParameters:
    - id: T
      description: The value type to allocate memory for.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>numElements</em> is less than zero.-or-<em>numElements</em> multiplied by the size of each element is greater than the available address space."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Initialize(Of T)(System.UInt32)
  name.vb: Initialize(Of T)(UInt32)
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  id: Read``1(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Read<T>(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Read<T>(System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 213
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Reads a value type from memory at the specified offset.
  syntax:
    content: 'public T Read<T>(ulong byteOffset)where T : struct'
    content.vb: Public Function Read(Of T As Structure)(byteOffset As ULong) As T
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location from which to read the value type. You may have to consider alignment issues.
    typeParameters:
    - id: T
      description: The value type to read.
    return:
      type: '{T}'
      description: The value type that was read from memory.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Read(Of T)(System.UInt64)
  name.vb: Read(Of T)(UInt64)
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: ReadArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadArray
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 241
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: 'Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index. '
  syntax:
    content: 'public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)where T : struct'
    content.vb: Public Sub ReadArray(Of T As Structure)(byteOffset As ULong, array As T(), index As Integer, count As Integer)
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location from which to start reading.
    - id: array
      type: '{T}[]'
      description: The output array to write to.
    - id: index
      type: System.Int32
      description: The location in the output array to begin writing to.
    - id: count
      type: System.Int32
      description: The number of value types to read from the input array and to write to the output array.
    typeParameters:
    - id: T
      description: The value type to read.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than zero.-or-<em>count</em> is less than zero."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the array minus the index is less than <em>count</em>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.ReadArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: ReadArray(Of T)(UInt64, T(), Int32, Int32)
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  id: ReleasePointer
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: ReleasePointer()
  fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReleasePointer
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 196
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Releases a pointer that was obtained by the <xref href="System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: public void ReleasePointer()
    content.vb: Public Sub ReleasePointer
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  id: Write``1(System.UInt64,``0)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Write<T>(UInt64, T)
  fullName: System.Runtime.InteropServices.SafeBuffer.Write<T>(System.UInt64, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 288
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Writes a value type to memory at the given location.
  syntax:
    content: 'public void Write<T>(ulong byteOffset, T value)where T : struct'
    content.vb: Public Sub Write(Of T As Structure)(byteOffset As ULong, value As T)
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location at which to start writing. You may have to consider alignment issues.
    - id: value
      type: '{T}'
      description: The value to write.
    typeParameters:
    - id: T
      description: The value type to write.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Write(Of T)(System.UInt64, T)
  name.vb: Write(Of T)(UInt64, T)
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: WriteArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteArray
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 313
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.
  syntax:
    content: 'public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)where T : struct'
    content.vb: Public Sub WriteArray(Of T As Structure)(byteOffset As ULong, array As T(), index As Integer, count As Integer)
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: The location in memory to write to.
    - id: array
      type: '{T}[]'
      description: The input array.
    - id: index
      type: System.Int32
      description: The offset in the array to start reading from.
    - id: count
      type: System.Int32
      description: The number of value types to write.
    typeParameters:
    - id: T
      description: The value type to write.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> or <em>count</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the input array minus <em>index</em> is less than <em>count</em>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize"></see> method has not been called.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.WriteArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: WriteArray(Of T)(UInt64, T(), Int32, Int32)
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.Byte*
  isExternal: true
  name: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
