items:
- uid: System.Threading.Tasks.ParallelOptions
  commentId: T:System.Threading.Tasks.ParallelOptions
  id: ParallelOptions
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.ParallelOptions.#ctor
  - System.Threading.Tasks.ParallelOptions.CancellationToken
  - System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism
  - System.Threading.Tasks.ParallelOptions.TaskScheduler
  langs:
  - csharp
  - vb
  name: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParallelOptions
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 36
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Stores options that configure the operation of methods on the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public class ParallelOptions
    content.vb: Public Class ParallelOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.ParallelOptions.#ctor
  commentId: M:System.Threading.Tasks.ParallelOptions.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.ParallelOptions
  langs:
  - csharp
  - vb
  name: ParallelOptions()
  fullName: System.Threading.Tasks.ParallelOptions.ParallelOptions()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 52
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes the instance with default values. <xref href=\"System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism\" data-throw-if-not-resolved=\"false\"></xref> is initialized to -1, signifying that there is no upper bound set on how much parallelism should be employed. <xref href=\"System.Threading.Tasks.ParallelOptions.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is initialized to a non-cancelable token, and <xref href=\"System.Threading.Tasks.ParallelOptions.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> is initialized to the default scheduler (TaskScheduler.Default). </p>\n<p> All of these defaults may be overwritten using the property set accessors on the instance.</p>\n"
  example:
  - 
  syntax:
    content: public ParallelOptions()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.ParallelOptions.CancellationToken
  commentId: P:System.Threading.Tasks.ParallelOptions.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.ParallelOptions
  langs:
  - csharp
  - vb
  name: CancellationToken
  fullName: System.Threading.Tasks.ParallelOptions.CancellationToken
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CancellationToken
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 116
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets or sets the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>Providing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> method enables the operation to be exited early. Code external to the operation may cancel the token, and if the operation observes the token being set, it may exit early by throwing an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public CancellationToken CancellationToken { get; set; }
    content.vb: Public Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism
  commentId: P:System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism
  id: MaxDegreeOfParallelism
  parent: System.Threading.Tasks.ParallelOptions
  langs:
  - csharp
  - vb
  name: MaxDegreeOfParallelism
  fullName: System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MaxDegreeOfParallelism
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 94
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets or sets the maximum number of concurrent tasks enabled by this <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism\" data-throw-if-not-resolved=\"false\"></xref> property affects the number of concurrent operations run by <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> method calls that are passed this <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> instance. A positive property value limits the number of concurrent operations to the set value. If it is -1,  there is no limit on the number of concurrently running operations.</p>\n<p>By default, <see cref=\"Overload:System.Threading.Tasks.Parallel.For\"></see> and <see cref=\"Overload:System.Threading.Tasks.Parallel.ForEach\"></see> will utilize however many threads the underlying scheduler provides, so changing <xref href=\"System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism\" data-throw-if-not-resolved=\"false\"></xref> from the default only limits how many concurrent tasks will be used. </p>\n<p>Generally, you do not need to modify this setting. However, you may choose to set it explicitly in advanced usage scenarios such as these:</p>\n<ul><li>\n<p>When you know that a particular algorithm you're using won't scale beyond a certain number of cores. You can set the property to avoid wasting cycles on additional cores. </p>\n</li><li>\n<p>When you're running multiple algorithms concurrently and want to manually define how much of the system each algorithm can utilize. You can set a <xref href=\"System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism\" data-throw-if-not-resolved=\"false\"></xref> value for each.</p>\n</li><li>\n<p>When the thread pool's heuristics is unable to determine the right number of threads to use and could end up injecting too many threads. For example, in long-running loop body iterations, the thread pool might not be able to tell the difference between reasonable progress or livelock or deadlock, and might not be able to reclaim threads that were added to improve performance. In this case, you can set the property to ensure that you don't use more than a reasonable number of threads. </p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public int MaxDegreeOfParallelism { get; set; }
    content.vb: Public Property MaxDegreeOfParallelism As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The property is being set to zero or to a value that is less than -1.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.ParallelOptions.TaskScheduler
  commentId: P:System.Threading.Tasks.ParallelOptions.TaskScheduler
  id: TaskScheduler
  parent: System.Threading.Tasks.ParallelOptions
  langs:
  - csharp
  - vb
  name: TaskScheduler
  fullName: System.Threading.Tasks.ParallelOptions.TaskScheduler
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TaskScheduler
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 64
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets or sets the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Threading.Tasks.ParallelOptions\" data-throw-if-not-resolved=\"false\"></xref> instance. Setting this property to null indicates that the current scheduler should be used.</p>\n"
  example:
  - 
  syntax:
    content: public TaskScheduler TaskScheduler { get; set; }
    content.vb: Public Property TaskScheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
