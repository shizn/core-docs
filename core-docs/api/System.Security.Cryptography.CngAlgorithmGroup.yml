items:
- uid: System.Security.Cryptography.CngAlgorithmGroup
  commentId: T:System.Security.Cryptography.CngAlgorithmGroup
  id: CngAlgorithmGroup
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)
  - System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup
  - System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman
  - System.Security.Cryptography.CngAlgorithmGroup.Dsa
  - System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman
  - System.Security.Cryptography.CngAlgorithmGroup.ECDsa
  - System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)
  - System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)
  - System.Security.Cryptography.CngAlgorithmGroup.GetHashCode
  - System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  - System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  - System.Security.Cryptography.CngAlgorithmGroup.Rsa
  - System.Security.Cryptography.CngAlgorithmGroup.ToString
  langs:
  - csharp
  - vb
  name: CngAlgorithmGroup
  fullName: System.Security.Cryptography.CngAlgorithmGroup
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CngAlgorithmGroup
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 76
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Encapsulates the name of an encryption algorithm group. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> class is a utility class. It consists of static properties, comparison methods, and a private, internally maintained string that defines an algorithm group name.</p>\n<p>The static properties return <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> objects. Each object's internal string is initialized to the algorithm group name that corresponds to the name of the static property.</p>\n<p>You can also use this class to create objects for algorithm groups that are not covered by the static properties.</p>\n<p>Several Cryptography Next Generation (CNG) classes (such as <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref>) return <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> objects. Classes that receive <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> objects can retrieve the embedded algorithm group name by calling the object's <xref href=\"System.Security.Cryptography.CngKey.AlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Therefore, <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> serves as an enumeration of well-known algorithm groups. It lets you specify an algorithm group name by using a strongly typed value instead of a string.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class CngAlgorithmGroup : IEquatable<CngAlgorithmGroup>'
    content.vb: >-
      Public NotInheritable Class CngAlgorithmGroup
          Implements IEquatable(Of CngAlgorithmGroup)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)
  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: CngAlgorithmGroup(String)
  fullName: System.Security.Cryptography.CngAlgorithmGroup.CngAlgorithmGroup(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 78
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Instances of the <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> class internally maintain the algorithm group name that is specified by the <em>algorithmGroup</em> parameter.</p>\n<p>The primary purpose of this constructor is to provide a method for creating <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> objects for algorithm groups that are not represented by the static properties of the <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> class. This capacity enables future .NET Framework releases, service packs, and third-party developers to add new algorithmÂ groups, which can be accessed just like the algorithm groups that are currently available.</p>\n"
  example:
  - 
  syntax:
    content: public CngAlgorithmGroup(string algorithmGroup)
    content.vb: Public Sub New(algorithmGroup As String)
    parameters:
    - id: algorithmGroup
      type: System.String
      description: "\n<p>The name of the algorithm group to initialize.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>algorithmGroup</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>algorithmGroup</em> parameter length is 0 (zero).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup
  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup
  id: AlgorithmGroup
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: AlgorithmGroup
  fullName: System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AlgorithmGroup
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 79
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the name of the algorithm group that the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  example:
  - 
  syntax:
    content: public string AlgorithmGroup { get; }
    content.vb: Public ReadOnly Property AlgorithmGroup As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The embedded algorithm group name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman
  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman
  id: DiffieHellman
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: DiffieHellman
  fullName: System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DiffieHellman
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 80
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Diffie-Hellman family of algorithms.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithmGroup DiffieHellman { get; }
    content.vb: Public Shared ReadOnly Property DiffieHellman As CngAlgorithmGroup
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object that specifies the Diffie-Hellman family of algorithms.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithmGroup.Dsa
  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.Dsa
  id: Dsa
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: Dsa
  fullName: System.Security.Cryptography.CngAlgorithmGroup.Dsa
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dsa
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 81
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Digital Signature Algorithm (DSA) family of algorithms.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithmGroup Dsa { get; }
    content.vb: Public Shared ReadOnly Property Dsa As CngAlgorithmGroup
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object that specifies the DSA family of algorithms.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman
  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman
  id: ECDiffieHellman
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: ECDiffieHellman
  fullName: System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDiffieHellman
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 82
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Elliptic Curve Diffie-Hellman (ECDH) family of algorithms.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithmGroup ECDiffieHellman { get; }
    content.vb: Public Shared ReadOnly Property ECDiffieHellman As CngAlgorithmGroup
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object that specifies the ECDH family of algorithms.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithmGroup.ECDsa
  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa
  id: ECDsa
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: ECDsa
  fullName: System.Security.Cryptography.CngAlgorithmGroup.ECDsa
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDsa
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 83
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Elliptic Curve Digital Signature Algorithm (ECDSA) family of algorithms.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithmGroup ECDsa { get; }
    content.vb: Public Shared ReadOnly Property ECDsa As CngAlgorithmGroup
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object that specifies the ECDSA family of algorithms.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithmGroup.Rsa
  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.Rsa
  id: Rsa
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: Rsa
  fullName: System.Security.Cryptography.CngAlgorithmGroup.Rsa
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rsa
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 84
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Rivest-Shamir-Adleman (RSA) family of algorithms.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithmGroup Rsa { get; }
    content.vb: Public Shared ReadOnly Property Rsa As CngAlgorithmGroup
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object that specifies the RSA family of algorithms.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)
  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 85
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified object to the current <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> that specifies the same algorithm group as the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)
  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)
  id: Equals(System.Security.Cryptography.CngAlgorithmGroup)
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: Equals(CngAlgorithmGroup)
  fullName: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 86
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object to the current <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public bool Equals(CngAlgorithmGroup other)
    content.vb: Public Function Equals(other As CngAlgorithmGroup) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>other</em> parameter specifies the same algorithm group as the current object; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}.Equals(System.Security.Cryptography.CngAlgorithmGroup)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngAlgorithmGroup.GetHashCode
  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.Cryptography.CngAlgorithmGroup.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 87
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a hash value for the algorithm group name that is embedded in the current <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash value of the embedded algorithm group name.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  id: op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: Equality(CngAlgorithmGroup, CngAlgorithmGroup)
  fullName: System.Security.Cryptography.CngAlgorithmGroup.Equality(System.Security.Cryptography.CngAlgorithmGroup, System.Security.Cryptography.CngAlgorithmGroup)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 88
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> objects specify the same algorithm group.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(CngAlgorithmGroup left, CngAlgorithmGroup right)
    content.vb: Public Shared Operator =(left As CngAlgorithmGroup, right As CngAlgorithmGroup) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object that specifies an algorithm group.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects specify the same algorithm group; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  id: op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: Inequality(CngAlgorithmGroup, CngAlgorithmGroup)
  fullName: System.Security.Cryptography.CngAlgorithmGroup.Inequality(System.Security.Cryptography.CngAlgorithmGroup, System.Security.Cryptography.CngAlgorithmGroup)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 89
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngAlgorithmGroup\" data-throw-if-not-resolved=\"false\"></xref> objects do not specify the same algorithm group.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(CngAlgorithmGroup left, CngAlgorithmGroup right)
    content.vb: Public Shared Operator <>(left As CngAlgorithmGroup, right As CngAlgorithmGroup) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>An object that specifies an algorithm group.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects do not specify the same algorithm group; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.CngAlgorithmGroup.ToString
  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.ToString
  id: ToString
  parent: System.Security.Cryptography.CngAlgorithmGroup
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Cryptography.CngAlgorithmGroup.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 90
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the name of the algorithm group that the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The embedded algorithm group name.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<CngAlgorithmGroup>
  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithmGroup>
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithmGroup)
  name.vb: IEquatable(Of CngAlgorithmGroup)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Cryptography.CngAlgorithmGroup
    name: CngAlgorithmGroup
    fullName: System.Security.Cryptography.CngAlgorithmGroup
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Cryptography.CngAlgorithmGroup
    name: CngAlgorithmGroup
    fullName: System.Security.Cryptography.CngAlgorithmGroup
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.CngAlgorithmGroup
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithmGroup
  fullName: System.Security.Cryptography.CngAlgorithmGroup
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}.Equals(System.Security.Cryptography.CngAlgorithmGroup)
  parent: System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(CngAlgorithmGroup)
  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithmGroup>.Equals(System.Security.Cryptography.CngAlgorithmGroup)
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithmGroup).Equals(System.Security.Cryptography.CngAlgorithmGroup)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithmGroup>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.CngAlgorithmGroup
    name: CngAlgorithmGroup
    fullName: System.Security.Cryptography.CngAlgorithmGroup
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Security.Cryptography.CngAlgorithmGroup).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.CngAlgorithmGroup
    name: CngAlgorithmGroup
    fullName: System.Security.Cryptography.CngAlgorithmGroup
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
