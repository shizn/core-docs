items:
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  id: IEnumerator
  parent: System.Collections
  children:
  - System.Collections.IEnumerator.Current
  - System.Collections.IEnumerator.MoveNext
  - System.Collections.IEnumerator.Reset
  langs:
  - csharp
  - vb
  name: IEnumerator
  fullName: System.Collections.IEnumerator
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IEnumerator
    path: src/mscorlib/src/System/Collections/IEnumerator.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Supports a simple iteration over a non-generic collection.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is the base interface for all non-generic enumerators.</p>\n<p>For the generic version of this interface see <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>The <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is provided for COM interoperability and does not need to be fully implemented; instead, the implementer can throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. You must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. </p>\n<p>To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref>, if itâ€™s implemented, followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is not implemented, you must create a new enumerator instance to return to the first element of the collection.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interfaces for a custom collection. In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of <strong>foreach</strong> (<strong>for each</strong> in Visual Basic) to iterate through the collection.</p>System.Collections_EnumeratorInterfaces#1"
  syntax:
    content: >-
      [Guid("496B0ABF-CDEE-11d3-88E8-00902754C43A")]

      [ComVisible(true)]

      public interface IEnumerator
    content.vb: >-
      <Guid("496B0ABF-CDEE-11d3-88E8-00902754C43A")>

      <ComVisible(True)>

      Public Interface IEnumerator
  seealso:
  - type: System.Collections.IEnumerable
    commentId: T:System.Collections.IEnumerable
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  id: Current
  parent: System.Collections.IEnumerator
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Current
    path: src/mscorlib/src/System/Collections/IEnumerator.cs
    startLine: 40
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets the current element in the collection.</p>\n"
  remarks: "\n<p>After an enumerator is created or after the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is called, the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property; otherwise, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>should throw an  <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> if the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the collection.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator, and consecutive calls to <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> return the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interfaces for a custom collection. In this example, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is not explicitly called, but it is implemented to support the use of <strong>foreach</strong> (<strong>for each</strong> in Visual Basic). This code example is part of a larger example for the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections_EnumeratorInterfaces#2"
  syntax:
    content: object Current { get; }
    content.vb: ReadOnly Property Current As Object
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  id: MoveNext
  parent: System.Collections.IEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MoveNext
    path: src/mscorlib/src/System/Collections/IEnumerator.cs
    startLine: 32
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Advances the enumerator to the next element of the collection.</p>\n"
  remarks: "\n<p>After an enumerator is created or after the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is called, an enumerator is positioned before the first element of the collection, and the first call to the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method moves the enumerator over the first element of the collection.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong> until <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interfaces for a custom collection. In this example, <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is not explicitly called, but it is implemented to support the use of <strong>foreach</strong> (<strong>for each</strong> in Visual Basic). This code example is part of a larger example for the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections_EnumeratorInterfaces#2"
  syntax:
    content: bool MoveNext()
    content.vb: Function MoveNext As Boolean
    return:
      type: System.Boolean
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Current
    commentId: P:System.Collections.IEnumerator.Current
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  id: Reset
  parent: System.Collections.IEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Collections.IEnumerator.Reset()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reset
    path: src/mscorlib/src/System/Collections/IEnumerator.cs
    startLine: 50
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\n"
  remarks: "\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is provided for COM interoperability. It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interfaces for a custom collection. In this example, <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is not explicitly called, but it is implemented to support the use of <strong>foreach</strong> (<strong>for each</strong> in Visual Basic). This code example is part of a larger example for the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections_EnumeratorInterfaces#2"
  syntax:
    content: void Reset()
    content.vb: Sub Reset
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IEnumerator.Current
    commentId: P:System.Collections.IEnumerator.Current
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
