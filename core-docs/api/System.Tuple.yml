items:
- uid: System.Tuple
  commentId: T:System.Tuple
  id: Tuple
  parent: System
  children:
  - System.Tuple.Create``1(``0)
  - System.Tuple.Create``2(``0,``1)
  - System.Tuple.Create``3(``0,``1,``2)
  - System.Tuple.Create``4(``0,``1,``2,``3)
  - System.Tuple.Create``5(``0,``1,``2,``3,``4)
  - System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)
  - System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)
  - System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  langs:
  - csharp
  - vb
  name: Tuple
  fullName: System.Tuple
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Tuple
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides static methods for creating tuple objects. </p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/tuple.cs#9124c4bea9ab0199\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/tuple.cs#9124c4bea9ab0199\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>A tuple is a data structure that has a specific number and sequence of elements. An example of a tuple is a data structure with three elements (known as a 3-tuple or triple) that is used to store an identifier such as a person's name in the first element, a year in the second element, and the person's income for that year in the third element. The .NET Framework directly supports tuples with one to seven elements. In addition, you can create tuples of eight or more elements by nesting tuple objects in the <xref href=\"System.Tuple`8.Rest\" data-throw-if-not-resolved=\"false\"></xref> property of a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Tuples are commonly used in four ways:</p>\n<ul><li>\n<p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.</p>\n</li><li>\n<p>To provide easy access to, and manipulation of, a data set. </p>\n</li><li>\n<p>To return multiple values from a method without using <strong>out</strong> parameters (in C#) or <strong>ByRef</strong> parameters (in Visual Basic).</p>\n</li><li>\n<p>To pass multiple values to a method through a single parameter. For example, the <xref href=\"System.Threading.Thread.Start(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method has a single parameter that lets you supply one value to the method that the thread executes at startup time. If you supply a <xref href=\"System.Tuple`3\" data-throw-if-not-resolved=\"false\"></xref> object as the method argument, you can supply the threadâ€™s startup routine with three items of data.</p>\n</li></ul>\n<p>The <xref href=\"System.Tuple\" data-throw-if-not-resolved=\"false\"></xref> class does not itself represent a tuple. Instead, it is a class that provides static methods for creating instances of the tuple types that are supported by the .NET Framework. It provides helper methods that you can call to instantiate tuple objects without having to explicitly specify the type of each tuple component. </p>\n<p>Although you can create an instance of a tuple class by calling its class constructor, the code to do so can be cumbersome. The following example uses a class constructor to create a 7-tuple or septuple that contains population data for New York City for each census from 1950 through 2000.</p>System.Tuple.Class#1<p>Creating the same tuple object by using a helper method is more straightforward, as the following example shows.</p>System.Tuple.Class#2<p>The <see cref=\"Overload:System.Tuple.Create\"></see> helper methods directly support the creation of tuple objects that have from one to eight components (that is, singletons through octuples). Although there is no practical limit to the number of components a tuple may have, helper methods are not available to create a tuple with nine or more components. To create such a tuple, you must call the <xref href=\"System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p><p>For additional information and examples that use tuples, see the documentation for the individual tuple types in the .NET Framework. These are listed in the See Also section at the end of this topic.</p>"
  example:
  - "\n<p>The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20. </p>System.Tuple.Create#17"
  syntax:
    content: public class Tuple
    content.vb: Public Class Tuple
  seealso:
  - type: System.Tuple`1
    commentId: T:System.Tuple`1
  - type: System.Tuple`2
    commentId: T:System.Tuple`2
  - type: System.Tuple`3
    commentId: T:System.Tuple`3
  - type: System.Tuple`4
    commentId: T:System.Tuple`4
  - type: System.Tuple`5
    commentId: T:System.Tuple`5
  - type: System.Tuple`6
    commentId: T:System.Tuple`6
  - type: System.Tuple`7
    commentId: T:System.Tuple`7
  - type: System.Tuple`8
    commentId: T:System.Tuple`8
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Tuple.Create``1(``0)
  commentId: M:System.Tuple.Create``1(``0)
  id: Create``1(``0)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1>(T1)
  fullName: System.Tuple.Create<T1>(T1)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 22
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 1-tuple, or singleton.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate a 1-tuple object without having to explicitly specify the type of its component. The following example uses the <xref href=\"System.Tuple.Create``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 1-tuple whose component is of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Tuple.Create#1<p>This code is equivalent to the following call to the <xref href=\"System.Tuple`1.#ctor(`0)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#2"
  example:
  - 
  syntax:
    content: public static Tuple<T1> Create<T1>(T1 item1)
    content.vb: Public Shared Function Create(Of T1)(item1 As T1) As Tuple(Of T1)
    parameters:
    - id: item1
      type: '{T1}'
    typeParameters:
    - id: T1
    return:
      type: System.Tuple{{T1}}
  seealso:
  - type: System.Tuple`1
    commentId: T:System.Tuple`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1)(T1)
  name.vb: Create(Of T1)(T1)
- uid: System.Tuple.Create``2(``0,``1)
  commentId: M:System.Tuple.Create``2(``0,``1)
  id: Create``2(``0,``1)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1, T2>(T1, T2)
  fullName: System.Tuple.Create<T1, T2>(T1, T2)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 26
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 2-tuple, or pair.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``2(``0,``1)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate a 2-tuple object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``2(``0,``1)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 2-tuple.</p>System.Tuple.Create#3<p>This code is equivalent to the following call to the <xref href=\"System.Tuple`2.#ctor(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#4"
  example:
  - 
  syntax:
    content: public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2)
    content.vb: Public Shared Function Create(Of T1, T2)(item1 As T1, item2 As T2) As Tuple(Of T1, T2)
    parameters:
    - id: item1
      type: '{T1}'
    - id: item2
      type: '{T2}'
    typeParameters:
    - id: T1
    - id: T2
    return:
      type: System.Tuple{{T1},{T2}}
  seealso:
  - type: System.Tuple`2
    commentId: T:System.Tuple`2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1, T2)(T1, T2)
  name.vb: Create(Of T1, T2)(T1, T2)
- uid: System.Tuple.Create``3(``0,``1,``2)
  commentId: M:System.Tuple.Create``3(``0,``1,``2)
  id: Create``3(``0,``1,``2)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3>(T1, T2, T3)
  fullName: System.Tuple.Create<T1, T2, T3>(T1, T2, T3)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 3-tuple, or triple.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``3(``0,``1,``2)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate a 3-tuple object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``3(``0,``1,``2)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 3-tuple.</p>System.Tuple.Create#5<p>This code is equivalent to the following call to the <xref href=\"System.Tuple`3.#ctor(`0,`1,`2)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#6"
  example:
  - 
  syntax:
    content: public static Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3)
    content.vb: Public Shared Function Create(Of T1, T2, T3)(item1 As T1, item2 As T2, item3 As T3) As Tuple(Of T1, T2, T3)
    parameters:
    - id: item1
      type: '{T1}'
    - id: item2
      type: '{T2}'
    - id: item3
      type: '{T3}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    return:
      type: System.Tuple{{T1},{T2},{T3}}
  seealso:
  - type: System.Tuple`3
    commentId: T:System.Tuple`3
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1, T2, T3)(T1, T2, T3)
  name.vb: Create(Of T1, T2, T3)(T1, T2, T3)
- uid: System.Tuple.Create``4(``0,``1,``2,``3)
  commentId: M:System.Tuple.Create``4(``0,``1,``2,``3)
  id: Create``4(``0,``1,``2,``3)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4>(T1, T2, T3, T4)
  fullName: System.Tuple.Create<T1, T2, T3, T4>(T1, T2, T3, T4)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 34
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 4-tuple, or quadruple.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``4(``0,``1,``2,``3)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate a 4-tuple object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``4(``0,``1,``2,``3)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 4-tuple.</p>System.Tuple.Create#7<p>This code is equivalent to the following call to the <xref href=\"System.Tuple`4.#ctor(`0,`1,`2,`3)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#8"
  example:
  - 
  syntax:
    content: public static Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4)
    content.vb: Public Shared Function Create(Of T1, T2, T3, T4)(item1 As T1, item2 As T2, item3 As T3, item4 As T4) As Tuple(Of T1, T2, T3, T4)
    parameters:
    - id: item1
      type: '{T1}'
    - id: item2
      type: '{T2}'
    - id: item3
      type: '{T3}'
    - id: item4
      type: '{T4}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    return:
      type: System.Tuple{{T1},{T2},{T3},{T4}}
  seealso:
  - type: System.Tuple`4
    commentId: T:System.Tuple`4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1, T2, T3, T4)(T1, T2, T3, T4)
  name.vb: Create(Of T1, T2, T3, T4)(T1, T2, T3, T4)
- uid: System.Tuple.Create``5(``0,``1,``2,``3,``4)
  commentId: M:System.Tuple.Create``5(``0,``1,``2,``3,``4)
  id: Create``5(``0,``1,``2,``3,``4)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5)
  fullName: System.Tuple.Create<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 38
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 5-tuple, or quintuple.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``5(``0,``1,``2,``3,``4)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate a 5-tuple object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``5(``0,``1,``2,``3,``4)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 5-tuple.</p>System.Tuple.Create#9<p>This code is equivalent to the following call to the <xref href=\"System.Tuple`5.#ctor(`0,`1,`2,`3,`4)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#10"
  example:
  - 
  syntax:
    content: public static Tuple<T1, T2, T3, T4, T5> Create<T1, T2, T3, T4, T5>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5)
    content.vb: Public Shared Function Create(Of T1, T2, T3, T4, T5)(item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5) As Tuple(Of T1, T2, T3, T4, T5)
    parameters:
    - id: item1
      type: '{T1}'
    - id: item2
      type: '{T2}'
    - id: item3
      type: '{T3}'
    - id: item4
      type: '{T4}'
    - id: item5
      type: '{T5}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
    return:
      type: System.Tuple{{T1},{T2},{T3},{T4},{T5}}
  seealso:
  - type: System.Tuple`5
    commentId: T:System.Tuple`5
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1, T2, T3, T4, T5)(T1, T2, T3, T4, T5)
  name.vb: Create(Of T1, T2, T3, T4, T5)(T1, T2, T3, T4, T5)
- uid: System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)
  commentId: M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)
  id: Create``6(``0,``1,``2,``3,``4,``5)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6)
  fullName: System.Tuple.Create<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 42
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 6-tuple, or sextuple.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate a 6-tuple object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 6-tuple.</p>System.Tuple.Create#11<p>This code is equivalent to the following call to the <xref href=\"System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#12"
  example:
  - 
  syntax:
    content: public static Tuple<T1, T2, T3, T4, T5, T6> Create<T1, T2, T3, T4, T5, T6>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6)
    content.vb: Public Shared Function Create(Of T1, T2, T3, T4, T5, T6)(item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6) As Tuple(Of T1, T2, T3, T4, T5, T6)
    parameters:
    - id: item1
      type: '{T1}'
    - id: item2
      type: '{T2}'
    - id: item3
      type: '{T3}'
    - id: item4
      type: '{T4}'
    - id: item5
      type: '{T5}'
    - id: item6
      type: '{T6}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
    - id: T6
    return:
      type: System.Tuple{{T1},{T2},{T3},{T4},{T5},{T6}}
  seealso:
  - type: System.Tuple`6
    commentId: T:System.Tuple`6
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1, T2, T3, T4, T5, T6)(T1, T2, T3, T4, T5, T6)
  name.vb: Create(Of T1, T2, T3, T4, T5, T6)(T1, T2, T3, T4, T5, T6)
- uid: System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)
  commentId: M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)
  id: Create``7(``0,``1,``2,``3,``4,``5,``6)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4, T5, T6, T7>(T1, T2, T3, T4, T5, T6, T7)
  fullName: System.Tuple.Create<T1, T2, T3, T4, T5, T6, T7>(T1, T2, T3, T4, T5, T6, T7)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 46
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 7-tuple, or septuple.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate a 7-tuple object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 7-tuple.</p>System.Tuple.Create#13<p>This code is equivalent to the following call to the <xref href=\"System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#14"
  example:
  - 
  syntax:
    content: public static Tuple<T1, T2, T3, T4, T5, T6, T7> Create<T1, T2, T3, T4, T5, T6, T7>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7)
    content.vb: Public Shared Function Create(Of T1, T2, T3, T4, T5, T6, T7)(item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7) As Tuple(Of T1, T2, T3, T4, T5, T6, T7)
    parameters:
    - id: item1
      type: '{T1}'
    - id: item2
      type: '{T2}'
    - id: item3
      type: '{T3}'
    - id: item4
      type: '{T4}'
    - id: item5
      type: '{T5}'
    - id: item6
      type: '{T6}'
    - id: item7
      type: '{T7}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
    - id: T6
    - id: T7
    return:
      type: System.Tuple{{T1},{T2},{T3},{T4},{T5},{T6},{T7}}
  seealso:
  - type: System.Tuple`7
    commentId: T:System.Tuple`7
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1, T2, T3, T4, T5, T6, T7)(T1, T2, T3, T4, T5, T6, T7)
  name.vb: Create(Of T1, T2, T3, T4, T5, T6, T7)(T1, T2, T3, T4, T5, T6, T7)
- uid: System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  commentId: M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  id: Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  parent: System.Tuple
  langs:
  - csharp
  - vb
  name: Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1, T2, T3, T4, T5, T6, T7, T8)
  fullName: System.Tuple.Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1, T2, T3, T4, T5, T6, T7, T8)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Tuple.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Tuple.cs
    startLine: 50
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new 8-tuple, or octuple.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)\" data-throw-if-not-resolved=\"false\"></xref> is a helper method that you can call to instantiate an 8-tuple without having to explicitly specify the types of its components. </p>\n<p>You must call the  <xref href=\"System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)\" data-throw-if-not-resolved=\"false\"></xref> constructor to create a tuple with nine or more components unless your language provides a special syntax for this purpose. The static (<strong>Shared</strong> in Visual Basic) methods of the <xref href=\"System.Tuple\" data-throw-if-not-resolved=\"false\"></xref> class cannot be used to create a tuple with nine or more components.</p>\n"
  example:
  - "\n<p>The following example creates an 8-tuple whose components are prime numbers that are less than 20.</p>System.Tuple.Create#17<p>This is equivalent to the following example, which uses the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> class constructor instead of the <xref href=\"System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)\" data-throw-if-not-resolved=\"false\"></xref> factory creation method. Note that instantiating a <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object in this way involves considerably more code, because you must declare a nested <xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref> object as the <xref href=\"System.Tuple`8\" data-throw-if-not-resolved=\"false\"></xref> object's eighth component to produce an octuple.</p>System.Tuple.Create#20"
  syntax:
    content: public static Tuple<T1, T2, T3, T4, T5, T6, T7, Tuple<T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8)
    content.vb: Public Shared Function Create(Of T1, T2, T3, T4, T5, T6, T7, T8)(item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, item8 As T8) As Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8))
    parameters:
    - id: item1
      type: '{T1}'
    - id: item2
      type: '{T2}'
    - id: item3
      type: '{T3}'
    - id: item4
      type: '{T4}'
    - id: item5
      type: '{T5}'
    - id: item6
      type: '{T6}'
    - id: item7
      type: '{T7}'
    - id: item8
      type: '{T8}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
    - id: T6
    - id: T7
    - id: T8
    return:
      type: System.Tuple{{T1},{T2},{T3},{T4},{T5},{T6},{T7},System.Tuple{{T8}}}
  seealso:
  - type: System.Tuple`8
    commentId: T:System.Tuple`8
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Tuple.Create(Of T1, T2, T3, T4, T5, T6, T7, T8)(T1, T2, T3, T4, T5, T6, T7, T8)
  name.vb: Create(Of T1, T2, T3, T4, T5, T6, T7, T8)(T1, T2, T3, T4, T5, T6, T7, T8)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: System.Tuple{{T1}}
  parent: System
  definition: System.Tuple`1
  name: Tuple<T1>
  fullName: System.Tuple<T1>
  fullname.vb: System.Tuple(Of T1)
  name.vb: Tuple(Of T1)
  spec.csharp:
  - uid: System.Tuple`1
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`1
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: )
    fullName: )
- uid: System.Tuple`1
  parent: System
  isExternal: false
  name: Tuple<T1>
  fullName: System.Tuple<T1>
  fullname.vb: System.Tuple(Of T1)
  name.vb: Tuple(Of T1)
  spec.csharp:
  - uid: System.Tuple`1
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`1
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: )
    fullName: )
- uid: '{T2}'
  isExternal: false
  name: T2
  fullName: T2
- uid: System.Tuple{{T1},{T2}}
  parent: System
  definition: System.Tuple`2
  name: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  fullname.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: )
    fullName: )
- uid: System.Tuple`2
  parent: System
  isExternal: false
  name: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  fullname.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: )
    fullName: )
- uid: '{T3}'
  isExternal: false
  name: T3
  fullName: T3
- uid: System.Tuple{{T1},{T2},{T3}}
  parent: System
  definition: System.Tuple`3
  name: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  fullname.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: )
    fullName: )
- uid: System.Tuple`3
  parent: System
  isExternal: false
  name: Tuple<T1, T2, T3>
  fullName: System.Tuple<T1, T2, T3>
  fullname.vb: System.Tuple(Of T1, T2, T3)
  name.vb: Tuple(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`3
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: )
    fullName: )
- uid: '{T4}'
  isExternal: false
  name: T4
  fullName: T4
- uid: System.Tuple{{T1},{T2},{T3},{T4}}
  parent: System
  definition: System.Tuple`4
  name: Tuple<T1, T2, T3, T4>
  fullName: System.Tuple<T1, T2, T3, T4>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4)
  name.vb: Tuple(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Tuple`4
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`4
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: )
    fullName: )
- uid: System.Tuple`4
  parent: System
  isExternal: false
  name: Tuple<T1, T2, T3, T4>
  fullName: System.Tuple<T1, T2, T3, T4>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4)
  name.vb: Tuple(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Tuple`4
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`4
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: )
    fullName: )
- uid: '{T5}'
  isExternal: false
  name: T5
  fullName: T5
- uid: System.Tuple{{T1},{T2},{T3},{T4},{T5}}
  parent: System
  definition: System.Tuple`5
  name: Tuple<T1, T2, T3, T4, T5>
  fullName: System.Tuple<T1, T2, T3, T4, T5>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5)
  name.vb: Tuple(Of T1, T2, T3, T4, T5)
  spec.csharp:
  - uid: System.Tuple`5
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`5
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: )
    fullName: )
- uid: System.Tuple`5
  parent: System
  isExternal: false
  name: Tuple<T1, T2, T3, T4, T5>
  fullName: System.Tuple<T1, T2, T3, T4, T5>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5)
  name.vb: Tuple(Of T1, T2, T3, T4, T5)
  spec.csharp:
  - uid: System.Tuple`5
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`5
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: )
    fullName: )
- uid: '{T6}'
  isExternal: false
  name: T6
  fullName: T6
- uid: System.Tuple{{T1},{T2},{T3},{T4},{T5},{T6}}
  parent: System
  definition: System.Tuple`6
  name: Tuple<T1, T2, T3, T4, T5, T6>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6)
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6)
  spec.csharp:
  - uid: System.Tuple`6
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`6
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: )
    fullName: )
- uid: System.Tuple`6
  parent: System
  isExternal: false
  name: Tuple<T1, T2, T3, T4, T5, T6>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6)
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6)
  spec.csharp:
  - uid: System.Tuple`6
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`6
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: )
    fullName: )
- uid: '{T7}'
  isExternal: false
  name: T7
  fullName: T7
- uid: System.Tuple{{T1},{T2},{T3},{T4},{T5},{T6},{T7}}
  parent: System
  definition: System.Tuple`7
  name: Tuple<T1, T2, T3, T4, T5, T6, T7>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7)
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6, T7)
  spec.csharp:
  - uid: System.Tuple`7
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`7
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: )
    fullName: )
- uid: System.Tuple`7
  parent: System
  isExternal: false
  name: Tuple<T1, T2, T3, T4, T5, T6, T7>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7)
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6, T7)
  spec.csharp:
  - uid: System.Tuple`7
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`7
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: )
    fullName: )
- uid: '{T8}'
  isExternal: false
  name: T8
  fullName: T8
- uid: System.Tuple{{T1},{T2},{T3},{T4},{T5},{T6},{T7},System.Tuple{{T8}}}
  parent: System
  definition: System.Tuple`8
  name: Tuple<T1, T2, T3, T4, T5, T6, T7, Tuple<T8>>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, System.Tuple<T8>>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, System.Tuple(Of T8))
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8))
  spec.csharp:
  - uid: System.Tuple`8
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: ', '
    fullName: ', '
  - uid: System.Tuple`1
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T8
    fullName: T8
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`8
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: ', '
    fullName: ', '
  - uid: System.Tuple`1
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T8
    fullName: T8
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Tuple`8
  parent: System
  isExternal: false
  name: Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>
  fullname.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)
  spec.csharp:
  - uid: System.Tuple`8
    name: Tuple
    fullName: System.Tuple
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: ', '
    fullName: ', '
  - name: TRest
    fullName: TRest
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`8
    name: Tuple
    fullName: System.Tuple
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: T6
    fullName: T6
  - name: ', '
    fullName: ', '
  - name: T7
    fullName: T7
  - name: ', '
    fullName: ', '
  - name: TRest
    fullName: TRest
  - name: )
    fullName: )
