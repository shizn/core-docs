items:
- uid: System.Threading.Tasks.TaskFactory`1
  commentId: T:System.Threading.Tasks.TaskFactory`1
  id: TaskFactory`1
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskFactory`1.#ctor
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CancellationToken
  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.CreationOptions
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.Scheduler
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  langs:
  - csharp
  - vb
  name: TaskFactory<TResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  type: Class
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TaskFactory
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 477
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>The .NET Framework provides two factories for creating and scheduling tasks: </p>\n<ul><li>\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> class, which creates <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n</li><li>\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> class, which creates <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n</li></ul>\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> class allows you to do the following: </p>\n<ul><li>\n<p>Create a task and start it immediately by calling the <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> method. You can call the overloads of this method to create and execute a task that requires non-default arguments. </p>\n<p>Starting with the .NET Framework 4.5, the <xref href=\"System.Threading.Tasks.Task.Run(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> method provides the easiest way to create a task with default configuration values and start it immediately. </p>\n</li><li>\n<p>Create a task that starts when any one of the tasks in an array has completed by calling the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\" data-throw-if-not-resolved=\"false\"></xref> or   <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li><li>\n<p>Create a task that starts when all the tasks in an array have completed by calling the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li></ul>\n<p>The static <xref href=\"System.Threading.Tasks.Task`1.Factory\" data-throw-if-not-resolved=\"false\"></xref> property returns a default <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> object. You can also call one of the <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> class constructors to configure the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects that  the <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> class creates. The following example configures a new <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler. </p>TPL_Factories#2<p>In most cases, you do not have to instantiate a new <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance. Instead, you can use the static <xref href=\"System.Threading.Tasks.Task`1.Factory\" data-throw-if-not-resolved=\"false\"></xref> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example. </p>"
  example:
  - "\n<p>The following example uses the static <xref href=\"System.Threading.Tasks.Task`1.Factory\" data-throw-if-not-resolved=\"false\"></xref> property to make two calls to the <see cref=\"Overload:System.Threading.Tasks.TaskFactory`1.StartNew\"></see> method. The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\" data-throw-if-not-resolved=\"false\"></xref> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.</p>System.Threading.Tasks.Task.Factory#2"
  syntax:
    content: 'public class TaskFactory<TResult> : object'
    content.vb: >-
      Public Class TaskFactory(Of TResult)
          Inherits Object
    typeParameters:
    - id: TResult
      description: "\n<p>The return value of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects that the methods of this class create. </p>\n"
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult)
  name.vb: TaskFactory(Of TResult)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory()
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 479
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the default configuration.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with a default configuration. The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskCreationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskContinuationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory()
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 480
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the default configuration.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with a default configuration. The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskCreationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskContinuationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken)
    content.vb: Public Sub New(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 481
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  remarks: "\n<p>With this constructor, the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>creationOptions</em>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>continuationOptions</em>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>scheduler</em>, unless it's <strong>null</strong>, in which case the property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The default scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>. A null value indicates that <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref> should be used.</p>\n<p></p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 482
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  remarks: "\n<p>With this constructor, the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>creationOptions</em>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>continuationOptions</em>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 483
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  remarks: "\n<p>With this constructor, the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskCreationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskContinuationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>scheduler</em>, unless it's <strong>null</strong>, in which case the property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(TaskScheduler scheduler)
    content.vb: Public Sub New(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>. A null value indicates that the current <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> should be used.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  commentId: P:System.Threading.Tasks.TaskFactory`1.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: CancellationToken
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancellationToken
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 484
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default cancellation token for this task factory.</p>\n"
  remarks: "\n<p>This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods. </p>\n<p></p>\n"
  example:
  - 
  syntax:
    content: public CancellationToken CancellationToken { get; }
    content.vb: Public ReadOnly Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: "\n<p>The default cancellation token for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  commentId: P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinuationOptions
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 485
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> enumeration value for this task factory.</p>\n"
  remarks: "\n<p>This property returns the default continuation options for this factory. They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.</p>\n"
  example:
  - 
  syntax:
    content: public TaskContinuationOptions ContinuationOptions { get; }
    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that specifies the default continuation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  commentId: P:System.Threading.Tasks.TaskFactory`1.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: CreationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreationOptions
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 486
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> enumeration value for this task factory.</p>\n"
  remarks: "\n<p>This property returns the default creation options for this factory. They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.</p>\n"
  example:
  - 
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that specifies the default creation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  commentId: P:System.Threading.Tasks.TaskFactory`1.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: Scheduler
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Scheduler
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 487
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the task scheduler for this task factory.</p>\n"
  remarks: "\n<p>This property returns the default scheduler for this factory. It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.</p>\n<p>If this property returns <strong>null</strong>, <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref> will be used.</p>\n"
  example:
  - 
  syntax:
    content: public TaskScheduler Scheduler { get; }
    content.vb: Public ReadOnly Property Scheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).Scheduler
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Func<Task[], TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 488
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 489
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>continuationFunction</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 490
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The scheduler that is used to schedule the created continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>continuationOptions</em> specifies an invalid value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 491
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 492
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 493
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 494
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The scheduler that is used to schedule the created continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 495
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Func<Task, TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 496
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 497
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 498
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the created continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 499
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 500
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 501
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 502
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 503
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  remarks: "\n<p>After completion, a task is in one of these states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> states.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 504
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 505
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 506
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult))
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 507
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 508
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the task that executes the end method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 509
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 510
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 511
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 512
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>An object that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 513
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 514
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>. Exceptions for <em>endmethod</em> are thrown when waiting on the returned task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>An object that controls the behavior of the created task.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  id: StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 515
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors, and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function)
    content.vb: Public Function StartNew(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult))
  name.vb: StartNew(Func(Of TResult))
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 516
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken)
  name.vb: StartNew(Func(Of TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 517
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<TResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 518
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Func(Of TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  id: StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<Object, TResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 519
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object)
  name.vb: StartNew(Func(Of Object, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<Object, TResult>, Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 520
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 521
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew(Func<Object, TResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 522
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a task by using one of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution.</p>\n<p>However, unless creation and scheduling must be separated, <strong>StartNew</strong> is the recommended approach for both simplicity and performance.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Func(Of Object, TResult), Object, TaskCreationOptions)
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task[]
  isExternal: false
  name: Task[]
  fullName: System.Threading.Tasks.Task[]
  fullname.vb: System.Threading.Tasks.Task()
  name.vb: Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}
  definition: System.Func`2
  name: Func<Task[], TResult>
  fullName: System.Func<System.Threading.Tasks.Task[], TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)
  name.vb: Func(Of Task(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  fullName: System.Func<, >
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]
  isExternal: false
  name: Task<TAntecedentResult>[]
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  fullname.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()
  name.vb: Task(Of TAntecedentResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>[], TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  definition: System.Func`2
  name: Func<Task, TResult>
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  name.vb: Func(Of Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>, TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`3
  name: Func<AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{System.IAsyncResult,{TResult}}
  definition: System.Func`2
  name: Func<IAsyncResult, TResult>
  fullName: System.Func<System.IAsyncResult, TResult>
  fullname.vb: System.Func(Of System.IAsyncResult, TResult)
  name.vb: Func(Of IAsyncResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<, , >
  fullName: System.Func<, , >
  fullname.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`4
  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg1}'
  isExternal: false
  name: TArg1
  fullName: TArg1
- uid: System.Func`4
  isExternal: false
  name: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`5
  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg2}'
  isExternal: false
  name: TArg2
  fullName: TArg2
- uid: System.Func`5
  isExternal: false
  name: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`6
  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg3}'
  isExternal: false
  name: TArg3
  fullName: TArg3
- uid: System.Func`6
  isExternal: false
  name: Func<T1, T2, T3, T4, T5, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TResult}}
  definition: System.Func`1
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<>
  fullName: System.Func<>
  fullname.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{System.Object,{TResult}}
  definition: System.Func`2
  name: Func<Object, TResult>
  fullName: System.Func<System.Object, TResult>
  fullname.vb: System.Func(Of System.Object, TResult)
  name.vb: Func(Of Object, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
