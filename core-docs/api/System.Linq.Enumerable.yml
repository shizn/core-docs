items:
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  id: Enumerable
  parent: System.Linq
  children:
  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.Empty``1
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Range(System.Int32,System.Int32)
  - System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  langs:
  - csharp
  - vb
  name: Enumerable
  fullName: System.Linq.Enumerable
  type: Class
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Zip.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enumerable
    path: src/System.Linq/src/System/Linq/Zip.cs
    startLine: 8
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Provides a set of static (Shared in Visual Basic) methods for querying objects that implement <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: 'public class Enumerable : object'
    content.vb: >-
      Public Class Enumerable
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  commentId: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TSource, TSource>)
  fullName: System.Linq.Enumerable.Aggregate<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 12
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence.
  syntax:
    content: public static TSource Aggregate<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
      description: An accumulator function to be invoked on each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>func</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TSource, TSource))
  name.vb: Aggregate(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))
- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  commentId: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  id: Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate>(Collections.Generic.IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 13
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As Collections.Generic.IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TAccumulate
      description: The type of the accumulator value.
    return:
      type: '{TAccumulate}'
      description: The final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>func</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Aggregate(Of TSource, TAccumulate)(Collections.Generic.IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  commentId: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(Collections.Generic.IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 14
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As Collections.Generic.IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: An accumulator function to be invoked on each element.
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: A function to transform the final accumulator value into the result value.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TAccumulate
      description: The type of the accumulator value.
    - id: TResult
      description: The type of the resulting value.
    return:
      type: '{TResult}'
      description: The transformed final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>func</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(Collections.Generic.IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: All<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.All<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: All
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 15
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether all elements of a sequence satisfy a condition.
  syntax:
    content: public static bool All<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements to apply the predicate to.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.All(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: All(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  id: Any``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 16
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether a sequence contains any elements.
  syntax:
    content: public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to check for emptiness.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if the source sequence contains any elements; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Any(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 17
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether any element of a sequence satisfies a condition.
  syntax:
    content: public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to apply the predicate to.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Any(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  id: AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: AsEnumerable<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.AsEnumerable<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsEnumerable
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 18
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the input typed as <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEnumerable(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to type as <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The input sequence typed as <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.AsEnumerable(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: AsEnumerable(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Average(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 19
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static decimal Average(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: A sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Average(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  id: Average(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 20
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Average(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: A sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Average(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  id: Average(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 21
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Average(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Average(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  id: Average(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 22
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Average(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Long)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: A sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Average(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 23
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<decimal> Average(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 24
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Average(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 25
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Average(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 26
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Average(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 27
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<float> Average(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Average(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  id: Average(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 28
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static float Average(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: A sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Single
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Average(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 29
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static decimal Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 30
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 31
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 32
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of source.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 33
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<decimal> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 34
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 35
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum of the elements in the sequence is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 36
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 37
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<float> Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 38
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static float Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Single
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Average(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  id: Cast``1(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Cast<TResult>(Collections.IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cast
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 39
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Casts the elements of an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> to the specified type.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Cast<TResult>(this Collections.IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As Collections.IEnumerable) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: The <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> that contains the elements to be cast to type <em>TResult</em>.
    typeParameters:
    - id: TResult
      description: The type to cast the elements of <em>source</em> to.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains each element of the source sequence cast to the specified type.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: An element in the sequence cannot be cast to type <em>TResult</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(Collections.IEnumerable)
- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 40
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Concatenates two sequences.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Concat<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The first sequence to concatenate.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to concatenate to the first sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the concatenated elements of the two input sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Concat(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Append<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Append
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 41
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Append<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Append(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), element As TSource) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: element
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Append(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Append(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Prepend<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prepend
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 42
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Prepend<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Prepend(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), element As TSource) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: element
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Prepend(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Prepend(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 43
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether a sequence contains a specified element by using the default equality comparer.
  syntax:
    content: public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), value As TSource) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence in which to locate a value.
    - id: value
      type: '{TSource}'
      description: The value to locate in the sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if the source sequence contains an element that has the specified value; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(Collections.Generic.IEnumerable<TSource>, TSource, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 44
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether a sequence contains a specified element by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), value As TSource, comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence in which to locate a value.
    - id: value
      type: '{TSource}'
      description: The value to locate in the sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An equality comparer to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if the source sequence contains an element that has the specified value; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource, Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  id: Count``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 45
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the number of elements in a sequence.
  syntax:
    content: public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence that contains elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The number of elements in the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements in <em>source</em> is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Count(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 46
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns a number that represents how many elements in the specified sequence satisfy a condition.
  syntax:
    content: public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence that contains elements to be tested and counted.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: A number that represents how many elements in the sequence satisfy the condition in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements in <em>source</em> is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Count(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 47
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to return a default value for if it is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> object that contains the default value for the <em>TSource</em> type if <em>source</em> is empty; otherwise, <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(Collections.Generic.IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 48
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource defaultValue)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), defaultValue As TSource) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to return the specified value for if it is empty.
    - id: defaultValue
      type: '{TSource}'
      description: The value to return if the sequence is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains <em>defaultValue</em> if <em>source</em> is empty; otherwise, <em>source</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(Collections.Generic.IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 49
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns distinct elements from a sequence by using the default equality comparer to compare values.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to remove duplicate elements from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains distinct elements from the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 50
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns distinct elements from a sequence by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to remove duplicate elements from.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains distinct elements from the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ElementAt<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAt
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 51
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence.
  syntax:
    content: public static TSource ElementAt<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAt(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The element at the specified position in the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0 or greater than or equal to the number of elements in <em>source</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ElementAt(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAtOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 52
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAtOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ElementAtOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.Empty``1
  commentId: M:System.Linq.Enumerable.Empty``1
  id: Empty``1
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Empty<TResult>()
  fullName: System.Linq.Enumerable.Empty<TResult>()
  type: Method
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Enumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq/src/System/Linq/Enumerable.cs
    startLine: 15
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns an empty <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that has the specified type argument.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Empty<TResult>()
    content.vb: Public Shared Function Empty(Of TResult) As Collections.Generic.IEnumerable(Of TResult)
    typeParameters:
    - id: TResult
      description: The type to assign to the type parameter of the returned generic <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An empty <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose type argument is <em>TResult</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Empty(Of TResult)()
  name.vb: Empty(Of TResult)()
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 54
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Produces the set difference of two sequences by using the default equality comparer to compare values.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements that are not also in <em>second</em> will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence that contains the set difference of the elements of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 55
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Produces the set difference of two sequences by using the specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements that are not also in <em>second</em> will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence that contains the set difference of the elements of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  id: First``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 56
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the first element of a sequence.
  syntax:
    content: public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The first element in the specified sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: First(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 57
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the first element in a sequence that satisfies a specified condition.
  syntax:
    content: public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The first element in the sequence that passes the test in the specified predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No element satisfies the condition in <em>predicate</em>.-or-The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: First(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 58
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 59
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FirstOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 60
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function.
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> object contains a sequence of objects and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 61
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> object contains a collection of objects and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 62
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A function to map each source element to an element in the <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in the <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> object contains a collection of objects of type <em>TElement</em> and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: GroupBy(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 63
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.
  syntax:
    content: public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A function to map each source element to an element in an <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in the <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> object contains a collection of objects of type <em>TElement</em> and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 64
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: A function to create a result value from each group.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 65
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys with.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 66
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A function to map each source element to an element in an <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: A function to create a result value from each group.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult))
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 67
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A function to map each source element to an element in an <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys with.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 68
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult))
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 69
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> is used to compare keys.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to hash and compare keys.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 70
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Produces the set intersection of two sequences by using the default equality comparer to compare values.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in <em>second</em> will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in the first sequence will be returned.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence that contains the elements that form the set intersection of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 71
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Produces the set intersection of two sequences by using the specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in <em>second</em> will be returned.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in the first sequence will be returned.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence that contains the elements that form the set intersection of two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 72
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: A function to create a result element from two matching elements.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(Collections.Generic.IEnumerable<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 73
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on matching keys. A specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> is used to compare keys.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As Collections.Generic.IEnumerable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: A function to create a result element from two matching elements.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to hash and compare keys.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(Collections.Generic.IEnumerable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  id: Last``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 74
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the last element of a sequence.
  syntax:
    content: public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return the last element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The value at the last position in the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Last(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 75
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a specified condition.
  syntax:
    content: public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The last element in the sequence that passes the test in the specified predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No element satisfies the condition in <em>predicate</em>.-or-The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Last(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 76
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the last element of a sequence, or a default value if the sequence contains no elements.
  syntax:
    content: public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return the last element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if the source sequence is empty; otherwise, the last element in the <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LastOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 77
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
  syntax:
    content: public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LastOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  id: LongCount``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 78
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> that represents the total number of elements in a sequence.
  syntax:
    content: public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The number of elements in the source sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements exceeds <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LongCount(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 79
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> that represents how many elements in a sequence satisfy a condition.
  syntax:
    content: public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements to be counted.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: A number that represents how many elements in the sequence satisfy the condition in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of matching elements exceeds <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LongCount(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Max(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 80
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static decimal Max(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: A sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Decimal
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Max(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  id: Max(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 81
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Max(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: A sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Double
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Max(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  id: Max(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 82
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static int Max(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Int32
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Max(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  id: Max(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 83
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static long Max(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: A sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Int64
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Max(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 84
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<decimal> Max(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Nullable{System.Decimal}
      description: "A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. "
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 85
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Max(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Nullable{System.Double}
      description: A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 86
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<int> Max(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Nullable{System.Int32}
      description: "A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. "
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 87
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<long> Max(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Nullable{System.Int64}
      description: "A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. "
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 88
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<float> Max(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Nullable{System.Single}
      description: A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Max(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  id: Max(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 89
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static float Max(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: A sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to determine the maximum value of.
    return:
      type: System.Single
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Max(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  id: Max``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 90
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the maximum value in a generic sequence.
  syntax:
    content: public static TSource Max<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 91
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static decimal Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Decimal
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 92
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static double Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 93
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static int Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 94
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static long Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 95
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<decimal> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Decimal}
      description: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 96
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<double> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 97
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<int> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int32}
      description: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 98
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<long> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int64}
      description: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 99
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<float> Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Single}
      description: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 100
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the maximum <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static float Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Single
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Max(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Max<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 101
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.
  syntax:
    content: public static TResult Max<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the maximum value of.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by <em>selector</em>.
    return:
      type: '{TResult}'
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Min(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 102
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static decimal Min(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: A sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Decimal
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Min(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  id: Min(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 103
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Min(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: A sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Double
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Min(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  id: Min(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 104
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static int Min(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Int32
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Min(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  id: Min(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 105
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static long Min(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: A sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Int64
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Min(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 106
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<decimal> Min(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Nullable{System.Decimal}
      description: A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 107
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Min(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Nullable{System.Double}
      description: A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 108
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<int> Min(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Nullable{System.Int32}
      description: A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 109
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<long> Min(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Nullable{System.Int64}
      description: A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 110
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<float> Min(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Nullable{System.Single}
      description: A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Min(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  id: Min(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 111
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static float Min(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: A sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to determine the minimum value of.
    return:
      type: System.Single
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Min(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  id: Min``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 112
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the minimum value in a generic sequence.
  syntax:
    content: public static TSource Min<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 113
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static decimal Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Decimal
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 114
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static double Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 115
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static int Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 116
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static long Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 117
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<decimal> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Decimal}
      description: The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 118
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<double> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 119
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<int> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int32}
      description: The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 120
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<long> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int64}
      description: The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 121
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static Nullable<float> Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Single}
      description: The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 122
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a sequence and returns the minimum <xref href="System.Single" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static float Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Single
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Min(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Min<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 123
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.
  syntax:
    content: public static TResult Min<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to determine the minimum value of.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by <em>selector</em>.
    return:
      type: '{TResult}'
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Min(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  id: OfType``1(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OfType<TResult>(Collections.IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OfType
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 124
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Filters the elements of an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> based on a specified type.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> OfType<TResult>(this Collections.IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As Collections.IEnumerable) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: The <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> whose elements to filter.
    typeParameters:
    - id: TResult
      description: The type to filter the elements of the sequence on.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence of type <em>TResult</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(Collections.IEnumerable)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 125
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Sorts the elements of a sequence in ascending order according to a key.
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 126
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Sorts the elements of a sequence in ascending order by using a specified comparer.
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 127
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Sorts the elements of a sequence in descending order according to a key.
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 128
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Sorts the elements of a sequence in descending order by using a specified comparer.
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.Range(System.Int32,System.Int32)
  commentId: M:System.Linq.Enumerable.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Range(Int32, Int32)
  fullName: System.Linq.Enumerable.Range(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Range.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Range
    path: src/System.Linq/src/System/Linq/Range.cs
    startLine: 11
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Generates a sequence of integral numbers within a specified range.
  syntax:
    content: public static Collections.Generic.IEnumerable<int> Range(int start, int count)
    content.vb: Public Shared Function Range(start As Integer, count As Integer) As Collections.Generic.IEnumerable(Of Integer)
    parameters:
    - id: start
      type: System.Int32
      description: The value of the first integer in the sequence.
    - id: count
      type: System.Int32
      description: The number of sequential integers to generate.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>count</em> is less than 0.-or-<em>start</em> + <em>count</em> -1 is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  commentId: M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  id: Repeat``1(``0,System.Int32)
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Repeat<TResult>(TResult, Int32)
  fullName: System.Linq.Enumerable.Repeat<TResult>(TResult, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Repeat.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Repeat
    path: src/System.Linq/src/System/Linq/Repeat.cs
    startLine: 11
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Generates a sequence that contains one repeated value.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Repeat<TResult>(TResult element, int count)
    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: element
      type: '{TResult}'
      description: The value to be repeated.
    - id: count
      type: System.Int32
      description: The number of times to repeat the value in the generated sequence.
    typeParameters:
    - id: TResult
      description: The type of the value to be repeated in the result sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains a repeated value.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>count</em> is less than 0."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Repeat(Of TResult)(TResult, System.Int32)
  name.vb: Repeat(Of TResult)(TResult, Int32)
- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  id: Reverse``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Reverse<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Reverse<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 131
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Inverts the order of the elements in a sequence.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Reverse<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to reverse.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence whose elements correspond to those of the input sequence in reverse order.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Reverse(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Reverse(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 132
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to invoke a transform function on.
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by <em>selector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the transform function on each element of <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 133
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form by incorporating the element's index.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to invoke a transform function on.
    - id: selector
      type: System.Func{{TSource},System.Int32,{TResult}}
      description: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by <em>selector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the transform function on each element of <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, TResult))
  name.vb: Select(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Collections.Generic.IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 134
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> and flattens the resulting sequences into one sequence.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the elements of the sequence returned by <em>selector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TResult)))
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 135
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TResult))) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
      description: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the elements of the sequence returned by <em>selector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult)))
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 136
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As Collections.Generic.IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
      description: A transform function to apply to each element of the input sequence.
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: A transform function to apply to each element of the intermediate sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TCollection
      description: The type of the intermediate elements collected by <em>collectionSelector</em>.
    - id: TResult
      description: The type of the elements of the resulting sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding source element to a result element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 137
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As Collections.Generic.IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
      description: A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: A transform function to apply to each element of the intermediate sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TCollection
      description: The type of the intermediate elements collected by <em>collectionSelector</em>.
    - id: TResult
      description: The type of the elements of the resulting sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding source element to a result element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 138
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.
  syntax:
    content: public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to compare to <em>second</em>.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to compare to the first sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 139
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether two sequences are equal by comparing their elements by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to compare to <em>second</em>.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to compare to the first sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to use to compare elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: true if the two source sequences are of equal length and their corresponding elements compare equal according to <em>comparer</em>; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  id: Single``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 140
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
  syntax:
    content: public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The input sequence contains more than one element.-or-The input sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Single(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 141
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
  syntax:
    content: public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return a single element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test an element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence that satisfies a condition.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No element satisfies the condition in <em>predicate</em>.-or-More than one element satisfies the condition in <em>predicate</em>.-or-The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Single(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 142
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence, or default(<em>TSource</em>) if the sequence contains no elements.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The input sequence contains more than one element.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 143
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return a single element from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test an element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence that satisfies the condition, or default(<em>TSource</em>) if no such element is found.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Skip<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Skip<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 144
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Bypasses a specified number of elements in a sequence and then returns the remaining elements.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Skip<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skip(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), count As Integer) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to skip before returning the remaining elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements that occur after the specified index in the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Skip(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 145
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SkipWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 146
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: SkipWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 147
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static decimal Sum(this Collections.Generic.IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: A sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Decimal
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  id: Sum(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 148
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Sum(this Collections.Generic.IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: A sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Double
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  id: Sum(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 149
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static int Sum(this Collections.Generic.IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Int32
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  id: Sum(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 150
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static long Sum(this Collections.Generic.IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: A sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Int64
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 151
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<decimal> Sum(this Collections.Generic.IEnumerable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 152
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Sum(this Collections.Generic.IEnumerable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 153
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<int> Sum(this Collections.Generic.IEnumerable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 154
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<long> Sum(this Collections.Generic.IEnumerable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 155
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<float> Sum(this Collections.Generic.IEnumerable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  id: Sum(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(Collections.Generic.IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 156
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static float Sum(this Collections.Generic.IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As Collections.Generic.IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: A sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Single
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Sum(Collections.Generic.IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 157
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static decimal Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Decimal
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 158
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static double Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 159
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static int Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 160
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static long Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 161
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<decimal> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 162
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 163
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<int> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 164
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<long> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 165
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static Nullable<float> Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 166
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that are obtained by invoking a transform function on each element of the input sequence.
  syntax:
    content: public static float Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence of values that are used to calculate a sum.
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: A transform function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Single
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Sum(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Take<TSource>(Collections.Generic.IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 167
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns a specified number of contiguous elements from the start of a sequence.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Take<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Take(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), count As Integer) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to return.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements from the start of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Take(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 168
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns elements from a sequence as long as a specified condition is true.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements from the input sequence that occur before the element at which the test no longer passes.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: TakeWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 169
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence that occur before the element at which the test no longer passes.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: TakeWhile(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 170
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 171
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 172
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 173
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: An <xref href="System.Linq.IOrderedEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  id: ToArray``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToArray<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 174
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates an array from a <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static TSource[] ToArray<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArray(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As TSource()
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create an array from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}[]'
      description: An array that contains the elements from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToArray(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToArray(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 175
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to a specified key selector function.
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Collections.Generic.Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: A <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null.-or-<em>keySelector</em> produces a key that is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>keySelector</em> produces duplicate keys for two elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToDictionary(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 176
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to a specified key selector function and key comparer.
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the keys returned by <em>keySelector</em>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: A <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null.-or-<em>keySelector</em> produces a key that is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>keySelector</em> produces duplicate keys for two elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 177
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to specified key selector and element selector functions.
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Collections.Generic.Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A transform function to produce a result element value from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the value returned by <em>elementSelector</em>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: A <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> that contains values of type <em>TElement</em> selected from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is null.-or-<em>keySelector</em> produces a key that is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>keySelector</em> produces duplicate keys for two elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 178
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to a specified key selector function, a comparer, and an element selector function.
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A transform function to produce a result element value from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the value returned by <em>elementSelector</em>.
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: A <xref href="System.Collections.Generic.Dictionary`2" data-throw-if-not-resolved="false"></xref> that contains values of type <em>TElement</em> selected from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is null.-or-<em>keySelector</em> produces a key that is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>keySelector</em> produces duplicate keys for two elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  id: ToList``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToList<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToList
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 179
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static Collections.Generic.List<TSource> ToList<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToList(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.List(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.List{{TSource}}
      description: A <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToList(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToList(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 180
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to a specified key selector function.
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
      description: A <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToLookup(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 181
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to a specified key selector function and key comparer.
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
      description: A <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> that contains keys and values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 182
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to specified key selector and element selector functions.
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A transform function to produce a result element value from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the value returned by <em>elementSelector</em>.
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
      description: A <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> that contains values of type <em>TElement</em> selected from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToLookup(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(Collections.Generic.IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 183
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Creates a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> according to a specified key selector function, a comparer and an element selector function.
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As Collections.Generic.IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to create a <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> from.
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: A function to extract a key from each element.
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: A transform function to produce a result element value from each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by <em>keySelector</em>.
    - id: TElement
      description: The type of the value returned by <em>elementSelector</em>.
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
      description: A <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref> that contains values of type <em>TElement</em> selected from the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey, TElement)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 184
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Produces the set union of two sequences by using the default equality comparer.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements form the first set for the union.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements form the second set for the union.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements from both input sequences, excluding duplicates.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 185
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Produces the set union of two sequences by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As Collections.Generic.IEnumerable(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements form the first set for the union.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements form the second set for the union.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: The <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains the elements from both input sequences, excluding duplicates.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 186
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to filter.
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence that satisfy the condition.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Where(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(Collections.Generic.IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 187
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
  syntax:
    content: public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As Collections.Generic.IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to filter.
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence that satisfy the condition.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Where(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(Collections.Generic.IEnumerable<TFirst>, Collections.Generic.IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.Enumerable.Zip<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 188
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.
  syntax:
    content: public static Collections.Generic.IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this Collections.Generic.IEnumerable<TFirst> first, Collections.Generic.IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As Collections.Generic.IEnumerable(Of TFirst), second As Collections.Generic.IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TFirst}}
      description: The first sequence to merge.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSecond}}
      description: The second sequence to merge.
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
      description: A function that specifies how to merge the elements from the two sequences.
    typeParameters:
    - id: TFirst
      description: The type of the elements of the first input sequence.
    - id: TSecond
      description: The type of the elements of the second input sequence.
    - id: TResult
      description: The type of the elements of the result sequence.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that contains merged elements of two input sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>first</em> or <em>second</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Zip(Of TFirst, TSecond, TResult)(System.Collections.Generic.IEnumerable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(Collections.Generic.IEnumerable(Of TFirst), Collections.Generic.IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TSource},{TSource}}
  definition: System.Func`3
  name: Func<TSource, TSource, TSource>
  fullName: System.Func<TSource, TSource, TSource>
  fullname.vb: System.Func(Of TSource, TSource, TSource)
  name.vb: Func(Of TSource, TSource, TSource)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: '{TSource}'
  isExternal: false
  name: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<, , >
  fullName: System.Func<, , >
  fullname.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}
  definition: System.Func`3
  name: Func<TAccumulate, TSource, TAccumulate>
  fullName: System.Func<TAccumulate, TSource, TAccumulate>
  fullname.vb: System.Func(Of TAccumulate, TSource, TAccumulate)
  name.vb: Func(Of TAccumulate, TSource, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate},{TResult}}
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  fullName: System.Func<TAccumulate, TResult>
  fullname.vb: System.Func(Of TAccumulate, TResult)
  name.vb: Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  fullName: System.Func<, >
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Boolean}
  definition: System.Func`2
  name: Func<TSource, Boolean>
  fullName: System.Func<TSource, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Decimal}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Decimal>
  fullName: System.Collections.Generic.IEnumerable<System.Decimal>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Decimal)
  name.vb: Collections.Generic.IEnumerable(Of Decimal)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Collections.Generic.IEnumerable{System.Double}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Double>
  fullName: System.Collections.Generic.IEnumerable<System.Double>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Double)
  name.vb: Collections.Generic.IEnumerable(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: Collections.Generic.IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Int64>
  fullName: System.Collections.Generic.IEnumerable<System.Int64>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int64)
  name.vb: Collections.Generic.IEnumerable(Of Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Decimal>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  definition: System.Nullable`1
  name: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  fullName: System.Nullable<>
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Double>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Int32>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Int64>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Nullable<Single>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single))
  name.vb: Collections.Generic.IEnumerable(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Single}
  definition: System.Nullable`1
  name: Nullable<Single>
  fullName: System.Nullable<System.Single>
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Single}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Single>
  fullName: System.Collections.Generic.IEnumerable<System.Single>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Single)
  name.vb: Collections.Generic.IEnumerable(Of Single)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Func{{TSource},System.Decimal}
  definition: System.Func`2
  name: Func<TSource, Decimal>
  fullName: System.Func<TSource, System.Decimal>
  fullname.vb: System.Func(Of TSource, System.Decimal)
  name.vb: Func(Of TSource, Decimal)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Double}
  definition: System.Func`2
  name: Func<TSource, Double>
  fullName: System.Func<TSource, System.Double>
  fullname.vb: System.Func(Of TSource, System.Double)
  name.vb: Func(Of TSource, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32}
  definition: System.Func`2
  name: Func<TSource, Int32>
  fullName: System.Func<TSource, System.Int32>
  fullname.vb: System.Func(Of TSource, System.Int32)
  name.vb: Func(Of TSource, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int64}
  definition: System.Func`2
  name: Func<TSource, Int64>
  fullName: System.Func<TSource, System.Int64>
  fullname.vb: System.Func(Of TSource, System.Int64)
  name.vb: Func(Of TSource, Int64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Decimal}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Decimal>>
  fullName: System.Func<TSource, System.Nullable<System.Decimal>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))
  name.vb: Func(Of TSource, Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Double}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Double>>
  fullName: System.Func<TSource, System.Nullable<System.Double>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Double))
  name.vb: Func(Of TSource, Nullable(Of Double))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int32}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Int32>>
  fullName: System.Func<TSource, System.Nullable<System.Int32>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))
  name.vb: Func(Of TSource, Nullable(Of Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int64}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Int64>>
  fullName: System.Func<TSource, System.Nullable<System.Int64>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))
  name.vb: Func(Of TSource, Nullable(Of Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Single}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Single>>
  fullName: System.Func<TSource, System.Nullable<System.Single>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Single))
  name.vb: Func(Of TSource, Nullable(Of Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Single}
  definition: System.Func`2
  name: Func<TSource, Single>
  fullName: System.Func<TSource, System.Single>
  fullname.vb: System.Func(Of TSource, System.Single)
  name.vb: Func(Of TSource, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: Collections.Generic.IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: Collections.Generic.IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: Generic.IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Func{{TSource},{TKey}}
  definition: System.Func`2
  name: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  fullname.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<IGrouping<TKey, TSource>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TSource))
  name.vb: Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Generic.IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TElement}}
  definition: System.Func`2
  name: Func<TSource, TElement>
  fullName: System.Func<TSource, TElement>
  fullname.vb: System.Func(Of TSource, TElement)
  name.vb: Func(Of TSource, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
  definition: System.Func`3
  name: Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)
  name.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  definition: System.Func`3
  name: Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  name.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TOuter}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TOuter>
  fullName: System.Collections.Generic.IEnumerable<TOuter>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TOuter)
  name.vb: Collections.Generic.IEnumerable(Of TOuter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: Collections.Generic.IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TKey}}
  definition: System.Func`2
  name: Func<TOuter, TKey>
  fullName: System.Func<TOuter, TKey>
  fullname.vb: System.Func(Of TOuter, TKey)
  name.vb: Func(Of TOuter, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TInner},{TKey}}
  definition: System.Func`2
  name: Func<TInner, TKey>
  fullName: System.Func<TInner, TKey>
  fullname.vb: System.Func(Of TInner, TKey)
  name.vb: Func(Of TInner, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
  definition: System.Func`3
  name: Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>
  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>
  fullname.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)
  name.vb: Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TInner},{TResult}}
  definition: System.Func`3
  name: Func<TOuter, TInner, TResult>
  fullName: System.Func<TOuter, TInner, TResult>
  fullname.vb: System.Func(Of TOuter, TInner, TResult)
  name.vb: Func(Of TOuter, TInner, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int32}
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{System.Int64}
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TResult}}
  definition: System.Func`2
  name: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  fullname.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable{{TSource}}
  parent: System.Linq
  definition: System.Linq.IOrderedEnumerable`1
  name: IOrderedEnumerable<TSource>
  fullName: System.Linq.IOrderedEnumerable<TSource>
  fullname.vb: System.Linq.IOrderedEnumerable(Of TSource)
  name.vb: IOrderedEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable`1
  parent: System.Linq
  isExternal: false
  name: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  fullname.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,{TResult}}
  definition: System.Func`3
  name: Func<TSource, Int32, TResult>
  fullName: System.Func<TSource, System.Int32, TResult>
  fullname.vb: System.Func(Of TSource, System.Int32, TResult)
  name.vb: Func(Of TSource, Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
  definition: System.Func`2
  name: Func<TSource, Collections.Generic.IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
  definition: System.Func`3
  name: Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  definition: System.Func`2
  name: Func<TSource, Collections.Generic.IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TCollection},{TResult}}
  definition: System.Func`3
  name: Func<TSource, TCollection, TResult>
  fullName: System.Func<TSource, TCollection, TResult>
  fullname.vb: System.Func(Of TSource, TCollection, TResult)
  name.vb: Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
  definition: System.Func`3
  name: Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Boolean}
  definition: System.Func`3
  name: Func<TSource, Int32, Boolean>
  fullName: System.Func<TSource, System.Int32, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Boolean)
  name.vb: Func(Of TSource, Int32, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: '{TSource}[]'
  isExternal: false
  name: TSource[]
  fullName: TSource[]
  fullname.vb: TSource()
  name.vb: TSource()
  spec.csharp:
  - name: TSource
    fullName: TSource
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSource
    fullName: TSource
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  definition: System.Collections.Generic.Dictionary`2
  name: Collections.Generic.Dictionary<TKey, TSource>
  fullName: System.Collections.Generic.Dictionary<TKey, TSource>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)
  name.vb: Collections.Generic.Dictionary(Of TKey, TSource)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  fullname.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  definition: System.Collections.Generic.Dictionary`2
  name: Collections.Generic.Dictionary<TKey, TElement>
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  name.vb: Collections.Generic.Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.List{{TSource}}
  definition: System.Collections.Generic.List`1
  name: Collections.Generic.List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  fullname.vb: System.Collections.Generic.List(Of TSource)
  name.vb: Collections.Generic.List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.List<>
  fullName: System.Collections.Generic.List<>
  fullname.vb: System.Collections.Generic.List(Of )
  name.vb: Collections.Generic.List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TSource}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TSource>
  fullName: System.Linq.ILookup<TKey, TSource>
  fullname.vb: System.Linq.ILookup(Of TKey, TSource)
  name.vb: ILookup(Of TKey, TSource)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.ILookup`2
  parent: System.Linq
  isExternal: false
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TElement}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TFirst}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TFirst>
  fullName: System.Collections.Generic.IEnumerable<TFirst>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TFirst)
  name.vb: Collections.Generic.IEnumerable(Of TFirst)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  name.vb: Collections.Generic.IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: System.Func{{TFirst},{TSecond},{TResult}}
  definition: System.Func`3
  name: Func<TFirst, TSecond, TResult>
  fullName: System.Func<TFirst, TSecond, TResult>
  fullname.vb: System.Func(Of TFirst, TSecond, TResult)
  name.vb: Func(Of TFirst, TSecond, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
