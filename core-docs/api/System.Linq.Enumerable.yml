items:
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  id: Enumerable
  parent: System.Linq
  children:
  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.Empty``1
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Range(System.Int32,System.Int32)
  - System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  langs:
  - csharp
  - vb
  name: Enumerable
  fullName: System.Linq.Enumerable
  type: Class
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enumerable
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 10
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Provides a set of <strong>static</strong> (<strong>Shared</strong> in Visual Basic) methods for querying objects that implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. The standard query operators are general purpose methods that follow the LINQ pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</p>\n<p>The majority of the methods in this class are defined as extension methods that extend <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. This means they can be called like an instance method on any object that implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated. This is known as deferred execution. Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</p>\n"
  example:
  - 
  syntax:
    content: public class Enumerable
    content.vb: Public Class Enumerable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  commentId: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>)
  fullName: System.Linq.Enumerable.Aggregate<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 12
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Applies an accumulator function over a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\" data-throw-if-not-resolved=\"false\"></xref> method makes it simple to perform a calculation over a sequence of values. This method works by calling <em>func</em> one time for each element in <em>source</em>except the first one. Each time <em>func</em> is called, <xref href=\"System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\" data-throw-if-not-resolved=\"false\"></xref> passes both the element from the sequence and an aggregated value (as the first argument to <em>func</em>). The first element of <em>source</em> is used as the initial aggregate value. The result of <em>func</em> replaces the previous aggregated value. <xref href=\"System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\" data-throw-if-not-resolved=\"false\"></xref> returns the final result of <em>func</em>.</p>\n<p>This overload of the <xref href=\"System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\" data-throw-if-not-resolved=\"false\"></xref>methodisn't suitable for all casesbecause it uses the first element of <em>source</em> as the initial aggregate value. You should choose another overload if the return value should include only the elements of <em>source</em> that meet a certain condition. For example, this overload isn't reliableif you want to calculate the sum of the even numbers in <em>source</em>. The result will be incorrect if the first element is odd instead of even.</p>\n<p>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref href=\"System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, and four numeric aggregation methods, namely <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to reverse the order of words in a string by using<xref href=\"System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Enumerable#1"
  syntax:
    content: public static TSource Aggregate<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource)(source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to aggregate over.</p>\n"
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
      description: "\n<p>An accumulator function to be invoked on each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The final accumulator value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TSource, TSource))
  name.vb: Aggregate(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))
- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  commentId: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  id: Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 13
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> method makes it simple to perform a calculation over a sequence of values. This method works by calling <em>func</em> one time for each element in <em>source</em>. Each time <em>func</em> is called, <xref href=\"System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> passes both the element from the sequence and an aggregated value (as the first argument to <em>func</em>). The value of the <em>seed</em> parameter is used as the initial aggregate value. The result of <em>func</em> replaces the previous aggregated value. <xref href=\"System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> returns the final result of <em>func</em>.</p>\n<p>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref href=\"System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, and four numeric aggregation methods, namely <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> to apply an accumulator function and use a seed value.</p>System.Linq.Enumerable#2"
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to aggregate over.</p>\n"
    - id: seed
      type: '{TAccumulate}'
      description: "\n<p>The initial accumulator value.</p>\n"
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    return:
      type: '{TAccumulate}'
      description: "\n<p>The final accumulator value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Aggregate(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  commentId: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 14
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\" data-throw-if-not-resolved=\"false\"></xref> method makes it simple to perform a calculation over a sequence of values. This method works by calling <em>func</em> one time for each element in <em>source</em>. Each time <em>func</em> is called, <xref href=\"System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\" data-throw-if-not-resolved=\"false\"></xref> passes both the element from the sequence and an aggregated value (as the first argument to <em>func</em>). The value of the <em>seed</em> parameter is used as the initial aggregate value. The result of <em>func</em> replaces the previous aggregated value. The final result of <em>func</em> is passed to <em>resultSelector</em> to obtain the final result of <xref href=\"System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref href=\"System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>, and four numeric aggregation methods, namely <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\" data-throw-if-not-resolved=\"false\"></xref> to apply an accumulator function and a result selector.</p>System.Linq.Enumerable#3"
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to aggregate over.</p>\n"
    - id: seed
      type: '{TAccumulate}'
      description: "\n<p>The initial accumulator value.</p>\n"
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on each element.</p>\n"
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: "\n<p>A function to transform the final accumulator value into the result value.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    - id: TResult
      description: "\n<p>The type of the resulting value.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The transformed final accumulator value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: All<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.All<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: All
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 15
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether all elements of a sequence satisfy a condition.</p>\n"
  remarks: "\n<p>This method does not return all the elements of a collection. Instead, it determines whether all the elements of a collection satisfy a condition.</p>\n<p>The enumeration of <em>source</em> is stopped as soon as the result can be determined.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into All()</code> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether all the elements in a sequence satisfy a condition. Variable <code>allStartWithB</code> is true if all the pet names start with \"B\" or if the <code>pets</code> array is empty.</p>System.Linq.Enumerable#4<p>The Boolean value that the <xref href=\"System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method returns is typically used in the predicate of a <strong>where</strong> clause (<strong>Where</strong> clause in Visual Basic) or a direct call to the <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method. The following example demonstrates this use of the All method.</p>System.Linq.Enumerable#129"
  syntax:
    content: public static bool All<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to apply the predicate to.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.All(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: All(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  id: Any``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 16
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether a sequence contains any elements.</p>\n"
  remarks: "\n<p>This method does not return any one element of a collection. Instead, it determines whether the collection contains any elements.</p>\n<p>The enumeration of <em>source</em> is stopped as soon as the result can be determined.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Any()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Any\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a sequence contains any elements.</p>System.Linq.Enumerable#5<p>The Boolean value that the <xref href=\"System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method returns is typically used in the predicate of a <strong>where</strong> clause (<strong>Where</strong> clause in Visual Basic) or a direct call to the <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method. The following example demonstrates this use of the Any method.</p>System.Linq.Enumerable#130"
  syntax:
    content: public static bool Any<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to check for emptiness.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the source sequence contains any elements; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Any(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 17
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether any element of a sequence satisfies a condition.</p>\n"
  remarks: "\n<p>This method does not return any one element of a collection. Instead, it determines whether any elements of a collection satisfy a condition.</p>\n<p>The enumeration of <em>source</em> is stopped as soon as the result can be determined.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Any()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Any\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether any element in a sequence satisfies a condition.</p>System.Linq.Enumerable#6"
  syntax:
    content: public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to apply the predicate to.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if any elements in the source sequence pass the test in the specified predicate; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Any(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  id: AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: AsEnumerable<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.AsEnumerable<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsEnumerable
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 18
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the input typed as <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method has no effect other than to change the compile-time type of <em>source</em> from a type that implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> itself.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> can be used to choose between query implementations when a sequence implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> but also has a different set of public query methods available. For example, given a generic class <code>Table</code> that implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and has its own methods such as <code>Where</code>, <code>Select</code>, and <code>SelectMany</code>, a call to <code>Where</code> would invoke the public <code>Where</code> method of <code>Table</code>. A <code>Table</code> type that represents a database table could have a <code>Where</code>method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution. If remote execution is not desired, for example because the predicate invokes a local method, the <xref href=\"System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method can be used to hide the custom methods and instead make the standard query operators available.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to hide a type's custom <code>Where</code> method when the standard query operator implementation is desired.</p>System.Linq.Enumerable#108"
  syntax:
    content: public static IEnumerable<TSource> AsEnumerable<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEnumerable(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to type as <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The input sequence typed as <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.AsEnumerable(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: AsEnumerable(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Average(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 19
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate the average of a sequence of values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#8"
  syntax:
    content: public static decimal Average(this IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: "\n<p>A sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Average(IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  id: Average(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 20
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>If the sum of the elements is too large to represent as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, this method returns positive or negative infinity.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#8"
  syntax:
    content: public static double Average(this IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: "\n<p>A sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Average(IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  id: Average(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 21
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>System.Linq.Enumerable#8"
  syntax:
    content: public static double Average(this IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: "\n<p>A sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Average(IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  id: Average(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 22
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#8"
  syntax:
    content: public static double Average(this IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Long)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: "\n<p>A sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Average(IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 23
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#12"
  syntax:
    content: public static decimal ? Average(this IEnumerable<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 24
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>If the sum of the elements is too large to represent as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, this method returns positive or negative infinity.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#12"
  syntax:
    content: public static double ? Average(this IEnumerable<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Average(IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 25
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#12"
  syntax:
    content: public static double ? Average(this IEnumerable<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Integer?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Average(IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 26
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>System.Linq.Enumerable#12"
  syntax:
    content: public static double ? Average(this IEnumerable<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Long?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Average(IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 27
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#12"
  syntax:
    content: public static float ? Average(this IEnumerable<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Average(IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  id: Average(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 28
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#8"
  syntax:
    content: public static float Average(this IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: "\n<p>A sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the average of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Average(IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 29
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#16"
  syntax:
    content: public static decimal Average<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 30
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#16"
  syntax:
    content: public static double Average<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 31
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>System.Linq.Enumerable#18"
  syntax:
    content: public static double Average<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 32
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>System.Linq.Enumerable#16"
  syntax:
    content: public static double Average<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of source.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 33
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#16"
  syntax:
    content: public static decimal ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 34
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#16"
  syntax:
    content: public static double ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 35
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#18"
  syntax:
    content: public static double ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 36
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#16"
  syntax:
    content: public static double ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 37
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#18"
  syntax:
    content: public static float ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 38
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the average of a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Average()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Average\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to calculate an average.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#18"
  syntax:
    content: public static float Average<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to calculate the average of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  id: Cast``1(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cast
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 39
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Casts the elements of an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> to the specified type.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information. For example, <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> does not implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, but by calling <xref href=\"System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> object, the standard query operators can then be used to query the sequence.</p>\n<p>If an element cannot be cast to type <em>TResult</em>, this method will throw an exception. To obtain only those elements that can be cast to type <em>TResult</em>, use the <xref href=\"System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> method instead of <xref href=\"System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In a query expression, an explicitly typed iteration variable translates to an invocation of <xref href=\"System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref>. This example shows the syntax for an explicitly typed range variable.</p>\n<pre><code class=\"c#\">from int i in objects</code></pre>\n<pre><code class=\"vb#\">From i As Integer In objects</code></pre>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> to enable the use of the standard query operators on an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Enumerable#19"
  syntax:
    content: public static IEnumerable<TResult> Cast<TResult>(this IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As IEnumerable) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: "\n<p>The <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be cast to type <em>TResult</em>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type to cast the elements of <em>source</em> to.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains each element of the source sequence cast to the specified type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>An element in the sequence cannot be cast to type <em>TResult</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 40
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Concatenates two sequences.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method differs from the <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method because the <xref href=\"System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method returns all the original elements in the input sequences. The <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method returns only unique elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to concatenate two sequences.</p>System.Linq.Enumerable#20<p>An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> method, passing it the identity selector function. The following example demonstrates this use of <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Enumerable#112"
  syntax:
    content: public static IEnumerable<TSource> Concat<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The first sequence to concatenate.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to concatenate to the first sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the concatenated elements of the two input sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Concat(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Append<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Append
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 41
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IEnumerable<TSource> Append<TSource>(this IEnumerable<TSource> source, TSource element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Append(Of TSource)(source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: element
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Append(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Append(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Prepend<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prepend
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 42
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: public static IEnumerable<TSource> Prepend<TSource>(this IEnumerable<TSource> source, TSource element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Prepend(Of TSource)(source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: element
      type: '{TSource}'
    typeParameters:
    - id: TSource
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Prepend(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Prepend(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 43
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\n"
  remarks: "\n<p>If the type of <em>source</em> implements <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>, the Contains method in that implementation is invoked to obtain the result. Otherwise, this method determines whether <em>source</em> contains the specified element.</p>\n<p>Enumeration is terminated as soon as a matching element is found.</p>\n<p>Elements are compared to the specified value by using the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to determine whether an array contains a specific element.</p>System.Linq.Enumerable#21"
  syntax:
    content: public static bool Contains<TSource>(this IEnumerable<TSource> source, TSource value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IEnumerable(Of TSource), value As TSource) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence in which to locate a value.</p>\n"
    - id: value
      type: '{TSource}'
      description: "\n<p>The value to locate in the sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the source sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 44
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Enumeration is terminated as soon as a matching element is found.</p>\n<p>If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare elements to the specified value.</p>\n"
  example:
  - "\n<p>The following example shows how to implement an equality comparer that can be used in the <xref href=\"System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>CSLINQCustomComparer#1<p>After you implement this comparer, you can use a sequence of <code>Product</code> objects in the <xref href=\"System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQCustomComparer#6"
  syntax:
    content: public static bool Contains<TSource>(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence in which to locate a value.</p>\n"
    - id: value
      type: '{TSource}'
      description: "\n<p>The value to locate in the sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An equality comparer to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the source sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  id: Count``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 45
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the number of elements in a sequence.</p>\n"
  remarks: "\n<p>If the type of <em>source</em> implements <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.</p>\n<p>Use the <xref href=\"System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method when you expect and want to allow the result to be greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Count()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Count\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in an array.</p>System.Linq.Enumerable#22"
  syntax:
    content: public static int Count<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IEnumerable(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence that contains elements to be counted.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of elements in the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of elements in <em>source</em> is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Count(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 46
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns a number that represents how many elements in the specified sequence satisfy a condition.</p>\n"
  remarks: "\n<p>If the type of <em>source</em> implements <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to obtain the count of elements. Otherwise, this method determines the count.</p>\n<p>You should use the <xref href=\"System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method when you expect and want to allow the result to be greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Count()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Count\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in an array that satisfy a condition.</p>System.Linq.Enumerable#23"
  syntax:
    content: public static int Count<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence that contains elements to be tested and counted.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of elements in <em>source</em> is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Count(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 47
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n<p>This method can be used to produce a left outer join when it is combined with the <xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref>) method.</p>\n"
  example:
  - "\n<p>The following code examples demonstrate how to use <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to provide a default value in case the source sequence is empty.</p>\n<p>This example uses a non-empty sequence.</p>System.Linq.Enumerable#24<p>This example uses an empty sequence.</p>System.Linq.Enumerable#25"
  syntax:
    content: public static IEnumerable<TSource> DefaultIfEmpty<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to return a default value for if it is empty.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> object that contains the default value for the <em>TSource</em> type if <em>source</em> is empty; otherwise, <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 48
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>This method can be used to produce a left outer join when it is combined with the <xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref>) method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method and specify a default value. The first sequence is not empty and the second sequence is empty.</p>System.Linq.Enumerable#26"
  syntax:
    content: public static IEnumerable<TSource> DefaultIfEmpty<TSource>(this IEnumerable<TSource> source, TSource defaultValue)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to return the specified value for if it is empty.</p>\n"
    - id: defaultValue
      type: '{TSource}'
      description: "\n<p>The value to return if the sequence is empty.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <em>defaultValue</em> if <em>source</em> is empty; otherwise, <em>source</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 49
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method returns an unordered sequence that contains no duplicate values. It uses the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, to compare values.</p>\n<p>In Visual Basic query expression syntax, a <strong>Distinct</strong> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values of the types that implement the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods for the type.</p>\n<p>For an example that uses <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>to define a custom comparer, see <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return distinct elements from a sequence of integers.</p>System.Linq.Enumerable#27<p>If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface in the class. The following code example shows how to implement this interface in a custom data type and provide <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>CSLINQEncapsulatedComparer#1<p>After you implement this interface, you can use a sequence of <code>Product</code> objects in the <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQEncapsulatedComparer#5"
  syntax:
    content: public static IEnumerable<TSource> Distinct<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to remove duplicate elements from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains distinct elements from the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 50
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method returns an unordered sequence that contains no duplicate values. If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values.</p>\n"
  example:
  - "\n<p>The following example shows how to implement an equality comparer that can be used in the <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>CSLINQCustomComparer#1<p>After you implement this comparer, you can use a sequence of <code>Product</code> objects in the <xref href=\"System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQCustomComparer#5"
  syntax:
    content: public static IEnumerable<TSource> Distinct<TSource>(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to remove duplicate elements from.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains distinct elements from the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAt
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 51
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the element at a specified index in a sequence.</p>\n"
  remarks: "\n<p>If the type of <em>source</em> implements <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.</p>\n<p>This method throws an exception if <em>index</em> is out of range. To instead return a default value when the specified index is out of range, use the <xref href=\"System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to return an element at a specific position.</p>System.Linq.Enumerable#28"
  syntax:
    content: public static TSource ElementAt<TSource>(this IEnumerable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAt(Of TSource)(source As IEnumerable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to retrieve.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The element at the specified position in the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0 or greater than or equal to the number of elements in <em>source</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ElementAt(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAtOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 52
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\n"
  remarks: "\n<p>If the type of <em>source</em> implements <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to obtain the element at the specified index. Otherwise, this method obtains the specified element.</p>\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. This example uses an index that is outside the bounds of the array.</p>System.Linq.Enumerable#29"
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(this IEnumerable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAtOrDefault(Of TSource)(source As IEnumerable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to retrieve.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>\n<strong>default</strong>(<em>TSource</em>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ElementAtOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.Empty``1
  commentId: M:System.Linq.Enumerable.Empty``1
  id: Empty``1
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Empty<TResult>()
  fullName: System.Linq.Enumerable.Empty<TResult>()
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 53
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns an empty <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that has the specified type argument.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Empty``1\" data-throw-if-not-resolved=\"false\"></xref> method caches an empty sequence of type <em>TResult</em>. When the object it returns is enumerated, it yields no elements.</p>\n<p>In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. It can also be used to generate a neutral element for methods such as <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>. See the Example section for an example of this use of <xref href=\"System.Linq.Enumerable.Empty``1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Empty``1\" data-throw-if-not-resolved=\"false\"></xref> to generate an empty <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Enumerable#30<p>The following code example demonstrates a possible application of the <xref href=\"System.Linq.Enumerable.Empty``1\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\" data-throw-if-not-resolved=\"false\"></xref> method is applied to a collection of string arrays. The elements of each array in the collection are added to the resulting <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> only if that array contains four or more elements. <xref href=\"System.Linq.Enumerable.Empty``1\" data-throw-if-not-resolved=\"false\"></xref> is used to generate the seed value for <xref href=\"System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\" data-throw-if-not-resolved=\"false\"></xref> because if no array in the collection has four or more elements, only the empty sequence is returned.</p>System.Linq.Enumerable#31"
  syntax:
    content: public static IEnumerable<TResult> Empty<TResult>()
    content.vb: Public Shared Function Empty(Of TResult) As IEnumerable(Of TResult)
    typeParameters:
    - id: TResult
      description: "\n<p>The type to assign to the type parameter of the returned generic <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An empty <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose type argument is <em>TResult</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Empty(Of TResult)()
  name.vb: Empty(Of TResult)()
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 54
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The set difference of two sets is defined as the members of the first set that do not appear in the second set.</p>\n<p>This method returns those elements in <em>first</em> that do not appear in <em>second</em>. It does not also return those elements in <em>second</em> that do not appear in <em>first</em>.</p>\n<p>The default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values of the types that implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods for the type.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method to compare two sequences of numbers and return elements that appear only in the first sequence.</p>System.Linq.Enumerable#34<p>If you want to compare sequences of objects of some custom data type, you have to implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface in a helperclass. The following code example shows how to implement this interface in a custom data type and provide <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>CSLINQEncapsulatedComparer#9<p>After you implement this interface, you can use sequences of <code>ProductA</code> objects in the <xref href=\"System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQEncapsulatedComparer#7"
  syntax:
    content: public static IEnumerable<TSource> Except<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that are not also in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 55
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  remarks: "\n<p>If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values.</p>\n"
  example:
  - "\n<p>The following example shows how to implement an equality comparer that can be used in the <xref href=\"System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>CSLINQCustomComparer#1<p>After you implement this comparer, you can use sequences of <code>Product</code> objects in the <xref href=\"System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQCustomComparer#7"
  syntax:
    content: public static IEnumerable<TSource> Except<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that are not also in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  id: First``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 56
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception if <em>source</em> contains no elements. To instead return a default value when the source sequence is empty, use the <xref href=\"System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of an array.</p>System.Linq.Enumerable#35"
  syntax:
    content: public static TSource First<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The first element in the specified sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: First(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 57
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the first element in a sequence that satisfies a specified condition.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception if no matching element is found in <em>source</em>. To instead return a default value when no matching element is found, use the <xref href=\"System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of an array that satisfies a condition.</p>System.Linq.Enumerable#36"
  syntax:
    content: public static TSource First<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The first element in the sequence that passes the test in the specified predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: First(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 58
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\n"
  remarks: "\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n<p>The <see cref=\"Overload:System.Linq.Enumerable.FirstOrDefault\"></see> method does not provide a way to specify a default value. If you want to specify a default value other than <strong>default</strong>(<em>TSource</em>), use the <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method as described in the Example section.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> on an empty array.</p>System.Linq.Enumerable#37<p>Sometimes the value of <strong>default</strong>(<em>TSource</em>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method to specify the default value that you want to use if the collection is empty. Then, call <xref href=\"System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the first element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty. Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to specify a default value of 1.</p>System.Linq.Enumerable#126"
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>\n<strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 59
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</p>\n"
  remarks: "\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> by passing in a predicate. In the second call to the method, there is no element in the array that satisfies the condition.</p>System.Linq.Enumerable#38"
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>\n<strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FirstOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 60
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>For examples of <strong>GroupBy</strong>, see the following topics.</p>\n<ul><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> method returns a collection of <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects, one for each distinct key that was encountered. An <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> is an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that also has a key associated with its elements.</p>\n<p>The <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects are yielded in an order based on the order of the elements in <em>source</em> that produced the first key of each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>. Elements in a grouping are yielded in the order they appear in <em>source</em>.</p>\n<p>The default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n<p>In query expression syntax, a <strong>group by</strong> (Visual C#) or <strong>Group By Into</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.GroupBy\"></see>. For more information and usage examples, see group clause (C# Reference) and Group By Clause (Visual Basic).</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: "\n<p>An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object contains a sequence of objects and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 61
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>For examples of <strong>GroupBy</strong>, see the following topics.</p>\n<ul><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method returns a collection of <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects, one for each distinct key that was encountered. An <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> is an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that also has a key associated with its elements.</p>\n<p>The <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects are yielded in an order based on the order of the elements in <em>source</em> that produced the first key of each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>. Elements in a grouping are yielded in the order they appear in <em>source</em>.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n<p>If two keys are considered equal according to <em>comparer</em>, the first key is chosen as the key for that grouping.</p>\n<p>In query expression syntax, a <strong>group by</strong> (Visual C#) or <strong>Group By Into</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.GroupBy\"></see>. For more information and usage examples, see group clause (C# Reference) and Group By Clause (Visual Basic).</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: "\n<p>An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object contains a collection of objects and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 62
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref> method returns a collection of <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects, one for each distinct key that was encountered. An <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> is an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that also has a key associated with its elements.</p>\n<p>The <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects are yielded in an order based on the order of the elements in <em>source</em> that produced the first key of each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>. Elements in a grouping are yielded in the order that the elements that produced them appear in <em>source</em>.</p>\n<p>The default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref> to group the elements of a sequence.</p>System.Linq.Enumerable#39<p>In query expression syntax, a <strong>group by</strong> (Visual C#) or <strong>Group By Into</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.GroupBy\"></see>. The translation of the query expression in the following example is equivalent to the query in the example above.</p>System.Linq.Enumerable#122<p>In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>"
  syntax:
    content: public static IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: "\n<p>An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object contains a collection of objects of type <em>TElement</em> and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 63
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>For examples of <strong>GroupBy</strong>, see the following topics.</p>\n<ul><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method returns a collection of <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects, one for each distinct key that was encountered. An <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> is an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that also has a key associated with its elements.</p>\n<p>The <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects are yielded in an order based on the order of the elements in <em>source</em> that produced the first key of each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>. Elements in a grouping are yielded in the order that the elements that produced them appear in <em>source</em>.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n<p>If two keys are considered equal according to <em>comparer</em>, the first key is chosen as the key for that grouping.</p>\n<p>In query expression syntax, a <strong>group by</strong> (Visual C#) or <strong>Group By Into</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.GroupBy\"></see>. For more information and usage examples, see group clause (C# Reference) and Group By Clause (Visual Basic).</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: "\n<p>An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object contains a collection of objects of type <em>TElement</em> and a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 64
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\n"
  remarks: "\n<p>In query expression syntax, a <strong>group by</strong> (Visual C#) or <strong>Group By Into</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.GroupBy\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\" data-throw-if-not-resolved=\"false\"></xref> to group the elements of a sequence and project a sequence of results of type <em>TResult</em>.</p>System.Linq.Enumerable#15"
  syntax:
    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 65
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys with.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 66
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\n"
  remarks: "\n<p>In query expression syntax, a <strong>group by</strong> (Visual C#) or <strong>Group By Into</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.GroupBy\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\" data-throw-if-not-resolved=\"false\"></xref> to group the projected elements of a sequence and then project a sequence of results of type <em>TResult</em>.</p>System.Linq.Enumerable#125"
  syntax:
    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 67
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys with.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 68
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to hash and compare keys.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref> produces hierarchical results, which means that elements from <em>outer</em> are paired with collections of matching elements from <em>inner</em>. GroupJoin enables you to base your results on a whole set of matches for each element of <em>outer</em>.</p>\n<p>If there are no correlated elements in <em>inner</em> for a given element of <em>outer</em>, the sequence of matches for that element will be empty but will still appear in the results.</p>\n<p>The <em>resultSelector</em> function is called only one time for each <em>outer</em> element together with a collection of all the <em>inner</em> elements that match the <em>outer</em> element. This differs from the <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> method, in which the result selector function is invoked on pairs that contain one element from <em>outer</em> and one element from <em>inner</em>.</p>\n<p>GroupJoin preserves the order of the elements of <em>outer</em>, and for each element of <em>outer</em>, the order of the matching elements from <em>inner</em>.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See Join Operations.</p>\n<p>In query expression syntax, a <strong>join … into</strong> (Visual C#) or <strong>Group Join</strong> (Visual Basic) clause translates to an invocation of <xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref> to perform a grouped join on two sequences.</p>System.Linq.Enumerable#40"
  syntax:
    content: public static IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 69
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to hash and compare keys.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref> produces hierarchical results, which means that elements from <em>outer</em> are paired with collections of matching elements from <em>inner</em>. GroupJoin enables you to base your results on a whole set of matches for each element of <em>outer</em>.</p>\n<p>If there are no correlated elements in <em>inner</em> for a given element of <em>outer</em>, the sequence of matches for that element will be empty but will still appear in the results.</p>\n<p>The <em>resultSelector</em> function is called only one time for each <em>outer</em> element together with a collection of all the <em>inner</em> elements that match the <em>outer</em> element. This differs from the <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> method in which the result selector function is invoked on pairs that contain one element from <em>outer</em> and one element from <em>inner</em>.</p>\n<p>GroupJoin preserves the order of the elements of <em>outer</em>, and for each element of <em>outer</em>, the order of the matching elements from <em>inner</em>.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref> has no direct equivalent in traditional relational database terms. However, this method does implement a superset of inner joins and left outer joins. Both of these operations can be written in terms of a grouped join. See Join Operations.</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to hash and compare keys.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 70
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</p>\n<p>When the object returned by this method is enumerated, <xref href=\"System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> enumerates <em>first</em>, collecting all distinct elements of that sequence. It then enumerates <em>second</em>, marking those elements that occur in both sequences. Finally, the marked elements are yielded in the order in which they were collected.</p>\n<p>The default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values of the types that implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods for the type.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return the elements that appear in each of two sequences of integers.</p>System.Linq.Enumerable#41<p>If you want to compare sequences of objects of a custom data type, you have to implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface in a helper class. The following code example shows how to implement this interface in a custom data type and provide <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>CSLINQEncapsulatedComparer#9<p>After you implement this interface, you can use sequences of <code>ProductA</code> objects in the <xref href=\"System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQEncapsulatedComparer#10,3"
  syntax:
    content: public static IEnumerable<TSource> Intersect<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements that also appear in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements that also appear in the first sequence will be returned.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 71
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</p>\n<p>When the object returned by this method is enumerated, <xref href=\"System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> enumerates <em>first</em>, collecting all distinct elements of that sequence. It then enumerates <em>second</em>, marking those elements that occur in both sequences. Finally, the marked elements are yielded in the order in which they were collected.</p>\n<p>If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values.</p>\n"
  example:
  - "\n<p>The following example shows how to implement an equality comparer that can be used in the <xref href=\"System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>CSLINQCustomComparer#1<p>After you implement this comparer, you can use sequences of <code>Product</code> objects in the <xref href=\"System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQCustomComparer#2,3"
  syntax:
    content: public static IEnumerable<TSource> Intersect<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements that also appear in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements that also appear in the first sequence will be returned.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 72
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to hash and compare keys.</p>\n<p>A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of SelectMany, which requires more than one method call to perform the same operation.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> preserves the order of the elements of <em>outer</em>, and for each of these elements, the order of the matching elements of <em>inner</em>.</p>\n<p>In query expression syntax, a <strong>join</strong> (Visual C#) or <strong>Join</strong> (Visual Basic) clause translates to an invocation of <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In relational database terms, the <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref> method. See Join Operations.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> to perform an inner join of two sequences based on a common key.</p>System.Linq.Enumerable#42"
  syntax:
    content: public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: "\n<p>A function to create a result element from two matching elements.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 73
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to hash and compare keys.</p>\n<p>A join refers to the operation of correlating the elements of two sources of information based on a common key. <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of SelectMany, which requires more than one method call to perform the same operation.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> preserves the order of the elements of <em>outer</em>, and for each of these elements, the order of the matching elements of <em>inner</em>.</p>\n<p>In relational database terms, the <xref href=\"System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\" data-throw-if-not-resolved=\"false\"></xref> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref href=\"System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\" data-throw-if-not-resolved=\"false\"></xref> method. See Join Operations.</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)
    parameters:
    - id: outer
      type: System.Collections.Generic.IEnumerable{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: "\n<p>A function to create a result element from two matching elements.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to hash and compare keys.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  id: Last``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 74
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception if <em>source</em> contains no elements. To instead return a default value when the source sequence is empty, use the <xref href=\"System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of an array.</p>System.Linq.Enumerable#43"
  syntax:
    content: public static TSource Last<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The value at the last position in the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Last(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 75
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a sequence that satisfies a specified condition.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception if no matching element is found in <em>source</em>. To instead return a default value when no matching element is found, use the <xref href=\"System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of an array that satisfies a condition.</p>System.Linq.Enumerable#44"
  syntax:
    content: public static TSource Last<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The last element in the sequence that passes the test in the specified predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Last(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 76
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a sequence, or a default value if the sequence contains no elements.</p>\n"
  remarks: "\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n<p>The <see cref=\"Overload:System.Linq.Enumerable.LastOrDefault\"></see> method does not provide a way to specify a default value. If you want to specify a default value other than <strong>default</strong>(<em>TSource</em>), use the <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method as described in the Example section.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> on an empty array.</p>System.Linq.Enumerable#45<p>Sometimes the value of <strong>default</strong>(<em>TSource</em>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method to specify the default value that you want to use if the collection is empty. Then, call <xref href=\"System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the last element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty. Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to specify a default value of 1.</p>System.Linq.Enumerable#127"
  syntax:
    content: public static TSource LastOrDefault<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>\n<strong>default</strong>(<em>TSource</em>) if the source sequence is empty; otherwise, the last element in the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LastOrDefault(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 77
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\n"
  remarks: "\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> by passing in a predicate. In the second call to the method, there is no element in the sequence that satisfies the condition.</p>System.Linq.Enumerable#46"
  syntax:
    content: public static TSource LastOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>\n<strong>default</strong>(<em>TSource</em>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LastOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  id: LongCount``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 78
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that represents the total number of elements in a sequence.</p>\n"
  remarks: "\n<p>Use this method rather than <xref href=\"System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> when you expect the result to be greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into LongCount()</code> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in an array.</p>System.Linq.Enumerable#47"
  syntax:
    content: public static long LongCount<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As IEnumerable(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The number of elements in the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of elements exceeds <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LongCount(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 79
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that represents how many elements in a sequence satisfy a condition.</p>\n"
  remarks: "\n<p>Use this method rather than <xref href=\"System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> when you expect the result to be greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into LongCount()</code> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to count the elements in an array that satisfy a condition.</p>System.Linq.Enumerable#48"
  syntax:
    content: public static long LongCount<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LongCount(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Max(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 80
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#52"
  syntax:
    content: public static decimal Max(this IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: "\n<p>A sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Max(IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  id: Max(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 81
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#52"
  syntax:
    content: public static double Max(this IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: "\n<p>A sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Max(IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  id: Max(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 82
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#52"
  syntax:
    content: public static int Max(this IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: "\n<p>A sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Max(IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  id: Max(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 83
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>System.Linq.Enumerable#52"
  syntax:
    content: public static long Max(this IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: "\n<p>A sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Max(IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 84
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#54"
  syntax:
    content: public static decimal ? Max(this IEnumerable<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Max(IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 85
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>System.Linq.Enumerable#54"
  syntax:
    content: public static double ? Max(this IEnumerable<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Max(IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 86
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#54"
  syntax:
    content: public static int ? Max(this IEnumerable<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Max(IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 87
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#54"
  syntax:
    content: public static long ? Max(this IEnumerable<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Max(IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 88
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#54"
  syntax:
    content: public static float ? Max(this IEnumerable<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Max(IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  id: Max(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 89
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#52"
  syntax:
    content: public static float Max(this IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: "\n<p>A sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to determine the maximum value of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Max(IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  id: Max``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 90
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a generic sequence.</p>\n"
  remarks: "\n<p>If type <em>TSource</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method uses that implementation to compare values. Otherwise, if type <em>TSource</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to compare values.</p>\n<p>If <em>TSource</em> is a reference type and the source sequence is empty or contains only values that are <strong>null</strong>, this method returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Linq.Enumerable#57"
  syntax:
    content: public static TSource Max<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 91
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static decimal Max<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 92
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static double Max<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 93
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>System.Linq.Enumerable#58"
  syntax:
    content: public static int Max<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 94
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static long Max<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 95
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static decimal ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 96
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Double> in C# or Nullable(Of Double) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static double ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 97
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static int ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 98
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static long ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 99
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Single> in C# or Nullable(Of Single) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static float ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 100
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static float Max<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Max<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 101
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</p>\n"
  remarks: "\n<p>If type <em>TResult</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref>, this method uses that implementation to compare values. Otherwise, if type <em>TResult</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Max()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Max\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the maximum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#58"
  syntax:
    content: public static TResult Max<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by <em>selector</em>.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Max(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Min(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 102
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#60"
  syntax:
    content: public static decimal Min(this IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: "\n<p>A sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Min(IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  id: Min(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 103
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>System.Linq.Enumerable#60"
  syntax:
    content: public static double Min(this IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: "\n<p>A sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Min(IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  id: Min(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 104
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#60"
  syntax:
    content: public static int Min(this IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: "\n<p>A sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Min(IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  id: Min(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 105
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#60"
  syntax:
    content: public static long Min(this IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: "\n<p>A sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Min(IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 106
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#63"
  syntax:
    content: public static decimal ? Min(this IEnumerable<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Min(IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 107
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#63"
  syntax:
    content: public static double ? Min(this IEnumerable<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Min(IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 108
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>System.Linq.Enumerable#63"
  syntax:
    content: public static int ? Min(this IEnumerable<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Min(IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 109
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#63"
  syntax:
    content: public static long ? Min(this IEnumerable<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Min(IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 110
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>If the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#63"
  syntax:
    content: public static float ? Min(this IEnumerable<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Min(IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  id: Min(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 111
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#60"
  syntax:
    content: public static float Min(this IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: "\n<p>A sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to determine the minimum value of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Min(IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  id: Min``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 112
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a generic sequence.</p>\n"
  remarks: "\n<p>If type <em>TSource</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref>, this method uses that implementation to compare values. Otherwise, if type <em>TSource</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to compare values. </p>\n<p>If <em>TSource</em> is a reference type and the source sequence is empty or contains only values that are <strong>null</strong>, this function returns <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Linq.Enumerable#67"
  syntax:
    content: public static TSource Min<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 113
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static decimal Min<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 114
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static double Min<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 115
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>System.Linq.Enumerable#68"
  syntax:
    content: public static int Min<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 116
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static long Min<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 117
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static decimal ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 118
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Double> in C# or Nullable(Of Double) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static double ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 119
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of source into a numeric type, specifically Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static int ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 120
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static long ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 121
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Single> in C# or Nullable(Of Single) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static float ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 122
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> implementation of <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static float Min<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Min<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 123
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</p>\n"
  remarks: "\n<p>If type <em>TResult</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref>, this method uses that implementation to compare values. Otherwise, if type <em>TResult</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>, that implementation is used to compare values.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Min()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Min\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> to determine the minimum value in a sequence of projected values.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#68"
  syntax:
    content: public static TResult Min<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by <em>selector</em>.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Min(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  id: OfType``1(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OfType
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 124
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Filters the elements of an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> based on a specified type.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> method returns only those elements in <em>source</em> that can be cast to type <em>TResult</em>. To instead receive an exception if an element cannot be cast to type <em>TResult</em>, use <xref href=\"System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. This is because <xref href=\"System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> extends the type <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> cannot only be applied to collections that are based on the parameterized <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> type, but collections that are based on the non-parameterized <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> type also.</p>\n<p>By applying <xref href=\"System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> to a collection that implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, you gain the ability to query the collection by using the standard query operators. For example, specifying a type argument of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> would return an object of type IEnumerable<Object> in C# or IEnumerable(Of Object) in Visual Basic, to which the standard query operators can be applied.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref> to filter the elements of an <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Enumerable#69"
  syntax:
    content: public static IEnumerable<TResult> OfType<TResult>(this IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As IEnumerable) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: "\n<p>The <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> whose elements to filter.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type to filter the elements of the sequence on.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence of type <em>TResult</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 125
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in ascending order according to a key.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>Two methods are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is the return type of this method. These two methods, namely ThenBy and ThenByDescending, enable you to specify additional sort criteria to sort a sequence. ThenBy and ThenByDescending also return an <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which means any number of consecutive calls to ThenBy or ThenByDescending can be made.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>This method compares keys by using the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n<p>In query expression syntax, an <strong>orderby</strong> (Visual C#) or <strong>Order By</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> to sort the elements of a sequence.</p>System.Linq.Enumerable#70"
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 126
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>Two methods are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is the return type of this method. These two methods, namely ThenBy and ThenByDescending, enable you to specify additional sort criteria to sort a sequence. ThenBy and ThenByDescending also return an <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which means any number of consecutive calls to ThenBy or ThenByDescending can be made.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 127
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in descending order according to a key.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>For an example of this method, see <xref href=\"System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Two methods are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is the return type of this method. These two methods, namely ThenBy and ThenByDescending, enable you to specify additional sort criteria to sort a sequence. ThenBy and ThenByDescending also return an <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which means any number of consecutive calls to ThenBy or ThenByDescending can be made.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>This method compares keys by using the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n<p>In query expression syntax, an <strong>orderby descending</strong> (Visual C#) or <strong>Order By Descending</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 128
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>Two methods are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is the return type of this method. These two methods, namely ThenBy and ThenByDescending, enable you to specify additional sort criteria to sort a sequence. ThenBy and ThenByDescending also return an <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which means any number of consecutive calls to ThenBy or ThenByDescending can be made.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</p>System.Linq.Enumerable#71"
  syntax:
    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.Enumerable.Range(System.Int32,System.Int32)
  commentId: M:System.Linq.Enumerable.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Range(Int32, Int32)
  fullName: System.Linq.Enumerable.Range(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Range
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 129
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Generates a sequence of integral numbers within a specified range.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Range(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to generate a sequence of values.</p>System.Linq.Enumerable#72"
  syntax:
    content: public static IEnumerable<int> Range(int start, int count)
    content.vb: Public Shared Function Range(start As Integer, count As Integer) As IEnumerable(Of Integer)
    parameters:
    - id: start
      type: System.Int32
      description: "\n<p>The value of the first integer in the sequence.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of sequential integers to generate.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: "\n<p>An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>start</em> + <em>count</em> -1 is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  commentId: M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)
  id: Repeat``1(``0,System.Int32)
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Repeat<TResult>(TResult, Int32)
  fullName: System.Linq.Enumerable.Repeat<TResult>(TResult, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Repeat
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 130
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Generates a sequence that contains one repeated value.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Repeat``1(``0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to generate a sequence of a repeated value.</p>System.Linq.Enumerable#73"
  syntax:
    content: public static IEnumerable<TResult> Repeat<TResult>(TResult element, int count)
    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As IEnumerable(Of TResult)
    parameters:
    - id: element
      type: '{TResult}'
      description: "\n<p>The value to be repeated.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times to repeat the value in the generated sequence.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the value to be repeated in the result sequence.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains a repeated value.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Repeat(Of TResult)(TResult, System.Int32)
  name.vb: Repeat(Of TResult)(TResult, Int32)
- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  id: Reverse``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Reverse<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Reverse<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 131
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Inverts the order of the elements in a sequence.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>Unlike <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, this sorting method does not consider the actual values themselves in determining the order. Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to reverse the order of elements in an array.</p>System.Linq.Enumerable#74"
  syntax:
    content: public static IEnumerable<TSource> Reverse<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to reverse.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence whose elements correspond to those of the input sequence in reverse order.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Reverse(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Reverse(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 132
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence into a new form.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>This projection method requires the transform function, <em>selector</em>, to produce one value for each value in the source sequence, <em>source</em>. If <em>selector</em> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> method instead of <xref href=\"System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref>. Although SelectMany works similarly to Select, it differs in that the transform function returns a collection that is then expanded by SelectMany before it is returned.</p>\n<p>In query expression syntax, a <strong>select</strong> (Visual C#) or <strong>Select</strong> (Visual Basic) clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Select\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> to project over a sequence of values.</p>System.Linq.Enumerable#75"
  syntax:
    content: public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to invoke a transform function on.</p>\n"
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by <em>selector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the transform function on each element of <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 133
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence into a new form by incorporating the element's index.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The first argument to <em>selector</em> represents the element to process. The second argument to <em>selector</em> represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.</p>\n<p>This projection method requires the transform function, <em>selector</em>, to produce one value for each value in the source sequence, <em>source</em>. If <em>selector</em> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually. In such a situation, it might be better for your query to return a single coalesced sequence of values. To achieve this, use the <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> method instead of <xref href=\"System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\" data-throw-if-not-resolved=\"false\"></xref>. Although SelectMany works similarly to Select, it differs in that the transform function returns a collection that is then expanded by SelectMany before it is returned.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\" data-throw-if-not-resolved=\"false\"></xref> to project over a sequence of values and use the index of each element.</p>System.Linq.Enumerable#76"
  syntax:
    content: public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to invoke a transform function on.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32,{TResult}}
      description: "\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by <em>selector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the transform function on each element of <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 134
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and flattens the resulting sequences into one sequence.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> method enumerates the input sequence, uses a transform function to map each element to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, and then enumerates and yields the elements of each such <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> object. That is, for each element of <em>source</em>, <em>selector</em> is invoked and a sequence of values is returned. <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> then flattens this two-dimensional collection of collections into a one-dimensional <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and returns it. For example, if a query uses <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the orders (of type <code>Order</code>) for each customer in a database, the result is of type IEnumerable<Order> in C# or IEnumerable(Of Order) in Visual Basic. If instead the query uses <xref href=\"System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the orders, the collection of collections of orders is not combined and the result is of type IEnumerable<List<Order>> in C# or IEnumerable(Of List(Of Order)) in Visual Basic.</p>\n<p>In query expression syntax, each <strong>from</strong> clause (Visual C#) or <strong>From</strong> clause (Visual Basic) after the initial one translates to an invocation of <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> to perform a one-to-many projection over an array.</p>System.Linq.Enumerable#77"
  syntax:
    content: public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the sequence returned by <em>selector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 135
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> method enumerates the input sequence, uses a transform function to map each element to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, and then enumerates and yields the elements of each such <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> object. That is, for each element of <em>source</em>, <em>selector</em> is invoked and a sequence of values is returned. <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> then flattens this two-dimensional collection of collections into a one-dimensional <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and returns it. For example, if a query uses <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the orders (of type <code>Order</code>) for each customer in a database, the result is of type IEnumerable<Order> in C# or IEnumerable(Of Order) in Visual Basic. If instead the query uses <xref href=\"System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the orders, the collection of collections of orders is not combined and the result is of type IEnumerable<List<Order>> in C# or IEnumerable(Of List(Of Order)) in Visual Basic.</p>\n<p>The first argument to <em>selector</em> represents the element to process. The second argument to <em>selector</em> represents the zero-based index of that element in the source sequence. This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example. It can also be useful if you want to retrieve the index of one or more elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> to perform a one-to-many projection over an array and use the index of each outer element.</p>System.Linq.Enumerable#78"
  syntax:
    content: public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
      description: "\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the sequence returned by <em>selector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 136
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref> method is useful when you have to keep the elements of <em>source</em> in scope for query logic that occurs after the call to <xref href=\"System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref>. See the Example section for a code example. If there is a bidirectional relationship between objects of type <em>TSource</em> and objects of type <em>TCollection</em>, that is, if an object of type <em>TCollection</em> provides a property to retrieve the <em>TSource</em> object that produced it, you do not need this overload of <xref href=\"System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref>. Instead, you can use <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> and navigate back to the <em>TSource</em> object through the <em>TCollection</em> object.</p>\n<p>In query expression syntax, each <strong>from</strong> clause (Visual C#) or <strong>From</strong> clause (Visual Basic) after the initial one translates to an invocation of <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to <strong>Select</strong>.</p>System.Linq.Enumerable#124"
  syntax:
    content: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
      description: "\n<p>A transform function to apply to each element of the input sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: "\n<p>A transform function to apply to each element of the intermediate sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TCollection
      description: "\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the resulting sequence.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 137
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref> method is useful when you have to keep the elements of <em>source</em> in scope for query logic that occurs after the call to <xref href=\"System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref>. See the Example section for a code example. If there is a bidirectional relationship between objects of type <em>TSource</em> and objects of type <em>TCollection</em>, that is, if an object of type <em>TCollection</em> provides a property to retrieve the <em>TSource</em> object that produced it, you do not need this overload of <xref href=\"System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref>. Instead, you can use <xref href=\"System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\" data-throw-if-not-resolved=\"false\"></xref> and navigate back to the <em>TSource</em> object through the <em>TCollection</em> object.</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: collectionSelector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
      description: "\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n"
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: "\n<p>A transform function to apply to each element of the intermediate sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TCollection
      description: "\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the resulting sequence.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 138
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <em>TSource</em>, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. The default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values of the types that implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods for the type.</p>\n"
  example:
  - "\n<p>The following code examples demonstrate how to use <xref href=\"System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to determine whether two sequences are equal. In the first two examples, the method determines whether the compared sequences contain references to the same objects. In the third and fourth examples, the method compares the actual data of the objects within the sequences.</p>\n<p>In this example the sequences are equal.</p>System.Linq.Enumerable#32<p>The following code example compares two sequences that are not equal. Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</p>System.Linq.Enumerable#33<p>If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface in your class. The following code example shows how to implement this interface in a helper class and provide <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>CSLINQEncapsulatedComparer#9<p>After you implement this interface, you can use sequences of <code>ProductA</code> objects in the <xref href=\"System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQEncapsulatedComparer#8"
  syntax:
    content: public static bool SequenceEqual<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>second</em>.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare to the first sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 139
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether two sequences are equal by comparing their elements by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>. If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare elements.</p>\n"
  example:
  - "\n<p>The following example shows how to implement an equality comparer that can be used in the <xref href=\"System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>CSLINQCustomComparer#1<p>After you implement this comparer, you can use sequences of <code>Product</code> objects in the <xref href=\"System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQCustomComparer#8"
  syntax:
    content: public static bool SequenceEqual<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>second</em>.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to compare to the first sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to use to compare elements.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal according to <em>comparer</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  id: Single``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 140
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception if the input sequence is empty. To instead return <strong>null</strong> when the input sequence is empty, use <xref href=\"System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array.</p>System.Linq.Enumerable#79<p>The following code example demonstrates that <xref href=\"System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> throws an exception when the sequence does not contain exactly one element.</p>System.Linq.Enumerable#80"
  syntax:
    content: public static TSource Single<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The input sequence contains more than one element.</p>\n<p>-or-</p>\n<p>The input sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Single(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 141
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception if the input sequence contains no matching element. To instead return <strong>null</strong> when no matching element is found, use <xref href=\"System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array that satisfies a condition.</p>System.Linq.Enumerable#81<p>The following code example demonstrates that <xref href=\"System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</p>System.Linq.Enumerable#82"
  syntax:
    content: public static TSource Single<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return a single element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test an element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence that satisfies a condition.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\n<p>-or-</p>\n<p>The source sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Single(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 142
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\n"
  remarks: "\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n<p>The <see cref=\"Overload:System.Linq.Enumerable.SingleOrDefault\"></see> method does not provide a way to specify a default value. If you want to specify a default value other than <strong>default</strong>(<em>TSource</em>), use the <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method as described in the Example section.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array.</p>System.Linq.Enumerable#83<p>The following code example demonstrates that <xref href=\"System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> returns a default value when the sequence does not contain exactly one element.</p>System.Linq.Enumerable#84<p>Sometimes the value of <strong>default</strong>(<em>TSource</em>) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> method to specify the default value that you want to use if the collection is empty. Then, call <xref href=\"System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the element. The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty. Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query has finished executing. The second result variable is obtained by using <xref href=\"System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\" data-throw-if-not-resolved=\"false\"></xref> to specify a default value of 1.</p>System.Linq.Enumerable#128"
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence, or <strong>default</strong>(<em>TSource</em>) if the sequence contains no elements.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The input sequence contains more than one element.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 143
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\n"
  remarks: "\n<p>The default value for reference and nullable types is <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to select the only element of an array that satisfies a condition.</p>System.Linq.Enumerable#85<p>The following code example demonstrates that <xref href=\"System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</p>System.Linq.Enumerable#86"
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return a single element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test an element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence that satisfies the condition, or <strong>default</strong>(<em>TSource</em>) if no such element is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Skip<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Skip<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 144
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>If <em>source</em> contains fewer than <em>count</em> elements, an empty <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> is returned. If <em>count</em> is less than or equal to zero, all elements of <em>source</em> are yielded.</p>\n<p>The <xref href=\"System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods are functional complements. Given a sequence <code>coll</code> and an integer <code>n</code>, concatenating the results of <code>coll.Take(n)</code> and <code>coll.Skip(n)</code> yields the same sequence as <code>coll</code>.</p>\n<p>In Visual Basic query expression syntax, a <strong>Skip</strong> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to skip a specified number of elements in a sorted array and return the remaining elements.</p>System.Linq.Enumerable#87"
  syntax:
    content: public static IEnumerable<TSource> Skip<TSource>(this IEnumerable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skip(Of TSource)(source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return elements from.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to skip before returning the remaining elements.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements that occur after the specified index in the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Skip(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 145
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>This method tests each element of <em>source</em> by using <em>predicate</em> and skips the element if the result is <strong>true</strong>. After the predicate function returns <strong>false</strong> for an element, that element and the remaining elements in <em>source</em> are yielded and there are no more invocations of <em>predicate</em>.</p>\n<p>If <em>predicate</em> returns <strong>true</strong> for all elements in the sequence, an empty <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> is returned.</p>\n<p>The <see cref=\"Overload:System.Linq.Enumerable.TakeWhile\"></see> and <see cref=\"Overload:System.Linq.Enumerable.SkipWhile\"></see> methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.</p>\n<p>In Visual Basic query expression syntax, a <strong>Skip While</strong> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.SkipWhile\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to skip elements of an array as long as a condition is true.</p>System.Linq.Enumerable#88"
  syntax:
    content: public static IEnumerable<TSource> SkipWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 146
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method tests each element of <em>source</em> by using <em>predicate</em> and skips the element if the result is <strong>true</strong>. After the predicate function returns <strong>false</strong> for an element, that element and the remaining elements in <em>source</em> are yielded and there are no more invocations of <em>predicate</em>.</p>\n<p>If <em>predicate</em> returns <strong>true</strong> for all elements in the sequence, an empty <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> is returned.</p>\n<p>The first argument of <em>predicate</em> represents the element to test. The second argument represents the zero-based index of the element within <em>source</em>.</p>\n<p>The <see cref=\"Overload:System.Linq.Enumerable.TakeWhile\"></see> and <see cref=\"Overload:System.Linq.Enumerable.SkipWhile\"></see> methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.</p>\n<p>In Visual Basic query expression syntax, a <strong>Skip While</strong> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.SkipWhile\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to skip elements of an array as long as a condition that depends on the element's index is true.</p>System.Linq.Enumerable#89"
  syntax:
    content: public static IEnumerable<TSource> SkipWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: "\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  id: Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Decimal>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 147
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\" data-throw-if-not-resolved=\"false\"></xref> method returns zero if <em>source</em> contains no elements.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#120"
  syntax:
    content: public static decimal Sum(this IEnumerable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Decimal}
      description: "\n<p>A sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Decimal))
  name.vb: Sum(IEnumerable(Of Decimal))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  id: Sum(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Double>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 148
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#120"
  syntax:
    content: public static double Sum(this IEnumerable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: "\n<p>A sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Sum(IEnumerable(Of Double))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  id: Sum(System.Collections.Generic.IEnumerable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Int32>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 149
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#120"
  syntax:
    content: public static int Sum(this IEnumerable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: "\n<p>A sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int32))
  name.vb: Sum(IEnumerable(Of Int32))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  id: Sum(System.Collections.Generic.IEnumerable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Int64>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 150
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#120"
  syntax:
    content: public static long Sum(this IEnumerable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: "\n<p>A sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: Sum(IEnumerable(Of Int64))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 151
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does<strong></strong>not include values that are <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#121"
  syntax:
    content: public static decimal ? Sum(this IEnumerable<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(IEnumerable(Of Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 152
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#121"
  syntax:
    content: public static double ? Sum(this IEnumerable<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))
  name.vb: Sum(IEnumerable(Of Nullable(Of Double)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 153
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#121"
  syntax:
    content: public static int ? Sum(this IEnumerable<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(IEnumerable(Of Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 154
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, substitute the elements of the source sequence with elements of the appropriate numerical type.</p>\n</p>System.Linq.Enumerable#121"
  syntax:
    content: public static long ? Sum(this IEnumerable<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(IEnumerable(Of Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 155
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>System.Linq.Enumerable#121"
  syntax:
    content: public static float ? Sum(this IEnumerable<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
      description: "\n<p>A sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))
  name.vb: Sum(IEnumerable(Of Nullable(Of Single)))
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  id: Sum(System.Collections.Generic.IEnumerable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Single>)
  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 156
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of a sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\" data-throw-if-not-resolved=\"false\"></xref> to sum the values of a sequence.</p>System.Linq.Enumerable#120"
  syntax:
    content: public static float Sum(this IEnumerable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Single}
      description: "\n<p>A sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to calculate the sum of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The sum of the values in the sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Single))
  name.vb: Sum(IEnumerable(Of Single))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 157
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static decimal Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 158
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>System.Linq.Enumerable#98"
  syntax:
    content: public static double Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 159
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static int Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 160
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static long Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 161
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not included values that are <strong>null</strong>.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static decimal ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 162
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Double> in C# or Nullable(Of Double) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static double ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 163
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static int ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 164
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static long ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 165
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of nullable <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>This method returns zero if <em>source</em> contains no elements.</p>\n<p>The result does not include values that are <strong>null</strong>.</p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically Nullable<Single> in C# or Nullable(Of Single) in Visual Basic.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static float ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 166
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Computes the sum of the sequence of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\" data-throw-if-not-resolved=\"false\"></xref> method returns zero if <em>source</em> contains no elements. </p>\n<p>You can apply this method to a sequence of arbitrary values if you provide a function, <em>selector</em>, that projects the members of <em>source</em> into a numeric type, specifically <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Aggregate Into Sum()</code> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.Sum\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\" data-throw-if-not-resolved=\"false\"></xref> to sum the projected values of a sequence.</p>\n<p>\n<p>This code example uses an overload of this overloaded method that is different from the specific overload that this topic describes. To extend the example to this topic, change the body of the <em>selector</em> function.</p>\n</p>System.Linq.Enumerable#98"
  syntax:
    content: public static float Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate a sum.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The sum of the projected values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Take<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 167
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns a specified number of contiguous elements from the start of a sequence.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> enumerates <em>source</em> and yields elements until <em>count</em> elements have been yielded or <em>source</em>contains no more elements. If <em>count</em> exceeds the number of elements in <em>source</em>, all elements of <em>source</em>are returned.</p>\n<p>If <em>count</em> is less than or equal to zero, <em>source</em> is not enumerated and an empty <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> is returned.</p>\n<p>The <xref href=\"System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods are functional complements. Given a sequence <code>coll</code> and an integer <code>n</code>, concatenating the results of <code>coll.Take(n)</code> and <code>coll.Skip(n)</code> yields the same sequence as <code>coll</code>.</p>\n<p>In Visual Basic query expression syntax, a <strong>Take</strong> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to return elements from the start of a sequence.</p>System.Linq.Enumerable#99"
  syntax:
    content: public static IEnumerable<TSource> Take<TSource>(this IEnumerable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Take(Of TSource)(source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to return.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements from the start of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Take(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(IEnumerable(Of TSource), Int32)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 168
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns elements from a sequence as long as a specified condition is true.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method tests each element of <em>source</em> by using <em>predicate</em> and yields the element if the result is <strong>true</strong>. Enumeration stops when the predicate function returns <strong>false</strong> for an element or when <em>source</em> contains no more elements.</p>\n<p>The <see cref=\"Overload:System.Linq.Enumerable.TakeWhile\"></see> and <see cref=\"Overload:System.Linq.Enumerable.SkipWhile\"></see> methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.</p>\n<p>In Visual Basic query expression syntax, a <strong>Take While</strong> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.TakeWhile\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to return elements from the start of a sequence as long as a condition is true.</p>System.Linq.Enumerable#100"
  syntax:
    content: public static IEnumerable<TSource> TakeWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>A sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 169
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The <xref href=\"System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> method tests each element of <em>source</em> by using <em>predicate</em> and yields the element if the result is <strong>true</strong>. Enumeration stops when the predicate function returns <strong>false</strong> for an element or when <em>source</em> contains no more elements.</p>\n<p>The first argument of <em>predicate</em> represents the element to test. The second argument represents the zero-based index of the element within <em>source</em>.</p>\n<p>The <see cref=\"Overload:System.Linq.Enumerable.TakeWhile\"></see> and <see cref=\"Overload:System.Linq.Enumerable.SkipWhile\"></see> methods are functional complements. Given a sequence <code>coll</code> and a pure function <code>p</code>, concatenating the results of <code>coll.TakeWhile(p)</code> and <code>coll.SkipWhile(p)</code> yields the same sequence as <code>coll</code>.</p>\n<p>In Visual Basic query expression syntax, a <strong>Take While</strong> clause translates to an invocation of <see cref=\"Overload:System.Linq.Enumerable.TakeWhile\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</p>System.Linq.Enumerable#101"
  syntax:
    content: public static IEnumerable<TSource> TakeWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: "\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence that occur before the element at which the test no longer passes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 170
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>\n<see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> and <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> methods.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>This method compares keys by using the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n<p>In query expression syntax, an <code>orderby [first criterion], [second criterion]</code> (Visual C#) or <code>Order By [first criterion], [second criterion]</code> (Visual Basic) clause translates to an invocation of <xref href=\"System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> to perform a secondary ordering of the elements in a sequence.</p>System.Linq.Enumerable#102"
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 171
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>\n<see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> and <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> methods.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 172
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>\n<see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> and <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> methods.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>This sorting method compares keys by using the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n<p>In Visual C# query expression syntax, an <code>orderby [first criterion], [second criterion] descending</code> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In Visual Basic query expression syntax, an <code>Order By [first criterion], [second criterion] Descending</code> clause translates to an invocation of <xref href=\"System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 173
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>To order a sequence by the values of the elements themselves, specify the identity function (<code>x => x</code> in Visual C# or <code>Function(x) x</code> in Visual Basic) for <em>keySelector</em>.</p>\n<p>\n<see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> and <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> are defined to extend the type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, which is also the return type of these methods. This design enables you to specify multiple sort criteria by applying any number of <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> methods.</p>\n<p>Because <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you can call <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see> on the results of a call to <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see>, <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>. Doing this introduces a new primary ordering that ignores the previously established ordering.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n<p>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved. In contrast, an unstable sort does not preserve the order of elements that have the same key.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</p>System.Linq.Enumerable#103"
  syntax:
    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted in descending order according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  id: ToArray``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToArray<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 174
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates an array from a <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method forces immediate query evaluation and returns an array that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> has similar behavior but returns a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> instead of an array.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to force immediate query evaluation and return an array of results.</p>System.Linq.Enumerable#104"
  syntax:
    content: public static TSource[] ToArray<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArray(Of TSource)(source As IEnumerable(Of TSource)) As TSource()
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create an array from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}[]'
      description: "\n<p>An array that contains the elements from the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToArray(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToArray(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 175
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> method uses the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> by using a key selector.</p>System.Linq.Enumerable#105"
  syntax:
    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>keySelector</em> produces duplicate keys for two elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 176
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function and key comparer.</p>\n"
  remarks: "\n<p>If <em>comparer</em> is <strong>null</strong>, the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  example:
  - 
  syntax:
    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>keySelector</em> produces duplicate keys for two elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 177
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to specified key selector and element selector functions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref> method uses the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
  example:
  - 
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>keySelector</em> produces duplicate keys for two elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 178
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function, a comparer, and an element selector function.</p>\n"
  remarks: "\n<p>If <em>comparer</em> is <strong>null</strong>, the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  example:
  - 
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>keySelector</em> produces duplicate keys for two elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  id: ToList``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToList<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToList
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 179
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method forces immediate query evaluation and returns a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the query results. You can append this method to your query in order to obtain a cached copy of the query results.</p>\n<p>\n<xref href=\"System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> has similar behavior but returns an array instead of a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to force immediate query evaluation and return a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the query results.</p>System.Linq.Enumerable#106"
  syntax:
    content: public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToList(Of TSource)(source As IEnumerable(Of TSource)) As List(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.List{{TSource}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToList(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToList(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 180
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>, a one-to-many dictionary that maps keys to collections of values. A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> differs from a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, which performs a one-to-one mapping of keys to single values.</p>\n<p>The default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  example:
  - 
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 181
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function and key comparer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>, a one-to-many dictionary that maps keys to collections of values. A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> is different to a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, which performs a one-to-one mapping of keys to single values.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  example:
  - 
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 182
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to specified key selector and element selector functions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>, a one-to-many dictionary that maps keys to collections of values. A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> differs from a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, which performs a one-to-one mapping of keys to single values.</p>\n<p>The default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> by using a key selector function and an element selector function.</p>System.Linq.Enumerable#107"
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
      description: "\n<p>A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 183
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function, a comparer and an element selector function.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>, a one-to-many dictionary that maps keys to collections of values. A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> differs from a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, which performs a one-to-one mapping of keys to single values.</p>\n<p>If <em>comparer</em> is <strong>null</strong>, the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  example:
  - 
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
      description: "\n<p>A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 184
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Produces the set union of two sequences by using the default equality comparer.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>This method excludes duplicates from the return set. This is different behavior to the <xref href=\"System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, which returns all the elements in the input sequences including duplicates.</p>\n<p>The default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values of the types that implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface. To compare a custom data type, you need to implement this interface and provide your own <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods for the type.</p>\n<p>When the object returned by this method is enumerated, <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> enumerates <em>first</em> and <em>second</em> in that order and yields each element that has not already been yielded.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> to obtain the union of two sequences of integers.</p>System.Linq.Enumerable#109<p>If you want to compare sequences of objects of a custom data type, you have to implement the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface in a helperclass. The following code example shows how to implement this interface in a custom data type and provide <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>CSLINQEncapsulatedComparer#9<p>After you implement this interface, you can use sequences of <code>ProductA</code> objects in the <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQEncapsulatedComparer#10,4"
  syntax:
    content: public static IEnumerable<TSource> Union<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements form the first set for the union.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements form the second set for the union.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 185
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>If c<em>omparer</em> is <strong>null</strong>, the default equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used to compare values.</p>\n<p>When the object returned by this method is enumerated, <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> enumerates <em>first</em> and <em>second</em> in that order and yields each element that has not already been yielded.</p>\n<p>The <xref href=\"System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method differs from the <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method because the <xref href=\"System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method returns all the elements in the input sequences including duplicates, whereas <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> returns only unique values.</p>\n"
  example:
  - "\n<p>The following example shows how to implement an equality comparer that can be used in the <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>CSLINQCustomComparer#1<p>After you implement this comparer, you can use sequences of <code>Product</code> objects in the <xref href=\"System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" data-throw-if-not-resolved=\"false\"></xref> method, as shown in the following example.</p>CSLINQCustomComparer#2,4"
  syntax:
    content: public static IEnumerable<TSource> Union<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements form the first set for the union.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose distinct elements form the second set for the union.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 186
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Filters a sequence of values based on a predicate.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>In query expression syntax, a <strong>where</strong> (Visual C#) or <strong>Where</strong> (Visual Basic) clause translates to an invocation of <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to filter a sequence.</p>System.Linq.Enumerable#110"
  syntax:
    content: public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to filter.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence that satisfy the condition.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 187
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The first argument of <em>predicate</em> represents the element to test. The second argument represents the zero-based index of the element within <em>source</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\" data-throw-if-not-resolved=\"false\"></xref> to filter a sequence based on a predicate that involves the index of each element.</p>System.Linq.Enumerable#111"
  syntax:
    content: public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to filter.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: "\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence that satisfy the condition.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  commentId: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.Enumerable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.Enumerable.Zip<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 188
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</p>\n"
  remarks: "\n<p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its GetEnumerator method directly or by using <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic.</p>\n<p>The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\" data-throw-if-not-resolved=\"false\"></xref> method to merge two sequences.</p>System.Linq.Enumerable#200<p></p>"
  syntax:
    content: public static IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TFirst}}
      description: "\n<p>The first sequence to merge.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSecond}}
      description: "\n<p>The second sequence to merge.</p>\n"
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
      description: "\n<p>A function that specifies how to merge the elements from the two sequences.</p>\n"
    typeParameters:
    - id: TFirst
      description: "\n<p>The type of the elements of the first input sequence.</p>\n"
    - id: TSecond
      description: "\n<p>The type of the elements of the second input sequence.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the result sequence.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains merged elements of two input sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Enumerable.Zip(Of TFirst, TSecond, TResult)(System.Collections.Generic.IEnumerable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TSource},{TSource}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TSource, TSource>
  fullName: System.Func<TSource, TSource, TSource>
  fullname.vb: System.Func(Of TSource, TSource, TSource)
  name.vb: Func(Of TSource, TSource, TSource)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: '{TSource}'
  isExternal: false
  name: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`3
  parent: System
  isExternal: false
  name: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}
  parent: System
  definition: System.Func`3
  name: Func<TAccumulate, TSource, TAccumulate>
  fullName: System.Func<TAccumulate, TSource, TAccumulate>
  fullname.vb: System.Func(Of TAccumulate, TSource, TAccumulate)
  name.vb: Func(Of TAccumulate, TSource, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  fullName: System.Func<TAccumulate, TResult>
  fullname.vb: System.Func(Of TAccumulate, TResult)
  name.vb: Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Func`2
  parent: System
  isExternal: false
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Boolean>
  fullName: System.Func<TSource, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Decimal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Decimal>
  fullName: System.Collections.Generic.IEnumerable<System.Decimal>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Decimal)
  name.vb: IEnumerable(Of Decimal)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Collections.Generic.IEnumerable{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Double>
  fullName: System.Collections.Generic.IEnumerable<System.Double>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int64>
  fullName: System.Collections.Generic.IEnumerable<System.Int64>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int64)
  name.vb: IEnumerable(Of Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Nullable<Decimal>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal))
  name.vb: IEnumerable(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Nullable<Double>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double))
  name.vb: IEnumerable(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Nullable<Int32>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32))
  name.vb: IEnumerable(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Nullable<Int64>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64))
  name.vb: IEnumerable(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Nullable<Single>>
  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single))
  name.vb: IEnumerable(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  fullName: System.Nullable<System.Single>
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Single}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Single>
  fullName: System.Collections.Generic.IEnumerable<System.Single>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Single)
  name.vb: IEnumerable(Of Single)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Func{{TSource},System.Decimal}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Decimal>
  fullName: System.Func<TSource, System.Decimal>
  fullname.vb: System.Func(Of TSource, System.Decimal)
  name.vb: Func(Of TSource, Decimal)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Double}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Double>
  fullName: System.Func<TSource, System.Double>
  fullname.vb: System.Func(Of TSource, System.Double)
  name.vb: Func(Of TSource, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int32>
  fullName: System.Func<TSource, System.Int32>
  fullname.vb: System.Func(Of TSource, System.Int32)
  name.vb: Func(Of TSource, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int64}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int64>
  fullName: System.Func<TSource, System.Int64>
  fullname.vb: System.Func(Of TSource, System.Int64)
  name.vb: Func(Of TSource, Int64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Decimal}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Decimal>>
  fullName: System.Func<TSource, System.Nullable<System.Decimal>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))
  name.vb: Func(Of TSource, Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Double}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Double>>
  fullName: System.Func<TSource, System.Nullable<System.Double>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Double))
  name.vb: Func(Of TSource, Nullable(Of Double))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int32}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int32>>
  fullName: System.Func<TSource, System.Nullable<System.Int32>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))
  name.vb: Func(Of TSource, Nullable(Of Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int64}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int64>>
  fullName: System.Func<TSource, System.Nullable<System.Int64>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))
  name.vb: Func(Of TSource, Nullable(Of Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Single}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Single>>
  fullName: System.Func<TSource, System.Nullable<System.Single>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Single))
  name.vb: Func(Of TSource, Nullable(Of Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Single}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Single>
  fullName: System.Func<TSource, System.Single>
  fullname.vb: System.Func(Of TSource, System.Single)
  name.vb: Func(Of TSource, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Func{{TSource},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  fullname.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGrouping<TKey, TSource>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TSource))
  name.vb: IEnumerable(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TElement}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TElement>
  fullName: System.Func<TSource, TElement>
  fullname.vb: System.Func(Of TSource, TElement)
  name.vb: Func(Of TSource, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: IEnumerable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TSource>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)
  name.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TElement>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  name.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TOuter}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TOuter>
  fullName: System.Collections.Generic.IEnumerable<TOuter>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TOuter)
  name.vb: IEnumerable(Of TOuter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TOuter, TKey>
  fullName: System.Func<TOuter, TKey>
  fullname.vb: System.Func(Of TOuter, TKey)
  name.vb: Func(Of TOuter, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TInner},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TInner, TKey>
  fullName: System.Func<TInner, TKey>
  fullname.vb: System.Func(Of TInner, TKey)
  name.vb: Func(Of TInner, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TOuter, IEnumerable<TInner>, TResult>
  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>
  fullname.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)
  name.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TInner},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TOuter, TInner, TResult>
  fullName: System.Func<TOuter, TInner, TResult>
  fullname.vb: System.Func(Of TOuter, TInner, TResult)
  name.vb: Func(Of TOuter, TInner, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  fullname.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable{{TSource}}
  parent: System.Linq
  definition: System.Linq.IOrderedEnumerable`1
  name: IOrderedEnumerable<TSource>
  fullName: System.Linq.IOrderedEnumerable<TSource>
  fullname.vb: System.Linq.IOrderedEnumerable(Of TSource)
  name.vb: IOrderedEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.IOrderedEnumerable`1
  parent: System.Linq
  isExternal: false
  name: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  fullname.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, TResult>
  fullName: System.Func<TSource, System.Int32, TResult>
  fullname.vb: System.Func(Of TSource, System.Int32, TResult)
  name.vb: Func(Of TSource, Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TCollection},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TCollection, TResult>
  fullName: System.Func<TSource, TCollection, TResult>
  fullname.vb: System.Func(Of TSource, TCollection, TResult)
  name.vb: Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, Boolean>
  fullName: System.Func<TSource, System.Int32, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Boolean)
  name.vb: Func(Of TSource, Int32, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: '{TSource}[]'
  isExternal: false
  name: TSource[]
  fullName: TSource[]
  fullname.vb: TSource()
  name.vb: TSource()
  spec.csharp:
  - name: TSource
    fullName: TSource
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSource
    fullName: TSource
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TSource>
  fullName: System.Collections.Generic.Dictionary<TKey, TSource>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)
  name.vb: Dictionary(Of TKey, TSource)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TElement>
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  name.vb: Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.List{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  fullname.vb: System.Collections.Generic.List(Of TSource)
  name.vb: List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TSource}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TSource>
  fullName: System.Linq.ILookup<TKey, TSource>
  fullname.vb: System.Linq.ILookup(Of TKey, TSource)
  name.vb: ILookup(Of TKey, TSource)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.ILookup`2
  parent: System.Linq
  isExternal: false
  name: ILookup<, >
  fullName: System.Linq.ILookup<, >
  fullname.vb: System.Linq.ILookup(Of , )
  name.vb: ILookup(Of , )
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TElement}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TFirst}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TFirst>
  fullName: System.Collections.Generic.IEnumerable<TFirst>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TFirst)
  name.vb: IEnumerable(Of TFirst)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  name.vb: IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: System.Func{{TFirst},{TSecond},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TFirst, TSecond, TResult>
  fullName: System.Func<TFirst, TSecond, TResult>
  fullname.vb: System.Func(Of TFirst, TSecond, TResult)
  name.vb: Func(Of TFirst, TSecond, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
