items:
- uid: System.Data.SqlClient.SqlDataReader
  commentId: T:System.Data.SqlClient.SqlDataReader
  id: SqlDataReader
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlDataReader.Connection
  - System.Data.SqlClient.SqlDataReader.Depth
  - System.Data.SqlClient.SqlDataReader.FieldCount
  - System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetEnumerator
  - System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.HasRows
  - System.Data.SqlClient.SqlDataReader.IsClosed
  - System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  - System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  - System.Data.SqlClient.SqlDataReader.Item(System.String)
  - System.Data.SqlClient.SqlDataReader.NextResult
  - System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Read
  - System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.RecordsAffected
  - System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  langs:
  - csharp
  - vb
  name: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlDataReader
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 25
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Provides a way of reading a forward-only stream of rows from a SQL Server database. This class cannot be inherited.</p>\n"
  remarks: "\n<p>To create a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>, you must call the <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> object, instead of directly using a constructor.</p>\n<p>While the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is being used, the associated <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> is busy serving the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>, and no other operations can be performed on the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> other than closing it. This is the case until the <xref href=\"System.Data.SqlClient.SqlDataReader.Close\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is called. For example, you cannot retrieve output parameters until after you call <xref href=\"System.Data.SqlClient.SqlDataReader.Close\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Changes made to a result set by another process or thread while data is being read may be visible to the user of the <strong>SqlDataReader</strong>. However, the precise behavior is timing dependent.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.IsClosed\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlDataReader.RecordsAffected\" data-throw-if-not-resolved=\"false\"></xref> are the only properties that you can call after the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. Although the <xref href=\"System.Data.SqlClient.SqlDataReader.RecordsAffected\" data-throw-if-not-resolved=\"false\"></xref> property may be accessed while the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> exists, always call <xref href=\"System.Data.SqlClient.SqlDataReader.Close\" data-throw-if-not-resolved=\"false\"></xref> before returning the value of <xref href=\"System.Data.SqlClient.SqlDataReader.RecordsAffected\" data-throw-if-not-resolved=\"false\"></xref> to guarantee an accurate return value.</p>\n<p>When using sequential access (<xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref>), an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> will be raised if the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> position is advanced and another read operation is attempted on the previous column.</p>\n<p>For optimal performance, <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> avoids creating unnecessary objects or making unnecessary copies of data. Therefore, multiple calls to methods such as <xref href=\"System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> return a reference to the same object. Use caution if you are modifying the underlying value of the objects returned by methods such as <xref href=\"System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, and a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. The example reads through the data, writing it out to the console window. The code then closes the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> is closed automatically at the end of the <strong>using</strong> code block.</p>Classic WebData SqlDataReader.Read Example#1"
  syntax:
    content: 'public class SqlDataReader : DbDataReader, IDbColumnSchemaGenerator'
    content.vb: >-
      Public Class SqlDataReader
          Inherits DbDataReader
          Implements IDbColumnSchemaGenerator
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Data.SqlClient.SqlDataReader.Connection
  commentId: P:System.Data.SqlClient.SqlDataReader.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: Connection
  fullName: System.Data.SqlClient.SqlDataReader.Connection
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 137
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> associated with the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected SqlConnection Connection { get; }
    content.vb: Protected ReadOnly Property Connection As SqlConnection
    parameters: []
    return:
      type: System.Data.SqlClient.SqlConnection
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Data.SqlClient.SqlDataReader.Depth
  commentId: P:System.Data.SqlClient.SqlDataReader.Depth
  id: Depth
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: Depth
  fullName: System.Data.SqlClient.SqlDataReader.Depth
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Depth
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 145
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a value that indicates the depth of nesting for the current row.</p>\n"
  remarks: "\n<p>The outermost table has a depth of zero. The .NET Framework Data Provider for SQL Server does not support nesting and always returns zero.</p>\n"
  syntax:
    content: public override int Depth { get; }
    content.vb: Public Overrides ReadOnly Property Depth As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlDataReader.FieldCount
  commentId: P:System.Data.SqlClient.SqlDataReader.FieldCount
  id: FieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: FieldCount
  fullName: System.Data.SqlClient.SqlDataReader.FieldCount
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldCount
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 159
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the number of columns in the current row.</p>\n"
  remarks: "\n<p>Executing a query that, by its nature, does not return rows (such as a DELETE query), sets <xref href=\"System.Data.SqlClient.SqlDataReader.FieldCount\" data-throw-if-not-resolved=\"false\"></xref> to 0. However. this should not be confused with a query that returns 0 rows (such as SELECT * FROM table WHERE 1 = 2) in which case <xref href=\"System.Data.SqlClient.SqlDataReader.FieldCount\" data-throw-if-not-resolved=\"false\"></xref> returns the number of columns in the table, including hidden fields. Use <xref href=\"System.Data.SqlClient.SqlDataReader.VisibleFieldCount\" data-throw-if-not-resolved=\"false\"></xref> to exclude hidden fields.</p>\n"
  syntax:
    content: public override int FieldCount { get; }
    content.vb: Public Overrides ReadOnly Property FieldCount As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>There is no current connection to an instance of SQL Server. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlDataReader.HasRows
  commentId: P:System.Data.SqlClient.SqlDataReader.HasRows
  id: HasRows
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: HasRows
  fullName: System.Data.SqlClient.SqlDataReader.HasRows
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasRows
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 181
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a value that indicates whether the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> contains one or more rows.</p>\n"
  syntax:
    content: public override bool HasRows { get; }
    content.vb: Public Overrides ReadOnly Property HasRows As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlDataReader.IsClosed
  commentId: P:System.Data.SqlClient.SqlDataReader.IsClosed
  id: IsClosed
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: IsClosed
  fullName: System.Data.SqlClient.SqlDataReader.IsClosed
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsClosed
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 198
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Retrieves a Boolean value that indicates whether the specified <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance has been closed. </p>\n"
  remarks: "\n<p>It is not possible to read from a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> instance that is closed.</p>\n"
  syntax:
    content: public override bool IsClosed { get; }
    content.vb: Public Overrides ReadOnly Property IsClosed As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  commentId: P:System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Data.SqlClient.SqlDataReader.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 373
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column in its native format given the column ordinal.</p>\n"
  syntax:
    content: public override object this[int i] { get; }
    content.vb: Public Overrides ReadOnly Property Item(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Object
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)
  commentId: P:System.Data.SqlClient.SqlDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: System.Data.SqlClient.SqlDataReader.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 381
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column in its native format given the column name.</p>\n"
  remarks: "\n<p>A case-sensitive lookup is performed first. If it fails, a second case-insensitive search is made (a case-insensitive comparison is done using the database collation). Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in \"file\".</p>\n<p>This method is kana-width insensitive.</p>\n"
  syntax:
    content: public override object this[string name] { get; }
    content.vb: Public Overrides ReadOnly Property Item(name As String) As Object
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>No column with the specified name was found. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: System.Data.SqlClient.SqlDataReader.Item(System.String)
  name.vb: Item(String)
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected
  commentId: P:System.Data.SqlClient.SqlDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: RecordsAffected
  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RecordsAffected
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 326
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader.RecordsAffected\" data-throw-if-not-resolved=\"false\"></xref> property is not set until all rows are read and you close the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The value of this property is cumulative. For example, if two records are inserted in batch mode, the value of <strong>RecordsAffected</strong> will be two.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.IsClosed\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlDataReader.RecordsAffected\" data-throw-if-not-resolved=\"false\"></xref> are the only properties that you can call after the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n"
  syntax:
    content: public override int RecordsAffected { get; }
    content.vb: Public Overrides ReadOnly Property RecordsAffected As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  commentId: P:System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  id: VisibleFieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: VisibleFieldCount
  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VisibleFieldCount
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 355
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the number of fields in the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> that are not hidden. </p>\n"
  remarks: "\n<p>This value is used to determine how many fields in the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> are visible. For example, a SELECT on a partial primary key returns the remaining parts of the key as hidden fields. The hidden fields are always appended behind the visible fields.</p>\n"
  syntax:
    content: public override int VisibleFieldCount { get; }
    content.vb: Public Overrides ReadOnly Property VisibleFieldCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBoolean
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1070
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a Boolean.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a Boolean, or an exception is generated.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override bool GetBoolean(int i)
    content.vb: Public Overrides Function GetBoolean(i As Integer) As Boolean
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Boolean
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByte
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1156
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a byte.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a byte.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override byte GetByte(int i)
    content.vb: Public Overrides Function GetByte(i As Integer) As Byte
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Byte
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1162
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the number of available bytes in the field. Most of the time this is the exact length of the field. However, the number returned may be less than the true length of the field if <strong>GetBytes</strong> has already been used to obtain bytes from the field. This may be the case, for example, if the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is reading a large data structure into a buffer. For more information, see the <strong>SequentialAccess</strong> setting for <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If you pass a buffer that is <strong>null</strong>, <xref href=\"System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the length of the entire field in bytes, not the remaining size based on the buffer offset parameter.</p>\n<p>No conversions are performed; therefore, the data retrieved must already be a byte array.</p>\n"
  syntax:
    content: public override long GetBytes(int i, long dataIndex, byte[] buffer, int bufferIndex, int length)
    content.vb: Public Overrides Function GetBytes(i As Integer, dataIndex As Long, buffer As Byte(), bufferIndex As Integer, length As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
    - id: dataIndex
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferIndex
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetChar(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChar
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1542
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a single character.</p>\n"
  remarks: "\n<p>Not supported for <xref href=\"System.Data.SqlClient\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public override char GetChar(int i)
    content.vb: Public Overrides Function GetChar(i As Integer) As Char
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Char
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetChars(Int32, Int64, Char[], Int32, Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1547
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Reads a stream of characters from the specified column offset into the buffer as an array starting at the given buffer offset.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the number of available characters in the field. Frequently this is the exact length of the field. However, the number returned may be less than the true length of the field if <strong>GetChars</strong> has already been used to obtain characters from the field. This may be the case, for example, if the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is reading a large data structure into a buffer. For more information, see the <strong>SequentialAccess</strong> setting for <xref href=\"System.Data.CommandBehavior\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The actual number of characters read can be less than the requested length, if the end of the field is reached. If you pass a buffer that is <strong>null</strong>, <xref href=\"System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the length of the entire field in characters, not the remaining size based on the buffer offset parameter.</p>\n<p>No conversions are performed; therefore. the data retrieved must already be a character array.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns 0 when <em>dataIndex</em> is negative.</p>\n"
  syntax:
    content: public override long GetChars(int i, long dataIndex, char[] buffer, int bufferIndex, int length)
    content.vb: Public Overrides Function GetChars(i As Integer, dataIndex As Long, buffer As Char(), bufferIndex As Integer, length As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
    - id: dataIndex
      type: System.Int64
    - id: buffer
      type: System.Char[]
    - id: bufferIndex
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)
  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetDataTypeName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDataTypeName
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 826
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a string representing the data type of the specified column.</p>\n"
  remarks: "\n<p>Returns the name of the back-end data type.</p>\n<p>\n<strong>numeric</strong> is a synonym in SQL Server for the <strong>decimal</strong> data type. <strong>GetDataTypeName</strong> will return \"decimal\" for a column defined as either decimal or numeric.</p>\n"
  syntax:
    content: public override string GetDataTypeName(int i)
    content.vb: Public Overrides Function GetDataTypeName(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDateTime
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1806
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override DateTime GetDateTime(int i)
    content.vb: Public Overrides Function GetDateTime(i As Integer) As Date
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.DateTime
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  id: GetDateTimeOffset(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetDateTimeOffset(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDateTimeOffset
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2181
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Retrieves the value of the specified column as a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public virtual DateTimeOffset GetDateTimeOffset(int i)
    content.vb: Public Overridable Function GetDateTimeOffset(i As Integer) As DateTimeOffset
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.DateTimeOffset
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDecimal
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1827
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override decimal GetDecimal(int i)
    content.vb: Public Overrides Function GetDecimal(i As Integer) As Decimal
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Decimal
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDouble
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1833
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a double-precision floating point number.</p>\n"
  remarks: "\n<p>No conversions are performed. Therefore, the data retrieved must already be a double-precision floating point number.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override double GetDouble(int i)
    content.vb: Public Overrides Function GetDouble(i As Integer) As Double
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Double
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator
  commentId: M:System.Data.SqlClient.SqlDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 893
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Although you can use this method to retrieve an explicit enumerator, in languages that support a <strong>foreach</strong> construct, it is simpler to use the looping construct directly in order to iterate through the rows in the data reader.</p>\n"
  syntax:
    content: public override IEnumerator GetEnumerator()
    content.vb: Public Overrides Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldType
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 898
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that is the data type of the object.</p>\n"
  syntax:
    content: public override Type GetFieldType(int i)
    content.vb: Public Overrides Function GetFieldType(i As Integer) As Type
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  id: GetFieldValue``1(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetFieldValue<T>(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldValue
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2128
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Synchronously gets the value of the specified column as a type. <xref href=\"System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> is the asynchronous version of this method.</p>\n"
  remarks: "\n<p>\n<em>T</em> can be one of the following types:</p>\n<p>For more information, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public override T GetFieldValue<T>(int i)
    content.vb: Public Overrides Function GetFieldValue(Of T)(i As Integer) As T
    parameters:
    - id: i
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.Data.SqlTypes.SqlNullValueException
    commentId: T:System.Data.SqlTypes.SqlNullValueException
    description: "\n<p>The value of the column was null (<xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> == <strong>true</strong>), retrieving a non-SQL type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlDataReader.GetFieldValue(Of T)(System.Int32)
  name.vb: GetFieldValue(Of T)(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  id: GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetFieldValueAsync<T>(Int32, CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldValueAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 4148
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Asynchronously gets the value of the specified column as a type. <xref href=\"System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is the synchronous version of this method.</p>\n"
  remarks: "\n<p>\n<em>T</em> can be one of the following types:</p>\n<p>For more information, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public override Task<T> GetFieldValueAsync<T>(int i, CancellationToken cancellationToken)
    content.vb: Public Overrides Function GetFieldValueAsync(Of T)(i As Integer, cancellationToken As CancellationToken) As Task(Of T)
    parameters:
    - id: i
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.Data.SqlTypes.SqlNullValueException
    commentId: T:System.Data.SqlTypes.SqlNullValueException
    description: "\n<p>The value of the column was null (<xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> == <strong>true</strong>), retrieving a non-SQL type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Of T)(System.Int32, System.Threading.CancellationToken)
  name.vb: GetFieldValueAsync(Of T)(Int32, CancellationToken)
- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetFloat(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFloat
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1839
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a single-precision floating point number.</p>\n"
  remarks: "\n<p>No conversions are performed. Therefore, the data retrieved must already be a single-precision floating point number.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override float GetFloat(int i)
    content.vb: Public Overrides Function GetFloat(i As Integer) As Single
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Single
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGuid
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1845
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a globally unique identifier (GUID).</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a GUID.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override Guid GetGuid(int i)
    content.vb: Public Overrides Function GetGuid(i As Integer) As Guid
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Guid
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt16
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1851
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a 16-bit signed integer.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a 16-bit signed integer.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override short GetInt16(int i)
    content.vb: Public Overrides Function GetInt16(i As Integer) As Short
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Int16
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt32
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1857
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a 32-bit signed integer.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a 32-bit signed integer.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override int GetInt32(int i)
    content.vb: Public Overrides Function GetInt32(i As Integer) As Integer
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt64
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1863
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a 64-bit signed integer.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a 64-bit signed integer.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override long GetInt64(int i)
    content.vb: Public Overrides Function GetInt64(i As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Int64
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetName
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 974
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the name of the specified column.</p>\n"
  syntax:
    content: public override string GetName(int i)
    content.vb: Public Overrides Function GetName(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetOrdinal(String)
  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOrdinal
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1040
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the column ordinal, given the name of the column.</p>\n"
  remarks: "\n<p>\n<strong>GetOrdinal</strong> performs a case-sensitive lookup first. If it fails, a second, case-insensitive search occurs (a case-insensitive comparison is done using the database collation). Unexpected results can occur when comparisons are affected by culture-specific casing rules. For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter 'i' in \"file\". The method throws an <strong>IndexOutOfRange</strong> exception if the zero-based column ordinal is not found.</p>\n<p>\n<strong>GetOrdinal</strong> is kana-width insensitive.</p>\n<p>Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call <strong>GetOrdinal</strong> within a loop. Save time by calling <strong>GetOrdinal</strong> once and assigning the results to an integer variable for use within the loop.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic WebData SqlDataReader.GetOrdinal#1"
  syntax:
    content: public override int GetOrdinal(string name)
    content.vb: Public Overrides Function GetOrdinal(name As String) As Integer
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Int32
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The name specified is not a valid column name. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  id: GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetProviderSpecificFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProviderSpecificFieldType
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 980
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets an <strong>Object</strong> that is a representation of the underlying provider-specific field type.</p>\n"
  syntax:
    content: public override Type GetProviderSpecificFieldType(int i)
    content.vb: Public Overrides Function GetProviderSpecificFieldType(i As Integer) As Type
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  id: GetProviderSpecificValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetProviderSpecificValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProviderSpecificValue
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1059
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets an <strong>Object</strong> that is a representation of the underlying provider specific value.</p>\n"
  syntax:
    content: public override object GetProviderSpecificValue(int i)
    content.vb: Public Overrides Function GetProviderSpecificValue(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  commentId: M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  id: GetProviderSpecificValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetProviderSpecificValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProviderSpecificValues
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1064
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets an array of objects that are a representation of the underlying provider specific values.</p>\n"
  syntax:
    content: public override int GetProviderSpecificValues(object[] values)
    content.vb: Public Overrides Function GetProviderSpecificValues(values As Object()) As Integer
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object())
  name.vb: GetProviderSpecificValues(Object())
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  id: GetSqlBinary(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlBinary(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlBinary
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1875
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlBinary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore the data retrieved must already be a binary structure or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlBinary GetSqlBinary(int i)
    content.vb: Public Overridable Function GetSqlBinary(i As Integer) As SqlBinary
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlBinary
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  id: GetSqlBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlBoolean
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1869
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a Boolean or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlBoolean GetSqlBoolean(int i)
    content.vb: Public Overridable Function GetSqlBoolean(i As Integer) As SqlBoolean
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlBoolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  id: GetSqlByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlByte
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1881
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlByte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore the data retrieved must already be a byte, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlByte GetSqlByte(int i)
    content.vb: Public Overridable Function GetSqlByte(i As Integer) As SqlByte
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlByte
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  id: GetSqlBytes(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlBytes(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlBytes
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1887
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as <xref href=\"System.Data.SqlTypes.SqlBytes\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual SqlBytes GetSqlBytes(int i)
    content.vb: Public Overridable Function GetSqlBytes(i As Integer) As SqlBytes
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlBytes
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  id: GetSqlChars(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlChars(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlChars
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1894
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as <xref href=\"System.Data.SqlTypes.SqlChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual SqlChars GetSqlChars(int i)
    content.vb: Public Overridable Function GetSqlChars(i As Integer) As SqlChars
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlChars
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  id: GetSqlDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlDateTime
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1910
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlDateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a date/time value, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlDateTime GetSqlDateTime(int i)
    content.vb: Public Overridable Function GetSqlDateTime(i As Integer) As SqlDateTime
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlDateTime
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  id: GetSqlDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlDecimal
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1916
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlDecimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a decimal value, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlDecimal GetSqlDecimal(int i)
    content.vb: Public Overridable Function GetSqlDecimal(i As Integer) As SqlDecimal
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlDecimal
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  id: GetSqlDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlDouble
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1928
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a double-precision floating-point number, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlDouble GetSqlDouble(int i)
    content.vb: Public Overridable Function GetSqlDouble(i As Integer) As SqlDouble
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlDouble
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  id: GetSqlGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlGuid
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1922
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlGuid\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a GUID, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlGuid GetSqlGuid(int i)
    content.vb: Public Overridable Function GetSqlGuid(i As Integer) As SqlGuid
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlGuid
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  id: GetSqlInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlInt16
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1934
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlInt16\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a 16-bit signed integer, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlInt16 GetSqlInt16(int i)
    content.vb: Public Overridable Function GetSqlInt16(i As Integer) As SqlInt16
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlInt16
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  id: GetSqlInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlInt32
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1940
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore the data retrieved must already be a 32-bit signed integer, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlInt32 GetSqlInt32(int i)
    content.vb: Public Overridable Function GetSqlInt32(i As Integer) As SqlInt32
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlInt32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  id: GetSqlInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlInt64
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1946
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a 64-bit signed integer, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlInt64 GetSqlInt64(int i)
    content.vb: Public Overridable Function GetSqlInt64(i As Integer) As SqlInt64
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlInt64
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  id: GetSqlMoney(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlMoney(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlMoney
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1952
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlMoney\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a decimal value, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlMoney GetSqlMoney(int i)
    content.vb: Public Overridable Function GetSqlMoney(i As Integer) As SqlMoney
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlMoney
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  id: GetSqlSingle(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlSingle(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlSingle
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1958
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlSingle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a single precision floating point number, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlSingle GetSqlSingle(int i)
    content.vb: Public Overridable Function GetSqlSingle(i As Integer) As SqlSingle
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlSingle
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  id: GetSqlString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlString
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1964
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Data.SqlTypes.SqlString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a string, or an exception is generated.</p>\n"
  syntax:
    content: public virtual SqlString GetSqlString(int i)
    content.vb: Public Overridable Function GetSqlString(i As Integer) As SqlString
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlString
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  id: GetSqlValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlValue
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2006
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Returns the data value in the specified column as a SQL Server type. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns data using the native SQL Server types. To retrieve data using the .NET Framework types, see <xref href=\"System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object GetSqlValue(int i)
    content.vb: Public Overridable Function GetSqlValue(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  id: GetSqlValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlValues
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2087
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Fills an array of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that contains the values for all the columns in the record, expressed as SQL Server types.</p>\n"
  remarks: "\n<p>Returns the values for all the columns in the record in a single call, using the SQL type system instead of the CLR type system. The length of the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array does not need to match the number of columns in the record. You can pass an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array that contains fewer than the number of columns contained in the record. Only the amount of data the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array holds is copied to the array, starting at the column with ordinal 0. You can also pass an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array whose length is more than the number of columns contained in the resulting row. Any remaining columns are untouched.</p>\n"
  syntax:
    content: public virtual int GetSqlValues(object[] values)
    content.vb: Public Overridable Function GetSqlValues(values As Object()) As Integer
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is null. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object())
  name.vb: GetSqlValues(Object())
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  id: GetSqlXml(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetSqlXml(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSqlXml
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1976
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as an XML value.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be an XML value.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public virtual SqlXml GetSqlXml(int i)
    content.vb: Public Overridable Function GetSqlXml(i As Integer) As SqlXml
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.SqlTypes.SqlXml
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 to <xref href=\"System.Data.DataTableReader.FieldCount\" data-throw-if-not-resolved=\"false\"></xref> - 1</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An attempt was made to read or access columns in a closed <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The retrieved data is not compatible with the <xref href=\"System.Data.SqlTypes.SqlXml\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  id: GetStream(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetStream(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStream
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1115
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Retrieves binary, image, varbinary, UDT, and variant data types as a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.Stream.ReadTimeout\" data-throw-if-not-resolved=\"false\"></xref> defaults to the value of <xref href=\"System.Data.SqlClient.SqlCommand.CommandTimeout\" data-throw-if-not-resolved=\"false\"></xref>; but you can modify <xref href=\"System.IO.Stream.ReadTimeout\" data-throw-if-not-resolved=\"false\"></xref> via <xref href=\"System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Null values will be returned as an empty (zero bytes) <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will raise an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> exception when used on an object returned by <xref href=\"System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> when <xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref> is in effect.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> exceptions raised from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> are thrown as <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exceptions; check the inner exception for the <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The following <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> members are not available for objects returned by <xref href=\"System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>:</p>\n<ul><li>\n<p>BeginWrite</p>\n</li><li>\n<p>EndWrite</p>\n</li><li>\n<p>Length</p>\n</li><li>\n<p>Position</p>\n</li><li>\n<p>Seek</p>\n</li><li>\n<p>SetLength</p>\n</li><li>\n<p>Write</p>\n</li><li>\n<p>WriteByte</p>\n</li><li>\n<p>WriteTimeout</p>\n</li></ul>\n<p>When the connection property <strong>ContextConnection=true</strong>, <xref href=\"System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> only supports synchronous data retrieval for both sequential (<xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref>) and non-sequential (<xref href=\"System.Data.CommandBehavior.Default\" data-throw-if-not-resolved=\"false\"></xref>) access.</p>\n<p>For more information, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public override Stream GetStream(int i)
    content.vb: Public Overrides Function GetStream(i As Integer) As Stream
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.IO.Stream
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The returned type was not one of the types below:</p>\n<ul><li>\n<p>binary</p>\n</li><li>\n<p>image</p>\n</li><li>\n<p>varbinary</p>\n</li><li>\n<p>udt</p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetString
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2115
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column as a string.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a string.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public override string GetString(int i)
    content.vb: Public Overrides Function GetString(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  id: GetTextReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetTextReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTextReader
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1491
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Retrieves Char, NChar, NText, NVarChar, text, varChar, and Variant data types as a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> exceptions raised from <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> are thrown as <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exceptions; check the inner exception for the <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Null values will be returned as an empty (zero bytes) <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will raise an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> exception when used on an object returned by <xref href=\"System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> when <xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref> is in effect.</p>\n<p>When the connection property <strong>ContextConnection=true</strong>, <xref href=\"System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> only supports synchronous data retrieval for both sequential (<xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref>) and non-sequential (<xref href=\"System.Data.CommandBehavior.Default\" data-throw-if-not-resolved=\"false\"></xref>) access.</p>\n<p>For more information, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public override TextReader GetTextReader(int i)
    content.vb: Public Overrides Function GetTextReader(i As Integer) As TextReader
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.IO.TextReader
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The returned type was not one of the types below:</p>\n<ul><li>\n<p>char</p>\n</li><li>\n<p>nchar</p>\n</li><li>\n<p>ntext</p>\n</li><li>\n<p>nvarchar</p>\n</li><li>\n<p>text</p>\n</li><li>\n<p>varchar</p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  id: GetTimeSpan(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetTimeSpan(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTimeSpan
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2160
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Retrieves the value of the specified column as a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>No conversions are performed; therefore, the data retrieved must already be a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Call <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to check for null values before calling this method.</p>\n"
  syntax:
    content: public virtual TimeSpan GetTimeSpan(int i)
    content.vb: Public Overridable Function GetTimeSpan(i As Integer) As TimeSpan
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.TimeSpan
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2144
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the value of the specified column in its native format.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns data using the .NET Framework types.</p>\n"
  syntax:
    content: public override object GetValue(int i)
    content.vb: Public Overrides Function GetValue(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  commentId: M:System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValues
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2330
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Populates an array of objects with the column values of the current row.</p>\n"
  remarks: "\n<p>For most applications, this method provides an efficient means for retrieving all columns, instead of retrieving each column individually.</p>\n<p>You can pass an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array that contains fewer than the number of columns contained in the resulting row. Only the amount of data the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array holds is copied to the array. You can also pass an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array whose length is more than the number of columns contained in the resulting row.</p>\n<p>This method returns <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> for null database columns.</p>\n"
  example:
  - "\n<p>The following example demonstrates using a correctly sized  array  to read all values from the current row in the supplied <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. In addition, the sample demonstrates using a fixed-sized array that could be either smaller or larger than the number of available columns.</p>DataWorks DataTableReader.GetValueObject#2"
  syntax:
    content: public override int GetValues(object[] values)
    content.vb: Public Overrides Function GetValues(values As Object()) As Integer
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlDataReader.GetValues(System.Object())
  name.vb: GetValues(Object())
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  id: GetXmlReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: GetXmlReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetXmlReader
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 1076
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Retrieves data of type XML as an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object returned by <xref href=\"System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> does not support asynchronous operations. If you require asynchronous operations on an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>, cast the XML column to an NVARCHAR(MAX) on the server and use <xref href=\"System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> with <see cref=\"Overload:System.Xml.XmlReader.Create\"></see>.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> exceptions raised from <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> are thrown as <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> exceptions; check the inner exception for the <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will raise an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> exception when used on an object returned by <xref href=\"System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> when <xref href=\"System.Data.CommandBehavior.SequentialAccess\" data-throw-if-not-resolved=\"false\"></xref> is in effect.</p>\n<p>For more information, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public virtual XmlReader GetXmlReader(int i)
    content.vb: Public Overridable Function GetXmlReader(i As Integer) As XmlReader
    parameters:
    - id: i
      type: System.Int32
    return:
      type: XmlReader
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Trying to read a previously read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The returned type was not xml.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  commentId: M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: IsDBNull(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDBNull
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2589
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a value that indicates whether the column contains non-existent or missing values.</p>\n"
  remarks: "\n<p>Call this method to check for null column values before calling the typed get methods (for example, <xref href=\"System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, and so on) to avoid raising an error.</p>SqlDataReader_IsDbNull#1"
  syntax:
    content: public override bool IsDBNull(int i)
    content.vb: Public Overrides Function IsDBNull(i As Integer) As Boolean
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  id: IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: IsDBNullAsync(Int32, CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDBNullAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 4024
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, which gets a value that indicates whether the column contains non-existent or missing values.</p>\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public override Task<bool> IsDBNullAsync(int i, CancellationToken cancellationToken)
    content.vb: Public Overrides Function IsDBNullAsync(i As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: i
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Trying to read a previously read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.NextResult
  commentId: M:System.Data.SqlClient.SqlDataReader.NextResult
  id: NextResult
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: NextResult()
  fullName: System.Data.SqlClient.SqlDataReader.NextResult()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextResult
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2607
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Advances the data reader to the next result, when reading the results of batch Transact-SQL statements.</p>\n"
  remarks: "\n<p>Used to process multiple results, which can be generated by executing batch Transact-SQL statements.</p>\n<p>By default, the data reader is positioned on the first result.</p>\n"
  syntax:
    content: public override bool NextResult()
    content.vb: Public Overrides Function NextResult As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  id: NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: NextResultAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextResultAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 3587
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlDataReader.NextResult\" data-throw-if-not-resolved=\"false\"></xref>, which advances the data reader to the next result, when reading the results of batch Transact-SQL statements.</p>\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public override Task<bool> NextResultAsync(CancellationToken cancellationToken)
    content.vb: Public Overrides Function NextResultAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.Read
  commentId: M:System.Data.SqlClient.SqlDataReader.Read
  id: Read
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: Read()
  fullName: System.Data.SqlClient.SqlDataReader.Read()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 2762
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Advances the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> to the next record.</p>\n"
  remarks: "\n<p>The default position of the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is before the first record. Therefore, you must call <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> to begin accessing any data.</p>\n<p>Only one <strong>SqlDataReader</strong> per associated <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> may be open at a time, and any attempt to open another will fail until the first one is closed. Similarly, while the <strong>SqlDataReader</strong> is being used, the associated <strong>SqlConnection</strong> is busy serving it until you call <xref href=\"System.Data.SqlClient.SqlDataReader.Close\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, and a <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. The example reads through the data, writing it out to the console window. The code then closes the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> is closed automatically at the end of the <strong>using</strong> code block.</p>Classic WebData SqlDataReader.Read Example#1"
  syntax:
    content: public override bool Read()
    content.vb: Public Overrides Function Read As Boolean
    return:
      type: System.Boolean
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  id: ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  - vb
  name: ReadAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs
    startLine: 3870
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref>, which advances the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> to the next record.</p>\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</p>\n"
  remarks: "\n<p>If the <em>behavior</em> parameter of <see cref=\"Overload:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync\"></see> is set to <strong>Default</strong>, <xref href=\"System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> reads the entire row before returning the Task.</p>\n<p>For more information, including code samples, about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public override Task<bool> ReadAsync(CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>SQL Server returned an error while executing the command text.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{T}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Data.SqlTypes.SqlBinary
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBinary
  fullName: System.Data.SqlTypes.SqlBinary
- uid: System.Data.SqlTypes
  isExternal: false
  name: System.Data.SqlTypes
  fullName: System.Data.SqlTypes
- uid: System.Data.SqlTypes.SqlBoolean
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBoolean
  fullName: System.Data.SqlTypes.SqlBoolean
- uid: System.Data.SqlTypes.SqlByte
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlByte
  fullName: System.Data.SqlTypes.SqlByte
- uid: System.Data.SqlTypes.SqlBytes
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBytes
  fullName: System.Data.SqlTypes.SqlBytes
- uid: System.Data.SqlTypes.SqlChars
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlChars
  fullName: System.Data.SqlTypes.SqlChars
- uid: System.Data.SqlTypes.SqlDateTime
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDateTime
  fullName: System.Data.SqlTypes.SqlDateTime
- uid: System.Data.SqlTypes.SqlDecimal
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDecimal
  fullName: System.Data.SqlTypes.SqlDecimal
- uid: System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDouble
  fullName: System.Data.SqlTypes.SqlDouble
- uid: System.Data.SqlTypes.SqlGuid
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlGuid
  fullName: System.Data.SqlTypes.SqlGuid
- uid: System.Data.SqlTypes.SqlInt16
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt16
  fullName: System.Data.SqlTypes.SqlInt16
- uid: System.Data.SqlTypes.SqlInt32
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt32
  fullName: System.Data.SqlTypes.SqlInt32
- uid: System.Data.SqlTypes.SqlInt64
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt64
  fullName: System.Data.SqlTypes.SqlInt64
- uid: System.Data.SqlTypes.SqlMoney
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlMoney
  fullName: System.Data.SqlTypes.SqlMoney
- uid: System.Data.SqlTypes.SqlSingle
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlSingle
  fullName: System.Data.SqlTypes.SqlSingle
- uid: System.Data.SqlTypes.SqlString
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlString
  fullName: System.Data.SqlTypes.SqlString
- uid: System.Data.SqlTypes.SqlXml
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlXml
  fullName: System.Data.SqlTypes.SqlXml
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  fullName: System.IO.TextReader
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Data.SqlTypes.SqlNullValueException
  isExternal: false
  name: SqlNullValueException
  fullName: System.Data.SqlTypes.SqlNullValueException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Data.SqlClient.SqlException
  isExternal: false
  name: SqlException
  fullName: System.Data.SqlClient.SqlException
