items:
- uid: System.Runtime.InteropServices.StructLayoutAttribute
  commentId: T:System.Runtime.InteropServices.StructLayoutAttribute
  id: StructLayoutAttribute
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
  - System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  - System.Runtime.InteropServices.StructLayoutAttribute.Pack
  - System.Runtime.InteropServices.StructLayoutAttribute.Size
  - System.Runtime.InteropServices.StructLayoutAttribute.Value
  langs:
  - csharp
  - vb
  name: StructLayoutAttribute
  fullName: System.Runtime.InteropServices.StructLayoutAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StructLayoutAttribute
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3046
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Lets you control the physical layout of the data fields of a class or structure in memory.</p>\n"
  remarks: "\n<p>You can apply this attribute to classes or structures.</p>\n<p>The common language runtime controls the physical layout of the data fields of a class or structure in managed memory. However, if you want to pass the type to unmanaged code, you can use the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to control the unmanaged layout of the type. Use the attribute with <xref href=\"System.Runtime.InteropServices.LayoutKind.Sequential\" data-throw-if-not-resolved=\"false\"></xref> to force the members to be laid out sequentially in the order they appear. For , <xref href=\"System.Runtime.InteropServices.LayoutKind.Sequential\" data-throw-if-not-resolved=\"false\"></xref> controls both the layout in managed memory and the layout in unmanaged memory. For non-blittable types, it controls the layout when the class or structure is marshaled to unmanaged code, but does not control the layout in managed memory. Use the attribute with <xref href=\"System.Runtime.InteropServices.LayoutKind.Explicit\" data-throw-if-not-resolved=\"false\"></xref> to control the precise position of each data member. This affects both managed and unmanaged layout, for both blittable and non-blittable types. Using <xref href=\"System.Runtime.InteropServices.LayoutKind.Explicit\" data-throw-if-not-resolved=\"false\"></xref> requires that you use the <xref href=\"System.Runtime.InteropServices.FieldOffsetAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to indicate the position of each field within the type.</p>\n<p>C#, Visual Basic, and C++ compilers apply the <xref href=\"System.Runtime.InteropServices.LayoutKind.Sequential\" data-throw-if-not-resolved=\"false\"></xref> layout value to structures by default. For classes, you must apply the <xref href=\"System.Runtime.InteropServices.LayoutKind.Sequential\" data-throw-if-not-resolved=\"false\"></xref> value explicitly. The Tlbimp.exe (Type Library Importer) also applies the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute; it always applies the <xref href=\"System.Runtime.InteropServices.LayoutKind.Sequential\" data-throw-if-not-resolved=\"false\"></xref> value when it imports a type library.</p>\n"
  example:
  - "\n<p>The following example demonstrates a managed declaration of the <code>GetSystemTime</code> function and defines <code>MySystemTime</code> class with <xref href=\"System.Runtime.InteropServices.LayoutKind.Explicit\" data-throw-if-not-resolved=\"false\"></xref> layout. <code>GetSystemTime</code> gets the system time and prints to the console.</p>StructLayoutAttribute#1"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)]

      public sealed class StructLayoutAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Struct, Inherited:=False)>

      Public NotInheritable Class StructLayoutAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 12
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  commentId: F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  id: CharSet
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  - vb
  name: CharSet
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CharSet
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3049
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates whether string data fields within the class should be marshaled as <strong>LPWSTR</strong> or <strong>LPSTR</strong> by default.</p>\n"
  remarks: "\n<p>If the <strong>CharSet</strong> field is set to <xref href=\"System.Runtime.InteropServices.CharSet.Unicode\" data-throw-if-not-resolved=\"false\"></xref>, all string arguments are converted to Unicode characters (<strong>LPWSTR</strong>) before they are passed to the unmanaged implementation. If the field is set to <xref href=\"System.Runtime.InteropServices.CharSet.Ansi\" data-throw-if-not-resolved=\"false\"></xref>, the strings are converted to ANSI strings (<strong>LPSTR</strong>). If the <strong>CharSet</strong> field is set to <xref href=\"System.Runtime.InteropServices.CharSet.Auto\" data-throw-if-not-resolved=\"false\"></xref>, the conversion is platform-dependent (ANSI on Windows 98 and Windows Me, and Unicode on later versions).</p>\n"
  syntax:
    content: public CharSet CharSet
    content.vb: Public CharSet As CharSet
    return:
      type: System.Runtime.InteropServices.CharSet
  seealso:
  - type: System.Runtime.InteropServices.CharSet
    commentId: T:System.Runtime.InteropServices.CharSet
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Pack
  commentId: F:System.Runtime.InteropServices.StructLayoutAttribute.Pack
  id: Pack
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  - vb
  name: Pack
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Pack
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pack
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3050
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Controls the alignment of data fields of a class or structure in memory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> field controls the alignment of a type's fields in memory.  It affects both <xref href=\"System.Runtime.InteropServices.LayoutKind.Sequential\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.LayoutKind.Explicit\" data-throw-if-not-resolved=\"false\"></xref>. By default, the value is 0, indicating the default packing size for the current platform. The value of <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> must be 0, 1, 2, 4, 8, 16, 32, 64, or 128:</p>\n<p>The fields of a type instance are aligned by using the following rules:</p>\n<ul><li>\n<p>The alignment of the type is the size of its largest element (1, 2, 4, 8, etc., bytes) or the specified packing size, whichever is smaller. </p>\n</li><li>\n<p>Each field must align with fields of its own size (1, 2, 4, 8, etc., bytes) or the alignment of the type, whichever is smaller.  Because the default alignment of the type is the size of its largest element, which is greater than or equal to all other field lengths, this usually means that fields are aligned by their size. For example, even if the largest field in a type is a 64-bit (8-byte) integer or the Pack field is set to 8, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> fields align on 1-byte boundaries, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> fields align on 2-byte boundaries, and <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> fields align on 4-byte boundaries.  </p>\n</li><li>\n<p>Padding is added between fields to satisfy the alignment requirements. </p>\n</li></ul>\n<p>For example, consider the following structure, which consists of two <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> fields and one <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> field, when it is used with various values for the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> field. </p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#1<p>To successfully compile the C# examples, you must specify the <strong>/unsafe</strong> compiler switch. </p><p>If you specify the default packing size, the size of the structure is 8 bytes. The two bytes occupy the first two bytes of memory, because bytes must align on one-byte boundaries. Because the default alignment of the type is 4 bytes, which is the size of its largest fields, <code>i3</code>, there are two bytes of padding followed by the integer field. </p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#2<p>If <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> is set to 2, the size of the structure is 6 bytes. As before, the two bytes occupy the first two bytes of memory. Because fields now align on 2-byte boundaries, there is no padding between the second byte and the integer.</p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#3<p>If <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> is set to 4, the size of the structure is the same as in the default case, where the type's alignment was defined by the size of its largest field, <code>i3</code>, which is 4. </p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#4<p>If <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> is set to 8, the size of the structure is the still same as in the default case, because the <code>i3</code> field aligns on a 4-byte boundary, which is smaller than the 8-byte boundary specified by the Pack field. </p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#5<p>To take another example, consider the following structure, which consists of two byte fields, one 32-bit signed integer field, one single-element byte array, and a decimal value. With the default packing size, the size of the structure is 28 bytes. The two bytes occupy the first two bytes of memory, followed by two bytes of padding, followed by the integer. Next is the one-byte array, followed by three bytes of padding. Finally, the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> field, d5, aligns on a 4-byte boundary because a decimal value consists of four <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> fields, so its alignment is based on the size of the largest of its fields rather than on the size of the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> structure as a whole.</p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#6<p>If <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> is set to 2, the size of the structure is 24 bytes. In comparison with the default alignment, the two bytes of padding between the two bytes and the integer have been removed because the type's alignment is now 4 rather than 2. And the three bytes of padding after <code>a4</code> have been replaced by one byte of padding, since <code>d5</code> now aligns on a 2-byte boundary rather than a 4-byte boundary. </p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#7<p>If <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> is set to 8, the size of the structure is the same as in the default case, because all the alignment requirements in this structure are less than 8. </p>System.Runtime.InteropServices.StructLayoutAttribute.Pack#8<p>The <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute.Pack\" data-throw-if-not-resolved=\"false\"></xref> field is frequently used when structures are exported during disk and network write operations. The field is also frequently used during platform invoke and interop operations.</p><p>Occasionally, the field is used to reduce memory requirements by producing a tighter packing size. However, this usage requires careful consideration of actual hardware constraints, and may actually degrade performance.</p>"
  syntax:
    content: public int Pack
    content.vb: Public Pack As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Size
  commentId: F:System.Runtime.InteropServices.StructLayoutAttribute.Size
  id: Size
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  - vb
  name: Size
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Size
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Size
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3051
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates the absolute size of the class or structure.</p>\n"
  remarks: "\n<p>This field must be equal or greater than the total size, in bytes, of the members of the class or structure. This field is primarily for compiler writers who want to extend the memory occupied by a structure for direct, unmanaged access. For example, you can use this field when working with unions that are not represented in metadata directly.</p>\n"
  syntax:
    content: public int Size
    content.vb: Public Size As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
  commentId: M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
  id: '#ctor(System.Runtime.InteropServices.LayoutKind)'
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  - vb
  name: StructLayoutAttribute(LayoutKind)
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3052
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initalizes a new instance of the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the specified <xref href=\"System.Runtime.InteropServices.LayoutKind\" data-throw-if-not-resolved=\"false\"></xref> enumeration member.</p>\n"
  remarks: "\n<p>For readable code that is less prone to error, always use this constructor.</p>\n"
  syntax:
    content: public StructLayoutAttribute(LayoutKind layoutKind)
    content.vb: Public Sub New(layoutKind As LayoutKind)
    parameters:
    - id: layoutKind
      type: System.Runtime.InteropServices.LayoutKind
      description: "\n<p>One of the enumeration values that specifes how the class or structure should be arranged. </p>\n"
  seealso:
  - type: System.Runtime.InteropServices.LayoutKind
    commentId: T:System.Runtime.InteropServices.LayoutKind
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Value
  commentId: P:System.Runtime.InteropServices.StructLayoutAttribute.Value
  id: Value
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Value
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3053
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the <xref href=\"System.Runtime.InteropServices.LayoutKind\" data-throw-if-not-resolved=\"false\"></xref> value that specifies how the class or structure is arranged.</p>\n"
  syntax:
    content: public LayoutKind Value { get; }
    content.vb: Public ReadOnly Property Value As LayoutKind
    parameters: []
    return:
      type: System.Runtime.InteropServices.LayoutKind
      description: "\n<p>One of the enumeration values that specifies how the class or structure is arranged.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: false
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Runtime.InteropServices.CharSet
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CharSet
  fullName: System.Runtime.InteropServices.CharSet
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.LayoutKind
  parent: System.Runtime.InteropServices
  isExternal: false
  name: LayoutKind
  fullName: System.Runtime.InteropServices.LayoutKind
