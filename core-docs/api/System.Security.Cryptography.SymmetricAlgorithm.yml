items:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  commentId: T:System.Security.Cryptography.SymmetricAlgorithm
  id: SymmetricAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.SymmetricAlgorithm.#ctor
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  langs:
  - csharp
  - vb
  name: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymmetricAlgorithm
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 127
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the abstract base class from which all implementations of symmetric algorithms must inherit.</p>\n"
  remarks: "\n<p>The classes that derive from the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class use a chaining mode called cipher block chaining (CBC), which requires a key (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref>) and an initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>) to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> classes, you must set the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property to the same values that were used for encryption.  For a symmetric algorithm to be useful, the secret key must be known only to the sender and the receiver.</p>\n<p>\n<xref href=\"System.Security.Cryptography.RijndaelManaged\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.DESCryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.RC2CryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.TripleDESCryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> are implementations of symmetric algorithms.</p>\n<p>Note that when using derived classes, it is not enough, from a security perspective, to simply force a garbage collection after you have finished using the object. You must explicitly call the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Clear\" data-throw-if-not-resolved=\"false\"></xref> method on the object to zero out any sensitive data within the object before it is released. Note that garbage collection does not zero out the contents of collected objects but simply marks the memory as available for reallocation. Thus the data contained within a garbage collected object may still be present in the memory heap in unallocated memory. In the case of cryptographic objects, this data could contain sensitive information such as key data or a block of plain text. </p>\n<p>All cryptographic classes in the .NET Framework that hold sensitive data implement a <strong>Clear</strong> method. When called, the <strong>Clear</strong> method overwrites all sensitive data within the object with zeros and then releases the object so that it can be safely garbage collected. When the object has been zeroed and released, you should then call the <strong>Dispose</strong> method with the <em>disposing</em> parameter set to <strong>True</strong> to dispose of all managed and unmanaged resources associated with the object.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.Cryptography.RijndaelManaged\" data-throw-if-not-resolved=\"false\"></xref> class with the specified <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>) to encrypt a file specified by <code>inName</code>, and outputs the encrypted result to the file specified by <code>outName</code>. The <code>desKey</code> and <code>desIV</code> parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.</p>Classic CryptoStream Example#1"
  syntax:
    content: 'public abstract class SymmetricAlgorithm : IDisposable'
    content.vb: >-
      Public MustInherit Class SymmetricAlgorithm
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 129
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.</p>\n"
  syntax:
    content: protected SymmetricAlgorithm()
    content.vb: Protected Sub New
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The implementation of the class derived from the symmetric algorithm is not valid.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  id: BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockSize
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 130
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the block size, in bits, of the cryptographic operation.</p>\n"
  remarks: "\n<p>The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.</p>\n"
  syntax:
    content: public virtual int BlockSize { get; set; }
    content.vb: Public Overridable Property BlockSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The block size, in bits.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The block size is invalid. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.IV
  id: IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IV
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 131
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>) for the symmetric algorithm.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property is automatically set to a new random value whenever you create a new instance of one of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> classes or when you manually call the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\" data-throw-if-not-resolved=\"false\"></xref> method.  The size of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property must be the same as the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSize\" data-throw-if-not-resolved=\"false\"></xref> property divided by 8. </p>\n<p>The classes that derive from the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class use a chaining mode called cipher block chaining (CBC), which requires a key and an initialization vector to perform cryptographic transformations on data.  To decrypt data that was encrypted using one of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> classes, you must set the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property and <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property to the same values that were used for encryption.    </p>\n<p>For a given secret key <em>k</em>, a simple block cipher that does not use an initialization vector will encrypt the same input block of plain text into the same output block of cipher text. If you have duplicate blocks within your plain text stream, you will have duplicate blocks within your cipher text stream. If unauthorized users know anything about the structure of a block of your plain text, they can use that information to decipher the known cipher text block and possibly recover your key. To combat this problem, information from the previous block is mixed into the process of encrypting the next block. Thus, the output of two identical plain text blocks is different. Because this technique uses the previous block to encrypt the next block, an initialization vector is needed to encrypt the first block of data. </p>\n"
  syntax:
    content: public virtual byte[] IV { get; set; }
    content.vb: Public Overridable Property IV As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>The initialization vector.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>An attempt was made to set the initialization vector to <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An attempt was made to set the initialization vector to an invalid size. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 132
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the secret key for the symmetric algorithm.</p>\n"
  remarks: "\n<p>The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If this property is <strong>null</strong> when it is used, the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\" data-throw-if-not-resolved=\"false\"></xref> method is called to create a new random value.</p>\n"
  syntax:
    content: public virtual byte[] Key { get; set; }
    content.vb: Public Overridable Property Key As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>The secret key to use for the symmetric algorithm.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>An attempt was made to set the key to <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The key size is invalid.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySize
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 133
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.</p>\n"
  remarks: "\n<p>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public virtual int KeySize { get; set; }
    content.vb: Public Overridable Property KeySize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The size, in bits, of the secret key used by the symmetric algorithm.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The key size is not valid. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  id: LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalBlockSizes
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 134
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the block sizes, in bits, that are supported by the symmetric algorithm.</p>\n"
  remarks: "\n<p>The symmetric algorithm supports only block sizes that match an entry in this array.</p>\n"
  example:
  - "\n<p>The following example shows the value of <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\" data-throw-if-not-resolved=\"false\"></xref> for the symmetric algorithms.</p>System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1"
  syntax:
    content: public virtual KeySizes[] LegalBlockSizes { get; }
    content.vb: Public Overridable ReadOnly Property LegalBlockSizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "\n<p>An array that contains the block sizes supported by the algorithm.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizes
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 135
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the key sizes, in bits, that are supported by the symmetric algorithm.</p>\n"
  remarks: "\n<p>The symmetric algorithm supports only key sizes that match an entry in this array.</p>\n"
  example:
  - "\n<p>The following example shows the value of <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> for the symmetric algorithms.</p>System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1"
  syntax:
    content: public virtual KeySizes[] LegalKeySizes { get; }
    content.vb: Public Overridable ReadOnly Property LegalKeySizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "\n<p>An array that contains the key sizes supported by the algorithm.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Mode
  id: Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Mode
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 136
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the mode for operation of the symmetric algorithm.</p>\n"
  remarks: "\n<p>See <xref href=\"System.Security.Cryptography.CipherMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration for a description of specific modes.</p>\n"
  syntax:
    content: public virtual CipherMode Mode { get; set; }
    content.vb: Public Overridable Property Mode As CipherMode
    parameters: []
    return:
      type: System.Security.Cryptography.CipherMode
      description: "\n<p>The mode for operation of the symmetric algorithm. The default is <xref href=\"System.Security.Cryptography.CipherMode.CBC\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cipher mode is not one of the <xref href=\"System.Security.Cryptography.CipherMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Padding
  id: Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Padding
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 137
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the padding mode used in the symmetric algorithm.</p>\n"
  remarks: "\n<p>Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref href=\"System.Security.Cryptography.PaddingMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration for a description of specific modes.</p>\n"
  syntax:
    content: public virtual PaddingMode Padding { get; set; }
    content.vb: Public Overridable Property Padding As PaddingMode
    parameters: []
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "\n<p>The padding mode used in the symmetric algorithm. The default is <xref href=\"System.Security.Cryptography.PaddingMode.PKCS7\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The padding mode is not one of the <xref href=\"System.Security.Cryptography.PaddingMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  id: CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDecryptor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 138
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates a symmetric decryptor object with the current <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  remarks: "\n<p>This method decrypts an encrypted message created using the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\" data-throw-if-not-resolved=\"false\"></xref> overload with the same signature.</p>\n"
  syntax:
    content: public virtual ICryptoTransform CreateDecryptor()
    content.vb: Public Overridable Function CreateDecryptor As ICryptoTransform
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric decryptor object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateDecryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDecryptor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 139
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, creates a symmetric decryptor object with the specified <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  remarks: "\n<p>This method decrypts an encrypted message created using the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\" data-throw-if-not-resolved=\"false\"></xref> overload with the same parameters.</p>\n"
  syntax:
    content: public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)
    content.vb: Public MustOverride Function CreateDecryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "\n<p>The secret key to use for the symmetric algorithm. </p>\n"
    - id: rgbIV
      type: System.Byte[]
      description: "\n<p>The initialization vector to use for the symmetric algorithm. </p>\n"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric decryptor object.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())
  name.vb: CreateDecryptor(Byte(), Byte())
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  id: CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEncryptor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 140
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates a symmetric encryptor object with the current <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  remarks: "\n<p>If the current <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>, the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\" data-throw-if-not-resolved=\"false\"></xref> method is called to create a new random <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref>. If the current <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>, the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\" data-throw-if-not-resolved=\"false\"></xref> method is called to create a new random <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\" data-throw-if-not-resolved=\"false\"></xref> overload with the same signature to decrypt the result of this method.</p>\n"
  example:
  - "\n<p>The following example encrypts a string using the transform object returned from the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Security.Cryptography.SymmetricAlgorithm#1"
  syntax:
    content: public virtual ICryptoTransform CreateEncryptor()
    content.vb: Public Overridable Function CreateEncryptor As ICryptoTransform
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric encryptor object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateEncryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEncryptor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 141
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, creates a symmetric encryptor object with the specified <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\" data-throw-if-not-resolved=\"false\"></xref> overload with the same parameters to decrypt the result of this method.</p>\n"
  syntax:
    content: public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)
    content.vb: Public MustOverride Function CreateEncryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "\n<p>The secret key to use for the symmetric algorithm. </p>\n"
    - id: rgbIV
      type: System.Byte[]
      description: "\n<p>The initialization vector to use for the symmetric algorithm. </p>\n"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>A symmetric encryptor object.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())
  name.vb: CreateEncryptor(Byte(), Byte())
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 142
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 143
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <strong>Finalize</strong> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <strong>Finalize</strong> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateIV
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 144
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, generates a random initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>) to use for the algorithm.</p>\n"
  remarks: "\n<p>In general, there is no reason to use this method, because <code>CreateEncryptor()</code> or <code>CreateEncryptor(null, null)</code> automatically generates both an initialization vector and a key. However, you may want to use the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\" data-throw-if-not-resolved=\"false\"></xref> method to reuse a symmetric algorithm instance with a different initialization vector.</p>\n"
  syntax:
    content: public abstract void GenerateIV()
    content.vb: Public MustOverride Sub GenerateIV
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateKey
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 145
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, generates a random key (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref>) to use for the algorithm. </p>\n"
  remarks: "\n<p>In general, there is no reason to use this method, because <code>CreateEncryptor()</code> or <code>CreateEncryptor(null, null)</code> automatically generates both an initialization vector and a key. However, you may want to use the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\" data-throw-if-not-resolved=\"false\"></xref> method to reuse a symmetric algorithm instance with a different key.</p>\n"
  syntax:
    content: public abstract void GenerateKey()
    content.vb: Public MustOverride Sub GenerateKey
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  id: ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModeValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 146
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the cipher mode used in the symmetric algorithm.</p>\n"
  remarks: "\n<p>See <xref href=\"System.Security.Cryptography.CipherMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration for a description of specific modes.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Mode\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected CipherMode ModeValue
    content.vb: Protected ModeValue As CipherMode
    return:
      type: System.Security.Cryptography.CipherMode
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  id: PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PaddingValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 147
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the padding mode used in the symmetric algorithm.</p>\n"
  remarks: "\n<p>Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See the <xref href=\"System.Security.Cryptography.PaddingMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration for a description of specific modes.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Padding\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected PaddingMode PaddingValue
    content.vb: Protected PaddingValue As PaddingMode
    return:
      type: System.Security.Cryptography.PaddingMode
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 148
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the secret key for the symmetric algorithm.</p>\n"
  remarks: "\n<p>The secret key is used both for encryption and for decryption. For a symmetric algorithm to be successful, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected byte[] KeyValue
    content.vb: Protected KeyValue As Byte()
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.IVValue
  id: IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IVValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 149
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>) for the symmetric algorithm.</p>\n"
  remarks: "\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected byte[] IVValue
    content.vb: Protected IVValue As Byte()
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockSizeValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 150
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the block size, in bits, of the cryptographic operation.</p>\n"
  remarks: "\n<p>The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSize\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected int BlockSizeValue
    content.vb: Protected BlockSizeValue As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySizeValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 151
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the size, in bits, of the secret key used by the symmetric algorithm.</p>\n"
  remarks: "\n<p>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.KeySize\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected int KeySizeValue
    content.vb: Protected KeySizeValue As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  id: LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalBlockSizesValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 152
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies the block sizes, in bits, that are supported by the symmetric algorithm.</p>\n"
  remarks: "\n<p>The symmetric algorithm supports only block sizes that match an entry in this array.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected KeySizes[] LegalBlockSizesValue
    content.vb: Protected LegalBlockSizesValue As KeySizes()
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizesValue
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 153
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies the key sizes, in bits, that are supported by the symmetric algorithm.</p>\n"
  remarks: "\n<p>The symmetric algorithm supports only key sizes that match an entry in this array.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected KeySizes[] LegalKeySizesValue
    content.vb: Protected LegalKeySizesValue As KeySizes()
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.KeySizes[]
  isExternal: false
  name: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  fullname.vb: System.Security.Cryptography.KeySizes()
  name.vb: KeySizes()
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.CipherMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CipherMode
  fullName: System.Security.Cryptography.CipherMode
- uid: System.Security.Cryptography.PaddingMode
  parent: System.Security.Cryptography
  isExternal: false
  name: PaddingMode
  fullName: System.Security.Cryptography.PaddingMode
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
