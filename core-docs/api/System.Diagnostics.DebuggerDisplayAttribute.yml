items:
- uid: System.Diagnostics.DebuggerDisplayAttribute
  commentId: T:System.Diagnostics.DebuggerDisplayAttribute
  id: DebuggerDisplayAttribute
  parent: System.Diagnostics
  children:
  - System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)
  - System.Diagnostics.DebuggerDisplayAttribute.Name
  - System.Diagnostics.DebuggerDisplayAttribute.Target
  - System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName
  - System.Diagnostics.DebuggerDisplayAttribute.Type
  - System.Diagnostics.DebuggerDisplayAttribute.Value
  langs:
  - csharp
  - vb
  name: DebuggerDisplayAttribute
  fullName: System.Diagnostics.DebuggerDisplayAttribute
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DebuggerDisplayAttribute
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 77
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Determines how a class or field is displayed in the debugger variable windows.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor has a single argument: a string to be displayed in the value column for instances of the type. This string can contain braces ({ and }). The text within a pair of braces is evaluated as the name of a field, property, or method. For example, the following C# code causes \"Count = 4\" to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of <code>MyHashtable</code>.</p>\n<pre><code>[DebuggerDisplay(\"Count = {count}\")]\nclass MyHashtable\n{\npublic int count = 4;\n}</code></pre>\n<p>For information about using this attribute in Visual Studio, see Using the DebuggerDisplay Attribute.</p>\n"
  example:
  - "\n<p>View the following example in Visual Studio to see the results of applying the <xref href=\"System.Diagnostics.DebuggerDisplayAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Diagnostics.DebuggerBrowsableAttribute#1"
  syntax:
    content: 'public sealed class DebuggerDisplayAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class DebuggerDisplayAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)
  commentId: M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.DebuggerDisplayAttribute
  langs:
  - csharp
  - vb
  name: DebuggerDisplayAttribute(String)
  fullName: System.Diagnostics.DebuggerDisplayAttribute.DebuggerDisplayAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 80
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.DebuggerDisplayAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>The <em>value</em> parameter can contain braces ({ and }). The text within a pair of braces is evaluated as the name of a field, property, or method. For example, the following C# code causes \"Count = 4\" to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of <code>MyTable</code>.</p>\n<pre><code>[DebuggerDisplay(\"Count = {count}\")]\nclass MyTable\n{\npublic int count = 4;\n}</code></pre>\n"
  example:
  - "\n<p>The following code example causes the value of the <xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref> property from the inherited <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of <code>MyHashtable</code>. You must run the complete example, which is provided in the <xref href=\"System.Diagnostics.DebuggerDisplayAttribute\" data-throw-if-not-resolved=\"false\"></xref> class, to see the results.</p>System.Diagnostics.DebuggerBrowsableAttribute#4"
  syntax:
    content: public DebuggerDisplayAttribute(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to be displayed in the value column for instances of the type; an empty string (\"\") causes the value column to be hidden.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.DebuggerDisplayAttribute.Name
  commentId: P:System.Diagnostics.DebuggerDisplayAttribute.Name
  id: Name
  parent: System.Diagnostics.DebuggerDisplayAttribute
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Diagnostics.DebuggerDisplayAttribute.Name
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 81
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the name to display in the debugger variable windows.</p>\n"
  remarks: "\n<p>The value can contain curly braces ({ and }). Text within a pair of braces is evaluated as the name of a field, property, or method.</p>\n"
  example:
  - "\n<p>The following code example causes the name and value of each key to be displayed in the debugger variable windows. When the attribute is not applied, the index and value type are displayed (for example: \"[0] {KeyValuePairs}\"). When the attribute is applied, the name of the key and its value are displayed (for example, if the first key is \"one\" and its value is 1, the display is: \"one 1\"). This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.DebuggerDisplayAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Diagnostics.DebuggerBrowsableAttribute#3"
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name to display in the debugger variable windows.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.DebuggerDisplayAttribute.Target
  commentId: P:System.Diagnostics.DebuggerDisplayAttribute.Target
  id: Target
  parent: System.Diagnostics.DebuggerDisplayAttribute
  langs:
  - csharp
  - vb
  name: Target
  fullName: System.Diagnostics.DebuggerDisplayAttribute.Target
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Target
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 82
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the type of the attribute's target.</p>\n"
  remarks: "\n<p>Use this property to specify the target type when the attribute is used at the assembly level.</p>\n"
  syntax:
    content: public Type Target { get; set; }
    content.vb: Public Property Target As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The attribute's target type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<xref href=\"System.Diagnostics.DebuggerDisplayAttribute.Target\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName
  commentId: P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName
  id: TargetTypeName
  parent: System.Diagnostics.DebuggerDisplayAttribute
  langs:
  - csharp
  - vb
  name: TargetTypeName
  fullName: System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TargetTypeName
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 83
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the type name of the attribute's target.</p>\n"
  remarks: "\n<p>Use this property to specify the name of the target type when the attribute is used at the assembly level.</p>\n"
  syntax:
    content: public string TargetTypeName { get; set; }
    content.vb: Public Property TargetTypeName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the attribute's target type.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.DebuggerDisplayAttribute.Type
  commentId: P:System.Diagnostics.DebuggerDisplayAttribute.Type
  id: Type
  parent: System.Diagnostics.DebuggerDisplayAttribute
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Diagnostics.DebuggerDisplayAttribute.Type
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Type
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 84
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the string to display in the type column of the debugger variable windows.</p>\n"
  syntax:
    content: public string Type { get; set; }
    content.vb: Public Property Type As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The string to display in the type column of the debugger variable windows.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.DebuggerDisplayAttribute.Value
  commentId: P:System.Diagnostics.DebuggerDisplayAttribute.Value
  id: Value
  parent: System.Diagnostics.DebuggerDisplayAttribute
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Diagnostics.DebuggerDisplayAttribute.Value
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Diagnostics.Debug/ref/System.Diagnostics.Debug.cs
    startLine: 85
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Gets the string to display in the value column of the debugger variable windows.</p>\n"
  remarks: "\n<p>This property contains the string passed in by the <em>value</em> parameter of the constructor.</p>\n"
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The string to display in the value column of the debugger variable.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
