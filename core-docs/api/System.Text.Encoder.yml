items:
- uid: System.Text.Encoder
  commentId: T:System.Text.Encoder
  id: Encoder
  parent: System.Text
  children:
  - System.Text.Encoder.#ctor
  - System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  - System.Text.Encoder.Fallback
  - System.Text.Encoder.FallbackBuffer
  - System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  - System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  - System.Text.Encoder.Reset
  langs:
  - csharp
  - vb
  name: Encoder
  fullName: System.Text.Encoder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Encoder
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 21
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Converts a set of characters into a sequence of bytes.</p>\n"
  remarks: "\n<p>To obtain an instance of an implementation of the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> class, the application should use the <xref href=\"System.Text.Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method of an <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>The <xref href=\"System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many bytes result in encoding a set of Unicode characters, and the <xref href=\"System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method performs the actual encoding. There are several versions of both of these methods available in the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> class. For more information, see <xref href=\"System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object maintains state information between successive calls to <strong>GetBytes</strong> or <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> methods so that it can correctly encode character sequences that span blocks. The <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref href=\"System.Text.Encoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n<p>When the application is done with a stream of data it should make sure that the state information is flushed by setting the <em>flush</em> parameter to <strong>true</strong> in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref href=\"System.Text.Encoder.Reset\" data-throw-if-not-resolved=\"false\"></xref> to clear the internal state of the <strong>Encoder</strong> object.</p>\n"
  example:
  - <p>The following example demonstrates how to convert an array of Unicode characters into blocks of bytes using a specified encoding. For comparison, the array of characters is first encoded using <xref href="System.Text.UTF7Encoding" data-throw-if-not-resolved="false"></xref>. Next, the array of characters is encoded using an <xref href="System.Text.Encoder" data-throw-if-not-resolved="false"></xref>.</p>System.Text.Encoder Example#1
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public abstract class Encoder
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public MustInherit Class Encoder
  seealso:
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Text.Encoder.#ctor
  commentId: M:System.Text.Encoder.#ctor
  id: '#ctor'
  parent: System.Text.Encoder
  langs:
  - csharp
  - vb
  name: Encoder()
  fullName: System.Text.Encoder.Encoder()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 35
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>To obtain an instance of an implementation of this class, the application should use the <xref href=\"System.Text.Encoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method of an <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n"
  example:
  - "\n<p>The following example demonstrates two techniques for initializing a new <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>System.Text.Encoder.ctor Example#1"
  syntax:
    content: protected Encoder()
    content.vb: Protected Sub New
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.Encoder.Fallback
  commentId: P:System.Text.Encoder.Fallback
  id: Fallback
  parent: System.Text.Encoder
  langs:
  - csharp
  - vb
  name: Fallback
  fullName: System.Text.Encoder.Fallback
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Fallback
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 40
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets or sets a <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object for the current <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence. </p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(false)]

      public EncoderFallback Fallback { get; set; }
    content.vb: >-
      <ComVisible(False)>

      Public Property Fallback As EncoderFallback
    parameters: []
    return:
      type: System.Text.EncoderFallback
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value in a set operation is <strong>null </strong>(<strong>Nothing</strong>).</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object contains data that has not been encoded yet. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - type: System.Text.Encoder.FallbackBuffer
    commentId: P:System.Text.Encoder.FallbackBuffer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Text.Encoder.FallbackBuffer
  commentId: P:System.Text.Encoder.FallbackBuffer
  id: FallbackBuffer
  parent: System.Text.Encoder
  langs:
  - csharp
  - vb
  name: FallbackBuffer
  fullName: System.Text.Encoder.FallbackBuffer
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FallbackBuffer
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 66
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets the <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object associated with the current <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Encoder.FallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object represents data used by the <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence. </p>\n"
  example:
  - 
  syntax:
    content: >-
      [ComVisible(false)]

      public EncoderFallbackBuffer FallbackBuffer { get; }
    content.vb: >-
      <ComVisible(False)>

      Public ReadOnly Property FallbackBuffer As EncoderFallbackBuffer
    parameters: []
    return:
      type: System.Text.EncoderFallbackBuffer
  seealso:
  - type: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - type: System.Text.Encoder.Fallback
    commentId: P:System.Text.Encoder.Fallback
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  commentId: M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  id: Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Text.Encoder
  langs:
  - csharp
  - vb
  name: Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)
  fullName: System.Text.Encoder.Convert(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32, System.Int32, System.Boolean, out System.Int32, out System.Int32, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Convert
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 243
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</p>\n"
  remarks: "\n<p>Remember that the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object saves state between calls to <xref href=\"System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>. When the application is done with a stream of data, it should set the <em>flush</em> parameter to <strong>true</strong> to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</p>\n<p>The <strong>Convert</strong> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> will throw an exception if the output buffer isn't large enough, but <xref href=\"System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> will fill as much space as possible and return the chars read and bytes written. Also see the <xref href=\"System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> topic for more comments.</p>\n<p>The <em>completed</em> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to <strong>false</strong> if the number of characters specified by the <em>charCount</em> parameter cannot be converted without exceeding the number of bytes specified by the <em>byteCount</em> parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <em>chars</em> parameter by the number of characters specified by the <em>charsUsed</em> parameter, then call the <strong>Convert</strong> method again to process the remaining input.</p>\n<p>The <em>completed</em> parameter can also be set to <strong>false</strong>, even though the <em>charsUsed</em> and <em>charCount</em> parameters are equal. This situation occurs if there is still data in the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object that has not been stored in the <em>chars</em> buffer.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a file of UTF-16 characters to UTF-8, then uses the <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the UTF-8 characters back to UTF-16 characters.</p>sys.txt.EncoderDecoder.convert#1"
  syntax:
    content: >-
      [ComVisible(false)]

      public virtual void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed)
    content.vb: >-
      <ComVisible(False)>

      Public Overridable Sub Convert(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer, byteCount As Integer, flush As Boolean, ByRef charsUsed As Integer, ByRef bytesUsed As Integer, ByRef completed As Boolean)
    parameters:
    - id: chars
      type: System.Char[]
    - id: charIndex
      type: System.Int32
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    - id: byteCount
      type: System.Int32
    - id: flush
      type: System.Boolean
    - id: charsUsed
      type: System.Int32
    - id: bytesUsed
      type: System.Int32
    - id: completed
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> or <em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em>, <em>charCount</em>, <em>byteIndex</em>, or <em>byteCount</em> is less than zero.</p>\n<p>-or-</p>\n<p>The length of <em>chars</em> - <em>charIndex</em> is less than <em>charCount</em>.</p>\n<p>-or-</p>\n<p>The length of <em>bytes</em> - <em>byteIndex</em> is less than <em>byteCount</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref=\"Overload:System.Text.Encoder.GetByteCount\"></see> method.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoder.Convert(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32, System.Int32, System.Boolean, ByRef System.Int32, ByRef System.Int32, ByRef System.Boolean)
  name.vb: Convert(Char(), Int32, Int32, Byte(), Int32, Int32, Boolean, ByRef Int32, ByRef Int32, ByRef Boolean)
- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  commentId: M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  id: GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  parent: System.Text.Encoder
  langs:
  - csharp
  - vb
  name: GetByteCount(Char[], Int32, Int32, Boolean)
  fullName: System.Text.Encoder.GetByteCount(System.Char[], System.Int32, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 117
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</p>\n"
  remarks: "\n<p>This method does not affect the state of the encoder.</p>\n<p>To calculate the exact array size that <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> requires to store the resulting bytes, the application should use <xref href=\"System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <strong>GetBytes</strong> is called with <em>flush</em> set to <strong>false</strong>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call <strong>GetByteCount</strong> on a block of data immediately before calling <strong>GetBytes</strong> on the same block, so that any trailing characters from the previous block are included in the calculation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of bytes required to encode an array of characters using a Unicode <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.Encoder.GetByteCount Example#1"
  syntax:
    content: public abstract int GetByteCount(char[] chars, int index, int count, bool flush)
    content.vb: Public MustOverride Function GetByteCount(chars As Char(), index As Integer, count As Integer, flush As Boolean) As Integer
    parameters:
    - id: chars
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    - id: flush
      type: System.Boolean
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
    commentId: M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  - type: System.Text.Encoder.Reset
    commentId: M:System.Text.Encoder.Reset
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Encoder.GetByteCount(System.Char(), System.Int32, System.Int32, System.Boolean)
  name.vb: GetByteCount(Char(), Int32, Int32, Boolean)
- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  commentId: M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)
  parent: System.Text.Encoder
  langs:
  - csharp
  - vb
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)
  fullName: System.Text.Encoder.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 165
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</p>\n"
  remarks: "\n<p>Remember that the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object saves state between calls to <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. When the application is done with a stream of data, it should set the <em>flush</em> parameter to <strong>true</strong> in the last call to <strong>GetBytes</strong> to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.</p>\n<p>To calculate the exact buffer size that <strong>GetBytes</strong> requires to store the resulting characters, the application should use <xref href=\"System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If <strong>GetBytes</strong> is called with <em>flush</em> set to <strong>false</strong>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call <strong>GetByteCount</strong> on a block of data immediately before calling <strong>GetBytes</strong> on the same block, so that any trailing characters from the previous block are included in the calculation.</p>\n<p>If your application is to convert many segments of an input stream, consider using the <xref href=\"System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> will throw an exception if the output buffer isn't large enough, but <xref href=\"System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> will fill as much space as possible and return the chars read and bytes written. Also see the <xref href=\"System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> topic for more comments.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to encode a range of elements from a character array and store the encoded bytes in a range of elements in a byte array. The <xref href=\"System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method is used to determine the size of the array required by <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.Encoder.GetBytes Example#1"
  syntax:
    content: public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush)
    content.vb: Public MustOverride Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer, flush As Boolean) As Integer
    parameters:
    - id: chars
      type: System.Char[]
    - id: charIndex
      type: System.Int32
    - id: charCount
      type: System.Int32
    - id: bytes
      type: System.Byte[]
    - id: byteIndex
      type: System.Int32
    - id: flush
      type: System.Boolean
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoder.Fallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
    commentId: M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)
  - type: System.Text.Encoder.Reset
    commentId: M:System.Text.Encoder.Reset
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Encoder.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32, System.Boolean)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32, Boolean)
- uid: System.Text.Encoder.Reset
  commentId: M:System.Text.Encoder.Reset
  id: Reset
  parent: System.Text.Encoder
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Text.Encoder.Reset()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reset
    path: src/mscorlib/src/System/Text/Encoder.cs
    startLine: 100
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, sets the encoder back to its initial state.</p>\n"
  remarks: "\n<p>This method clears the internal state of the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object. The method clears any state information preserved from a previous call to <xref href=\"System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.</p>\n<p>Your application should call the <strong>Reset</strong> method if it wants to reuse the same encoder even after an exception is thrown by <xref href=\"System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, or if the application switches streams.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public virtual void Reset()
    content.vb: >-
      <ComVisible(False)>

      Public Overridable Sub Reset
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Text.EncoderFallback
  parent: System.Text
  isExternal: false
  name: EncoderFallback
  fullName: System.Text.EncoderFallback
- uid: System.Text.EncoderFallbackBuffer
  parent: System.Text
  isExternal: false
  name: EncoderFallbackBuffer
  fullName: System.Text.EncoderFallbackBuffer
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
