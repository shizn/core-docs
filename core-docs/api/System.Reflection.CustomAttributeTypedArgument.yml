items:
- uid: System.Reflection.CustomAttributeTypedArgument
  commentId: T:System.Reflection.CustomAttributeTypedArgument
  id: CustomAttributeTypedArgument
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeTypedArgument.ArgumentType
  - System.Reflection.CustomAttributeTypedArgument.Value
  langs:
  - csharp
  - vb
  name: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
  type: Struct
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAttributeTypedArgument
    path: src/System.Reflection/ref/4.0/System.Reflection.Manual.cs
    startLine: 93
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</p>\n"
  remarks: "\n<p>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <see cref=\"Overload:System.Attribute.GetCustomAttributes\"></see>, <see cref=\"Overload:System.Reflection.MemberInfo.GetCustomAttributes\"></see>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure is used by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class to provide access to the type and value of a positional argument specified for a custom attribute instance, without executing the attribute constructor. It also provides access to the type and value of a named argument without executing the code of the corresponding property of the custom attribute type. </p>\n<p>The types and values of all the positional and named arguments of an attribute instance are provided by <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures. The positional attributes returned by the <xref href=\"System.Reflection.CustomAttributeData.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> property are directly represented by <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures, but the named arguments returned by the <xref href=\"System.Reflection.CustomAttributeData.NamedArguments\" data-throw-if-not-resolved=\"false\"></xref> property are represented by <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures; to get the <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure for a named argument, use the <xref href=\"System.Reflection.CustomAttributeNamedArgument.TypedValue\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If an argument is an array of values, the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> that represents the argument returns a generic <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> objects. Each <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> object in the collection represents the corresponding element of the array. </p>\n<p>To create instances of the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class, use the <strong>static</strong><see cref=\"Overload:System.Reflection.CustomAttributeData.GetCustomAttributes\"></see> factory method.</p>\n"
  example:
  - "\n<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers. </p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes. </p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>CustomAttributeData#1"
  syntax:
    content: public struct CustomAttributeTypedArgument
    content.vb: Public Structure CustomAttributeTypedArgument
  seealso:
  - type: System.Reflection.CustomAttributeData
    commentId: T:System.Reflection.CustomAttributeData
  - type: System.Reflection.CustomAttributeNamedArgument
    commentId: T:System.Reflection.CustomAttributeNamedArgument
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  commentId: P:System.Reflection.CustomAttributeTypedArgument.ArgumentType
  id: ArgumentType
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: ArgumentType
  fullName: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArgumentType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 85
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of the argument or of the array argument element.</p>\n"
  remarks: "\n<p>For simple arguments or for elements of array arguments, this property identifies the actual type of the value returned by the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property. For array arguments, this property returns the array type, but the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property returns a <code>ReadOnlyCollection<CustomAttributeTypedArgument></code> (<code>ReadOnlyCollection(Of CustomAttributeTypedArgument)</code> in Visual Basic) in which each element of the collection represents the corresponding element of the array argument. </p>\n"
  example:
  - "\n<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers. </p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> property is used in the <code>ShowValueOrArray</code> method that displays custom attribute data, to display the types of attributes. </p>CustomAttributeData#1"
  syntax:
    content: public Type ArgumentType { get; }
    content.vb: Public ReadOnly Property ArgumentType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the type of the argument or of the array element.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeTypedArgument.Value
    commentId: P:System.Reflection.CustomAttributeTypedArgument.Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.CustomAttributeTypedArgument.Value
  commentId: P:System.Reflection.CustomAttributeTypedArgument.Value
  id: Value
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Reflection.CustomAttributeTypedArgument.Value
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 86
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> represents an array argument, this property returns a <code>ReadOnlyCollection<CustomAttributeTypedArgument></code> (<code>ReadOnlyCollection(Of CustomAttributeTypedArgument)</code> in Visual Basic). Each element of the collection represents the corresponding element of the array argument.</p>\n<p>The type of the value can be obtained by using the <xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> property. <xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> gets the actual type of the value returned by the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property for simple arguments or for elements of array arguments. It returns the array type for array arguments. </p>\n"
  example:
  - "\n<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers. </p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property is used in the <code>ShowValueOrArray</code> method that displays custom attribute data, to display the values of attributes. </p>CustomAttributeData#1<p><xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> | <see cref=\"Overload:System.Reflection.Assembly.ReflectionOnlyLoad\"></see></p>"
  syntax:
    content: public object Value { get; }
    content.vb: Public ReadOnly Property Value As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that represents the value of the argument or element, or a generic <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the values of an array-type argument.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
