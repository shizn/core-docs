items:
- uid: System.Threading.Timeout
  commentId: T:System.Threading.Timeout
  id: Timeout
  parent: System.Threading
  children:
  - System.Threading.Timeout.Infinite
  - System.Threading.Timeout.InfiniteTimeSpan
  langs:
  - csharp
  - vb
  name: Timeout
  fullName: System.Threading.Timeout
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Timeout
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3196
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Contains constants that specify infinite time-out intervals. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The members of this class are used to specify infinite time-out intervals in threading operations. <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> is used by methods that accept an integer <em>millisecondsTimeout</em> parameter, such as <xref href=\"System.Threading.Thread.Sleep(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Thread.Join(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Threading.Timeout.InfiniteTimeSpan\" data-throw-if-not-resolved=\"false\"></xref> is used by methods that accept a <em>timeout</em> parameter of type <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>, such as <xref href=\"System.Threading.Thread.Sleep(System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Thread.Join(System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following example shows a thread going to sleep for an infinite time and subsequently being woken up.</p>System.Threading.Thread.Interrupt#1"
  syntax:
    content: public class Timeout
    content.vb: Public Class Timeout
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Timeout.Infinite
  commentId: F:System.Threading.Timeout.Infinite
  id: Infinite
  parent: System.Threading.Timeout
  langs:
  - csharp
  - vb
  name: Infinite
  fullName: System.Threading.Timeout.Infinite
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Infinite
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3198
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>A constant used to specify an infinite waiting period, for threading methods that accept an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> parameter. </p>\n"
  remarks: "\n<p>For threading methods that accept a <em>millisecondsTimeout</em> parameter, such as <xref href=\"System.Threading.Thread.Sleep(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Thread.Join(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref href=\"System.Threading\" data-throw-if-not-resolved=\"false\"></xref> classes such as <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Semaphore\" data-throw-if-not-resolved=\"false\"></xref> instead to sychronize threads or manage resources.</p>\n<p>The value of this field is -1 (0xFFFFFFFF). </p>\n"
  syntax:
    content: public const int Infinite = -1
    content.vb: Public Const Infinite As Integer = -1
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Timeout.InfiniteTimeSpan
  commentId: F:System.Threading.Timeout.InfiniteTimeSpan
  id: InfiniteTimeSpan
  parent: System.Threading.Timeout
  langs:
  - csharp
  - vb
  name: InfiniteTimeSpan
  fullName: System.Threading.Timeout.InfiniteTimeSpan
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InfiniteTimeSpan
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3199
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>A constant used to specify an infinite waiting period, for methods that accept a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> parameter.</p>\n"
  remarks: "\n<p>For threading methods that accept a <em>timeout</em> parameter of type <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>, such as <xref href=\"System.Threading.Thread.Sleep(System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Thread.Join(System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>, this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other <xref href=\"System.Threading\" data-throw-if-not-resolved=\"false\"></xref> classes such as <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Semaphore\" data-throw-if-not-resolved=\"false\"></xref> instead to sychronize threads or manage resources.</p>\n<p>The value of this field is -00:00:00.0010000, or -1 millisecond. </p>\n"
  syntax:
    content: public static readonly TimeSpan InfiniteTimeSpan
    content.vb: Public Shared ReadOnly InfiniteTimeSpan As TimeSpan
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
