items:
- uid: System.Xml.Linq.XNamespace
  commentId: T:System.Xml.Linq.XNamespace
  id: XNamespace
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XNamespace.Equals(System.Object)
  - System.Xml.Linq.XNamespace.Get(System.String)
  - System.Xml.Linq.XNamespace.GetHashCode
  - System.Xml.Linq.XNamespace.GetName(System.String)
  - System.Xml.Linq.XNamespace.NamespaceName
  - System.Xml.Linq.XNamespace.None
  - System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)
  - System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  - System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace
  - System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  - System.Xml.Linq.XNamespace.ToString
  - System.Xml.Linq.XNamespace.Xml
  - System.Xml.Linq.XNamespace.Xmlns
  langs:
  - csharp
  - vb
  name: XNamespace
  fullName: System.Xml.Linq.XNamespace
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XNamespace
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 323
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Represents an XML namespace. This class cannot be inherited. </p>\n"
  remarks: "\n<p>This class represents the XML construct of namespaces.</p>\n<p>Every <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> contains an <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>. Even if an element is not in a namespace, the element's <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> still contains a namespace, <xref href=\"System.Xml.Linq.XNamespace.None\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Xml.Linq.XName.Namespace\" data-throw-if-not-resolved=\"false\"></xref> property is guaranteed to not be <strong>null</strong>. </p>\n"
  syntax:
    content: public sealed class XNamespace
    content.vb: Public NotInheritable Class XNamespace
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.Linq.XNamespace.NamespaceName
  commentId: P:System.Xml.Linq.XNamespace.NamespaceName
  id: NamespaceName
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: NamespaceName
  fullName: System.Xml.Linq.XNamespace.NamespaceName
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamespaceName
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 326
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the Uniform Resource Identifier (URI) of this namespace.</p>\n"
  example:
  - "\n<p>The following example shows how to use this property:</p>\n<pre><code class=\"c#\">string markup =\n@\"<aw:Root\nxmlns:aw='http://www.adventure-works.com'/>\";\nXElement root = XElement.Parse(markup);\nConsole.WriteLine(root.Name.Namespace.NamespaceName);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = GetXmlNamespace(aw)\nDim root As XElement = <aw:Root/>\nConsole.WriteLine(root.Name.Namespace.NamespaceName)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output: </p>\n<pre><code>http://www.adventure-works.com</code></pre>\n"
  syntax:
    content: public string NamespaceName { get; }
    content.vb: Public ReadOnly Property NamespaceName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the URI of the namespace.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XNamespace.None
  commentId: P:System.Xml.Linq.XNamespace.None
  id: None
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Xml.Linq.XNamespace.None
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: None
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 327
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> object that corresponds to no namespace.</p>\n"
  remarks: "\n<p>If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</p>\n"
  example:
  - "\n<p>The following example shows uses this property to determine which elements are in no namespace.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\n\nXElement root = new XElement(\"Root\",\nnew XElement(aw + \"ChildInNamespace\", \"content\"),\nnew XElement(\"ChildInNoNamespace\", \"content\")\n);\n\nif (root.Name.Namespace == XNamespace.None)\nConsole.WriteLine(\"Root element is in no namespace\");\nelse\nConsole.WriteLine(\"Root element is in a namespace\");\n\nif (root.Element(aw + \"ChildInNamespace\").Name.Namespace == XNamespace.None)\nConsole.WriteLine(\"ChildInNamespace element is in no namespace\");\nelse\nConsole.WriteLine(\"ChildInNamespace element is in a namespace\");\n\nif (root.Element(\"ChildInNoNamespace\").Name.Namespace == XNamespace.None)\nConsole.WriteLine(\"ChildInNoNamespace element is in no namespace\");\nelse\nConsole.WriteLine(\"ChildInNoNamespace element is in a namespace\");</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim root As XElement = _\n    <Root>\n        <aw:ChildInNamespace>content</aw:ChildInNamespace>\n        <ChildInNoNamespace>content</ChildInNoNamespace>\n    </Root>\n\nIf (root.Name.Namespace Is XNamespace.None) Then\n    Console.WriteLine(\"Root element is in no namespace\")\nElse\n    Console.WriteLine(\"Root element is in a namespace\")\nEnd If\n\nIf (root.Element(GetXmlNamespace(aw) + \"ChildInNamespace\") _\n        .Name.Namespace Is XNamespace.None) Then\n    Console.WriteLine(\"ChildInNamespace element is in no namespace\")\nElse\n    Console.WriteLine(\"ChildInNamespace element is in a namespace\")\nEnd If\n\nIf (root.Element(\"ChildInNoNamespace\") _\n        .Name.Namespace Is XNamespace.None) Then\n    Console.WriteLine(\"ChildInNoNamespace element is in no namespace\")\nElse\n    Console.WriteLine(\"ChildInNoNamespace element is in a namespace\")\nEnd If\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Root element is in no namespace\nChildInNamespace element is in a namespace\nChildInNoNamespace element is in no namespace</code></pre>\n"
  syntax:
    content: public static XNamespace None { get; }
    content.vb: Public Shared ReadOnly Property None As XNamespace
    parameters: []
    return:
      type: System.Xml.Linq.XNamespace
      description: "\n<p>The <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> that corresponds to no namespace.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Xml.Linq.XNamespace.Xml
  commentId: P:System.Xml.Linq.XNamespace.Xml
  id: Xml
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Xml
  fullName: System.Xml.Linq.XNamespace.Xml
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Xml
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 328
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> object that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).</p>\n"
  remarks: "\n<p>Certain standardized attributes, such as <code>space</code>, are in the <code>http://www.w3.org/XML/1998/namespace</code> namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.</p>\n"
  example:
  - "\n<p>The following example shows how to create an <code>xml:space=\"preserve\"</code> attribute in an XML tree:</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(XNamespace.Xml + \"space\", \"preserve\"),\nnew XElement(\"Child\", \"content\")\n);\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = _\n<Root xml:space=\"preserve\">\n<Child>content</Child>\n</Root>\nConsole.WriteLine(root)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Root xml:space=\"preserve\">\n<Child>content</Child>\n</Root></code></pre>\n"
  syntax:
    content: public static XNamespace Xml { get; }
    content.vb: Public Shared ReadOnly Property Xml As XNamespace
    parameters: []
    return:
      type: System.Xml.Linq.XNamespace
      description: "\n<p>The <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Xml.Linq.XNamespace.Xmlns
  commentId: P:System.Xml.Linq.XNamespace.Xmlns
  id: Xmlns
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Xmlns
  fullName: System.Xml.Linq.XNamespace.Xmlns
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Xmlns
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 329
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> object that corresponds to the xmlns URI (<code>http://www.w3.org/2000/xmlns/</code>).</p>\n"
  remarks: "\n<p>When you declare namespaces, the namespace attributes themselves are in the <strong>xmlns</strong> namespace. The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree. It is a reserved namespace that is always automatically available in the XML parser.</p>\n"
  example:
  - "\n<p>The following example shows how to add a namespace to an XML tree. The namespace for the attribute that declares the namespace is the namespace returned by this property.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXElement root = new XElement(aw + \"Root\",\nnew XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),\nnew XElement(aw + \"Child\", \"content\")\n);\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim root = <aw:Root xmlns:aw=\"http://www.adventure-works.com\">\n       <aw:Child>content</aw:Child>\n   </aw:Root>\nConsole.WriteLine(root)</code></pre>\n<p>In Visual Basic, the preferred idiom is:</p>\n<p>[vb]</p>\n<pre><code>Imports <xmlns:aw='http://www.adventure-works.com'>\n\nModule Module1\nSub Main()\nDim root As XElement = _\n    <aw:Root>\n        <aw:Child>content</aw:Child>\n    </aw:Root>\nConsole.WriteLine(root)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><aw:Root xmlns:aw=\"http://www.adventure-works.com\">\n<aw:Child>content</aw:Child>\n</aw:Root></code></pre>\n"
  syntax:
    content: public static XNamespace Xmlns { get; }
    content.vb: Public Shared ReadOnly Property Xmlns As XNamespace
    parameters: []
    return:
      type: System.Xml.Linq.XNamespace
      description: "\n<p>The <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> that corresponds to the <strong>xmlns</strong> URI (<code>http://www.w3.org/2000/xmlns/</code>).</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Xml.Linq.XNamespace.Equals(System.Object)
  commentId: M:System.Xml.Linq.XNamespace.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Xml.Linq.XNamespace.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 330
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Determines whether the specified <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>For two <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> objects to be equal, they must have the same URI.</p>\n"
  example:
  - "\n<p>The following example compares two namespaces that refer to the same URI.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nConsole.WriteLine(aw == \"http://www.adventure-works.com\");</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nConsole.WriteLine(GetXmlNamespace(aw) = \"http://www.adventure-works.com\")\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>True</code></pre>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates whether the specified <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.Linq.XNamespace.Get(System.String)
  commentId: M:System.Xml.Linq.XNamespace.Get(System.String)
  id: Get(System.String)
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Get(String)
  fullName: System.Xml.Linq.XNamespace.Get(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 331
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets an <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> for the specified Uniform Resource Identifier (URI).</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</p>\n"
  example:
  - "\n<p>The following example gets a <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> from a specified URI.</p>\n<pre><code class=\"c#\">XNamespace aw = XNamespace.Get(\"http://www.adventure-works.com\");\n\n// This is the preferred form.\nXNamespace aw2 = \"http://www.adventure-works.com\";\nConsole.WriteLine(aw);\nConsole.WriteLine(aw2);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = XNamespace.Get(\"http://www.adventure-works.com\")\n\n' This is the preferred form.\nDim aw2 As XNamespace = GetXmlNamespace(aw)\nConsole.WriteLine(aw)\nConsole.WriteLine(aw2)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>http://www.adventure-works.com\nhttp://www.adventure-works.com</code></pre>\n"
  syntax:
    content: public static XNamespace Get(string namespaceName)
    content.vb: Public Shared Function Get(namespaceName As String) As XNamespace
    parameters:
    - id: namespaceName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains a namespace URI.</p>\n"
    return:
      type: System.Xml.Linq.XNamespace
      description: "\n<p>An <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> created from the specified URI.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XNamespace.GetHashCode
  commentId: M:System.Xml.Linq.XNamespace.GetHashCode
  id: GetHashCode
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Xml.Linq.XNamespace.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 332
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets a hash code for this <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method serves as a hash function for <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>. You can use <xref href=\"System.Xml.Linq.XNamespace.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> in hashing algorithms and data structures like a hash table.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.Linq.XNamespace.GetName(System.String)
  commentId: M:System.Xml.Linq.XNamespace.GetName(System.String)
  id: GetName(System.String)
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: GetName(String)
  fullName: System.Xml.Linq.XNamespace.GetName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetName
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 333
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns an <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object created from this <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> and the specified local name.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</p>\n"
  example:
  - "\n<p>The following example uses this property to retrieve an <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXName name = aw.GetName(\"Root\");\nConsole.WriteLine(\"{0}\", name);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns:aw=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = GetXmlNamespace(aw)\nDim name As XName = aw.GetName(\"Root\")\nConsole.WriteLine(\"{0}\", name)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>{http://www.adventure-works.com}Root</code></pre>\n"
  syntax:
    content: public XName GetName(string localName)
    content.vb: Public Function GetName(localName As String) As XName
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains a local name.</p>\n"
    return:
      type: System.Xml.Linq.XName
      description: "\n<p>An <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> created from this <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> and the specified local name.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)
  commentId: M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)
  id: op_Addition(System.Xml.Linq.XNamespace,System.String)
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Addition(XNamespace, String)
  fullName: System.Xml.Linq.XNamespace.Addition(System.Xml.Linq.XNamespace, System.String)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Addition
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 334
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Combines an <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> object with a local name to create an <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute. This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short. This eliminates syntactic noise in the code that creates XML trees.</p>\n"
  example:
  - "\n<p>The following example shows the use of the <strong>+</strong> operator to create an <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> and a local name.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXElement root = new XElement(aw + \"Root\",\nnew XElement(aw + \"Child\")\n);\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim aw As XNamespace = \"http://www.adventure-works.com\"\nDim root As XElement = New XElement(aw + \"Root\", _\nNew XElement(aw + \"Child\") _\n)\nConsole.WriteLine(root)</code></pre>\n<p>In Visual Basic, this is the preferred idiom:</p>\n<pre><code class=\"vb\">Imports <xmlns=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = GetXmlNamespace()\nDim root As XElement = _\n    <Root>\n        <Child/>\n    </Root>\nConsole.WriteLine(root)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Root xmlns=\"http://www.adventure-works.com\">\n<Child />\n</Root></code></pre>\n"
  syntax:
    content: public static XName operator +(XNamespace ns, string localName)
    content.vb: Public Shared Operator +(ns As XNamespace, localName As String) As XName
    parameters:
    - id: ns
      type: System.Xml.Linq.XNamespace
      description: "\n<p>An <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> that contains the namespace.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the local name.</p>\n"
    return:
      type: System.Xml.Linq.XName
      description: "\n<p>The new <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> constructed from the namespace and local name.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  commentId: M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  id: op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Equality(XNamespace, XNamespace)
  fullName: System.Xml.Linq.XNamespace.Equality(System.Xml.Linq.XNamespace, System.Xml.Linq.XNamespace)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 335
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> are equal.</p>\n"
  remarks: "\n<p>The operator overloads <code>==</code> and <code>!=</code> are provided to enable comparisons between <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> and string (for example, <code>element.Name.Namespace == \"http://www.adventure-works.com\"</code>). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows the comparison of an <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> and a string.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nConsole.WriteLine(aw == \"http://www.adventure-works.com\");</code></pre>\n<pre><code class=\"vb\">Imports <xmlns=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = GetXmlNamespace()\nConsole.WriteLine(aw = \"http://www.adventure-works.com\")\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>True</code></pre>\n"
  syntax:
    content: public static bool operator ==(XNamespace left, XNamespace right)
    content.vb: Public Shared Operator =(left As XNamespace, right As XNamespace) As Boolean
    parameters:
    - id: left
      type: System.Xml.Linq.XNamespace
      description: "\n<p>The first <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    - id: right
      type: System.Xml.Linq.XNamespace
      description: "\n<p>The second <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates whether <em>left</em> and <em>right</em> are equal.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace
  commentId: M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace
  id: op_Implicit(System.String)~System.Xml.Linq.XNamespace
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Implicit(String to XNamespace)
  fullName: System.Xml.Linq.XNamespace.Implicit(System.String to System.Xml.Linq.XNamespace)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 336
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Converts a string containing a Uniform Resource Identifier (URI) to an <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows the initialization of an <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> variable by assigning a string to it.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nConsole.WriteLine(aw);</code></pre>\n<pre><code class=\"vb\">Imports <xmlns=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = GetXmlNamespace()\nConsole.WriteLine(aw)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>http://www.adventure-works.com</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator XNamespace(string namespaceName)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(namespaceName As String) As XNamespace
    parameters:
    - id: namespaceName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the namespace URI.</p>\n"
    return:
      type: System.Xml.Linq.XNamespace
      description: "\n<p>An <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> constructed from the URI string.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XNamespace.Widening(System.String to System.Xml.Linq.XNamespace)
  name.vb: Widening(String to XNamespace)
- uid: System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  commentId: M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  id: op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: Inequality(XNamespace, XNamespace)
  fullName: System.Xml.Linq.XNamespace.Inequality(System.Xml.Linq.XNamespace, System.Xml.Linq.XNamespace)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 338
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> are not equal.</p>\n"
  remarks: "\n<p>The operator overloads <code>==</code> and <code>!=</code> are provided to enable comparisons between <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> and string (for example, <code>element.Name.Namespace == \"http://www.adventure-works.com\"</code>). The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows a comparison of a <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> to a string.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nConsole.WriteLine(aw != \"http://www.adventure-works.com\");</code></pre>\n<pre><code class=\"vb\">Imports <xmlns=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = GetXmlNamespace()\nConsole.WriteLine(aw <> \"http://www.adventure-works.com\")\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>False</code></pre>\n"
  syntax:
    content: public static bool operator !=(XNamespace left, XNamespace right)
    content.vb: Public Shared Operator <>(left As XNamespace, right As XNamespace) As Boolean
    parameters:
    - id: left
      type: System.Xml.Linq.XNamespace
      description: "\n<p>The first <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    - id: right
      type: System.Xml.Linq.XNamespace
      description: "\n<p>The second <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates whether <em>left</em> and <em>right</em> are not equal.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XNamespace.ToString
  commentId: M:System.Xml.Linq.XNamespace.ToString
  id: ToString
  parent: System.Xml.Linq.XNamespace
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Xml.Linq.XNamespace.ToString()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 339
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns the URI of this <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses this method to print a namespace on the console.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nConsole.WriteLine(\"{0}\", aw.ToString());</code></pre>\n<pre><code class=\"vb\">Imports <xmlns=\"http://www.adventure-works.com\">\n\nModule Module1\nSub Main()\nDim aw As XNamespace = GetXmlNamespace()\nConsole.WriteLine(\"{0}\", aw)\nEnd Sub\nEnd Module</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>http://www.adventure-works.com</code></pre>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The URI of this <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Xml.Linq.XNamespace
  parent: System.Xml.Linq
  isExternal: false
  name: XNamespace
  fullName: System.Xml.Linq.XNamespace
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  fullName: System.Xml.Linq.XName
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
