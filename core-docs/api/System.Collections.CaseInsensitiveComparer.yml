items:
- uid: System.Collections.CaseInsensitiveComparer
  commentId: T:System.Collections.CaseInsensitiveComparer
  id: CaseInsensitiveComparer
  parent: System.Collections
  children:
  - System.Collections.CaseInsensitiveComparer.#ctor
  - System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)
  - System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)
  - System.Collections.CaseInsensitiveComparer.Default
  - System.Collections.CaseInsensitiveComparer.DefaultInvariant
  langs:
  - csharp
  - vb
  name: CaseInsensitiveComparer
  fullName: System.Collections.CaseInsensitiveComparer
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CaseInsensitiveComparer
    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
    startLine: 18
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Compares two objects for equivalence, ignoring the case of strings.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface supporting case-insensitive comparisons on strings, just as <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> interface supporting case-insensitive comparisons on strings.</p>\n<p>The <xref href=\"System.Collections.Comparer\" data-throw-if-not-resolved=\"false\"></xref> class is the default implementation of the <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface and performs case-sensitive string comparisons.</p>\n<p>The objects used as keys by a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method (or the <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> interface) and the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method (or the <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface). The implementation of both methods or interfaces must handle case sensitivity the same way; otherwise, the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> might behave incorrectly. For example, when creating a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, you must use this class with the <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> class or any case-insensitive <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>String comparisons might have different results depending on the culture. For more information on culture-specific comparisons, see the <xref href=\"System.Globalization\" data-throw-if-not-resolved=\"false\"></xref> namespace and Globalizing and Localizing .NET Framework Applications.</p>\n"
  example:
  - "\n<p>The following code example creates a case-sensitive hash table and a case-insensitive hash table and demonstrates the difference in their behavior, even if both contain the same elements.</p>System.Collections.CaseInsensitive#1"
  syntax:
    content: 'public class CaseInsensitiveComparer : IComparer'
    content.vb: >-
      Public Class CaseInsensitiveComparer
          Implements IComparer
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.Comparer
    commentId: T:System.Collections.Comparer
  - type: System.Globalization.CompareInfo
    commentId: T:System.Globalization.CompareInfo
  - type: System.Threading.Thread.CurrentCulture
    commentId: P:System.Threading.Thread.CurrentCulture
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.Collections.CaseInsensitiveHashCodeProvider
    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider
  inheritance:
  - System.Object
  implements:
  - System.Collections.IComparer
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.CaseInsensitiveComparer.#ctor
  commentId: M:System.Collections.CaseInsensitiveComparer.#ctor
  id: '#ctor'
  parent: System.Collections.CaseInsensitiveComparer
  langs:
  - csharp
  - vb
  name: CaseInsensitiveComparer()
  fullName: System.Collections.CaseInsensitiveComparer.CaseInsensitiveComparer()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
    startLine: 23
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> class using the <xref href=\"System.Threading.Thread.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> of the current thread.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> instance is created using this constructor, the <xref href=\"System.Threading.Thread.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> of the current thread is saved. Comparison procedures use the saved culture to determine the sort order and casing rules; therefore, string comparisons might have different results depending on the culture. For more information on culture-specific comparisons, see the <xref href=\"System.Globalization\" data-throw-if-not-resolved=\"false\"></xref> namespace and Globalizing and Localizing .NET Framework Applications.</p>\n"
  example:
  - "\n<p>The following code example creates a case-sensitive hash table and a case-insensitive hash table and demonstrates the difference in their behavior, even if both contain the same elements.</p>System.Collections.CaseInsensitive#1"
  syntax:
    content: public CaseInsensitiveComparer()
    content.vb: Public Sub New
  seealso:
  - type: System.Threading.Thread.CurrentCulture
    commentId: P:System.Threading.Thread.CurrentCulture
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.Globalization.CompareInfo
    commentId: T:System.Globalization.CompareInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)
  commentId: M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)
  id: '#ctor(System.Globalization.CultureInfo)'
  parent: System.Collections.CaseInsensitiveComparer
  langs:
  - csharp
  - vb
  name: CaseInsensitiveComparer(CultureInfo)
  fullName: System.Collections.CaseInsensitiveComparer.CaseInsensitiveComparer(System.Globalization.CultureInfo)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
    startLine: 28
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> class using the specified <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Comparison procedures use the specified <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> to determine the sort order and casing rules. String comparisons might have different results depending on the culture. For more information on culture-specific comparisons, see the <xref href=\"System.Globalization\" data-throw-if-not-resolved=\"false\"></xref> namespace and Globalizing and Localizing .NET Framework Applications.</p>\n"
  example:
  - "\n<p>The following code example creates a case-sensitive hash table and a case-insensitive hash table and demonstrates the difference in their behavior, even if both contain the same elements.</p>System.Collections.CaseInsensitive#1"
  syntax:
    content: public CaseInsensitiveComparer(CultureInfo culture)
    content.vb: Public Sub New(culture As CultureInfo)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>culture</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.Globalization.CompareInfo
    commentId: T:System.Globalization.CompareInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.CaseInsensitiveComparer.Default
  commentId: P:System.Collections.CaseInsensitiveComparer.Default
  id: Default
  parent: System.Collections.CaseInsensitiveComparer
  langs:
  - csharp
  - vb
  name: Default
  fullName: System.Collections.CaseInsensitiveComparer.Default
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
    startLine: 38
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an instance of <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> that is associated with the <xref href=\"System.Threading.Thread.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> of the current thread and that is always available.</p>\n"
  remarks: "\n<p>When the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> instance is created using the parameterless constructor, the <xref href=\"System.Threading.Thread.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref> of the current thread is saved. Comparison procedures use the saved culture to determine the sort order and casing rules; therefore, string comparisons might have different results depending on the culture. For more information on culture-specific comparisons, see the <xref href=\"System.Globalization\" data-throw-if-not-resolved=\"false\"></xref> namespace and Globalizing and Localizing .NET Framework Applications.</p>\n"
  syntax:
    content: public static CaseInsensitiveComparer Default { get; }
    content.vb: Public Shared ReadOnly Property Default As CaseInsensitiveComparer
    parameters: []
    return:
      type: System.Collections.CaseInsensitiveComparer
  seealso:
  - type: System.Threading.Thread.CurrentCulture
    commentId: P:System.Threading.Thread.CurrentCulture
  - type: System.Globalization.CompareInfo
    commentId: T:System.Globalization.CompareInfo
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Collections.CaseInsensitiveComparer.DefaultInvariant
  commentId: P:System.Collections.CaseInsensitiveComparer.DefaultInvariant
  id: DefaultInvariant
  parent: System.Collections.CaseInsensitiveComparer
  langs:
  - csharp
  - vb
  name: DefaultInvariant
  fullName: System.Collections.CaseInsensitiveComparer.DefaultInvariant
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultInvariant
    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
    startLine: 48
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an instance of <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> that is associated with <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> and that is always available.</p>\n"
  remarks: "\n<p>Comparison procedures use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> to determine the sort order and casing rules. String comparisons might have different results depending on the culture. For more information on culture-specific comparisons, see the <xref href=\"System.Globalization\" data-throw-if-not-resolved=\"false\"></xref> namespace and Globalizing and Localizing .NET Framework Applications.</p>\n"
  example:
  - "\n<p>The following code example creates a case-sensitive hash table and a case-insensitive hash table and demonstrates the difference in their behavior, even if both contain the same elements.</p>System.Collections.CaseInsensitive#1"
  syntax:
    content: public static CaseInsensitiveComparer DefaultInvariant { get; }
    content.vb: Public Shared ReadOnly Property DefaultInvariant As CaseInsensitiveComparer
    parameters: []
    return:
      type: System.Collections.CaseInsensitiveComparer
  seealso:
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  - type: System.Globalization.CompareInfo
    commentId: T:System.Globalization.CompareInfo
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)
  commentId: M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)
  id: Compare(System.Object,System.Object)
  parent: System.Collections.CaseInsensitiveComparer
  langs:
  - csharp
  - vb
  name: Compare(Object, Object)
  fullName: System.Collections.CaseInsensitiveComparer.Compare(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Collections.NonGeneric/src/System/Collections/CaseInsensitiveComparer.cs
    startLine: 69
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\n"
  remarks: "\n<p>If <em>a</em> and <em>b</em> are both strings, this method uses <xref href=\"System.Globalization.CompareInfo.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> to compare the strings with the casing ignored; otherwise, it uses the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of either object. That is, if <em>a</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>, then this method returns the result of <em>a</em>. <strong>CompareTo</strong> (<em>b</em>); otherwise, if <em>b</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>, then it returns the negated result of <em>b</em>. <strong>CompareTo</strong> (<em>a</em>).</p>\n<p>Comparing <strong>null</strong> with any type is allowed and does not generate an exception when using <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>. When sorting, <strong>null</strong> is considered to be less than any other object.</p>\n<p>String comparisons might have different results depending on the culture. For more information on culture-specific comparisons, see the <xref href=\"System.Globalization\" data-throw-if-not-resolved=\"false\"></xref> namespace and Globalizing and Localizing .NET Framework Applications.</p>\n"
  syntax:
    content: public int Compare(object a, object b)
    content.vb: Public Function Compare(a As Object, b As Object) As Integer
    parameters:
    - id: a
      type: System.Object
    - id: b
      type: System.Object
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Neither <em>a</em> nor <em>b</em> implements the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>-or- </p>\n<p>\n<em>a</em> and <em>b</em> are of different types. </p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Globalization.CompareInfo
    commentId: T:System.Globalization.CompareInfo
  - type: System.Threading.Thread.CurrentCulture
    commentId: P:System.Threading.Thread.CurrentCulture
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  implements:
  - System.Collections.IComparer.Compare(System.Object,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  fullName: System.Collections.IComparer
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Collections.CaseInsensitiveComparer
  parent: System.Collections
  isExternal: false
  name: CaseInsensitiveComparer
  fullName: System.Collections.CaseInsensitiveComparer
- uid: System.Collections.IComparer.Compare(System.Object,System.Object)
  parent: System.Collections.IComparer
  isExternal: true
  name: Compare(Object, Object)
  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)
    name: Compare
    fullName: System.Collections.IComparer.Compare
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)
    name: Compare
    fullName: System.Collections.IComparer.Compare
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
