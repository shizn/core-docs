items:
- uid: System.Xml.NameTable
  commentId: T:System.Xml.NameTable
  id: NameTable
  parent: System.Xml
  children:
  - System.Xml.NameTable.#ctor
  - System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)
  - System.Xml.NameTable.Add(System.String)
  - System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)
  - System.Xml.NameTable.Get(System.String)
  langs:
  - csharp
  - vb
  name: NameTable
  fullName: System.Xml.NameTable
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameTable
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 39
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Implements a single-threaded <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Several classes, such as <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>, use the <strong>NameTable</strong> class internally to store attribute and element names. When an element or attribute name occurs multiple times in an XML document, it is stored only once in the <strong>NameTable</strong>.</p>\n<p>The names are stored as common language runtime (CLR) object types. This enables you to do object comparisons on these strings rather than a more expensive string comparison. These string objects are referred to as atomized strings.</p>\n"
  example:
  - "\n<p>The following example compares two element names.</p>NameTable#1"
  syntax:
    content: 'public class NameTable : XmlNameTable'
    content.vb: >-
      Public Class NameTable
          Inherits XmlNameTable
  inheritance:
  - System.Object
  - System.Xml.XmlNameTable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.NameTable.#ctor
  commentId: M:System.Xml.NameTable.#ctor
  id: '#ctor'
  parent: System.Xml.NameTable
  langs:
  - csharp
  - vb
  name: NameTable()
  fullName: System.Xml.NameTable.NameTable()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 41
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <strong>NameTable</strong> class.</p>\n"
  remarks: "\n<p>Constructs an empty NameTable.</p>\n"
  syntax:
    content: public NameTable()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)
  id: Add(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.NameTable
  langs:
  - csharp
  - vb
  name: Add(Char[], Int32, Int32)
  fullName: System.Xml.NameTable.Add(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 42
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Atomizes the specified string and adds it to the <strong>NameTable</strong>.</p>\n"
  remarks: "\n<p>For more information on atomized strings, see <xref href=\"System.Xml.NameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string Add(char[] key, int start, int len)
    content.vb: Public Overrides Function Add(key As Char(), start As Integer, len As Integer) As String
    parameters:
    - id: key
      type: System.Char[]
      description: "\n<p>The character array containing the string to add. </p>\n"
    - id: start
      type: System.Int32
      description: "\n<p>The zero-based index into the array specifying the first character of the string. </p>\n"
    - id: len
      type: System.Int32
      description: "\n<p>The number of characters in the string. </p>\n"
    return:
      type: System.String
      description: "\n<p>The atomized string or the existing string if one already exists in the <strong>NameTable</strong>. If <em>len</em> is zero, String.Empty is returned.</p>\n"
  overridden: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>0 > <em>start</em></p>\n<p>-or- </p>\n<p>\n<em>start</em> >= <em>key</em>.Length </p>\n<p>-or- </p>\n<p>\n<em>len</em> >= <em>key</em>.Length </p>\n<p>The above conditions do not cause an exception to be thrown if <em>len</em> =0. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>len</em> < 0. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Xml.NameTable.Add(System.Char(), System.Int32, System.Int32)
  name.vb: Add(Char(), Int32, Int32)
- uid: System.Xml.NameTable.Add(System.String)
  commentId: M:System.Xml.NameTable.Add(System.String)
  id: Add(System.String)
  parent: System.Xml.NameTable
  langs:
  - csharp
  - vb
  name: Add(String)
  fullName: System.Xml.NameTable.Add(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 43
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Atomizes the specified string and adds it to the <strong>NameTable</strong>.</p>\n"
  remarks: "\n<p>For more information on atomized strings, see <xref href=\"System.Xml.NameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string Add(string key)
    content.vb: Public Overrides Function Add(key As String) As String
    parameters:
    - id: key
      type: System.String
      description: "\n<p>The string to add. </p>\n"
    return:
      type: System.String
      description: "\n<p>The atomized string or the existing string if it already exists in the <strong>NameTable</strong>.</p>\n"
  overridden: System.Xml.XmlNameTable.Add(System.String)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)
  id: Get(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.NameTable
  langs:
  - csharp
  - vb
  name: Get(Char[], Int32, Int32)
  fullName: System.Xml.NameTable.Get(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 44
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the atomized string containing the same characters as the specified range of characters in the given array.</p>\n"
  remarks: "\n<p>For more information on atomized strings, see <xref href=\"System.Xml.NameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string Get(char[] key, int start, int len)
    content.vb: Public Overrides Function Get(key As Char(), start As Integer, len As Integer) As String
    parameters:
    - id: key
      type: System.Char[]
      description: "\n<p>The character array containing the name to find. </p>\n"
    - id: start
      type: System.Int32
      description: "\n<p>The zero-based index into the array specifying the first character of the name. </p>\n"
    - id: len
      type: System.Int32
      description: "\n<p>The number of characters in the name. </p>\n"
    return:
      type: System.String
      description: "\n<p>The atomized string or <strong>null</strong> if the string has not already been atomized. If <em>len</em> is zero, String.Empty is returned.</p>\n"
  overridden: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>0 > <em>start</em></p>\n<p>-or- </p>\n<p>\n<em>start</em> >= <em>key</em>.Length </p>\n<p>-or- </p>\n<p>\n<em>len</em> >= <em>key</em>.Length </p>\n<p>The above conditions do not cause an exception to be thrown if <em>len</em> =0. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>len</em> < 0. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Xml.NameTable.Get(System.Char(), System.Int32, System.Int32)
  name.vb: Get(Char(), Int32, Int32)
- uid: System.Xml.NameTable.Get(System.String)
  commentId: M:System.Xml.NameTable.Get(System.String)
  id: Get(System.String)
  parent: System.Xml.NameTable
  langs:
  - csharp
  - vb
  name: Get(String)
  fullName: System.Xml.NameTable.Get(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 45
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the atomized string with the specified value.</p>\n"
  remarks: "\n<p>For more information on atomized strings, see <xref href=\"System.Xml.NameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string Get(string value)
    content.vb: Public Overrides Function Get(value As String) As String
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The name to find. </p>\n"
    return:
      type: System.String
      description: "\n<p>The atomized string object or <strong>null</strong> if the string has not already been atomized.</p>\n"
  overridden: System.Xml.XmlNameTable.Get(System.String)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: false
  name: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlNameTable
  isExternal: true
  name: Add(Char[], Int32, Int32)
  fullName: System.Xml.XmlNameTable.Add(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.Xml.XmlNameTable.Add(System.Char(), System.Int32, System.Int32)
  name.vb: Add(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)
    name: Add
    fullName: System.Xml.XmlNameTable.Add
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)
    name: Add
    fullName: System.Xml.XmlNameTable.Add
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Xml.XmlNameTable.Add(System.String)
  parent: System.Xml.XmlNameTable
  isExternal: true
  name: Add(String)
  fullName: System.Xml.XmlNameTable.Add(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNameTable.Add(System.String)
    name: Add
    fullName: System.Xml.XmlNameTable.Add
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNameTable.Add(System.String)
    name: Add
    fullName: System.Xml.XmlNameTable.Add
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlNameTable
  isExternal: true
  name: Get(Char[], Int32, Int32)
  fullName: System.Xml.XmlNameTable.Get(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.Xml.XmlNameTable.Get(System.Char(), System.Int32, System.Int32)
  name.vb: Get(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)
    name: Get
    fullName: System.Xml.XmlNameTable.Get
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)
    name: Get
    fullName: System.Xml.XmlNameTable.Get
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNameTable.Get(System.String)
  parent: System.Xml.XmlNameTable
  isExternal: true
  name: Get(String)
  fullName: System.Xml.XmlNameTable.Get(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNameTable.Get(System.String)
    name: Get
    fullName: System.Xml.XmlNameTable.Get
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNameTable.Get(System.String)
    name: Get
    fullName: System.Xml.XmlNameTable.Get
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
