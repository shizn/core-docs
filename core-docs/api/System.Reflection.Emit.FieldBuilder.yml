items:
- uid: System.Reflection.Emit.FieldBuilder
  commentId: T:System.Reflection.Emit.FieldBuilder
  id: FieldBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.FieldBuilder.Attributes
  - System.Reflection.Emit.FieldBuilder.DeclaringType
  - System.Reflection.Emit.FieldBuilder.FieldType
  - System.Reflection.Emit.FieldBuilder.GetValue(System.Object)
  - System.Reflection.Emit.FieldBuilder.Name
  - System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)
  - System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)
  langs:
  - csharp
  - vb
  name: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldBuilder
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 78
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines and represents a field. This class cannot be inherited.</p>\n"
  remarks: "\n<p>Get an instance of <strong>FieldBuilder</strong> by calling <xref href=\"System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method is currently not supported. As a workaround, retrieve the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> by reflecting on the finished type and call <xref href=\"System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> to set the value of the field.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>FieldBuilder</strong>.</p>FieldBuilder_Class_Name#1"
  syntax:
    content: 'public sealed class FieldBuilder : FieldInfo'
    content.vb: >-
      Public NotInheritable Class FieldBuilder
          Inherits FieldInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.FieldBuilder.Attributes
  commentId: P:System.Reflection.Emit.FieldBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.FieldBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 81
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates the attributes of this field. This property is read-only.</p>\n"
  remarks: "\n<p>The following code sample illustrates the use of <strong>Attributes</strong>.</p>FieldBuilder_ReflectedType#1"
  syntax:
    content: public override FieldAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As FieldAttributes
    parameters: []
    return:
      type: System.Reflection.FieldAttributes
      description: "\n<p>The attributes of this field.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.FieldBuilder.DeclaringType
  commentId: P:System.Reflection.Emit.FieldBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.FieldBuilder.DeclaringType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 82
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates a reference to the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object for the type that declares this field. This property is read-only.</p>\n"
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A reference to the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object for the type that declares this field.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.FieldBuilder.FieldType
  commentId: P:System.Reflection.Emit.FieldBuilder.FieldType
  id: FieldType
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: FieldType
  fullName: System.Reflection.Emit.FieldBuilder.FieldType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 83
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the type of this field. This property is read-only.</p>\n"
  syntax:
    content: public override Type FieldType { get; }
    content.vb: Public Overrides ReadOnly Property FieldType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the type of this field.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.FieldBuilder.Name
  commentId: P:System.Reflection.Emit.FieldBuilder.Name
  id: Name
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.FieldBuilder.Name
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 84
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates the name of this field. This property is read-only.</p>\n"
  remarks: "\n<p>The following code sample illustrates the use of <strong>Name</strong>.</p>FieldBuilder_Class_Name#1"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the name of this field.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.FieldBuilder.GetValue(System.Object)
  commentId: M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: GetValue(Object)
  fullName: System.Reflection.Emit.FieldBuilder.GetValue(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 85
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the value of the field supported by the given object.</p>\n"
  remarks: "\n<p>If the field is <strong>static</strong>, the <em>obj</em> parameter is ignored. For non-static fields, <em>obj</em> should be an instance of a class that inherits or declares the field.</p>\n<p>The return type of <xref href=\"System.Reflection.Emit.FieldBuilder.GetValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>. For example, if the field holds a Boolean primitive value, an instance of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> with the appropriate Boolean value is returned. Before returning the value, <xref href=\"System.Reflection.Emit.FieldBuilder.GetValue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> checks to see if the user has access permission.</p>\n<p>Access restrictions are ignored for fully-trusted code. <strong>Private</strong> constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.</p>\n"
  syntax:
    content: public override object GetValue(object obj)
    content.vb: Public Overrides Function GetValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to access the field. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the field reflected by this instance.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not supported. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)
  commentId: M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)
  id: SetConstant(System.Object)
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: SetConstant(Object)
  fullName: System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetConstant
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 86
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the default value of this field.</p>\n"
  remarks: "\n<p>\n<em>defaultValue</em> is restricted to the following types: <strong>Boolean</strong>, <strong>SByte</strong>, <strong>Int16</strong>, <strong>Int32</strong>, <strong>Int64</strong>, <strong>Byte</strong>, <strong>UInt16</strong>, <strong>UInt32</strong>, <strong>UInt64</strong>, <strong>Single</strong>, <strong>Double</strong>, <strong>DateTime</strong>, <strong>Char</strong>, <strong>String</strong>, and <strong>Enum</strong>. If the field type is a reference type, CLS compliance requires <em>defaultValue</em> to be <strong>null</strong>. However, starting with the .NET Framework 4, <em>defaultValue</em> can be non-null for a reference type as long as the value can be assigned to that reference type. For example, an <strong>Int32</strong> value can be assigned to a field of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>. This is not CLS-compliant, but it can be useful in interop scenarios.</p>\n"
  syntax:
    content: public void SetConstant(object defaultValue)
    content.vb: Public Sub SetConstant(defaultValue As Object)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\n<p>The new default value for this field. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The containing type has been created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The field is not one of the supported types.</p>\n<p>-or-</p>\n<p>The type of <em>defaultValue</em> does not match the type of the field.</p>\n<p>-or-</p>\n<p>The field is of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> or other reference type, <em>defaultValue</em> is not <strong>null</strong>, and the value cannot be assigned to the reference type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 87
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets a custom attribute using a specified custom attribute blob.</p>\n"
  remarks: "\n<p>See the metadata specification in the ECMA Partition II documentation for details on how to format <em>binaryAttribute</em>. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>SetCustomAttribute</strong> in the context of <xref href=\"System.Reflection.Emit.FieldBuilder\" data-throw-if-not-resolved=\"false\"></xref>, using a byte blob.</p>FieldBuilder_SetCustomAttributes#1"
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: binaryAttribute
      type: System.Byte[]
      description: "\n<p>A byte blob representing the attributes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The parent type of this field is complete. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 88
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets a custom attribute using a custom attribute builder.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>SetCustomAttribute</strong> in the context of <xref href=\"System.Reflection.Emit.FieldBuilder\" data-throw-if-not-resolved=\"false\"></xref>, using a <xref href=\"System.Reflection.Emit.CustomAttributeBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>FieldBuilder_SetCustomAttributes#1"
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: "\n<p>An instance of a helper class to define the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The parent type of this field is complete. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)
  commentId: M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)
  id: SetOffset(System.Int32)
  parent: System.Reflection.Emit.FieldBuilder
  langs:
  - csharp
  - vb
  name: SetOffset(Int32)
  fullName: System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetOffset
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 89
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Specifies the field layout.</p>\n"
  remarks: "\n<p>The following code sample illustrates the use of <strong>SetOffset</strong>.</p>FieldBuilder_SetOffset#1"
  syntax:
    content: public void SetOffset(int iOffset)
    content.vb: Public Sub SetOffset(iOffset As Integer)
    parameters:
    - id: iOffset
      type: System.Int32
      description: "\n<p>The offset of the field within the type containing this field. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The containing type has been created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>iOffset</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
