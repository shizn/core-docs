items:
- uid: System.Numerics.Plane
  commentId: T:System.Numerics.Plane
  id: Plane
  parent: System.Numerics
  children:
  - System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  - System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  - System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  - System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Plane.D
  - System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  - System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  - System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  - System.Numerics.Plane.Equals(System.Numerics.Plane)
  - System.Numerics.Plane.Equals(System.Object)
  - System.Numerics.Plane.GetHashCode
  - System.Numerics.Plane.Normal
  - System.Numerics.Plane.Normalize(System.Numerics.Plane)
  - System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  - System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  - System.Numerics.Plane.ToString
  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  langs:
  - csharp
  - vb
  name: Plane
  fullName: System.Numerics.Plane
  type: Struct
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Plane
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 130
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Represents a three-dimensional plane.</p>\n"
  remarks: "\n<p></p>\n"
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct Plane : IEquatable<Plane>
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure Plane
          Implements IEquatable(Of Plane)
  implements:
  - System.IEquatable{System.Numerics.Plane}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Numerics.Plane.D
  commentId: F:System.Numerics.Plane.D
  id: D
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: D
  fullName: System.Numerics.Plane.D
  type: Field
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: D
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 133
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>The distance of the plane along its normal from the origin. </p>\n"
  syntax:
    content: public float D
    content.vb: Public D As Single
    return:
      type: System.Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Plane.Normal
  commentId: F:System.Numerics.Plane.Normal
  id: Normal
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Normal
  fullName: System.Numerics.Plane.Normal
  type: Field
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Normal
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 134
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>The normal vector of the plane. </p>\n"
  syntax:
    content: public Vector3 Normal
    content.vb: Public Normal As Vector3
    return:
      type: System.Numerics.Vector3
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  commentId: M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  id: '#ctor(System.Numerics.Vector3,System.Single)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vector3, Single)
  fullName: System.Numerics.Plane.Plane(System.Numerics.Vector3, System.Single)
  type: Constructor
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 135
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Creates a <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object from a specified normal and the distance along the normal from the origin. </p>\n"
  syntax:
    content: public Plane(Vector3 normal, float d)
    content.vb: Public Sub New(normal As Vector3, d As Single)
    parameters:
    - id: normal
      type: System.Numerics.Vector3
      description: "\n<p>The plane's normal vector. </p>\n"
    - id: d
      type: System.Single
      description: "\n<p>The plane's distance from the origin along its normal vector. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  commentId: M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  id: '#ctor(System.Numerics.Vector4)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vector4)
  fullName: System.Numerics.Plane.Plane(System.Numerics.Vector4)
  type: Constructor
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 136
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Creates a <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object from a specified four-dimensional vector. </p>\n"
  syntax:
    content: public Plane(Vector4 value)
    content.vb: Public Sub New(value As Vector4)
    parameters:
    - id: value
      type: System.Numerics.Vector4
      description: "\n<p>A vector whose first three elements describe the normal vector, and whose <xref href=\"System.Numerics.Vector4.W\" data-throw-if-not-resolved=\"false\"></xref> defines the distance along that normal from the origin. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  commentId: M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Plane(Single, Single, Single, Single)
  fullName: System.Numerics.Plane.Plane(System.Single, System.Single, System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 137
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Creates a <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object from the X, Y, and Z components of its normal, and its distance from the origin on that normal.  </p>\n"
  syntax:
    content: public Plane(float x, float y, float z, float d)
    content.vb: Public Sub New(x As Single, y As Single, z As Single, d As Single)
    parameters:
    - id: x
      type: System.Single
      description: "\n<p>The X component of the normal. </p>\n"
    - id: y
      type: System.Single
      description: "\n<p>The Y component of the normal. </p>\n"
    - id: z
      type: System.Single
      description: "\n<p>The Z component of the normal. </p>\n"
    - id: d
      type: System.Single
      description: "\n<p>The distance of the plane along its normal from the origin. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  commentId: M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  id: CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: CreateFromVertices(Vector3, Vector3, Vector3)
  fullName: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromVertices
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 138
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Creates a <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object that contains three specified points. </p>\n"
  syntax:
    content: public static Plane CreateFromVertices(Vector3 point1, Vector3 point2, Vector3 point3)
    content.vb: Public Shared Function CreateFromVertices(point1 As Vector3, point2 As Vector3, point3 As Vector3) As Plane
    parameters:
    - id: point1
      type: System.Numerics.Vector3
      description: "\n<p>The first point defining the plane. </p>\n"
    - id: point2
      type: System.Numerics.Vector3
      description: "\n<p>The second point defining the plane. </p>\n"
    - id: point3
      type: System.Numerics.Vector3
      description: "\n<p>The third point defining the plane. </p>\n"
    return:
      type: System.Numerics.Plane
      description: "\n<p>The plane containing the three points. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  commentId: M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  id: Dot(System.Numerics.Plane,System.Numerics.Vector4)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Dot(Plane, Vector4)
  fullName: System.Numerics.Plane.Dot(System.Numerics.Plane, System.Numerics.Vector4)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dot
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 139
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Calculates the dot product of a plane and a 4-dimensional vector. </p>\n"
  syntax:
    content: public static float Dot(Plane plane, Vector4 value)
    content.vb: Public Shared Function Dot(plane As Plane, value As Vector4) As Single
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "\n<p>The plane. </p>\n"
    - id: value
      type: System.Numerics.Vector4
      description: "\n<p>The four-dimensional vector. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The dot product. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  commentId: M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  id: DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: DotCoordinate(Plane, Vector3)
  fullName: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane, System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DotCoordinate
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 140
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (<xref href=\"System.Numerics.Plane.D\" data-throw-if-not-resolved=\"false\"></xref>) value of the plane.</p>\n"
  syntax:
    content: public static float DotCoordinate(Plane plane, Vector3 value)
    content.vb: Public Shared Function DotCoordinate(plane As Plane, value As Vector3) As Single
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "\n<p>The plane. </p>\n"
    - id: value
      type: System.Numerics.Vector3
      description: "\n<p>The 3-dimensional vector. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The dot product. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  commentId: M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  id: DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: DotNormal(Plane, Vector3)
  fullName: System.Numerics.Plane.DotNormal(System.Numerics.Plane, System.Numerics.Vector3)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DotNormal
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 141
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns the dot product of a specified three-dimensional vector and the <xref href=\"System.Numerics.Plane.Normal\" data-throw-if-not-resolved=\"false\"></xref> vector of this plane.</p>\n"
  syntax:
    content: public static float DotNormal(Plane plane, Vector3 value)
    content.vb: Public Shared Function DotNormal(plane As Plane, value As Vector3) As Single
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "\n<p>The plane. </p>\n"
    - id: value
      type: System.Numerics.Vector3
      description: "\n<p>The three-dimensional vector. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The dot product. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)
  commentId: M:System.Numerics.Plane.Equals(System.Numerics.Plane)
  id: Equals(System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Equals(Plane)
  fullName: System.Numerics.Plane.Equals(System.Numerics.Plane)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 142
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether this instance and another plane object are equal.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> objects are equal if their <xref href=\"System.Numerics.Plane.Normal\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Plane.D\" data-throw-if-not-resolved=\"false\"></xref> fields are equal.  </p>\n"
  syntax:
    content: public bool Equals(Plane other)
    content.vb: Public Function Equals(other As Plane) As Boolean
    parameters:
    - id: other
      type: System.Numerics.Plane
      description: "\n<p>The other plane. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two planes are equal; otherwise, <strong>false</strong>. </p>\n"
  implements:
  - System.IEquatable{System.Numerics.Plane}.Equals(System.Numerics.Plane)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Plane.Equals(System.Object)
  commentId: M:System.Numerics.Plane.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Numerics.Plane.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 143
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether this instance and a specified object are equal. </p>\n"
  remarks: "\n<p>The current instance and <em>obj</em> are equal if <em>obj</em> is a <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object and their <xref href=\"System.Numerics.Plane.Normal\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Plane.D\" data-throw-if-not-resolved=\"false\"></xref> fields are equal. </p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>. If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Plane.GetHashCode
  commentId: M:System.Numerics.Plane.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Numerics.Plane.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 144
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns the hash code for this instance. </p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code. </p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)
  commentId: M:System.Numerics.Plane.Normalize(System.Numerics.Plane)
  id: Normalize(System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Normalize(Plane)
  fullName: System.Numerics.Plane.Normalize(System.Numerics.Plane)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Normalize
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 145
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Creates a new <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object whose normal vector is the source plane's normal vector normalized. </p>\n"
  syntax:
    content: public static Plane Normalize(Plane value)
    content.vb: Public Shared Function Normalize(value As Plane) As Plane
    parameters:
    - id: value
      type: System.Numerics.Plane
      description: "\n<p>The source plane. </p>\n"
    return:
      type: System.Numerics.Plane
      description: "\n<p>The normalized plane. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  commentId: M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  id: op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Equality(Plane, Plane)
  fullName: System.Numerics.Plane.Equality(System.Numerics.Plane, System.Numerics.Plane)
  type: Operator
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 146
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether two planes are equal.  </p>\n"
  remarks: "\n<p>Two <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> objects are equal if their <xref href=\"System.Numerics.Plane.Normal\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Numerics.Plane.D\" data-throw-if-not-resolved=\"false\"></xref> fields are equal. </p>\n<p>The <xref href=\"System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the equality operator for <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n"
  syntax:
    content: public static bool operator ==(Plane value1, Plane value2)
    content.vb: Public Shared Operator =(value1 As Plane, value2 As Plane) As Boolean
    parameters:
    - id: value1
      type: System.Numerics.Plane
      description: "\n<p>The first plane to compare. </p>\n"
    - id: value2
      type: System.Numerics.Plane
      description: "\n<p>The second plane to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  commentId: M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  id: op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Inequality(Plane, Plane)
  fullName: System.Numerics.Plane.Inequality(System.Numerics.Plane, System.Numerics.Plane)
  type: Operator
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 147
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns a value that indicates whether two planes are not equal.  </p>\n"
  remarks: "\n<p>The <xref href=\"System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the inequality operator for <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n"
  syntax:
    content: public static bool operator !=(Plane value1, Plane value2)
    content.vb: Public Shared Operator <>(value1 As Plane, value2 As Plane) As Boolean
    parameters:
    - id: value1
      type: System.Numerics.Plane
      description: "\n<p>The first plane to compare. </p>\n"
    - id: value2
      type: System.Numerics.Plane
      description: "\n<p>The second plane to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value1</em> and <em>value2</em> are not equal; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.ToString
  commentId: M:System.Numerics.Plane.ToString
  id: ToString
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Numerics.Plane.ToString()
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 148
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Returns the string representation of this plane object. </p>\n"
  remarks: "\n<p>The string representation of a <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object use the formatting conventions of the current culture to format the numeric values in the returned string. For example, a <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object whose string representation is formatted by using the conventions of the en-US culture might appear as <code>{Normal:<1.1, 2.2, 3.3> D:4.4}</code>. </p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents this <xref href=\"System.Numerics.Plane\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  commentId: M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  id: Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Transform(Plane, Matrix4x4)
  fullName: System.Numerics.Plane.Transform(System.Numerics.Plane, System.Numerics.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Transform
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 149
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Transforms a normalized plane by a 4x4 matrix. </p>\n"
  remarks: "\n<p>\n<em>plane</em> must already be normalized so that its <xref href=\"System.Numerics.Plane.Normal\" data-throw-if-not-resolved=\"false\"></xref> vector is of unit length before this method is called. </p>\n"
  syntax:
    content: public static Plane Transform(Plane plane, Matrix4x4 matrix)
    content.vb: Public Shared Function Transform(plane As Plane, matrix As Matrix4x4) As Plane
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "\n<p>The normalized plane to transform. </p>\n"
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "\n<p>The transformation matrix to apply to <em>plane</em>. </p>\n"
    return:
      type: System.Numerics.Plane
      description: "\n<p>The transformed plane. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  commentId: M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  id: Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  parent: System.Numerics.Plane
  langs:
  - csharp
  - vb
  name: Transform(Plane, Quaternion)
  fullName: System.Numerics.Plane.Transform(System.Numerics.Plane, System.Numerics.Quaternion)
  type: Method
  source:
    remote:
      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Transform
    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs
    startLine: 150
  assemblies:
  - System.Numerics.Vectors
  namespace: System.Numerics
  summary: "\n<p>Transforms a normalized plane by a Quaternion rotation. </p>\n"
  remarks: "\n<p>\n<em>plane</em> must already be normalized so that its <xref href=\"System.Numerics.Plane.Normal\" data-throw-if-not-resolved=\"false\"></xref> vector is of unit length before this method is called.</p>\n"
  syntax:
    content: public static Plane Transform(Plane plane, Quaternion rotation)
    content.vb: Public Shared Function Transform(plane As Plane, rotation As Quaternion) As Plane
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "\n<p>The normalized plane to transform. </p>\n"
    - id: rotation
      type: System.Numerics.Quaternion
      description: "\n<p>The Quaternion rotation to apply to the plane. </p>\n"
    return:
      type: System.Numerics.Plane
      description: "\n<p>A new plane that results from applying the Quaternion rotation. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Numerics
  isExternal: false
  name: System.Numerics
  fullName: System.Numerics
- uid: System.IEquatable{System.Numerics.Plane}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Plane>
  fullName: System.IEquatable<System.Numerics.Plane>
  fullname.vb: System.IEquatable(Of System.Numerics.Plane)
  name.vb: IEquatable(Of Plane)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Numerics.Plane
    name: Plane
    fullName: System.Numerics.Plane
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Numerics.Plane
    name: Plane
    fullName: System.Numerics.Plane
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Numerics.Vector3
  parent: System.Numerics
  isExternal: false
  name: Vector3
  fullName: System.Numerics.Vector3
- uid: System.Numerics.Vector4
  parent: System.Numerics
  isExternal: false
  name: Vector4
  fullName: System.Numerics.Vector4
- uid: System.Numerics.Plane
  parent: System.Numerics
  isExternal: false
  name: Plane
  fullName: System.Numerics.Plane
- uid: System.IEquatable{System.Numerics.Plane}.Equals(System.Numerics.Plane)
  parent: System.IEquatable{System.Numerics.Plane}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Plane)
  fullName: System.IEquatable<System.Numerics.Plane>.Equals(System.Numerics.Plane)
  fullname.vb: System.IEquatable(Of System.Numerics.Plane).Equals(System.Numerics.Plane)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Numerics.Plane>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.Plane
    name: Plane
    fullName: System.Numerics.Plane
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Numerics.Plane).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Numerics.Plane
    name: Plane
    fullName: System.Numerics.Plane
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Numerics.Matrix4x4
  parent: System.Numerics
  isExternal: false
  name: Matrix4x4
  fullName: System.Numerics.Matrix4x4
- uid: System.Numerics.Quaternion
  parent: System.Numerics
  isExternal: false
  name: Quaternion
  fullName: System.Numerics.Quaternion
