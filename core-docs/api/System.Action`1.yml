items:
- uid: System.Action`1
  commentId: T:System.Action`1
  id: Action`1
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Action<T>
  fullName: System.Action<T>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Action
    path: src/mscorlib/src/System/Action.cs
    startLine: 9
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has a single parameter and does not return a value.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#486d58da4553e12d\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/action.cs#486d58da4553e12d\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>You can use the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value. (In C#, the method must return <strong>void</strong>. In Visual Basic, it must be defined by the <strong>Sub</strong>â€¦<strong>End Sub</strong> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</p>\n<p>To reference a method that has one parameter and returns a value, use the generic <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate instead.</p>\n<p>When you use the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter. For example, the following code explicitly declares a delegate named <code>DisplayMessage</code> and assigns a reference to either the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method or the <code>ShowWindowsMessage</code> method to its delegate instance. </p>System.Action~1#1<p>The following example simplifies this code by instantiating the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate instead of explicitly defining a new delegate and assigning a named method to it.</p>System.Action~1#2<p>You can also use the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see Anonymous Methods (C# Programming Guide).)</p>System.Action~1#3<p>You can also assign a lambda expression to an <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see Lambda Expressions (C# Programming Guide).)</p>System.Action~1#4<p>The <xref href=\"System.Collections.Generic.List`1.ForEach(System.Action{`0})\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Array.ForEach``1(``0[],System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> methods each take an <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate as a parameter. The method encapsulated by the delegate allows you to perform an action on each element in the array or list. The example uses the <xref href=\"System.Collections.Generic.List`1.ForEach(System.Action{`0})\" data-throw-if-not-resolved=\"false\"></xref> method to provide an illustration.</p>"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate to print the contents of a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object. In this example, the <code>Print</code> method is used to display the contents of the list to the console. In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console. Note that the example does not explicitly declare an <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> variable. Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref href=\"System.Collections.Generic.List`1.ForEach(System.Action{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, whose single parameter is an <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate. Similarly, in the C# example, an <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate that is expected by the <xref href=\"System.Collections.Generic.List`1.ForEach(System.Action{`0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Action_PrintExample#01<p></p>"
  syntax:
    content: public delegate void Action<in T>(T obj);
    content.vb: Public Delegate Sub Action(Of In T)(obj As T)
    parameters:
    - id: obj
      type: '{T}'
    typeParameters:
    - id: T
  seealso:
  - type: System.Func`2
    commentId: T:System.Func`2
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
