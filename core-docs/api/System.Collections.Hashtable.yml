items:
- uid: System.Collections.Hashtable
  commentId: T:System.Collections.Hashtable
  id: Hashtable
  parent: System.Collections
  children:
  - System.Collections.Hashtable.#ctor
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.Add(System.Object,System.Object)
  - System.Collections.Hashtable.Clear
  - System.Collections.Hashtable.Clone
  - System.Collections.Hashtable.Contains(System.Object)
  - System.Collections.Hashtable.ContainsKey(System.Object)
  - System.Collections.Hashtable.ContainsValue(System.Object)
  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  - System.Collections.Hashtable.Count
  - System.Collections.Hashtable.EqualityComparer
  - System.Collections.Hashtable.GetEnumerator
  - System.Collections.Hashtable.GetHash(System.Object)
  - System.Collections.Hashtable.IsFixedSize
  - System.Collections.Hashtable.IsReadOnly
  - System.Collections.Hashtable.IsSynchronized
  - System.Collections.Hashtable.Item(System.Object)
  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  - System.Collections.Hashtable.Keys
  - System.Collections.Hashtable.Remove(System.Object)
  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - System.Collections.Hashtable.SyncRoot
  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Hashtable.Values
  langs:
  - csharp
  - vb
  name: Hashtable
  fullName: System.Collections.Hashtable
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Hashtable
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 69
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Represents a collection of key/value pairs that are organized based on the hash code of the key.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>Each element is a key/value pair stored in a <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> object. A key cannot be <strong>null</strong>, but a value can be.</p>\n<p>The objects used as keys by a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method (or the <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> interface) and the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method (or the <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface). The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> might behave incorrectly. For example, when creating a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, you must use the <xref href=\"System.Collections.CaseInsensitiveHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> class (or any case-insensitive <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation) with the <xref href=\"System.Collections.CaseInsensitiveComparer\" data-throw-if-not-resolved=\"false\"></xref> class (or any case-insensitive <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation).</p>\n<p>Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. An alternative is to use a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor with an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> parameter. If key equality were simply reference equality, the inherited implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> would suffice.</p>\n<p>Key objects must be immutable as long as they are used as keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When an element is added to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, the element is placed into a bucket based on the hash code of the key. Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.</p>\n<p>The load factor of a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> determines the maximum ratio of elements to buckets. Smaller load factors cause faster average lookup times at the cost of increased memory consumption. The default load factor of 1.0 generally provides the best balance between speed and size. A different load factor can also be specified when the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is created.</p>\n<p>As elements are added to a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, the actual load factor of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> increases. When the actual load factor reaches the specified load factor, the number of buckets in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is automatically increased to the smallest prime number that is larger than twice the current number of <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> buckets.</p>\n<p>Each key object in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must provide its own hash function, which can be accessed by calling <xref href=\"System.Collections.Hashtable.GetHash(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. However, any object implementing <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> can be passed to a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor, and that hash function is used for all objects in the table.</p>\n<p>The capacity of a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.</p>\n<p>For very large <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <strong>enabled</strong> attribute of the  configuration element to <strong>true</strong> in the run-time environment.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>For Each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref>. For example:</p>System.Collections.Hashtable_ClassExample#01<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</p><p>Because serializing and deserializing an enumerator for a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method. </p><p>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref href=\"System.Type.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>"
  example:
  - "\n<p>The following example shows how to create, initialize and perform various functions to a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> and how to print out its keys and values.</p>System.Collections.Hashtable_ClassExample#00"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (Hashtable.HashtableDebugView))]

      [DebuggerDisplay("Count = {Count}")]

      [ComVisible(true)]

      [Serializable]

      public class Hashtable : IDictionary, ICollection, IEnumerable, ISerializable, IDeserializationCallback, ICloneable
    content.vb: >-
      <DebuggerTypeProxy(GetType(Hashtable.HashtableDebugView))>

      <DebuggerDisplay("Count = {Count}")>

      <ComVisible(True)>

      <Serializable>

      Public Class Hashtable
          Implements IDictionary, ICollection, IEnumerable, ISerializable, IDeserializationCallback, ICloneable
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.IHashCodeProvider
    commentId: T:System.Collections.IHashCodeProvider
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - type: System.Collections.Generic.Dictionary`2
    commentId: T:System.Collections.Generic.Dictionary`2
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Hashtable.#ctor
  commentId: M:System.Collections.Hashtable.#ctor
  id: '#ctor'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 247
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class using the default initial capacity, load factor, hash code provider, and comparer.</p>\n"
  remarks: "\n<p>A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctor#1"
  syntax:
    content: public Hashtable()
    content.vb: Public Sub New
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 354
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. The new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.</p>\n"
  remarks: "\n<p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements of the new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order in which the enumerator iterates through the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>d</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorDictionary#1"
  syntax:
    content: public Hashtable(IDictionary d)
    content.vb: Public Sub New(d As IDictionary)
    parameters:
    - id: d
      type: System.Collections.IDictionary
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(IDictionary, IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary, System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 369
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class by copying the elements from the specified dictionary to a new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. The new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object includes both the hash code provider and the comparer. If an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> is used in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor, the objects used as keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object are not required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> enables scenarios such as doing lookups with case-insensitive strings.</p>\n<p>The elements of the new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order in which the enumerator iterates through the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>d</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorDictionary#1"
  syntax:
    content: public Hashtable(IDictionary d, IEqualityComparer equalityComparer)
    content.vb: Public Sub New(d As IDictionary, equalityComparer As IEqualityComparer)
    parameters:
    - id: d
      type: System.Collections.IDictionary
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  id: '#ctor(System.Collections.IDictionary,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(IDictionary, Single)
  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary, System.Single)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 360
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. The new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.</p>\n"
  remarks: "\n<p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements of the new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order in which the enumerator iterates through the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>d</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorDictionaryFloat#1"
  syntax:
    content: public Hashtable(IDictionary d, float loadFactor)
    content.vb: Public Sub New(d As IDictionary, loadFactor As Single)
    parameters:
    - id: d
      type: System.Collections.IDictionary
    - id: loadFactor
      type: System.Single
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>loadFactor</em> is less than 0.1.</p>\n<p>-or- </p>\n<p>\n<em>loadFactor</em> is greater than 1.0. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(IDictionary, Single, IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IDictionary, System.Single, System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 384
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. The new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object includes both the hash code provider and the comparer. If an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> is used in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor, the objects used as keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object are not required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> enables scenarios such as doing lookups with case-insensitive strings.</p>\n<p>The elements of the new <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order in which the enumerator iterates through the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>d</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorDictionaryFloat#1"
  syntax:
    content: public Hashtable(IDictionary d, float loadFactor, IEqualityComparer equalityComparer)
    content.vb: Public Sub New(d As IDictionary, loadFactor As Single, equalityComparer As IEqualityComparer)
    parameters:
    - id: d
      type: System.Collections.IDictionary
    - id: loadFactor
      type: System.Single
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>loadFactor</em> is less than 0.1.</p>\n<p>-or- </p>\n<p>\n<em>loadFactor</em> is greater than 1.0. </p>\n"
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 335
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class using the default initial capacity and load factor, and the specified <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object includes both the hash code provider and the comparer. If an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> is used in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor, the objects used as keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object are not required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> enables scenarios such as doing lookups with case-insensitive strings.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctor#1"
  syntax:
    content: public Hashtable(IEqualityComparer equalityComparer)
    content.vb: Public Sub New(equalityComparer As IEqualityComparer)
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  commentId: M:System.Collections.Hashtable.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 257
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.</p>\n"
  remarks: "\n<p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorInt#1"
  syntax:
    content: public Hashtable(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(Int32, IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(System.Int32, System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 347
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity and <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref>, and the default load factor.</p>\n"
  remarks: "\n<p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object includes both the hash code provider and the comparer. If an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> is used in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor, the objects used as keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are not required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> enables scenarios such as doing lookups with case-insensitive strings.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the <em>capacity</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorInt#1"
  syntax:
    content: public Hashtable(int capacity, IEqualityComparer equalityComparer)
    content.vb: Public Sub New(capacity As Integer, equalityComparer As IEqualityComparer)
    parameters:
    - id: capacity
      type: System.Int32
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  commentId: M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(Int32, Single)
  fullName: System.Collections.Hashtable.Hashtable(System.Int32, System.Single)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 271
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity and load factor, and the default hash code provider and comparer.</p>\n"
  remarks: "\n<p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the <em>capacity</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorIntFloat#1"
  syntax:
    content: public Hashtable(int capacity, float loadFactor)
    content.vb: Public Sub New(capacity As Integer, loadFactor As Single)
    parameters:
    - id: capacity
      type: System.Int32
    - id: loadFactor
      type: System.Single
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>loadFactor</em> is less than 0.1.</p>\n<p>-or- </p>\n<p>\n<em>loadFactor</em> is greater than 1.0. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>capacity</em> is causing an overflow.</p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Hashtable(Int32, Single, IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(System.Int32, System.Single, System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 323
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity, load factor, and <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object. Capacity is automatically increased as required based on the load factor.</p>\n<p>The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.</p>\n<p>When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> object includes both the hash code provider and the comparer. If an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> is used in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor, the objects used as keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are not required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>The hash code provider dispenses hash codes for keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. The default hash code provider is the key's implementation of <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> enables scenarios such as doing lookups with case-insensitive strings.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the <em>capacity</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates hash tables using different <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.</p>System.Collections.Hashtable_ctorIntFloat#1"
  syntax:
    content: public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer)
    content.vb: Public Sub New(capacity As Integer, loadFactor As Single, equalityComparer As IEqualityComparer)
    parameters:
    - id: capacity
      type: System.Int32
    - id: loadFactor
      type: System.Single
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>loadFactor</em> is less than 0.1.</p>\n<p>-or- </p>\n<p>\n<em>loadFactor</em> is greater than 1.0. </p>\n"
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Hashtable.Count
  commentId: P:System.Collections.Hashtable.Count
  id: Count
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Hashtable.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 1127
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Hashtable.EqualityComparer
  commentId: P:System.Collections.Hashtable.EqualityComparer
  id: EqualityComparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EqualityComparer
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 231
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> to use for the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> includes both the comparer and the hash code provider. If an <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> is used in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> constructor, the objects used as keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are not required to override the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: protected IEqualityComparer EqualityComparer { get; }
    content.vb: Protected ReadOnly Property EqualityComparer As IEqualityComparer
    parameters: []
    return:
      type: System.Collections.IEqualityComparer
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The property is set to a value, but the hash table was created using an <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> and an <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Comparer
    commentId: T:System.Collections.Comparer
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.Hashtable.IsFixedSize
  commentId: P:System.Collections.Hashtable.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFixedSize
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 807
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  remarks: "\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Hashtable.IsReadOnly
  commentId: P:System.Collections.Hashtable.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 803
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Hashtable.IsSynchronized
  commentId: P:System.Collections.Hashtable.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSynchronized
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 812
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>  can support one writer and multiple readers concurrently. To support multiple writers, all operations must be done through the wrapper returned by the <xref href=\"System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Hashtable.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration:</p>Classic Hashtable.IsSynchronized Example#2"
  example:
  - "\n<p>The following example shows how to synchronize a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, determine if a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is synchronized, and use a synchronized <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Hashtable.IsSynchronized Example#1"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - type: System.Collections.Hashtable.SyncRoot
    commentId: P:System.Collections.Hashtable.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Hashtable.Item(System.Object)
  commentId: P:System.Collections.Hashtable.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Item[Object]
  fullName: System.Collections.Hashtable.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 642
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.</p>\n<p>You can also use the <xref href=\"System.Collections.Hashtable.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Hashtable.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Hashtable.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be. To distinguish between <strong>null</strong> that is returned because the specified key is not found and <strong>null</strong> that is returned because the value of the specified key is <strong>null</strong>, use the <xref href=\"System.Collections.Hashtable.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Collections.Hashtable.ContainsKey(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine if the key exists in the list.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.IList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Hashtable.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n"
  syntax:
    content: public virtual object this[object key] { get; set; }
    content.vb: Public Overridable Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.Hashtable.Add(System.Object,System.Object)
    commentId: M:System.Collections.Hashtable.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.Hashtable.Item(System.Object)
  name.vb: Item(Object)
- uid: System.Collections.Hashtable.Keys
  commentId: P:System.Collections.Hashtable.Keys
  id: Keys
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Hashtable.Keys
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Keys
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 844
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Hashtable.Values\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual ICollection Keys { get; }
    content.vb: Public Overridable ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Hashtable.Values
    commentId: P:System.Collections.Hashtable.Values
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Hashtable.SyncRoot
  commentId: P:System.Collections.Hashtable.SyncRoot
  id: SyncRoot
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SyncRoot
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 1116
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>To create a synchronized version of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\" data-throw-if-not-resolved=\"false\"></xref> method. However, derived classes can provide their own synchronized version of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.Hashtable.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref>  property. The synchronizing code must perform operations on the <xref href=\"System.Collections.Hashtable.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> . This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Hashtable.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration:</p>Classic Hashtable.IsSynchronized Example#2"
  syntax:
    content: public virtual object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.Hashtable.IsSynchronized
    commentId: P:System.Collections.Hashtable.IsSynchronized
  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Hashtable.Values
  commentId: P:System.Collections.Hashtable.Values
  id: Values
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Hashtable.Values
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Values
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 861
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Hashtable.Keys\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual ICollection Values { get; }
    content.vb: Public Overridable ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Hashtable.Keys
    commentId: P:System.Collections.Hashtable.Keys
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  commentId: M:System.Collections.Hashtable.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  fullName: System.Collections.Hashtable.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 439
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an element with the specified key and value into the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A key cannot be <strong>null</strong>, but a value can be.</p>\n<p>An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.</p>\n<p>You can also use the <xref href=\"System.Collections.Hashtable.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Hashtable.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Hashtable.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>If <xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to add elements to the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Hashtable.Add Example#1"
  syntax:
    content: public virtual void Add(object key, object value)
    content.vb: Public Overridable Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.Hashtable.Remove(System.Object)
    commentId: M:System.Collections.Hashtable.Remove(System.Object)
  - type: System.Collections.Hashtable.Item(System.Object)
    commentId: P:System.Collections.Hashtable.Item(System.Object)
  - type: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.Clear
  commentId: M:System.Collections.Hashtable.Clear
  id: Clear
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Hashtable.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 444
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released. The capacity remains unchanged.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to clear the values of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Hashtable.Clear Example#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public virtual void Clear()
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Overridable Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  seealso:
  - type: System.Collections.IDictionary.Clear
    commentId: M:System.Collections.IDictionary.Clear
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.Clone
  commentId: M:System.Collections.Hashtable.Clone
  id: Clone
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Collections.Hashtable.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 473
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates a shallow copy of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.</p>\n<p>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</p>\n<p>The <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> clone has the same count, the same capacity, the same <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation, and the same <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation as the original <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: System.Object
  seealso:
  - type: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
    commentId: M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.Contains(System.Object)
  commentId: M:System.Collections.Hashtable.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.Hashtable.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 494
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Hashtable.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implements <xref href=\"System.Collections.IDictionary.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. It behaves exactly as <xref href=\"System.Collections.Hashtable.ContainsKey(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following example shows how to determine whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> contains a specific element.</p>Classic Hashtable.Contains Example#1"
  syntax:
    content: public virtual bool Contains(object key)
    content.vb: Public Overridable Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Hashtable.ContainsKey(System.Object)
    commentId: M:System.Collections.Hashtable.ContainsKey(System.Object)
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  commentId: M:System.Collections.Hashtable.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsKey
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 501
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  remarks: "\n<p>This method behaves exactly as <xref href=\"System.Collections.Hashtable.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following example shows how to determine whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> contains a specific element.</p>Classic Hashtable.Contains Example#1"
  syntax:
    content: public virtual bool ContainsKey(object key)
    content.vb: Public Overridable Function ContainsKey(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Hashtable.Contains(System.Object)
    commentId: M:System.Collections.Hashtable.Contains(System.Object)
  - type: System.Collections.Hashtable.ContainsValue(System.Object)
    commentId: M:System.Collections.Hashtable.ContainsValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  commentId: M:System.Collections.Hashtable.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsValue
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 537
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> contains a specific value.</p>\n"
  remarks: "\n<p>The values of the elements of the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> are compared to the specified value using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following example shows how to determine whether the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> contains a specific element.</p>Classic Hashtable.Contains Example#1"
  syntax:
    content: public virtual bool ContainsValue(object value)
    content.vb: Public Overridable Function ContainsValue(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.Hashtable.ContainsKey(System.Object)
    commentId: M:System.Collections.Hashtable.ContainsKey(System.Object)
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.Hashtable.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 589
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> elements to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> instance at the specified index.</p>\n"
  remarks: "\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To copy only the keys in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, use <code>Hashtable.Keys.CopyTo</code>.</p>\n<p>To copy only the values in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, use <code>Hashtable.Values.CopyTo</code>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Hashtable.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to copy the list of keys or the list of values in a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Hashtable.CopyTo Example#1"
  syntax:
    content: public virtual void CopyTo(Array array, int arrayIndex)
    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: arrayIndex
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - type: System.Collections.Hashtable.GetEnumerator
    commentId: M:System.Collections.Hashtable.GetEnumerator
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.GetEnumerator
  commentId: M:System.Collections.Hashtable.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 788
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n<p>Because serializing and deserializing an enumerator for a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example compares the use of <xref href=\"System.Collections.Hashtable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> and <strong>foreach</strong> to enumerate the contents of a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Hashtable Example#2"
  syntax:
    content: public virtual IDictionaryEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.GetHash(System.Object)
  commentId: M:System.Collections.Hashtable.GetHash(System.Object)
  id: GetHash(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHash
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 795
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns the hash code for the specified key.</p>\n"
  remarks: "\n<p>If the hash table was created with a specific <xref href=\"System.Collections.IHashCodeProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation, this method uses that hash code provider; otherwise, it uses the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> implementation of <em>key</em>.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual int GetHash(object key)
    content.vb: Protected Overridable Function GetHash(key As Object) As Integer
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Int32
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object
    commentId: T:System.Object
  - type: System.Collections.IHashCodeProvider
    commentId: T:System.Collections.IHashCodeProvider
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  commentId: M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  id: KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: KeyEquals(Object, Object)
  fullName: System.Collections.Hashtable.KeyEquals(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: KeyEquals
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 820
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Compares a specific <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> with a specific key in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the hash table was created with a specific <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation, this method uses that comparer; that is, <xref href=\"System.Collections.IComparer.Compare(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> (<em>item</em>, <em>key</em>). Otherwise, it uses <code>item.Equals(key)</code>.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual bool KeyEquals(object item, object key)
    content.vb: Protected Overridable Function KeyEquals(item As Object, key As Object) As Boolean
    parameters:
    - id: item
      type: System.Object
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>item</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.Collections.IComparer.Compare(System.Object,System.Object)
    commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.Hashtable.Remove(System.Object)
  commentId: M:System.Collections.Hashtable.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.Hashtable.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 1068
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> does not contain an element with the specified key, the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example shows how to remove elements from the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Hashtable.Remove Example#1"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public virtual void Remove(object key)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Overridable Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.Hashtable.Add(System.Object,System.Object)
    commentId: M:System.Collections.Hashtable.Add(System.Object,System.Object)
  - type: System.Collections.IDictionary.Remove(System.Object)
    commentId: M:System.Collections.IDictionary.Remove(System.Object)
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  id: Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Synchronized
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 1133
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\" data-throw-if-not-resolved=\"false\"></xref> method is thread safe for multiple readers and writers. Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Hashtable.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration: </p>Classic Hashtable.IsSynchronized Example#2<p>This method is an O(1) operation.</p>"
  example:
  - "\n<p>The following example shows how to synchronize a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>, determine if a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> is synchronized, and use a synchronized <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Hashtable.IsSynchronized Example#1"
  syntax:
    content: >-
      [HostProtection(Synchronization = true)]

      public static Hashtable Synchronized(Hashtable table)
    content.vb: >-
      <HostProtection(Synchronization:=True)>

      Public Shared Function Synchronized(table As Hashtable) As Hashtable
    parameters:
    - id: table
      type: System.Collections.Hashtable
    return:
      type: System.Collections.Hashtable
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>table</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Hashtable.IsSynchronized
    commentId: P:System.Collections.Hashtable.IsSynchronized
  - type: System.Collections.Hashtable.SyncRoot
    commentId: P:System.Collections.Hashtable.SyncRoot
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Hashtable
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Hashtable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/Collections/Hashtable.cs
    startLine: 779
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. At this position, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
