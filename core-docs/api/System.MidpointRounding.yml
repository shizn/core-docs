items:
- uid: System.MidpointRounding
  commentId: T:System.MidpointRounding
  id: MidpointRounding
  parent: System
  children:
  - System.MidpointRounding.AwayFromZero
  - System.MidpointRounding.ToEven
  langs:
  - csharp
  - vb
  name: MidpointRounding
  fullName: System.MidpointRounding
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/MidpointRounding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MidpointRounding
    path: src/mscorlib/src/System/MidpointRounding.cs
    startLine: 7
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Specifies how mathematical rounding methods should process a number that is midway between two numbers.</p>\n"
  remarks: "\n<p>Use <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref> with appropriate overloads of <see cref=\"Overload:System.Math.Round\"></see> to provide more control of the rounding process. </p>\n<p>A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number. For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity. If the next digit is from 6 through 9, the nearest number is toward positive infinity. For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity. If the next digit is from 6 through 9, the nearest number is toward negative infinity. </p>\n<p>In the previous cases, the <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref> enumeration does not affect the result of the rounding operation. However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous. In this case, the <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number. </p>\n<p>The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>. The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation. For example, for the number -2.5, the digit after the decimal point is 5. Because that digit is the midpoint, you can use a <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref> value to determine the result of rounding. If <xref href=\"System.MidpointRounding.AwayFromZero\" data-throw-if-not-resolved=\"false\"></xref> is specified, -3 is returned because it is the nearest number away from zero with a precision of zero. If <xref href=\"System.MidpointRounding.ToEven\" data-throw-if-not-resolved=\"false\"></xref> is specified, -2 is returned because it is the nearest even number with a precision of zero.</p>\n<p>Original number</p>\n<p>AwayFromZero</p>\n<p>ToEven</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\" data-throw-if-not-resolved=\"false\"></xref>  method in conjunction with the <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>math.midpointrounding#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public enum MidpointRounding
    content.vb: >-
      <ComVisible(True)>

      Public Enum MidpointRounding
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.MidpointRounding.AwayFromZero
  commentId: F:System.MidpointRounding.AwayFromZero
  id: AwayFromZero
  parent: System.MidpointRounding
  langs:
  - csharp
  - vb
  name: AwayFromZero
  fullName: System.MidpointRounding.AwayFromZero
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/MidpointRounding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AwayFromZero
    path: src/mscorlib/src/System/MidpointRounding.cs
    startLine: 10
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.</p>\n"
  syntax:
    content: AwayFromZero = 1
    return:
      type: System.MidpointRounding
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.MidpointRounding.ToEven
  commentId: F:System.MidpointRounding.ToEven
  id: ToEven
  parent: System.MidpointRounding
  langs:
  - csharp
  - vb
  name: ToEven
  fullName: System.MidpointRounding.ToEven
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/MidpointRounding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToEven
    path: src/mscorlib/src/System/MidpointRounding.cs
    startLine: 9
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When a number is halfway between two others, it is rounded toward the nearest even number.</p>\n"
  syntax:
    content: ToEven = 0
    return:
      type: System.MidpointRounding
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.MidpointRounding
  parent: System
  isExternal: false
  name: MidpointRounding
  fullName: System.MidpointRounding
