items:
- uid: System.Runtime.CompilerServices.IsUdtReturn
  commentId: T:System.Runtime.CompilerServices.IsUdtReturn
  id: IsUdtReturn
  parent: System.Runtime.CompilerServices
  children: []
  langs:
  - csharp
  - vb
  name: IsUdtReturn
  fullName: System.Runtime.CompilerServices.IsUdtReturn
  type: Class
  source:
    remote:
      path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsUdtReturn
    path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
    startLine: 56
  assemblies:
  - System.Runtime.CompilerServices.VisualC
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Indicates that a return type is a user-defined type. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.CompilerServices.IsUdtReturn\" data-throw-if-not-resolved=\"false\"></xref> modifier is used by the C++ compiler to mark return types of methods that have native C++ object return semantics.  The managed debugger recognizes this modifier to correctly determine that the native calling convention is in use.</p>\n<p>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  </p>\n<p>You can emit custom modifiers into metadata using one of the following techniques:</p>\n<ul><li>\n<p>Using methods in the <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> class such as <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineField\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineConstructor\"></see>, and <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineProperty\"></see>.</p>\n</li><li>\n<p>Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <strong>modopt</strong> and <strong>modreq</strong>, and assembling the file with the Ilasm.exe (IL Assembler).</p>\n</li><li>\n<p>Using the unmanaged reflection API.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example creates an assembly using classes in the <xref href=\"System.Reflection.Emit\" data-throw-if-not-resolved=\"false\"></xref> namespace and emits the <xref href=\"System.Runtime.CompilerServices.IsUdtReturn\" data-throw-if-not-resolved=\"false\"></xref> modifier into that assembly. </p>Runtime.CompilerServices.IsUdtReturn#1"
  syntax:
    content: 'public class IsUdtReturn : object'
    content.vb: >-
      Public Class IsUdtReturn
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
