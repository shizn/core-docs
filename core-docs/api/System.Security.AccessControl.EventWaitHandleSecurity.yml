items:
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  commentId: T:System.Security.AccessControl.EventWaitHandleSecurity
  id: EventWaitHandleSecurity
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  langs:
  - csharp
  - vb
  name: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
  type: Class
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventWaitHandleSecurity
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 23
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents the Windows access control security applied to a named system wait handle. This class cannot be inherited.</p>\n"
  remarks: "\n<p>An <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object specifies access rights for a named system wait handle, and also specifies the way access attempts are audited. Access rights to the wait handle are expressed as rules, with each access rule represented by an <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object. Each auditing rule is represented by an <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. An <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object might represent more than one ACE.</p>\n<p>An <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object can represent a local wait handle or a named system wait handle. Windows access control security is meaningful only for named system wait handles. </p>\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:</p>\n<ul><li>\n<p>Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object always starts with an empty DACL, which denies all access for all users.</p>\n</li><li>\n<p>Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> objects maintain the correct order internally. </p>\n</li><li>\n<p>Manipulating security descriptor flags, which should be under resource manager control only. </p>\n</li><li>\n<p>Creating invalid combinations of ACE flags.</p>\n</li><li>\n<p>Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules. </p>\n</li><li>\n<p>Inserting meaningless ACEs into ACLs.</p>\n</li></ul>\n<p>The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</p>\n<ul><li>\n<p>Low-level tasks that are normally performed by the resource manager.</p>\n</li><li>\n<p>Adding or removing access control entries in ways that do not maintain the canonical ordering. </p>\n</li></ul>\n<p>To modify Windows access control security for a named wait handle, use the <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. Modify the security object by adding and removing rules, and then use the <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to reattach it. </p>\n<p>Changes you make to an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object do not affect the access levels of the named wait handle until you call the <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to assign the altered security object to the named wait handle.</p>\n<p>To copy access control security from one wait handle to another, use the <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object representing the access and audit rules for the first wait handle, and then use the <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method, or a constructor that accepts an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, to assign those rules to the second wait handle.</p>\n<p>Users with an investment in the security descriptor definition language (SDDL) can use the <xref href=\"System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to set access rules for a named wait handle, and the <xref href=\"System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the separation between <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rules and <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> rules, and shows the combination of rights in compatible rules. The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in<xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1"
  syntax:
    content: 'public sealed class EventWaitHandleSecurity : NativeObjectSecurity'
    content.vb: >-
      Public NotInheritable Class EventWaitHandleSecurity
          Inherits NativeObjectSecurity
  seealso:
  - type: System.Security.AccessControl.EventWaitHandleAccessRule
    commentId: T:System.Security.AccessControl.EventWaitHandleAccessRule
  - type: System.Security.AccessControl.EventWaitHandleAuditRule
    commentId: T:System.Security.AccessControl.EventWaitHandleAuditRule
  - type: System.Security.AccessControl.EventWaitHandleRights
    commentId: T:System.Security.AccessControl.EventWaitHandleRights
  - type: System.Threading.EventWaitHandle.GetAccessControl
    commentId: M:System.Threading.EventWaitHandle.GetAccessControl
  - type: System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
    commentId: M:System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
  type: Constructor
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 26
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> class with default values.</p>\n"
  remarks: "\n<p>A new <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</p>\n"
  syntax:
    content: public EventWaitHandleSecurity()
    content.vb: Public Sub New
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This class is not supported on Windows 98 or Windows Millennium Edition.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  commentId: P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  type: Property
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRightType
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 27
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the enumeration type that the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent access rights.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AccessRightType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</p>\n"
  syntax:
    content: public override Type AccessRightType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRightType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the <xref href=\"System.Security.AccessControl.EventWaitHandleRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  commentId: P:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  type: Property
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleType
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 28
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type that the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent access rules.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AccessRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</p>\n"
  syntax:
    content: public override Type AccessRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  commentId: P:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  type: Property
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleType
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 29
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type that the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent audit rules.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AuditRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</p>\n"
  syntax:
    content: public override Type AuditRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AuditRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleFactory(Principal.IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleFactory
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 30
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n"
  remarks: "\n<p>The recommended way to create access control rules is to use the constructors of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Although inheritance and propagation flags are meaningless for named events, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</p>\n"
  syntax:
    content: public override AccessRule AccessRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public Overrides Function AccessRuleFactory(identityReference As Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType) As AccessRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> that identifies the user or group the rule applies to.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the access rights to allow or deny, cast to an integer.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>Meaningless for named wait handles, because they have no hierarchy.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>Meaningless for named wait handles, because they have no hierarchy.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Meaningless for named wait handles, because they have no hierarchy.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
    return:
      type: System.Security.AccessControl.AccessRule
      description: "\n<p>An <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object representing the specified rights for the specified user.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identityReference</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>accessMask</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identityReference</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAccessRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 31
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for a matching access control rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method searches for rules with the same user or group and the same <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> as <em>rule</em>. If none are found, <em>rule</em> is added. If a matching rule is found, the rights in <em>rule</em> are merged with the existing rule.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the separation between <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rules and <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> rules, and shows the combination of rights in compatible rules. The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1"
  syntax:
    content: public void AddAccessRule(EventWaitHandleAccessRule rule)
    content.vb: Public Sub AddAccessRule(rule As EventWaitHandleAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "\n<p>The access control rule to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAuditRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 32
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method searches for rules with the same user or group as <em>rule</em>. If none are found, <em>rule</em> is added. If a matching rule is found, the flags in <em>rule</em> are merged into the existing rule.</p>\n"
  syntax:
    content: public void AddAuditRule(EventWaitHandleAuditRule rule)
    content.vb: Public Sub AddAuditRule(rule As EventWaitHandleAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "\n<p>The audit rule to add. The user specified by this rule determines the search.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleFactory(Principal.IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleFactory
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 33
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule.</p>\n"
  remarks: "\n<p>The recommended way to create audit rules is to use the constructors of the <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Although inheritance and propagation flags are meaningless for named events, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible.</p>\n"
  example:
  - 
  syntax:
    content: public override AuditRule AuditRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)
    content.vb: Public Overrides Function AuditRuleFactory(identityReference As Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags) As AuditRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> that identifies the user or group the rule applies to.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the access rights to audit, cast to an integer.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>Meaningless for named wait handles, because they have no hierarchy.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>Meaningless for named wait handles, because they have no hierarchy.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Meaningless for named wait handles, because they have no hierarchy.</p>\n"
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether to audit successful access, failed access, or both.</p>\n"
    return:
      type: System.Security.AccessControl.AuditRule
      description: "\n<p>An <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object representing the specified audit rule for the specified user. The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref>, but the return value can be cast safely to the derived class.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>flags</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identityReference</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>accessMask</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identityReference</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 34
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an access control rule with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for a rule that has the same user and the same <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> value as <em>rule</em>. If no such rule is found, no action is taken, and the method returns <strong>false</strong>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <em>rule</em>. If no compatible rule is found, no action is taken, and the method returns <strong>false</strong>. If a rule with compatible flags is found, the rights specified in <em>rule</em> are removed from the compatible rule, and the method returns <strong>true</strong>. If <em>rule</em> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>Although you can specify inheritance and propagation flags for event access rules, by creating them with the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\" data-throw-if-not-resolved=\"false\"></xref> method, this is not recommended. Inheritance and propagation have no meaning for named events, and they make the maintenance of access rules more complicated.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove rights from an <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule in an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. It also shows that other rights in <em>rule</em> are ignored.</p>\n<p>The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Modify\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.AccessControl.EventWaitHandleRights.ReadPermissions\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref>. The example then creates a new rule for the current user, including <xref href=\"System.Security.AccessControl.EventWaitHandleRights.ReadPermissions\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.EventWaitHandleRights.TakeOwnership\" data-throw-if-not-resolved=\"false\"></xref> rights, and uses that rule with the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove <xref href=\"System.Security.AccessControl.EventWaitHandleRights.ReadPermissions\" data-throw-if-not-resolved=\"false\"></xref> from the <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule in the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Security.AccessControl.EventWaitHandleRights.TakeOwnership\" data-throw-if-not-resolved=\"false\"></xref> right in <em>rule</em> is ignored.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1"
  syntax:
    content: public bool RemoveAccessRule(EventWaitHandleAccessRule rule)
    content.vb: Public Function RemoveAccessRule(rule As EventWaitHandleAccessRule) As Boolean
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "\n<p>An <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a compatible rule is found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRuleAll
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 35
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> (allow or deny) as the specified rule and, if found, removes them.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for rules that have the same user and the same <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> value as <em>rule</em>. Any rights specified by <em>rule</em> are ignored when performing this search. All matching rules are removed. If no matching rules are found, no action is taken.</p>\n"
  example:
  - "\n<p>The following code example shows that the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes all rules that match user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref>, ignoring rights.</p>\n<p>The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule from the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1"
  syntax:
    content: public void RemoveAccessRuleAll(EventWaitHandleAccessRule rule)
    content.vb: Public Sub RemoveAccessRuleAll(rule As EventWaitHandleAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "\n<p>An <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> to search for. Any rights specified by this rule are ignored.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRuleSpecific
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 36
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</p>\n"
  remarks: "\n<p>The rule is removed only if it exactly matches <em>rule</em> in all details, including flags. Other rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> are not affected.</p>\n<p>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method cannot remove it. </p>\n"
  example:
  - "\n<p>The following code example shows that the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other. </p>\n<p>The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> access rule. The example then passes the original <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule to the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule in the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and successfully uses the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove the rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1"
  syntax:
    content: public void RemoveAccessRuleSpecific(EventWaitHandleAccessRule rule)
    content.vb: Public Sub RemoveAccessRuleSpecific(rule As EventWaitHandleAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> to remove.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 37
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an audit rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for an audit rule that has the same user as <em>rule</em>. If no such rule is found, no action is taken, and the method returns <strong>false</strong>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <em>rule</em>. If no compatible rule is found, no action is taken, and the method returns <strong>false</strong>. If a rule with compatible flags is found, the rights specified in <em>rule</em> are removed from the compatible rule, and the method returns <strong>true</strong>. If <em>rule</em> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>Although you can specify inheritance and propagation flags for event audit rules, by creating them with the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\" data-throw-if-not-resolved=\"false\"></xref> method, this is not recommended. Inheritance and propagation have no meaning for named events, and they make the maintenance of audit rules more complicated.</p>\n"
  syntax:
    content: public bool RemoveAuditRule(EventWaitHandleAuditRule rule)
    content.vb: Public Function RemoveAuditRule(rule As EventWaitHandleAuditRule) As Boolean
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "\n<p>An <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> that specifies the user to search for and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a compatible rule is found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleAll
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 38
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for audit rules that have the same user as <em>rule</em>. Any rights specified by <em>rule</em> are ignored when performing this search. All matching rules are removed. If no matching rules are found, no action is taken.</p>\n"
  syntax:
    content: public void RemoveAuditRuleAll(EventWaitHandleAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleAll(rule As EventWaitHandleAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "\n<p>An <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> that specifies the user to search for. Any rights specified by this rule are ignored.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleSpecific
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 39
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</p>\n"
  remarks: "\n<p>The rule is removed only if it exactly matches <em>rule</em> in all details, including flags. Other audit rules for the same user are not affected.</p>\n<p>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method cannot remove it. </p>\n"
  syntax:
    content: public void RemoveAuditRuleSpecific(EventWaitHandleAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleSpecific(rule As EventWaitHandleAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> to remove.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetAccessRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 40
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all access control rules with the same user as the specified rule, regardless of <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref>, and then adds the specified rule.</p>\n"
  remarks: "\n<p>If there are no access rules whose user matches the specified rule, <em>rule</em> is added.</p>\n"
  example:
  - "\n<p>The following code example shows how the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method replaces all rules for the matching user with the rule specified for the match.</p>\n<p>The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to replace both of the existing rules with the new rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1"
  syntax:
    content: public void ResetAccessRule(EventWaitHandleAccessRule rule)
    content.vb: Public Sub ResetAccessRule(rule As EventWaitHandleAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAccessRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 41
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> (allow or deny) as the specified rule, and then adds the specified rule.</p>\n"
  remarks: "\n<p>If the specified rule has <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref>, the effect of this method is to remove all <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref>, all <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> rules for the specified user are replaced with the specified rule.</p>\n<p>If there are no rules whose user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> match the specified rule, <em>rule</em> is added.</p>\n"
  example:
  - "\n<p>The following code example shows how the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes all rules that match both the user and the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> of <em>rule</em>, replacing them with <em>rule</em>.</p>\n<p>The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to replace the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule with the new rule. The rule that denies access is not affected.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1"
  syntax:
    content: public void SetAccessRule(EventWaitHandleAccessRule rule)
    content.vb: Public Sub SetAccessRule(rule As EventWaitHandleAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> to add. The user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> of this rule determine the rules to remove before this rule is added.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  commentId: M:System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  - vb
  name: SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  type: Method
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAuditRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.Manual.cs
    startLine: 42
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all audit rules with the same user as the specified rule, regardless of the <xref href=\"System.Security.AccessControl.AuditFlags\" data-throw-if-not-resolved=\"false\"></xref> value, and then adds the specified rule.</p>\n"
  remarks: "\n<p>If there are no audit rules whose user matches the specified rule, <em>rule</em> is added.</p>\n"
  syntax:
    content: public void SetAuditRule(EventWaitHandleAuditRule rule)
    content.vb: Public Sub SetAuditRule(rule As EventWaitHandleAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleAuditRule\" data-throw-if-not-resolved=\"false\"></xref> to add. The user specified by this rule determines the rules to remove before this rule is added.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAuditRule
  fullName: System.Security.AccessControl.EventWaitHandleAuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
