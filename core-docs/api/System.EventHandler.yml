items:
- uid: System.EventHandler
  commentId: T:System.EventHandler
  id: EventHandler
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: EventHandler
  fullName: System.EventHandler
  type: Delegate
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventHandler
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 834
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the method that will handle an event that has no event data.</p>\n"
  remarks: "\n<p>The event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: </p>\n<ul><li>\n<p>A delegate that identifies the method that provides the response to the event. </p>\n</li><li>\n<p>Optionally, a class that holds the event data, if the event provides data. </p>\n</li></ul>\n<p>The delegate is a type that defines a signature, that is, the return value type and parameter list types for a method. You can use the delegate type to declare a variable that can refer to any method with the same signature as the delegate. </p>\n<p>The standard signature of an event handler delegate defines a method that does not return a value. This method's first parameter is of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and refers to the instance that raises the event. Its second parameter is derived from type <xref href=\"System.EventArgs\" data-throw-if-not-resolved=\"false\"></xref> and holds the event data. If the event does not generate event data, the second parameter is simply the value of the <xref href=\"System.EventArgs.Empty\" data-throw-if-not-resolved=\"false\"></xref> field. Otherwise, the second parameter is a type derived from <xref href=\"System.EventArgs\" data-throw-if-not-resolved=\"false\"></xref> and supplies any fields or properties needed to hold the event data.</p>\n<p>The <xref href=\"System.EventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate is a predefined delegate that specifically represents an event handler method for an event that does not generate data. If your event does generate data, you must use the generic <xref href=\"System.EventHandler`1\" data-throw-if-not-resolved=\"false\"></xref> delegate class.</p>\n<p>To associate the event with the method that will handle the event, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. </p>\n<p>For more information about event handler delegates, see Handling and Raising Events.</p>\n"
  example:
  - "\n<p>The following example shows an event named <code>ThresholdReached</code> that is associated with an <xref href=\"System.EventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate. The method assigned to the <xref href=\"System.EventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate is called in the <code>OnThresholdReached</code> method.</p>EventsOverview#6"
  syntax:
    content: public delegate void EventHandler(object sender, EventArgs e);
    content.vb: Public Delegate Sub EventHandler(sender As Object, e As EventArgs)
    parameters:
    - id: sender
      type: System.Object
      description: "\n<p>The source of the event. </p>\n"
    - id: e
      type: System.EventArgs
      description: "\n<p>An object that contains no event data. </p>\n"
  seealso:
  - type: System.EventHandler`1
    commentId: T:System.EventHandler`1
  - type: System.EventArgs
    commentId: T:System.EventArgs
  - type: System.Delegate
    commentId: T:System.Delegate
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  fullName: System.EventArgs
