items:
- uid: System.Net.Sockets.SocketAsyncEventArgs
  commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  id: SocketAsyncEventArgs
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.SocketAsyncEventArgs.#ctor
  - System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  - System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - System.Net.Sockets.SocketAsyncEventArgs.BufferList
  - System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  - System.Net.Sockets.SocketAsyncEventArgs.Completed
  - System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  - System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  - System.Net.Sockets.SocketAsyncEventArgs.Count
  - System.Net.Sockets.SocketAsyncEventArgs.Dispose
  - System.Net.Sockets.SocketAsyncEventArgs.Finalize
  - System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  - System.Net.Sockets.SocketAsyncEventArgs.Offset
  - System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  - System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  - System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  - System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  - System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  - System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)
  - System.Net.Sockets.SocketAsyncEventArgs.SocketError
  - System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  - System.Net.Sockets.SocketAsyncEventArgs.UserToken
  langs:
  - csharp
  - vb
  name: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketAsyncEventArgs
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 243
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Represents an asynchronous socket operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class is part of a set of enhancements to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class that provide an alternative asynchronous pattern that can be used by specialized high-performance socket applications. This class was specifically designed for network server applications that require high performance. An application can use the enhanced asynchronous pattern exclusively or only in targeted hot areas (for example, when receiving large amounts of data).</p>\n<p>The main feature of these enhancements is the avoidance of the repeated allocation and synchronization of objects during high-volume asynchronous socket I/O. The Begin/End design pattern currently implemented by the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class requires a <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> object be allocated for each asynchronous socket operation. </p>\n<p>In the new <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class enhancements, asynchronous socket operations are described by reusable <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> objects allocated and maintained by the application. High-performance socket applications know best the amount of overlapped socket operations that must be sustained. The application can create as many of the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> objects that it needs. For example, if a server application needs to have 15 socket accept operations outstanding at all times to support incoming client connection rates, it can allocate 15 reusable <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> objects for that purpose. </p>\n<p>The pattern for performing an asynchronous socket operation with this class consists of the following steps:</p>\n<ol><li>\n<p>Allocate a new <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> context object, or get a free one from an application pool.</p>\n</li><li>\n<p>Set properties on the context object to the operation about to be performed (the completion callback method, the data buffer, the offset into the buffer, and the maximum amount of data to transfer, for example). </p>\n</li><li>\n<p>Call the appropriate socket method (xxxAsync) to initiate the asynchronous operation. </p>\n</li><li>\n<p>If the asynchronous socket method (xxxAsync) returns true, in the callback, query the context properties for completion status.</p>\n</li><li>\n<p>If the asynchronous socket method (xxxAsync) returns false, the operation completed synchronously. The context properties may be queried for the operation result.</p>\n</li><li>\n<p>Reuse the context for another operation, put it back in the pool, or discard it.</p>\n</li></ol>\n<p>The lifetime of the new asynchronous socket operation context object is determined by references by the application code and asynchronous I/O references. It is not necessary for the application to retain a reference to an asynchronous socket operation context object after it is submitted as a parameter to one of the asynchronous socket operation methods. It will remain referenced until the completion callback returns. However it is advantageous for the application to retain the reference to the context so that it can be reused for a future asynchronous socket operation.</p>\n"
  example:
  - "\n<p>The following code example implements the connection logic for the socket server that uses the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class. After accepting a connection, all data read from the client is sent back to the client. The read and echo back to the client pattern is continued until the client disconnects. The BufferManager class that is used by this example is displayed in the code example for the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The SocketAsyncEventArgsPool class that is used in this example is displayed in the code example for the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>NCLAsyncSocketServer#3"
  syntax:
    content: 'public class SocketAsyncEventArgs : EventArgs, IDisposable'
    content.vb: >-
      Public Class SocketAsyncEventArgs
          Inherits EventArgs
          Implements IDisposable
  seealso:
  - type: System.IAsyncResult
    commentId: T:System.IAsyncResult
  - type: System.Net.Sockets.Socket
    commentId: T:System.Net.Sockets.Socket
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  inheritance:
  - System.Object
  - System.EventArgs
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.SocketAsyncEventArgs.#ctor
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SocketAsyncEventArgs()
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketAsyncEventArgs()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 245
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Creates an empty <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>After calling this constructor all properties will have their default values:</p>\n<ul><li>\n<p>Object references will be null</p>\n</li><li>\n<p>Properties that return an integer will return zero.</p>\n</li><li>\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.LastOperation\" data-throw-if-not-resolved=\"false\"></xref> property will be equal to <xref href=\"System.Net.Sockets.SocketAsyncOperation.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags\" data-throw-if-not-resolved=\"false\"></xref> property will be equal to <xref href=\"System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread\" data-throw-if-not-resolved=\"false\"></xref>, which specifies no flags will be used.</p>\n</li><li>\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> property will be equal to <xref href=\"System.Net.Sockets.SocketAsyncOperation.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>The caller must set the appropriate properties prior to passing the object to the appropriate asynchronous socket (xxxAsync) method.</p>\n"
  example:
  - "\n<p>The following code example represents a collection of reusable <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>NCLAsyncSocketServer#2"
  syntax:
    content: public SocketAsyncEventArgs()
    content.vb: Public Sub New
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The platform is not supported. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  id: AcceptSocket
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: AcceptSocket
  fullName: System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptSocket
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 246
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the socket to use or the socket created for accepting a connection with an asynchronous socket method.</p>\n"
  remarks: "\n<p>This property can be used to provide an already created <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> that will be used for an asynchronous socket accept operation. Upon completion of the accept operation, it is the socket representing the accepted connection. If not supplied (set to null) before calling the <xref href=\"System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method, a new socket will be created automatically and be accessible in the completion callback with this property.</p>\n"
  example:
  - 
  syntax:
    content: public Socket AcceptSocket { get; set; }
    content.vb: Public Property AcceptSocket As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to use or the socket created for accepting a connection with an asynchronous socket method.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Buffer
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  id: Buffer
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Buffer
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Buffer
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Buffer
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 247
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the data buffer to use with an asynchronous socket method.</p>\n"
  remarks: "\n<p>This property gets the data buffer currently associated with the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance. To set the buffer, the <see cref=\"Overload:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer\"></see> method must be used.</p>\n<p>This property is used with the <xref href=\"System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  example:
  - 
  syntax:
    content: public byte[] Buffer { get; }
    content.vb: Public ReadOnly Property Buffer As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that represents the data buffer to use with an asynchronous socket method.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.BufferList
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BufferList
  id: BufferList
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: BufferList
  fullName: System.Net.Sockets.SocketAsyncEventArgs.BufferList
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BufferList
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 248
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets an array of data buffers to use with an asynchronous socket method.</p>\n"
  remarks: "\n<p>This property is used with the <xref href=\"System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n<p>This property is used to provide multiple buffers of data to be sent or to provide multiple buffers in which to store received data for an asynchronous socket operation that can send or receive data. Multiple buffers using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property are supported by the <xref href=\"System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>If the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property is set to a non-null value, the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property must be null and is ignored by the <xref href=\"System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n<p>If the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> was set to a non-null value and an attempt is made to set the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property to a non-null value, an exception is thrown.</p>\n<p>If the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property is set to a non-null value, the <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods will throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> parameter is ignored by the <xref href=\"System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  example:
  - 
  syntax:
    content: public IList<ArraySegment<byte>> BufferList { get; set; }
    content.vb: Public Property BufferList As IList(Of ArraySegment(Of Byte))
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> that represents an array of data buffers to use with an asynchronous socket method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There are ambiguous buffers specified on a set operation. This exception occurs if the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property has been set to a non-null value and an attempt was made to set the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property to a non-null value.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  id: BytesTransferred
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: BytesTransferred
  fullName: System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BytesTransferred
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 249
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the number of bytes transferred in the socket operation.</p>\n"
  remarks: "\n<p>This property provides the number of bytes transferred in an asynchronous socket operation that can receive or send data. If zero is returned from a read operation, the remote end has closed the connection.</p>\n<p>This property is set by all asynchronous socket operations except the <xref href=\"System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public int BytesTransferred { get; }
    content.vb: Public ReadOnly Property BytesTransferred As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the number of bytes transferred in the socket operation.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  id: ConnectByNameError
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: ConnectByNameError
  fullName: System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectByNameError
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 250
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the exception in the case of a connection failure when a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> was used.</p>\n"
  remarks: "\n<p>In the case of a connection failure when a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> was specified for the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property, the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError\" data-throw-if-not-resolved=\"false\"></xref> property will contain the exception that indicates the detailed cause of the socket error. </p>\n<p>When an <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> was specified for the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property and a connection failure occurs, the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError\" data-throw-if-not-resolved=\"false\"></xref> property will be a <strong>null</strong> reference. </p>\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.SocketError\" data-throw-if-not-resolved=\"false\"></xref> property is always set in the case of a connection failure. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError\" data-throw-if-not-resolved=\"false\"></xref> property contains more information about the failure if it was a failure connecting to a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>. If an application is only interested in whether the connect operation succeeded or failed, then the application only needs to check the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.SocketError\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public Exception ConnectByNameError { get; }
    content.vb: Public ReadOnly Property ConnectByNameError As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>An <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> that indicates the cause of the connection error when a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> was specified for the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  id: ConnectSocket
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: ConnectSocket
  fullName: System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectSocket
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 251
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>The created and connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object after successful completion of the <see cref=\"Overload:System.Net.Sockets.Socket.ConnectAsync\"></see> method.</p>\n"
  remarks: "\n<p>After successful completion of the <see cref=\"Overload:System.Net.Sockets.Socket.ConnectAsync\"></see> method, this property contains the newly created and connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public Socket ConnectSocket { get; }
    content.vb: Public ReadOnly Property ConnectSocket As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>The connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.Count
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  id: Count
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Count
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 252
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the maximum amount of data, in bytes, to send or receive in an asynchronous operation.</p>\n"
  remarks: "\n<p>This property is set by calling the <see cref=\"Overload:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer\"></see> method. </p>\n<p>This property is used with the <xref href=\"System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n"
  example:
  - 
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the maximum amount of data, in bytes, to send or receive.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  id: LastOperation
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: LastOperation
  fullName: System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOperation
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 253
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the type of socket operation most recently performed with this context object.</p>\n"
  remarks: "\n<p>This property describes the asynchronous socket operation that was most recently completed using this <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object. The value of this property will be <xref href=\"System.Net.Sockets.SocketAsyncOperation.None\" data-throw-if-not-resolved=\"false\"></xref> until the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance is used to begin an asynchronous socket operation. The property will then be set to the type of operation being performed in the methods that take the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> as a parameter. This property more easily facilitates using a single completion callback delegate for multiple kinds of asynchronous socket operations.</p>\n<p>This property remains valid in a <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance until the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance is used for another asynchronous socket (xxxAsync) operation.</p>\n<p>This property is set by all asynchronous socket (xxxAsync) methods.</p>\n<p>Calling an asynchronous socket method (xxxAsync) on the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class sets this property value. This property is intended for use with the SocketAsyncCallback completion routine implemented by the application.</p>\n"
  example:
  - 
  syntax:
    content: public SocketAsyncOperation LastOperation { get; }
    content.vb: Public ReadOnly Property LastOperation As SocketAsyncOperation
    parameters: []
    return:
      type: System.Net.Sockets.SocketAsyncOperation
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketAsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> instance that indicates the type of socket operation most recently performed with this context object.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.SocketAsyncOperation
    commentId: T:System.Net.Sockets.SocketAsyncOperation
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.Offset
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  id: Offset
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Offset
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Offset
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Offset
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 254
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the offset, in bytes, into the data buffer referenced by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>This property describes the starting byte offset of data in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property. This value is set by calling the <see cref=\"Overload:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer\"></see> method.</p>\n<p>This property does not apply to the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>This property is used with the <xref href=\"System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n"
  example:
  - 
  syntax:
    content: public int Offset { get; }
    content.vb: Public ReadOnly Property Offset As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the offset, in bytes, into the data buffer referenced by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  id: ReceiveMessageFromPacketInfo
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: ReceiveMessageFromPacketInfo
  fullName: System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveMessageFromPacketInfo
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 255
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the IP address and interface of a received packet.</p>\n"
  remarks: "\n<p>This property provides information about a packet received using the <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This property is used with the <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public IPPacketInformation ReceiveMessageFromPacketInfo { get; }
    content.vb: Public ReadOnly Property ReceiveMessageFromPacketInfo As IPPacketInformation
    parameters: []
    return:
      type: System.Net.Sockets.IPPacketInformation
      description: "\n<p>An <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the destination IP address and interface of a received packet.</p>\n"
  seealso:
  - type: System.Net.IPAddress
    commentId: T:System.Net.IPAddress
  - type: System.Net.Sockets.IPPacketInformation
    commentId: T:System.Net.Sockets.IPPacketInformation
  - type: System.Net.Sockets.IPPacketInformation.Address
    commentId: P:System.Net.Sockets.IPPacketInformation.Address
  - type: System.Net.Sockets.IPPacketInformation.Interface
    commentId: P:System.Net.Sockets.IPPacketInformation.Interface
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  fullName: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoteEndPoint
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 256
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the remote IP endpoint for an asynchronous operation.</p>\n"
  remarks: "\n<p>This property specifies the remote endpoint. This property can specify the remote endpoint to which to connect using the <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method. This property can specify the remote endpoint to which to send data using <xref href=\"System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method. This property can specify the remote endpoint from which data was received using the <xref href=\"System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>This remote endpoint specified by this property can include an IPv4 or IPv6 address. </p>\n<p>This property is used with the <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  example:
  - 
  syntax:
    content: public EndPoint RemoteEndPoint { get; set; }
    content.vb: Public Property RemoteEndPoint As EndPoint
    parameters: []
    return:
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the remote IP endpoint for an asynchronous operation.</p>\n"
  seealso:
  - type: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  id: SendPacketsElements
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SendPacketsElements
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPacketsElements
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 257
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets an array of buffers to be sent for an asynchronous operation used by the <xref href=\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>The array of buffers can represent a file or files in memory or a set of memory data buffers. This property is used with the <xref href=\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public SendPacketsElement[] SendPacketsElements { get; set; }
    content.vb: Public Property SendPacketsElements As SendPacketsElement()
    parameters: []
    return:
      type: System.Net.Sockets.SendPacketsElement[]
      description: "\n<p>An array of <xref href=\"System.Net.Sockets.SendPacketsElement\" data-throw-if-not-resolved=\"false\"></xref> objects that represent an array of buffers to be sent.</p>\n"
  seealso:
  - type: System.Net.Sockets.SendPacketsElement
    commentId: T:System.Net.Sockets.SendPacketsElement
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  id: SendPacketsSendSize
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SendPacketsSendSize
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPacketsSendSize
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 258
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the size, in bytes, of the data block used in the send operation.</p>\n"
  remarks: "\n<p>Set this property to zero to let the sockets layer select a default send size. Setting this property to 0xFFFFFFFF enables the caller to control the size and content of each send request, achieved by using the <xref href=\"System.Net.Sockets.SendPacketsElement.EndOfPacket\" data-throw-if-not-resolved=\"false\"></xref> property. This capability is useful for message protocols that place limitations on the size of individual send requests.</p>\n"
  example:
  - 
  syntax:
    content: public int SendPacketsSendSize { get; set; }
    content.vb: Public Property SendPacketsSendSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the size, in bytes, of the data block used in the send operation.</p>\n"
  seealso:
  - type: System.Net.Sockets.SendPacketsElement.EndOfPacket
    commentId: P:System.Net.Sockets.SendPacketsElement.EndOfPacket
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SocketError
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SocketError
  id: SocketError
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SocketError
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketError
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketError
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 259
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the result of the asynchronous socket operation.</p>\n"
  remarks: "\n<p>This property provides the completion status of an asynchronous socket operation. A value of <xref href=\"System.Net.Sockets.SocketError.Success\" data-throw-if-not-resolved=\"false\"></xref> indicates successful completion of an operation. This property is primarily used in an application’s event handler routine.</p>\n<p>This property is used with all of the asynchronous socket (xxxAsync) methods. </p>\n"
  example:
  - 
  syntax:
    content: public SocketError SocketError { get; set; }
    content.vb: Public Property SocketError As SocketError
    parameters: []
    return:
      type: System.Net.Sockets.SocketError
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketError\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous socket operation.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.SocketError
    commentId: T:System.Net.Sockets.SocketError
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  id: SocketFlags
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SocketFlags
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketFlags
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 260
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the results of an asynchronous socket operation or sets the behavior of an asynchronous operation.</p>\n"
  remarks: "\n<p>The property specifies the bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> to be used for an asynchronous socket operation.</p>\n<p>This property is used with the <xref href=\"System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  example:
  - 
  syntax:
    content: public SocketFlags SocketFlags { get; set; }
    content.vb: Public Property SocketFlags As SocketFlags
    parameters: []
    return:
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> that represents the results of an asynchronous socket operation.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.UserToken
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  id: UserToken
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: UserToken
  fullName: System.Net.Sockets.SocketAsyncEventArgs.UserToken
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserToken
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 261
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a user or application object associated with this asynchronous socket operation.</p>\n"
  remarks: "\n<p>This property can be used by an application to associate an application state object with the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object. Primarily, this property is a way for an application to pass state to the application’s event handler (for example, the asynchronous operation completion method).</p>\n<p>This property is used with all of the asynchronous socket (xxxAsync) methods.</p>\n"
  example:
  - 
  syntax:
    content: public object UserToken { get; set; }
    content.vb: Public Property UserToken As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that represents the user or application object associated with this asynchronous socket operation.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Completed
  commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  id: Completed
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Completed
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Completed
  type: Event
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Completed
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 262
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>The event used to complete an asynchronous operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event provides a way for client applications to complete an asynchronous socket operation. An event handler should be attached to the event within a <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance when an asynchronous socket operation is initiated, otherwise the application will not be able to determine when the operation completes. </p>\n<p>The completion callback delegates referenced by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event contains program logic to finish processing the asynchronous socket operation for the client.</p>\n<p>When the event is signaled, the application uses the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object parameter to obtain the status of the completed asynchronous socket operation.</p>\n"
  example:
  - 
  syntax:
    content: public event EventHandler<SocketAsyncEventArgs> Completed
    content.vb: Public Event Completed As EventHandler(Of SocketAsyncEventArgs)
    return:
      type: System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Dispose
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.Dispose
  id: Dispose
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 263
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance and optionally disposes of the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - 
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  seealso:
  - type: System.Object.Finalize
    commentId: M:System.Object.Finalize
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Finalize
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.Finalize
  id: Finalize
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Finalize()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 264
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Frees resources used by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class finalizer closes the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> and free resources associated with the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  id: OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: OnCompleted(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnCompleted
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 265
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Represents a method that is called when an asynchronous operation completes.</p>\n"
  remarks: "\n<p>This method is not callable by user code. This method gets called by the internals of the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object when the current operation is complete. This method is used with all asynchronous socket (xxxAsync) methods.</p>\n<p>An application that creates a class inheriting from <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> can override this method to hook into this completion notification and clean up any resources that it allocated for the operation. The default implementation just raises the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>This method is used to hook up an event handler to be used as the completion callback for a subsequent asynchronous socket operation. The caller must implement at least one callback delegate inherited from this method prior to starting an asynchronous socket operation using one of the asynchronous (xxxAsync) methods on the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The caller's <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method provides a way for client applications to complete an asynchronous socket operation. A callback delegate must be implemented when an asynchronous socket operation is initiated. The completion callback delegate(s) inherited from the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method must contain program logic to finish processing the asynchronous socket operation for the client.</p>\n<p>When an asynchronous operation is signaled, the application uses the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object parameter to obtain status of the completed asynchronous socket operation. </p>\n"
  example:
  - 
  syntax:
    content: protected virtual void OnCompleted(SocketAsyncEventArgs e)
    content.vb: Protected Overridable Sub OnCompleted(e As SocketAsyncEventArgs)
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The event that is signaled.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  id: SetBuffer(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SetBuffer(Byte[], Int32, Int32)
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetBuffer
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 266
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the data buffer to use with an asynchronous socket method.</p>\n"
  remarks: "\n<p>The <em>offset</em> and <em>count</em> parameters can't be negative numbers. The combination of the <em>offset</em> and <em>count</em> parameters must be in bounds of the data array in the <em>buffer</em> parameter.</p>\n<p>This method sets the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property to the <em>buffer</em> parameter, the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Count\" data-throw-if-not-resolved=\"false\"></xref> property to the <em>count</em> parameter, and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Offset\" data-throw-if-not-resolved=\"false\"></xref> property to the <em>offset</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example creates a single large buffer which can be divided up and assigned to <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> objects for use with each socket I/O operation. This enables buffers to be easily reused and guards against fragmenting heap memory.</p>NCLAsyncSocketServer#1"
  syntax:
    content: public void SetBuffer(byte[] buffer, int offset, int count)
    content.vb: Public Sub SetBuffer(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The data buffer to use with an asynchronous socket method.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There are ambiguous buffers specified. This exception occurs if the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property is also not null and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property is also not null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>An argument was out of range. This exception occurs if the <em>offset</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property. This exception also occurs if the <em>count</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property minus the <em>offset</em> parameter.</p>\n"
  seealso:
  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - type: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - type: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte(), System.Int32, System.Int32)
  name.vb: SetBuffer(Byte(), Int32, Int32)
- uid: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)
  id: SetBuffer(System.Int32,System.Int32)
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SetBuffer(Int32, Int32)
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetBuffer
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 267
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the data buffer to use with an asynchronous socket method.</p>\n"
  remarks: "\n<p>The <em>offset</em> and <em>count</em> parameters can't be negative numbers. The combination of the <em>offset</em> and <em>count</em> parameters must be in bounds of the buffer array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>This method sets the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Count\" data-throw-if-not-resolved=\"false\"></xref> property to the <em>count</em> parameter and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Offset\" data-throw-if-not-resolved=\"false\"></xref> property to the <em>offset</em> parameter. If the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property is null, this method ignores the <em>offset</em> and <em>count</em> parameters and sets the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Offset\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Count\" data-throw-if-not-resolved=\"false\"></xref> properties to 0.</p>\n<p>This method does not change the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - 
  syntax:
    content: public void SetBuffer(int offset, int count)
    content.vb: Public Sub SetBuffer(offset As Integer, count As Integer)
    parameters:
    - id: offset
      type: System.Int32
      description: "\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>An argument was out of range. This exception occurs if the <em>offset</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property. This exception also occurs if the <em>count</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property minus the <em>offset</em> parameter.</p>\n"
  seealso:
  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - type: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - type: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  fullName: System.EventArgs
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  fullname.vb: System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte))
  name.vb: IList(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Net.Sockets.SocketAsyncOperation
  parent: System.Net.Sockets
  isExternal: false
  name: SocketAsyncOperation
  fullName: System.Net.Sockets.SocketAsyncOperation
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Net.Sockets.SendPacketsElement[]
  isExternal: false
  name: SendPacketsElement[]
  fullName: System.Net.Sockets.SendPacketsElement[]
  fullname.vb: System.Net.Sockets.SendPacketsElement()
  name.vb: SendPacketsElement()
  spec.csharp:
  - uid: System.Net.Sockets.SendPacketsElement
    name: SendPacketsElement
    fullName: System.Net.Sockets.SendPacketsElement
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.Sockets.SendPacketsElement
    name: SendPacketsElement
    fullName: System.Net.Sockets.SendPacketsElement
  - name: ()
    fullName: ()
- uid: System.Net.Sockets.SocketError
  parent: System.Net.Sockets
  isExternal: false
  name: SocketError
  fullName: System.Net.Sockets.SocketError
- uid: System.Net.Sockets.SocketFlags
  parent: System.Net.Sockets
  isExternal: false
  name: SocketFlags
  fullName: System.Net.Sockets.SocketFlags
- uid: System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<SocketAsyncEventArgs>
  fullName: System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>
  fullname.vb: System.EventHandler(Of System.Net.Sockets.SocketAsyncEventArgs)
  name.vb: EventHandler(Of SocketAsyncEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.SocketAsyncEventArgs
    name: SocketAsyncEventArgs
    fullName: System.Net.Sockets.SocketAsyncEventArgs
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.SocketAsyncEventArgs
    name: SocketAsyncEventArgs
    fullName: System.Net.Sockets.SocketAsyncEventArgs
  - name: )
    fullName: )
- uid: System.EventHandler`1
  parent: System
  isExternal: false
  name: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
  - name: <
    fullName: <
  - name: TEventArgs
    fullName: TEventArgs
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
  - name: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    fullName: TEventArgs
  - name: )
    fullName: )
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.Sockets.SocketAsyncEventArgs
  parent: System.Net.Sockets
  isExternal: false
  name: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
