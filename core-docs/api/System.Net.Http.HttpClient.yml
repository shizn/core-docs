items:
- uid: System.Net.Http.HttpClient
  commentId: T:System.Net.Http.HttpClient
  id: HttpClient
  parent: System.Net.Http
  children:
  - System.Net.Http.HttpClient.#ctor
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  - System.Net.Http.HttpClient.BaseAddress
  - System.Net.Http.HttpClient.CancelPendingRequests
  - System.Net.Http.HttpClient.DefaultRequestHeaders
  - System.Net.Http.HttpClient.DeleteAsync(System.String)
  - System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Dispose(System.Boolean)
  - System.Net.Http.HttpClient.GetAsync(System.String)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStreamAsync(System.String)
  - System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStringAsync(System.String)
  - System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  - System.Net.Http.HttpClient.MaxResponseContentBufferSize
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Timeout
  langs:
  - csharp
  - vb
  name: HttpClient
  fullName: System.Net.Http.HttpClient
  type: Class
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HttpClient
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 35
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> class instance acts as a session to send HTTP requests. An <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance is a collection of settings applied to all requests executed by that instance. In addition, every <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance uses its own connection pool, isolating its requests from requests executed by other <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n<p>The <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> also acts as a base class for more specific HTTP clients. An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</p>\n<p>By default, <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> will be used to send requests to the server. This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref href=\"System.Net.Http.HttpMessageHandler\" data-throw-if-not-resolved=\"false\"></xref> instance as parameter. If features like authentication or caching are required, <xref href=\"System.Net.Http.WebRequestHandler\" data-throw-if-not-resolved=\"false\"></xref> can be used to configure settings and the instance can be passed to the constructor. The returned handler can be passed to one of the constructor overloads taking a <xref href=\"System.Net.Http.HttpMessageHandler\" data-throw-if-not-resolved=\"false\"></xref> parameter. </p>\n<p>If an app using <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> and related classes in the  <xref href=\"System.Net.Http\" data-throw-if-not-resolved=\"false\"></xref> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering. If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</p>\n<p>The following methods are thread safe:</p>\n<ol><li>\n<p>\n<xref href=\"System.Net.Http.HttpClient.CancelPendingRequests\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.DeleteAsync\"></see>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.GetAsync\"></see>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.GetByteArrayAsync\"></see>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.GetStreamAsync\"></see>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.GetStringAsync\"></see>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.PostAsync\"></see>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.PutAsync\"></see>\n</p>\n</li><li>\n<p>\n<see cref=\"Overload:System.Net.Http.HttpClient.SendAsync\"></see>\n</p>\n</li></ol>\n"
  example:
  - System.Net.Http.HttpClient#1
  syntax:
    content: 'public class HttpClient : HttpMessageInvoker, IDisposable'
    content.vb: >-
      Public Class HttpClient
          Inherits HttpMessageInvoker
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageInvoker
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Net.Http.HttpMessageInvoker.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Http.HttpClient.#ctor
  commentId: M:System.Net.Http.HttpClient.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 37
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public HttpClient()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  commentId: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(System.Net.Http.HttpMessageHandler)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 38
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> class with a specific handler.</p>\n"
  remarks: "\n<p>If <strong>null</strong> is specified for <em>handler</em>  parameter, the <xref href=\"System.Net.Http.WebRequestHandler\" data-throw-if-not-resolved=\"false\"></xref> is used as transport handler.</p>\n"
  syntax:
    content: public HttpClient(HttpMessageHandler handler)
    content.vb: Public Sub New(handler As HttpMessageHandler)
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "\n<p>The HTTP handler stack to use for sending requests. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  commentId: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: HttpClient(HttpMessageHandler, Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(System.Net.Http.HttpMessageHandler, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 39
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> class with a specific handler.</p>\n"
  syntax:
    content: public HttpClient(HttpMessageHandler handler, bool disposeHandler)
    content.vb: Public Sub New(handler As HttpMessageHandler, disposeHandler As Boolean)
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "\n<p>The <xref href=\"System.Net.Http.HttpMessageHandler\" data-throw-if-not-resolved=\"false\"></xref> responsible for processing the HTTP response messages.</p>\n"
    - id: disposeHandler
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the inner handler should be disposed of by Dispose(),<strong>false</strong> if you intend to reuse the inner handler.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.BaseAddress
  commentId: P:System.Net.Http.HttpClient.BaseAddress
  id: BaseAddress
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseAddress
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 40
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</p>\n"
  remarks: "\n<p>When sending a <xref href=\"System.Net.Http.HttpRequestMessage\" data-throw-if-not-resolved=\"false\"></xref> with a relative Uri, the message Uri will be added to the <xref href=\"System.Net.Http.HttpClient.BaseAddress\" data-throw-if-not-resolved=\"false\"></xref> property to create an absolute Uri.</p>\n"
  syntax:
    content: public Uri BaseAddress { get; set; }
    content.vb: Public Property BaseAddress As Uri
    parameters: []
    return:
      type: System.Uri
      description: "\n<p>Returns <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  commentId: P:System.Net.Http.HttpClient.DefaultRequestHeaders
  id: DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultRequestHeaders
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 41
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets the headers which should be sent with each request.</p>\n"
  remarks: "\n<p>Headers set on this property don't need to be set on request messages again.</p>\n"
  syntax:
    content: public HttpRequestHeaders DefaultRequestHeaders { get; }
    content.vb: Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders
    parameters: []
    return:
      type: System.Net.Http.Headers.HttpRequestHeaders
      description: "\n<p>Returns <xref href=\"System.Net.Http.Headers.HttpRequestHeaders\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The headers which should be sent with each request.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  commentId: P:System.Net.Http.HttpClient.MaxResponseContentBufferSize
  id: MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxResponseContentBufferSize
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 42
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the maximum number of bytes to buffer when reading the response content.</p>\n"
  remarks: "\n<p>An app can set the <xref href=\"System.Net.Http.HttpClient.MaxResponseContentBufferSize\" data-throw-if-not-resolved=\"false\"></xref> property to a lower value to limit the size of the response to buffer when reading the response. If the size of the response content is greater than the  <xref href=\"System.Net.Http.HttpClient.MaxResponseContentBufferSize\" data-throw-if-not-resolved=\"false\"></xref> property, an exception is thrown.</p>\n"
  syntax:
    content: public long MaxResponseContentBufferSize { get; set; }
    content.vb: Public Property MaxResponseContentBufferSize As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The maximum number of bytes to buffer when reading the response content. The default value for this property is 2 gigabytes.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The size specified is less than or equal to zero.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An operation has already been started on the current instance. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has been disposed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.Timeout
  commentId: P:System.Net.Http.HttpClient.Timeout
  id: Timeout
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: Timeout
  fullName: System.Net.Http.HttpClient.Timeout
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Timeout
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 43
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the timespan to wait before the request times out.</p>\n"
  remarks: "\n<p>The default value is 100,000 milliseconds (100 seconds). </p>\n<p>To set an infinite timeout, set the property value to <xref href=\"System.Threading.Timeout.InfiniteTimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref href=\"System.Net.Http.HttpClient.Timeout\" data-throw-if-not-resolved=\"false\"></xref> to a value less than 15 seconds, it may take 15 seconds or more before a <xref href=\"System.Net.WebException\" data-throw-if-not-resolved=\"false\"></xref> is thrown to indicate a timeout on your request.</p>\n<p>The same timeout will apply for all requests using this <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.  You may also set different timeouts for individual requests using a <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> on a task. Note that only the shorter of the two timeouts will apply.</p>\n"
  syntax:
    content: public TimeSpan Timeout { get; set; }
    content.vb: Public Property Timeout As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>Returns <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The timespan to wait before the request times out.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The timeout specified is less than or equal to zero and is not <xref href=\"System.Threading.Timeout.InfiniteTimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An operation has already been started on the current instance. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  commentId: M:System.Net.Http.HttpClient.CancelPendingRequests
  id: CancelPendingRequests
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelPendingRequests
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 44
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Cancel all pending requests on this instance.</p>\n"
  remarks: "\n<p>After calling this method, the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref>instance can still be used to execute additional requests.</p>\n"
  syntax:
    content: public void CancelPendingRequests()
    content.vb: Public Sub CancelPendingRequests
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 45
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a DELETE request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(string requestUri)
    content.vb: Public Function DeleteAsync(requestUri As String) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  id: DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 46
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(string requestUri, CancellationToken cancellationToken)
    content.vb: Public Function DeleteAsync(requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  id: DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 47
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a DELETE request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(Uri requestUri)
    content.vb: Public Function DeleteAsync(requestUri As Uri) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  id: DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: DeleteAsync(Uri, CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 48
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(Uri requestUri, CancellationToken cancellationToken)
    content.vb: Public Function DeleteAsync(requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  commentId: M:System.Net.Http.HttpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 49
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> and optionally disposes of the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n<p>When this method is called, the <xref href=\"System.Net.Http.HttpClient.CancelPendingRequests\" data-throw-if-not-resolved=\"false\"></xref> method is called to abort all pending requests.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\n"
  overridden: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 50
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri)
    content.vb: Public Function GetAsync(requestUri As String) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(String, HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Net.Http.HttpCompletionOption)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 51
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete based on the <em>completionOption</em> parameter after the part or all of the response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption)
    content.vb: Public Function GetAsync(requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "\n<p>An HTTP completion option value that indicates when the operation should be considered completed.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(String, HttpCompletionOption, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 52
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete based on the <em>completionOption</em> parameter after the part or all of the response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(String, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 53
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri)
  id: GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 54
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri)
    content.vb: Public Function GetAsync(requestUri As Uri) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(Uri, HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Net.Http.HttpCompletionOption)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 55
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete based on the <em>completionOption</em> parameter after the part or all of the response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption)
    content.vb: Public Function GetAsync(requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(Uri, HttpCompletionOption, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 56
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete based on the <em>completionOption</em> parameter after the part or all of the response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetAsync(Uri, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 57
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  commentId: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  id: GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByteArrayAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 58
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response body is read. </p>\n"
  syntax:
    content: public Task<byte[]> GetByteArrayAsync(string requestUri)
    content.vb: Public Function GetByteArrayAsync(requestUri As String) As Task(Of Byte())
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  commentId: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  id: GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByteArrayAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 59
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response body is read.</p>\n"
  syntax:
    content: public Task<byte[]> GetByteArrayAsync(Uri requestUri)
    content.vb: Public Function GetByteArrayAsync(requestUri As Uri) As Task(Of Byte())
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  commentId: M:System.Net.Http.HttpClient.GetStreamAsync(System.String)
  id: GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStreamAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 60
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response body is read. This method does not buffer the stream.</p>\n"
  syntax:
    content: public Task<Stream> GetStreamAsync(string requestUri)
    content.vb: Public Function GetStreamAsync(requestUri As String) As Task(Of Stream)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  commentId: M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  id: GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStreamAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 61
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response body is read. This method does not buffer the stream.</p>\n"
  syntax:
    content: public Task<Stream> GetStreamAsync(Uri requestUri)
    content.vb: Public Function GetStreamAsync(requestUri As Uri) As Task(Of Stream)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  commentId: M:System.Net.Http.HttpClient.GetStringAsync(System.String)
  id: GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStringAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 62
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response body is read.</p>\n"
  syntax:
    content: public Task<string> GetStringAsync(string requestUri)
    content.vb: Public Function GetStringAsync(requestUri As String) As Task(Of String)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  commentId: M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  id: GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStringAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 63
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response body is read.</p>\n"
  syntax:
    content: public Task<string> GetStringAsync(Uri requestUri)
    content.vb: Public Function GetStringAsync(requestUri As Uri) As Task(Of String)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  commentId: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  id: PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PostAsync(String, HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(System.String, System.Net.Http.HttpContent)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 64
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a POST request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content)
    content.vb: Public Function PostAsync(requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PostAsync(String, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 65
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a POST request with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PostAsync(requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  commentId: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PostAsync(Uri, HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(System.Uri, System.Net.Http.HttpContent)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 66
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a POST request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content)
    content.vb: Public Function PostAsync(requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PostAsync(Uri, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 67
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a POST request with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PostAsync(requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  commentId: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  id: PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PutAsync(String, HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(System.String, System.Net.Http.HttpContent)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PutAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 68
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a PUT request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content)
    content.vb: Public Function PutAsync(requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PutAsync(String, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PutAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 69
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a PUT request with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PutAsync(requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  commentId: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PutAsync(Uri, HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(System.Uri, System.Net.Http.HttpContent)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PutAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 70
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a PUT request to the specified Uri as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content)
    content.vb: Public Function PutAsync(requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: PutAsync(Uri, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PutAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 71
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send a PUT request with a cancellation token as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete after the whole response (including content) is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PutAsync(requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: "\n<p>The Uri the request is sent to.</p>\n"
    - id: content
      type: System.Net.Http.HttpContent
      description: "\n<p>The HTTP request content sent to the server.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  id: SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 72
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send an HTTP request as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete once the entire response including content is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request)
    content.vb: Public Function SendAsync(request As HttpRequestMessage) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "\n<p>The HTTP request message to send.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>request</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 73
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send an HTTP request as an asynchronous operation. </p>\n"
  remarks: "\n<p>This operation will not block. Depending on the value of the <em>completionOption</em> parameter, the returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete as soon as a response is available or the entire response including content is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption)
    content.vb: Public Function SendAsync(request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "\n<p>The HTTP request message to send.</p>\n"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "\n<p>When the operation should complete (as soon as a response is available or after reading the whole response content).</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>request</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 74
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send an HTTP request as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. Depending on the value of the <em>completionOption</em> parameter, the returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete as soon as a response is available or the entire response including content is read.</p>\n"
  syntax:
    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken)
    content.vb: Public Function SendAsync(request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "\n<p>The HTTP request message to send.</p>\n"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "\n<p>When the operation should complete (as soon as a response is available or after reading the whole response content).</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to cancel operation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>request</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 75
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Send an HTTP request as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object will complete once the entire response including content is read.</p>\n"
  syntax:
    content: public override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    content.vb: Public Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "\n<p>The HTTP request message to send.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to cancel operation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  overridden: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>request</em> was <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Net.Http
  isExternal: false
  name: System.Net.Http
  fullName: System.Net.Http
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.Http.HttpMessageInvoker
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageInvoker
  fullName: System.Net.Http.HttpMessageInvoker
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Net.Http.HttpMessageInvoker.Dispose
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: Dispose()
  fullName: System.Net.Http.HttpMessageInvoker.Dispose()
  spec.csharp:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  fullName: System.Uri
- uid: System.Net.Http.Headers.HttpRequestHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpRequestHeaders
  fullName: System.Net.Http.Headers.HttpRequestHeaders
- uid: System.Net.Http.Headers
  isExternal: false
  name: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.Http.HttpCompletionOption
  parent: System.Net.Http
  isExternal: false
  name: HttpCompletionOption
  fullName: System.Net.Http.HttpCompletionOption
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  fullname.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.Http.HttpContent
  parent: System.Net.Http
  isExternal: false
  name: HttpContent
  fullName: System.Net.Http.HttpContent
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: true
  name: SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.HttpMessageInvoker.SendAsync
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.HttpMessageInvoker.SendAsync
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Net.Http.HttpRequestException
  isExternal: false
  name: HttpRequestException
  fullName: System.Net.Http.HttpRequestException
