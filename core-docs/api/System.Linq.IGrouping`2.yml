items:
- uid: System.Linq.IGrouping`2
  commentId: T:System.Linq.IGrouping`2
  id: IGrouping`2
  parent: System.Linq
  children:
  - System.Linq.IGrouping`2.Key
  langs:
  - csharp
  - vb
  name: IGrouping<TKey, TElement>
  fullName: System.Linq.IGrouping<TKey, TElement>
  type: Interface
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IGrouping
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 190
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Represents a collection of objects that have a common key.</p>\n"
  remarks: "\n<p>An <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> is an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that additionally has a key. The key represents the attribute that is common to each value in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The values of an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> are accessed much as the elements of an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> are accessed. For example, you can access the values by using a <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic loop to iterate through the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object. The Example section contains a code example that shows you how to access both the key and the values of an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> type is used by the <see cref=\"Overload:System.Linq.Enumerable.GroupBy\"></see> standard query operator methods, which return a sequence of elements of type <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to work with an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>In this example, <xref href=\"System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> is called on the array of <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> objects returned by <xref href=\"System.Type.GetMembers\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> groups the objects based on the value of their <xref href=\"System.Reflection.MemberInfo.MemberType\" data-throw-if-not-resolved=\"false\"></xref> property. Each unique value for <xref href=\"System.Reflection.MemberInfo.MemberType\" data-throw-if-not-resolved=\"false\"></xref> in the array of <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> objects becomes a key for a new <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object, and the <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that have that key form the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object's sequence of values.</p>\n<p>Finally, the <xref href=\"System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method is called on the sequence of <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects to obtain just the first <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The example then outputs the key of the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object and the <xref href=\"System.Reflection.MemberInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property of each value in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object's sequence of values. Notice that to access an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object's sequence of values, you simply use the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> variable itself.</p>System.Linq.IGrouping#1"
  syntax:
    content: 'public interface IGrouping<out TKey, out TElement> : IEnumerable<TElement>, IEnumerable'
    content.vb: >-
      Public Interface IGrouping(Of Out TKey, Out TElement)
          Inherits IEnumerable(Of TElement), IEnumerable
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the key of the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the values in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{{TElement}}.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement)
  name.vb: IGrouping(Of TKey, TElement)
- uid: System.Linq.IGrouping`2.Key
  commentId: P:System.Linq.IGrouping`2.Key
  id: Key
  parent: System.Linq.IGrouping`2
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Linq.IGrouping<TKey, TElement>.Key
  type: Property
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 192
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Gets the key of the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The key of an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> represents the attribute that is common to each value in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Linq.IGrouping`2.Key\" data-throw-if-not-resolved=\"false\"></xref> property to label each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object in a sequence of <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects. The <xref href=\"System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> method is used to obtain a sequence of <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> objects. The <strong>foreach</strong> in Visual C# or <strong>For Each</strong> in Visual Basic loop then iterates through each <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref> object, outputting its key and the number of values it contains.</p>System.Linq.IGrouping#2"
  syntax:
    content: TKey Key { get; }
    content.vb: ReadOnly Property Key As TKey
    parameters: []
    return:
      type: '{TKey}'
      description: "\n<p>The key of the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement).Key
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Collections.Generic.IEnumerable{{TElement}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TElement}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TElement>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TElement>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TElement).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
