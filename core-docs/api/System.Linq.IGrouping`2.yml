items:
- uid: System.Linq.IGrouping`2
  commentId: T:System.Linq.IGrouping`2
  id: IGrouping`2
  parent: System.Linq
  children:
  - System.Linq.IGrouping`2.Key
  langs:
  - csharp
  - vb
  name: IGrouping<TKey, TElement>
  fullName: System.Linq.IGrouping<TKey, TElement>
  type: Interface
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Grouping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IGrouping
    path: src/System.Linq/src/System/Linq/Grouping.cs
    startLine: 52
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: 'public interface IGrouping<out TKey, out TElement> : IEnumerable<TElement>'
    content.vb: >-
      Public Interface IGrouping(Of Out TKey, Out TElement)
          Inherits IEnumerable(Of TElement)
    typeParameters:
    - id: TKey
    - id: TElement
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement)
  name.vb: IGrouping(Of TKey, TElement)
- uid: System.Linq.IGrouping`2.Key
  commentId: P:System.Linq.IGrouping`2.Key
  id: Key
  parent: System.Linq.IGrouping`2
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Linq.IGrouping<TKey, TElement>.Key
  type: Property
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Grouping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Linq/src/System/Linq/Grouping.cs
    startLine: 54
  assemblies:
  - System.Linq
  namespace: System.Linq
  syntax:
    content: TKey Key { get; }
    content.vb: ReadOnly Property Key As TKey
    parameters: []
    return:
      type: '{TKey}'
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement).Key
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
