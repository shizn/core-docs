items:
- uid: System.Reflection.CustomAttributeNamedArgument
  commentId: T:System.Reflection.CustomAttributeNamedArgument
  id: CustomAttributeNamedArgument
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeNamedArgument.IsField
  - System.Reflection.CustomAttributeNamedArgument.MemberName
  - System.Reflection.CustomAttributeNamedArgument.TypedValue
  langs:
  - csharp
  - vb
  name: CustomAttributeNamedArgument
  fullName: System.Reflection.CustomAttributeNamedArgument
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributeNamedArgument
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 584
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents a named argument of a custom attribute in the reflection-only context.</p>\n"
  remarks: "\n<p>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <see cref=\"Overload:System.Attribute.GetCustomAttributes\"></see>, <see cref=\"Overload:System.Reflection.MemberInfo.GetCustomAttributes\"></see>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure is used by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class to provide access to a named argument specified for a custom attribute instance, without executing the code of the corresponding property of the custom attribute type. The <xref href=\"System.Reflection.CustomAttributeNamedArgument.TypedValue\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the type and value of the named argument.</p>\n<p>Whether an argument is named or positional, you must access its type and value by using the <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n<p>To create instances of the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class, use the <strong>static</strong><see cref=\"Overload:System.Reflection.CustomAttributeData.GetCustomAttributes\"></see> factory method.</p>\n"
  example:
  - "\n<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.</p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains. </p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>CustomAttributeData#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public struct CustomAttributeNamedArgument
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Structure CustomAttributeNamedArgument
  seealso:
  - type: System.Reflection.CustomAttributeData
    commentId: T:System.Reflection.CustomAttributeData
  - type: System.Reflection.CustomAttributeTypedArgument
    commentId: T:System.Reflection.CustomAttributeTypedArgument
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Reflection.CustomAttributeNamedArgument.IsField
  commentId: P:System.Reflection.CustomAttributeNamedArgument.IsField
  id: IsField
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  - vb
  name: IsField
  fullName: System.Reflection.CustomAttributeNamedArgument.IsField
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsField
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 669
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value that indicates whether the named argument is a field.</p>\n"
  syntax:
    content: public bool IsField { get; }
    content.vb: Public ReadOnly Property IsField As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.CustomAttributeNamedArgument.MemberName
  commentId: P:System.Reflection.CustomAttributeNamedArgument.MemberName
  id: MemberName
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  - vb
  name: MemberName
  fullName: System.Reflection.CustomAttributeNamedArgument.MemberName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberName
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 668
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the name of the attribute member that would be used to set the named argument.</p>\n"
  syntax:
    content: public string MemberName { get; }
    content.vb: Public ReadOnly Property MemberName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.CustomAttributeNamedArgument.TypedValue
  commentId: P:System.Reflection.CustomAttributeNamedArgument.TypedValue
  id: TypedValue
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  - vb
  name: TypedValue
  fullName: System.Reflection.CustomAttributeNamedArgument.TypedValue
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TypedValue
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 667
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure that can be used to obtain the type and value of the current named argument.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure only contains information about how the argument value was set. Use this property to obtain a <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the type and value.</p>\n"
  example:
  - "\n<p>The following code example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.</p>\n<p>The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.</p>\n<p>The attribute that is applied to the type demonstrates array properties, with both positional and named arguments. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeNamedArgument.TypedValue\" data-throw-if-not-resolved=\"false\"></xref> property is used in the <code>ShowAttributeData</code> method that displays custom attribute data, to obtain the types and values of named attributes. </p>CustomAttributeData#1"
  syntax:
    content: public CustomAttributeTypedArgument TypedValue { get; }
    content.vb: Public ReadOnly Property TypedValue As CustomAttributeTypedArgument
    parameters: []
    return:
      type: System.Reflection.CustomAttributeTypedArgument
  seealso:
  - type: System.Reflection.CustomAttributeData
    commentId: T:System.Reflection.CustomAttributeData
  - type: System.Reflection.CustomAttributeTypedArgument
    commentId: T:System.Reflection.CustomAttributeTypedArgument
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
