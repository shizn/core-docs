items:
- uid: System.Xml.XmlWriterSettings
  commentId: T:System.Xml.XmlWriterSettings
  id: XmlWriterSettings
  parent: System.Xml
  children:
  - System.Xml.XmlWriterSettings.#ctor
  - System.Xml.XmlWriterSettings.Async
  - System.Xml.XmlWriterSettings.CheckCharacters
  - System.Xml.XmlWriterSettings.Clone
  - System.Xml.XmlWriterSettings.CloseOutput
  - System.Xml.XmlWriterSettings.ConformanceLevel
  - System.Xml.XmlWriterSettings.Encoding
  - System.Xml.XmlWriterSettings.Indent
  - System.Xml.XmlWriterSettings.IndentChars
  - System.Xml.XmlWriterSettings.NamespaceHandling
  - System.Xml.XmlWriterSettings.NewLineChars
  - System.Xml.XmlWriterSettings.NewLineHandling
  - System.Xml.XmlWriterSettings.NewLineOnAttributes
  - System.Xml.XmlWriterSettings.OmitXmlDeclaration
  - System.Xml.XmlWriterSettings.Reset
  - System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  langs:
  - csharp
  - vb
  name: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlWriterSettings
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 475
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Specifies a set of features to support on the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object created by the <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method is the preferred mechanism for obtaining <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances. The <see cref=\"Overload:System.Xml.XmlWriter.Create\"></see> method uses the <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> class to specify which features to implement in the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that is created.</p>\n<p>If you're using the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)\" data-throw-if-not-resolved=\"false\"></xref> method, you should use the <xref href=\"System.Xml.Xsl.XslCompiledTransform.OutputSettings\" data-throw-if-not-resolved=\"false\"></xref> property to obtain an <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings. This ensures that the created <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object has the correct output settings.</p>\n<p>The <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> class provides properties that control data conformance and output format.</p>\n<p>For data conformance checks and auto-corrections, use these properties:</p>\n<p>Property</p>\n<p>Specifies</p>\n<p>Value</p>\n<p>Default</p>\n<p></p>\n<p>To specify output format, use these properties:</p>\n<p>Property</p>\n<p>Specifies</p>\n<p>Value</p>\n<p>Default</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> that writes to an XML file and writes each attribute on a new line.</p>XmlWriterSettings.NewLineOnAttributes#1<p>The sample produces the following output:</p><pre><code><order\norderID=\"367A54\"\ndate=\"2001-05-03\">\n<price>19.95</price>\n</order></code></pre>"
  syntax:
    content: public sealed class XmlWriterSettings
    content.vb: Public NotInheritable Class XmlWriterSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.XmlWriterSettings.#ctor
  commentId: M:System.Xml.XmlWriterSettings.#ctor
  id: '#ctor'
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: XmlWriterSettings()
  fullName: System.Xml.XmlWriterSettings.XmlWriterSettings()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 477
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property</p>\n<p>Initial Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CloseOutput\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>Encoding.UTF8</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Two spaces.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<code>\\r\\n</code> (carriage return, new line).</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>.</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that uses the TAB character for indentation.</p>XmlWriterSettings.Indent#1"
  syntax:
    content: public XmlWriterSettings()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Async
  commentId: P:System.Xml.XmlWriterSettings.Async
  id: Async
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Async
  fullName: System.Xml.XmlWriterSettings.Async
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 478
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether asynchronous <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> methods can be used on a particular <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>You must set this value to <strong>true</strong> when you create a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance if you want to use asynchronous <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> methods on that instance. After the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance is created, the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> property is read-only. The default value of this property is <strong>false</strong>.</p>\n<p>This flag is ignored by the <xref href=\"System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)\" data-throw-if-not-resolved=\"false\"></xref> overload. This means that if you create a new <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> based on an existing <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>, the async behavior depends on the input <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>, and you cannot use the <xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to change the async behavior.</p>\n"
  syntax:
    content: public bool Async { get; set; }
    content.vb: Public Property Async As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if asynchronous methods can be used; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.CheckCharacters
  commentId: P:System.Xml.XmlWriterSettings.CheckCharacters
  id: CheckCharacters
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: CheckCharacters
  fullName: System.Xml.XmlWriterSettings.CheckCharacters
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CheckCharacters
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 479
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether the XML writer should check to ensure that all characters in the document conform to the \"2.2 Characters\" section of the W3C <see href=\"http://www.w3.org/TR/REC-xml/#charsets\">XML 1.0 Recommendation</see>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object supports character checking, it throws an exception if any characters are outside the range of legal XML characters specified by the \"2.2 Characters\" section of the W3C <see href=\"http://www.w3.org/TR/REC-xml/#charsets\">XML 1.0 Recommendation</see>.</p>\n<p>Character checking does not include checking for illegal characters in XML names or checking that all XML names are valid. These checks are part of conformance checking and are always performed.</p>\n"
  example:
  - 
  syntax:
    content: public bool CheckCharacters { get; set; }
    content.vb: Public Property CheckCharacters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to do character checking; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.CloseOutput
  commentId: P:System.Xml.XmlWriterSettings.CloseOutput
  id: CloseOutput
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: CloseOutput
  fullName: System.Xml.XmlWriterSettings.CloseOutput
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseOutput
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 480
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> should also close the underlying stream or <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> when the <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  remarks: "\n<p>This setting is useful when you wish to write XML to a stream, and then add extra information to the end of the stream after the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> has finished writing.</p>\n<p>This property only applies to <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances that output XML content to a stream or <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, this setting is ignored.</p>\n"
  example:
  - "\n<p>The following example writes an XML fragment to a memory stream.</p>XmlWriterSettings.CloseOutput#1"
  syntax:
    content: public bool CloseOutput { get; set; }
    content.vb: Public Property CloseOutput As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to also close the underlying stream or <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.ConformanceLevel
  commentId: P:System.Xml.XmlWriterSettings.ConformanceLevel
  id: ConformanceLevel
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: ConformanceLevel
  fullName: System.Xml.XmlWriterSettings.ConformanceLevel
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConformanceLevel
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 481
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the level of conformance that the XML writer checks the XML output for.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref> property configures the XML writer to check and guarantee that the stream being written complies with a certain set of rules. The XML data can be checked to see that it conforms to the rules for a well-formed XML 1.0 document or a document fragment. The following table describes the three settings. The default is document-level conformance.</p>\n<p>Setting</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Ensures that the XML output conforms to the <see href=\"http://www.w3.org/TR/REC-xml/#sec-well-formed\">rules for a well-formed XML 1.0 document</see> and can be processed by any conforming processor.</p>\n<p>The document conformance checks include most of the fragment-level checks and also ensure the following:</p>\n<ul><li>\n<p>The top-level item doesn't have any nodes other than XML Declaration, DTD, element, comment, white space, or processing instruction.</p>\n</li><li>\n<p>The XML data has one and only one top-level element node.</p>\n</li></ul>\n<p>The XML writer doesn't parse DTD information that is written. The user is responsible for ensuring that the DTD is well-formed.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Fragment\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Ensures that the XML output conforms to the <see href=\"http://www.w3.org/TR/REC-xml/#wf-entities\">rules for a well-formed XML 1.0 document fragment</see>. </p>\n<p>This setting accepts XML data that has multiple root elements or text nodes at the top level. This level of checking ensures that any processor can consume the stream being read as an XML 1.0 external parsed entity.</p>\n<p>DTD information isn't allowed in document fragments.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Auto\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies that the XML writer should determine the level of conformance checking based on the incoming data. This setting can be useful when you don't know whether the generated XML will be a well-formed XML document or a fragment.</p>\n<p>Document conformance checking is applied in the following cases:</p>\n<ul><li>\n<p>If the <xref href=\"System.Xml.XmlWriter.WriteStartDocument\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n</li><li>\n<p>If DTD information is written.</p>\n</li></ul>\n<p>Fragment conformance checking is applied if the XML data contains one of these:</p>\n<ul><li>\n<p>Text, CDATA, or EntityReference node at the root level.</p>\n</li><li>\n<p>More than one element at the root level.</p>\n</li><li>\n<p>No element at the root level.</p>\n</li></ul>\n<p>An <xref href=\"System.Xml.XmlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown if there is a conflict, such as when you try to write a text node and a DTD at the root level.</p>\n<p>If you are wrapping another <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object, the outer object doesn't do any additional conformance checking; this is left to the underlying object.</p>\n</td></tr></tbody></table>\n<p>If the XML writer detects any information that would violate the specified level of conformance, it throws an exception. In some cases, the XML writer automatically corrects the conformance error. For example, the writer closes an unclosed attribute without throwing an exception. The following table shows how various conformance violations are handled in each setting.</p>\n<p>Condition</p>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Fragment\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Auto\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n"
  example:
  - "\n<p>The following example writes an XML fragment to a memory stream.</p>XmlWriterSettings.CloseOutput#1"
  syntax:
    content: public ConformanceLevel ConformanceLevel { get; set; }
    content.vb: Public Property ConformanceLevel As ConformanceLevel
    parameters: []
    return:
      type: System.Xml.ConformanceLevel
      description: "\n<p>One of the enumeration values that specifies the level of conformance (document, fragment, or automatic detection). The default is <xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Encoding
  commentId: P:System.Xml.XmlWriterSettings.Encoding
  id: Encoding
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Encoding
  fullName: System.Xml.XmlWriterSettings.Encoding
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Encoding
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 482
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the type of text encoding to use.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> encodes a buffer of characters all at once, rather than character by character. An exception is thrown when the <xref href=\"System.Xml.XmlWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref> method is called if any encoding errors are encountered.</p>\n<p>The <xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref> property only applies to the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances that are created either with the specified <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> or with the specified file name. If the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance is created with the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref> property is overridden by the encoding of the underlying <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>. For example, if this property is set to Unicode (UTF-16) for a particular <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>, but the underlying writer is a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> (which derives from <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>) with its encoding set to UTF8, the output will be UTF-8 encoded.</p>\n<p>If the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance is created with other output parameters, the <xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref> property is ignored.</p>\n<p>In the following example: </p>\n<ul><li>\n<p>The default value of <xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref> is <strong>Encoding.UTF8</strong>.</p>\n</li><li>\n<p>The <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>Encoding.Unicode</strong> and the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref>’s encoding overrides the <xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref> setting.</p>\n</li><li>\n<p>The output will be <strong>Encoding.Unicode</strong>.</p>\n</li></ul>\n<pre><code class=\"c#\">using (StreamWriter output =\nnew StreamWriter(new FileStream(\"Xml01.xml\", FileMode.Create), Encoding.Unicode))\n{\nusing (XmlWriter xmlWriter =\nXmlWriter.Create(output, new XmlWriterSettings()))\n{\nxmlWriter.WriteStartDocument();\nxmlWriter.WriteStartElement(\"Root\");\nxmlWriter.WriteEndElement();\nxmlWriter.WriteEndDocument();\n}\n}</code></pre>\n<p>Do not accept an <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object from an untrusted source.</p>\n"
  example:
  - "\n<p>The following example writes an XML fragment to a memory stream.</p>XmlWriterSettings.CloseOutput#1"
  syntax:
    content: public Encoding Encoding { get; set; }
    content.vb: Public Property Encoding As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>The text encoding to use. The default is <strong>Encoding.UTF8</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Indent
  commentId: P:System.Xml.XmlWriterSettings.Indent
  id: Indent
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Indent
  fullName: System.Xml.XmlWriterSettings.Indent
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Indent
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 483
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to indent elements.</p>\n"
  remarks: "\n<p>This property only applies to <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances that output text content; otherwise, this setting is ignored.</p>\n<p>The elements are indented as long as the element does not contain mixed content. Once the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.XmlWriter.WriteWhitespace(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is called to write out a mixed element content, the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> stops indenting. The indenting resumes once the mixed content element is closed.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that uses the TAB character for indentation.</p>XmlWriterSettings.Indent#1"
  syntax:
    content: public bool Indent { get; set; }
    content.vb: Public Property Indent As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to write individual elements on new lines and indent; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.IndentChars
  commentId: P:System.Xml.XmlWriterSettings.IndentChars
  id: IndentChars
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: IndentChars
  fullName: System.Xml.XmlWriterSettings.IndentChars
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndentChars
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 484
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the character string to use when indenting. This setting is used when the <xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong>.</p>\n"
  remarks: "\n<p>This property only applies to <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances that output text content; otherwise, this setting is ignored. The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> throws an exception if the indent characters would result in invalid XML.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object that uses the TAB character for indentation.</p>XmlWriterSettings.Indent#1"
  syntax:
    content: public string IndentChars { get; set; }
    content.vb: Public Property IndentChars As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value assigned to the <xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NamespaceHandling
  commentId: P:System.Xml.XmlWriterSettings.NamespaceHandling
  id: NamespaceHandling
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NamespaceHandling
  fullName: System.Xml.XmlWriterSettings.NamespaceHandling
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamespaceHandling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 485
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.</p>\n"
  example:
  - 
  syntax:
    content: public NamespaceHandling NamespaceHandling { get; set; }
    content.vb: Public Property NamespaceHandling As NamespaceHandling
    parameters: []
    return:
      type: System.Xml.NamespaceHandling
      description: "\n<p>The <xref href=\"System.Xml.NamespaceHandling\" data-throw-if-not-resolved=\"false\"></xref> enumeration used to specify whether to remove duplicate namespace declarations in the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NewLineChars
  commentId: P:System.Xml.XmlWriterSettings.NewLineChars
  id: NewLineChars
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NewLineChars
  fullName: System.Xml.XmlWriterSettings.NewLineChars
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewLineChars
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 486
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the character string to use for line breaks.</p>\n"
  remarks: "\n<p>This property only applies to <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances that output text content; otherwise, this setting is ignored. The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> throws an exception if the line break characters would result in invalid XML.</p>\n"
  example:
  - 
  syntax:
    content: public string NewLineChars { get; set; }
    content.vb: Public Property NewLineChars As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is <code>\\r\\n</code> (carriage return, new line).</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value assigned to the <xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NewLineHandling
  commentId: P:System.Xml.XmlWriterSettings.NewLineHandling
  id: NewLineHandling
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NewLineHandling
  fullName: System.Xml.XmlWriterSettings.NewLineHandling
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewLineHandling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 487
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to normalize line breaks in the output.</p>\n"
  remarks: "\n<p>This setting applies when writing text content or attribute values. Each of the <xref href=\"System.Xml.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref> values is described below:</p>\n<ul><li>\n<p>The <xref href=\"System.Xml.NewLineHandling.Entitize\" data-throw-if-not-resolved=\"false\"></xref> setting tells the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> to replace new line characters that would not be otherwise preserved by a normalizing <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> with character entities. This is useful in round-trip scenarios where the output is read by a normalizing <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. Additional normalization rules apply for attribute values when round tripping since <code>\\t</code>, <code>\\n</code> and <code>\\r</code> are replaced with a space in attribute values when normalized in an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>The <xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref> setting tells the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> to replace new line characters with <code>\\r\\n</code>, which is the new line format used by the Microsoft Windows operating system. This helps to ensure that the file can be correctly displayed by the Notepad or Microsoft Word applications. This setting also replaces new lines in attributes with character entities to preserve the characters. This is the default value.</p>\n</li><li>\n<p>The <xref href=\"System.Xml.NewLineHandling.None\" data-throw-if-not-resolved=\"false\"></xref> setting tells the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> to leave the input unchanged. This setting is used when you not want any new-line processing. This is useful when the output is read by an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that does not do any normalization (for example, an <xref href=\"System.Xml.XmlTextReader\" data-throw-if-not-resolved=\"false\"></xref> with default settings.)</p>\n</li></ul>\n<p>The following tables show the output of the <xref href=\"System.Xml.XmlWriter.WriteString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method when supplied with the input value depending on the <xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref> property setting. The tables show the output when writing text content and also when writing an attribute value.</p>\n<p>\n<strong>Text Node Value:</strong>\n</p>\n<p></p>\n<p>\\r\\n</p>\n<p>\\n</p>\n<p>\\r</p>\n<p>\\t</p>\n<p>\n<strong>Attribute Value:</strong>\n</p>\n<p></p>\n<p>\\r\\n</p>\n<p>\\n</p>\n<p>\\r</p>\n<p>\\t</p>\n<p>The <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> has the following behavior when writing content within a CDATA section, comment, or processing instruction. New lines are never replaced with their character entities, even when the <xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Xml.NewLineHandling.Entitize\" data-throw-if-not-resolved=\"false\"></xref>. This is because character entities are not recognized in CDATA sections, comments or processing instructions. If the <xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Xml.NewLineHandling.None\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>, the behavior is the same as when writing a text node value.</p>\n<p>The following table describes what a normalizing <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> returns for each white space input. For more information, see sections 2.11 and 3.3.3 of the W3C <see href=\"http://www.w3.org/TR/REC-xml/\">XML 1.0 Recommendation</see>.</p>\n<p>A normalizing reader is any <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method. These objects always perform line break normalization and full normalization of attributes. The <xref href=\"System.Xml.XmlTextReader\" data-throw-if-not-resolved=\"false\"></xref> object can also be a normalizing reader if it's <xref href=\"System.Xml.XmlTextReader.Normalization\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong>.</p>\n<p></p>\n<p>\\r\\n</p>\n<p>\\n</p>\n<p>\\r</p>\n<p>\\t</p>\n"
  example:
  - 
  syntax:
    content: public NewLineHandling NewLineHandling { get; set; }
    content.vb: Public Property NewLineHandling As NewLineHandling
    parameters: []
    return:
      type: System.Xml.NewLineHandling
      description: "\n<p>One of the <xref href=\"System.Xml.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref> values. The default is <xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NewLineOnAttributes
  commentId: P:System.Xml.XmlWriterSettings.NewLineOnAttributes
  id: NewLineOnAttributes
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NewLineOnAttributes
  fullName: System.Xml.XmlWriterSettings.NewLineOnAttributes
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewLineOnAttributes
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 488
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to write attributes on a new line.</p>\n"
  remarks: "\n<p>This property only applies to <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances that output text content; otherwise, this setting is ignored.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> that writes to an XML file and writes each attribute on a new line.</p>XmlWriterSettings.NewLineOnAttributes#1<p>The sample produces the following output:</p><pre><code><order\norderID=\"367A54\"\ndate=\"2001-05-03\">\n<price>19.95</price>\n</order></code></pre>"
  syntax:
    content: public bool NewLineOnAttributes { get; set; }
    content.vb: Public Property NewLineOnAttributes As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to write attributes on individual lines; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n<p>This setting has no effect when the <xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref> property value is <strong>false</strong>.</p>\n<p>When <xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong>, each attribute is pre-pended with a new line and one extra level of indentation.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.OmitXmlDeclaration
  commentId: P:System.Xml.XmlWriterSettings.OmitXmlDeclaration
  id: OmitXmlDeclaration
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: OmitXmlDeclaration
  fullName: System.Xml.XmlWriterSettings.OmitXmlDeclaration
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OmitXmlDeclaration
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 489
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to omit an XML declaration.</p>\n"
  remarks: "\n<p>This property only applies to <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instances that output text content; otherwise, this setting is ignored.</p>\n<p>If <xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>false</strong>, The XML declaration is written automatically </p>\n<p>The XML declaration is always written if <xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>, even if <xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong>.</p>\n<p>The XML declaration is never written if <xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Xml.ConformanceLevel.Fragment\" data-throw-if-not-resolved=\"false\"></xref>. You can call <xref href=\"System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> to explicitly write out an XML declaration.</p>\n"
  example:
  - "\n<p>The following example writes an XML fragment to a memory stream.</p>XmlWriterSettings.CloseOutput#1"
  syntax:
    content: public bool OmitXmlDeclaration { get; set; }
    content.vb: Public Property OmitXmlDeclaration As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to omit the XML declaration; otherwise, <strong>false</strong>. The default is <strong>false</strong>, an XML declaration is written.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  commentId: P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  id: WriteEndDocumentOnClose
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: WriteEndDocumentOnClose
  fullName: System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndDocumentOnClose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 490
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> will add closing tags to all unclosed element tags when the <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  remarks: "\n<p>If you set this flag to <strong>false</strong>, the output XML file may not be well-formed.</p>\n"
  syntax:
    content: public bool WriteEndDocumentOnClose { get; set; }
    content.vb: Public Property WriteEndDocumentOnClose As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if all unclosed element tags will be closed out; otherwise, <strong>false</strong>. The default value is <strong>true</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Clone
  commentId: M:System.Xml.XmlWriterSettings.Clone
  id: Clone
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Xml.XmlWriterSettings.Clone()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 491
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a copy of the <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The cloned <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object can be modified without affecting the settings on the original object.</p>\n"
  example:
  - 
  syntax:
    content: public XmlWriterSettings Clone()
    content.vb: Public Function Clone As XmlWriterSettings
    return:
      type: System.Xml.XmlWriterSettings
      description: "\n<p>The cloned <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Reset
  commentId: M:System.Xml.XmlWriterSettings.Reset
  id: Reset
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Xml.XmlWriterSettings.Reset()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 492
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Resets the members of the settings class to their default values.</p>\n"
  remarks: "\n<p>The following table shows the default property values for an instance of <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property</p>\n<p>Initial value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Async\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CheckCharacters\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.CloseOutput\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.ConformanceLevel\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Encoding\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>Encoding.UTF8</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Two spaces.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<code>\\r\\n</code>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.OmitXmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>.</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Xml.ConformanceLevel
  parent: System.Xml
  isExternal: false
  name: ConformanceLevel
  fullName: System.Xml.ConformanceLevel
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Xml.NamespaceHandling
  parent: System.Xml
  isExternal: false
  name: NamespaceHandling
  fullName: System.Xml.NamespaceHandling
- uid: System.Xml.NewLineHandling
  parent: System.Xml
  isExternal: false
  name: NewLineHandling
  fullName: System.Xml.NewLineHandling
- uid: System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: false
  name: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
