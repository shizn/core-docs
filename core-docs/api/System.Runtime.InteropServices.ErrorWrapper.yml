items:
- uid: System.Runtime.InteropServices.ErrorWrapper
  commentId: T:System.Runtime.InteropServices.ErrorWrapper
  id: ErrorWrapper
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)
  - System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)
  - System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)
  - System.Runtime.InteropServices.ErrorWrapper.ErrorCode
  langs:
  - csharp
  - vb
  name: ErrorWrapper
  fullName: System.Runtime.InteropServices.ErrorWrapper
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ErrorWrapper
    path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
    startLine: 18
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Wraps objects the marshaler should marshal as a <strong>VT_ERROR</strong>.</p>\n"
  remarks: "\n<p>By default, <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> type arguments are marshaled as a <strong>VARIANT</strong> type, where the object type determines the <strong>VARTYPE</strong> value of the <strong>VARIANT</strong>.</p>\n<p>The <xref href=\"System.Runtime.InteropServices.ErrorWrapper\" data-throw-if-not-resolved=\"false\"></xref> type must to be passed as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> type to be marshaled as a <strong>VARIANT</strong> of type <strong>VT_ERROR</strong>, otherwise the <xref href=\"System.Runtime.InteropServices.ErrorWrapper\" data-throw-if-not-resolved=\"false\"></xref> type is marshaled as an integer.</p>\n<p>The following table illustrates marshaling in a managed call to a native function, using platform invoke.</p>\n<p>Managed signature parameter</p>\n<p>pArr value</p>\n<p>Marshaled as</p>\n<p>The following table illustrates marshaling data in a managed call to a native function, using COM runtime callable wrappers (RCW).</p>\n<p>Managed signature parameter</p>\n<p>pArr value</p>\n<p>Marshaled as</p>\n<p>Note that <xref href=\"System.Runtime.InteropServices.ErrorWrapper\" data-throw-if-not-resolved=\"false\"></xref> objects are not marshaled as type <strong>VT_ERROR</strong> after they are passed back from COM.  A single value is marshaled back from COM as type <strong>VT_I4</strong>, while arrays are marshaled back from COM as type <strong>VT_UI4</strong>.  </p>\n<p>For more information on <strong>VT_ERROR</strong>, please see the existing documentation for <strong>VARENUM::VT_ERROR</strong> in the MSDN library.</p>\n"
  example:
  - "\n<p>The following code example first demonstrates a lone <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> object marshaled back from COM as an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> object. It then demonstrates an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> array marshaled back from COM as a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n<pre><code>// Scenario 1:\n// Pass a single value.\nInt32 x = 3;\nObject o = new ErrorWrapper(x);\n// Pass 'o' to COM.\n// On the return trip, 'o' has been unwrapped and is still an Int32 object.\nInt32 y = (Int32)o;\nScenario 2:\n// Pass an array of values.\nInt32[] arr = new Int32[3];\nObject o = new ErrorWrapper(arr);\n// Pass 'o' to COM.\n// On the return trip, 'o' has been unwrapped and is now a UInt32[] array.\nUInt32[ ] arr2 = (UInt32[])o;</code></pre>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class ErrorWrapper
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class ErrorWrapper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ErrorWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)
  commentId: M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)
  id: '#ctor(System.Exception)'
  parent: System.Runtime.InteropServices.ErrorWrapper
  langs:
  - csharp
  - vb
  name: ErrorWrapper(Exception)
  fullName: System.Runtime.InteropServices.ErrorWrapper.ErrorWrapper(System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
    startLine: 34
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.ErrorWrapper\" data-throw-if-not-resolved=\"false\"></xref> class with the HRESULT that corresponds to the exception supplied.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]

      public ErrorWrapper(Exception e)
    content.vb: >-
      <SecuritySafeCritical>

      <SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.UnmanagedCode)>

      Public Sub New(e As Exception)
    parameters:
    - id: e
      type: System.Exception
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)
  commentId: M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.InteropServices.ErrorWrapper
  langs:
  - csharp
  - vb
  name: ErrorWrapper(Int32)
  fullName: System.Runtime.InteropServices.ErrorWrapper.ErrorWrapper(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
    startLine: 22
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.ErrorWrapper\" data-throw-if-not-resolved=\"false\"></xref> class with the HRESULT of the error.</p>\n"
  syntax:
    content: public ErrorWrapper(int errorCode)
    content.vb: Public Sub New(errorCode As Integer)
    parameters:
    - id: errorCode
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)
  commentId: M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Runtime.InteropServices.ErrorWrapper
  langs:
  - csharp
  - vb
  name: ErrorWrapper(Object)
  fullName: System.Runtime.InteropServices.ErrorWrapper.ErrorWrapper(System.Object)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
    startLine: 27
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.ErrorWrapper\" data-throw-if-not-resolved=\"false\"></xref> class with an object containing the HRESULT of the error.</p>\n"
  syntax:
    content: public ErrorWrapper(object errorCode)
    content.vb: Public Sub New(errorCode As Object)
    parameters:
    - id: errorCode
      type: System.Object
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>errorCode</em> parameter is not an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.ErrorWrapper.ErrorCode
  commentId: P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode
  id: ErrorCode
  parent: System.Runtime.InteropServices.ErrorWrapper
  langs:
  - csharp
  - vb
  name: ErrorCode
  fullName: System.Runtime.InteropServices.ErrorWrapper.ErrorCode
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ErrorCode
    path: src/mscorlib/src/System/Runtime/InteropServices/ErrorWrapper.cs
    startLine: 43
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the error code of the wrapper.</p>\n"
  syntax:
    content: public int ErrorCode { get; }
    content.vb: Public ReadOnly Property ErrorCode As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
