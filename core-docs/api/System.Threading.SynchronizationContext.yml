items:
- uid: System.Threading.SynchronizationContext
  commentId: T:System.Threading.SynchronizationContext
  id: SynchronizationContext
  parent: System.Threading
  children:
  - System.Threading.SynchronizationContext.#ctor
  - System.Threading.SynchronizationContext.CreateCopy
  - System.Threading.SynchronizationContext.Current
  - System.Threading.SynchronizationContext.OperationCompleted
  - System.Threading.SynchronizationContext.OperationStarted
  - System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  - System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  - System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  langs:
  - csharp
  - vb
  name: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SynchronizationContext
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 56
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides the basic functionality for propagating a synchronization context in various synchronization models. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> class is a base class that provides a free-threaded context with no synchronization. </p>\n<p>The purpose of the synchronization model implemented by this class is to allow the internal asynchronous/synchronous operations of the common language runtime to behave properly with different synchronization models. This model also simplifies some of the requirements that managed applications have had to follow in order to work correctly under different synchronization environments.</p>\n<p>Providers of synchronization models can extend this class and provide their own implementations for these methods.Â </p>\n<p>For more information about synchronization contexts, see the article <see href=\"http://msdn.microsoft.com/magazine/gg598924.aspx\">It's All About the SynchronizationContext</see> in the MSDN Magazine.</p>\n"
  syntax:
    content: public class SynchronizationContext
    content.vb: Public Class SynchronizationContext
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.SynchronizationContext.#ctor
  commentId: M:System.Threading.SynchronizationContext.#ctor
  id: '#ctor'
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: SynchronizationContext()
  fullName: System.Threading.SynchronizationContext.SynchronizationContext()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 62
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The default constructor performs no parameter initialization.</p>\n"
  syntax:
    content: public SynchronizationContext()
    content.vb: Public Sub New
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SynchronizationContext.Current
  commentId: P:System.Threading.SynchronizationContext.Current
  id: Current
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Threading.SynchronizationContext.Current
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Current
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 183
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the synchronization context for the current thread.</p>\n"
  remarks: "\n<p>This property is useful for propagating a synchronization context from one thread to another.</p>\n"
  syntax:
    content: public static SynchronizationContext Current { get; }
    content.vb: Public Shared ReadOnly Property Current As SynchronizationContext
    parameters: []
    return:
      type: System.Threading.SynchronizationContext
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Threading.SynchronizationContext.CreateCopy
  commentId: M:System.Threading.SynchronizationContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: CreateCopy()
  fullName: System.Threading.SynchronizationContext.CreateCopy()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateCopy
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 305
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>When overridden in a derived class, creates a copy of the synchronization context.  </p>\n"
  remarks: "\n<p>The default implementation returns an empty <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> object.  </p>\n"
  syntax:
    content: public virtual SynchronizationContext CreateCopy()
    content.vb: Public Overridable Function CreateCopy As SynchronizationContext
    return:
      type: System.Threading.SynchronizationContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Threading.SynchronizationContext.OperationCompleted
  commentId: M:System.Threading.SynchronizationContext.OperationCompleted
  id: OperationCompleted
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: OperationCompleted()
  fullName: System.Threading.SynchronizationContext.OperationCompleted()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OperationCompleted
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 140
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>When overridden in a derived class, responds to the notification that an operation has completed.</p>\n"
  remarks: "\n<p>The default implementation contains no code. You can optionally override this method to provide code that executes when an operation is complete.</p>\n"
  syntax:
    content: public virtual void OperationCompleted()
    content.vb: Public Overridable Sub OperationCompleted
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Threading.SynchronizationContext.OperationStarted
  commentId: M:System.Threading.SynchronizationContext.OperationStarted
  id: OperationStarted
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: OperationStarted()
  fullName: System.Threading.SynchronizationContext.OperationStarted()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OperationStarted
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 133
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>When overridden in a derived class, responds to the notification that an operation has started.</p>\n"
  remarks: "\n<p>The default implementation contains no code. You can optionally override this method to provide code that executes when an operation starts.</p>\n"
  syntax:
    content: public virtual void OperationStarted()
    content.vb: Public Overridable Sub OperationStarted
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  commentId: M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  id: Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: Post(SendOrPostCallback, Object)
  fullName: System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Post
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 124
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>When overridden in a derived class, dispatches an asynchronous message to a synchronization context.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method starts an asynchronous request to post a message. </p>\n"
  syntax:
    content: public virtual void Post(SendOrPostCallback d, object state)
    content.vb: Public Overridable Sub Post(d As SendOrPostCallback, state As Object)
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
    - id: state
      type: System.Object
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  commentId: M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  id: Send(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: Send(SendOrPostCallback, Object)
  fullName: System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Send
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 119
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>When overridden in a derived class, dispatches a synchronous message to a synchronization context.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method starts a synchronous request to send a message.</p>\n"
  syntax:
    content: public virtual void Send(SendOrPostCallback d, object state)
    content.vb: Public Overridable Sub Send(d As SendOrPostCallback, state As Object)
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
    - id: state
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The method was called in a Windows Store app. The implementation of <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> for Windows Store apps does not support the <xref href=\"System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  commentId: M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  id: SetSynchronizationContext(System.Threading.SynchronizationContext)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  - vb
  name: SetSynchronizationContext(SynchronizationContext)
  fullName: System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetSynchronizationContext
    path: src/mscorlib/src/System/Threading/SynchronizationContext.cs
    startLine: 171
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets the current synchronization context.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void SetSynchronizationContext(SynchronizationContext syncContext)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub SetSynchronizationContext(syncContext As SynchronizationContext)
    parameters:
    - id: syncContext
      type: System.Threading.SynchronizationContext
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: false
  name: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
