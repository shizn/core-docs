items:
- uid: System.ComponentModel.ITypedList
  commentId: T:System.ComponentModel.ITypedList
  id: ITypedList
  parent: System.ComponentModel
  children:
  - System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  - System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  langs:
  - csharp
  - vb
  name: ITypedList
  fullName: System.ComponentModel.ITypedList
  type: Interface
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ITypedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ITypedList
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ITypedList.cs
    startLine: 9
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to. </p>\n"
  remarks: "\n<p>Use this interface if, for instance, you are using a <xref href=\"System.Data.DataView\" data-throw-if-not-resolved=\"false\"></xref> object that represents a <code>customer</code> table, you want to bind to the properties on the <code>customer</code> object that the <xref href=\"System.Data.DataView\" data-throw-if-not-resolved=\"false\"></xref> represents, not the properties of the <xref href=\"System.Data.DataView\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This interface is not required for design-time support of a bindable list.</p>\n<p>Binding to data can occur either at run time or in a designer, but there are rules for both. At run time, you can bind to data in any of the following: </p>\n<ul><li>\n<p>\n<xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>Implementer of <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>, provided the implementer has a strongly typed <xref href=\"System.Collections.IList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property (that is, the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is anything but <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>). You can accomplish this by making the default implementation of <xref href=\"System.Collections.IList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> private. If you want to create an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> that follows the rules of a strongly typed collection, you should derive from <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>Implementer of <xref href=\"System.ComponentModel.ITypedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>In a designer, you can initialize binding to <xref href=\"System.ComponentModel.Component\" data-throw-if-not-resolved=\"false\"></xref> objects by following the same rules.</p>\n<p>For more information on binding to a data source, see the <xref href=\"System.Windows.Forms.Binding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.ComponentModel.ITypedList\" data-throw-if-not-resolved=\"false\"></xref> interface. A generic type named <code>SortableBindingList</code> derives from the <xref href=\"System.ComponentModel.BindingList`1\" data-throw-if-not-resolved=\"false\"></xref> class and implements the <xref href=\"System.ComponentModel.ITypedList\" data-throw-if-not-resolved=\"false\"></xref> interface. For a full code listing, see How to: Implement the ITypedList Interface.</p>System.ComponentModel.ITypedList#1"
  syntax:
    content: public interface ITypedList
    content.vb: Public Interface ITypedList
  seealso:
  - type: System.ComponentModel.BindingList`1
    commentId: T:System.ComponentModel.BindingList`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  commentId: M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  id: GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  langs:
  - csharp
  - vb
  name: GetItemProperties(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ITypedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetItemProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ITypedList.cs
    startLine: 19
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that represents the properties on each item used to bind data.</p>\n"
  remarks: "\n<p>If the <em>listAccessors</em> parameter is not <strong>null</strong>, it typically contains a property descriptor that identifies a list of containers to retrieve for the object that implements <xref href=\"System.ComponentModel.ITypedList\" data-throw-if-not-resolved=\"false\"></xref>. For example, a <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> containing two tables, <code>myCustomers</code> and <code>myOrders</code>, with a relationship between them called <code>myCustOrders</code>. If you create a <xref href=\"System.Data.DataView\" data-throw-if-not-resolved=\"false\"></xref> object to view <code>myCustomers</code>, then calling the <xref href=\"System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])\" data-throw-if-not-resolved=\"false\"></xref> method with <strong>null</strong> returns the property descriptors for the columns in <code>myCustomers</code>. As a result, one of the returned property descriptors is a property descriptor for <code>myCustOrders</code>, just as calling the <xref href=\"System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])\" data-throw-if-not-resolved=\"false\"></xref> method with a list accessor array containing the property descriptors for <code>myCustOrders</code> will return the property descriptors for <code>myOrders</code>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])\" data-throw-if-not-resolved=\"false\"></xref> method. For a full code listing, see How to: Implement the ITypedList Interface.</p>System.ComponentModel.ITypedList#3"
  syntax:
    content: PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
    content.vb: Function GetItemProperties(listAccessors As PropertyDescriptor()) As PropertyDescriptorCollection
    parameters:
    - id: listAccessors
      type: System.ComponentModel.PropertyDescriptor[]
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  seealso:
  - type: System.ComponentModel.BindingList`1
    commentId: T:System.ComponentModel.BindingList`1
  fullName.vb: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor())
  name.vb: GetItemProperties(PropertyDescriptor())
- uid: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  commentId: M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  id: GetListName(System.ComponentModel.PropertyDescriptor[])
  parent: System.ComponentModel.ITypedList
  langs:
  - csharp
  - vb
  name: GetListName(PropertyDescriptor[])
  fullName: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ITypedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetListName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ITypedList.cs
    startLine: 14
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the name of the list.</p>\n"
  remarks: "\n<p>This method is used only in the design-time framework and by the obsolete <xref href=\"System.Windows.Forms.DataGrid\" data-throw-if-not-resolved=\"false\"></xref> control.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])\" data-throw-if-not-resolved=\"false\"></xref> method. For a full code listing, see How to: Implement the ITypedList Interface.</p>System.ComponentModel.ITypedList#4"
  syntax:
    content: string GetListName(PropertyDescriptor[] listAccessors)
    content.vb: Function GetListName(listAccessors As PropertyDescriptor()) As String
    parameters:
    - id: listAccessors
      type: System.ComponentModel.PropertyDescriptor[]
    return:
      type: System.String
  seealso:
  - type: System.ComponentModel.BindingList`1
    commentId: T:System.ComponentModel.BindingList`1
  fullName.vb: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor())
  name.vb: GetListName(PropertyDescriptor())
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.ComponentModel.PropertyDescriptor[]
  isExternal: false
  name: PropertyDescriptor[]
  fullName: System.ComponentModel.PropertyDescriptor[]
  fullname.vb: System.ComponentModel.PropertyDescriptor()
  name.vb: PropertyDescriptor()
  spec.csharp:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
  - name: ()
    fullName: ()
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System
  isExternal: false
  name: System
  fullName: System
