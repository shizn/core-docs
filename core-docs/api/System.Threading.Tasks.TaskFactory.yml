items:
- uid: System.Threading.Tasks.TaskFactory
  commentId: T:System.Threading.Tasks.TaskFactory
  id: TaskFactory
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskFactory.#ctor
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.CancellationToken
  - System.Threading.Tasks.TaskFactory.ContinuationOptions
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.CreationOptions
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.Scheduler
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  langs:
  - csharp
  - vb
  name: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
  type: Class
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TaskFactory
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 395
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n"
  remarks: "\n<p>The .NET Framework provides two factories for creating and scheduling tasks: </p>\n<ul><li>\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> class, which creates <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects. You can call the overloads of this method to create and execute a task that requires non-default arguments. </p>\n<p>Starting with the .NET Framework 4.5, the <xref href=\"System.Threading.Tasks.Task.Run(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> method provides the easiest way to create a task with default configuration values and start it immediately. </p>\n</li><li>\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> class, which creates <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n</li></ul>\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> class allows you to do the following: </p>\n<ul><li>\n<p>Create a task and start it immediately by calling the <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Starting with the .NET Framework 4.5, the <xref href=\"System.Threading.Tasks.Task.Run(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> method provides the easiest way to create a task with default configuration values and start it immediately. </p>\n</li><li>\n<p>Create a task that starts when any one of the tasks in an array has completed by calling the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li><li>\n<p>Create a task that starts when all the tasks in an array have completed by calling the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li></ul>\n<p>The static <xref href=\"System.Threading.Tasks.Task`1.Factory\" data-throw-if-not-resolved=\"false\"></xref> property returns a default <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> object. You can also call one of the <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> class constructors to configure the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects that  the <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> class creates. The following example configures a new <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler. </p>TPL_Factories#1<p>In most cases, you do not have to instantiate a new <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance. Instead, you can use the <xref href=\"System.Threading.Tasks.Task.Factory\" data-throw-if-not-resolved=\"false\"></xref> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example. </p>"
  example:
  - "\n<p>The following example uses the static <xref href=\"System.Threading.Tasks.Task.Factory\" data-throw-if-not-resolved=\"false\"></xref> property to make two calls to the <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\" data-throw-if-not-resolved=\"false\"></xref> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</p>System.Threading.Tasks.Task.Factory#1"
  syntax:
    content: 'public class TaskFactory : object'
    content.vb: >-
      Public Class TaskFactory
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.TaskFactory.#ctor
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory()
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 397
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the default configuration.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with a default configuration. The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskCreationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskContinuationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 398
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with a default configuration. The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskCreationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskContinuationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken)
    content.vb: Public Sub New(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 399
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  remarks: "\n<p>With this constructor, the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>creationOptions</em>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>continuationOptions</em>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>scheduler</em>, unless it's null, in which case the property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating tasks with this TaskFactory.</p>\n<p></p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating continuation tasks with this TaskFactory.</p>\n<p></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>The <em>continuationOptions</em> argument specifies an invalid value.  </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 400
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  remarks: "\n<p>With this constructor, the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>creationOptions</em>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>continuationOptions</em>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating tasks with this TaskFactory.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating continuation tasks with this TaskFactory.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>The <em>continuationOptions</em> argument specifies an invalid value.  </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 401
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  remarks: "\n<p>With this constructor, the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskCreationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <xref href=\"System.Threading.Tasks.TaskContinuationOptions.None\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> property is initialized to <em>scheduler</em>, unless it's null, in which case the property is initialized to the current scheduler (see <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  example:
  - 
  syntax:
    content: public TaskFactory(TaskScheduler scheduler)
    content.vb: Public Sub New(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.CancellationToken
  commentId: P:System.Threading.Tasks.TaskFactory.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: CancellationToken
  fullName: System.Threading.Tasks.TaskFactory.CancellationToken
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancellationToken
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 402
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default cancellation token for this task factory.</p>\n"
  remarks: "\n<p>This property returns the default <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to all tasks created by this factory, unless another <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> value is explicitly specified during the call to the factory methods.</p>\n"
  example:
  - 
  syntax:
    content: public CancellationToken CancellationToken { get; }
    content.vb: Public ReadOnly Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: "\n<p>The default task cancellation token for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions
  commentId: P:System.Threading.Tasks.TaskFactory.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory.ContinuationOptions
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinuationOptions
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 403
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default task continuation options for this task factory.</p>\n"
  remarks: "\n<p>The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</p>\n"
  example:
  - 
  syntax:
    content: public TaskContinuationOptions ContinuationOptions { get; }
    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default task continuation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.CreationOptions
  commentId: P:System.Threading.Tasks.TaskFactory.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: CreationOptions
  fullName: System.Threading.Tasks.TaskFactory.CreationOptions
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreationOptions
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 404
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default task creation options for this task factory.</p>\n"
  remarks: "\n<p>The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</p>\n"
  example:
  - 
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default task creation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.Scheduler
  commentId: P:System.Threading.Tasks.TaskFactory.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: Scheduler
  fullName: System.Threading.Tasks.TaskFactory.Scheduler
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Scheduler
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 405
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default task scheduler for this task factory.</p>\n"
  remarks: "\n<p>The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods. </p>\n<p>If this property value is <strong>null</strong>, the value of the <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref> property is used.</p>\n"
  example:
  - 
  syntax:
    content: public TaskScheduler Scheduler { get; }
    content.vb: Public ReadOnly Property Scheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The default task scheduler for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 406
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\" data-throw-if-not-resolved=\"false\"></xref> method executes the <em>continuationAction</em> delegate when all tasks in the <em>tasks</em> array have completed, regardless of their completion status. </p>\n<p>Exceptions thrown by tasks in the <em>tasks</em> array are not available to the continuation task through structured exception handling. You can determine which exceptions were thrown by examining the <xref href=\"System.Threading.Tasks.Task.Exception\" data-throw-if-not-resolved=\"false\"></xref> property of each task in the <em>tasks</em> array. To use structured exception handling to handle exceptions thrown by tasks in the <em>tasks</em> array, call the <xref href=\"System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example launches separate tasks that use a regular expression to count the number of words in a set of text files. The <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\" data-throw-if-not-resolved=\"false\"></xref> method is used to launch a task that displays the total word count when all the antecedent tasks have completed. </p>System.Threading.Tasks.Task.ContinueWhenAll#1<p>The call to the continuation task's <xref href=\"System.Threading.Tasks.Task.Wait\" data-throw-if-not-resolved=\"false\"></xref> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property of each antecedent task to determine whether the task succeeded. </p>"
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task())) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()))
  name.vb: ContinueWhenAll(Task(), Action(Of Task()))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 407
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method executes the <em>continuationAction</em> delegate when all tasks in the <em>tasks</em> array have completed, regardless of their completion status. </p>\n"
  example:
  - "\n<p>The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files. The cancellation token is set if a file cannot be found. The <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method is used to launch a task that displays the total word count when all the antecedent tasks have completed. If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exception and displays an error message. </p>System.Threading.Tasks.Task.ContinueWhenAll#2"
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 408
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 409
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 410
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 411
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 412
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 413
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 414
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()))
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 415
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 416
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 417
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 418
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 419
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 420
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAll
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 421
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 422
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - "\n<p>The following example shows how to use <strong>ContinueWhenAny</strong> and <strong>ContinueWhenAll</strong>:</p>System.Threading.Tasks.Task#05"
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task)) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a <strong>null</strong> value. </p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task))
  name.vb: ContinueWhenAny(Task(), Action(Of Task))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 423
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed. </p>\n<p>-or-</p>\n<p>\n<em>cancellationToken</em> has already been disposed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a <strong>null</strong> value. </p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty .</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 424
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 425
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  remarks: "\n<p>The NotOn* and OnlyOn* <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>, which constrain for which <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> states a continuation will be executed, are illegal with ContinueWhenAny.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 426
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 427
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 428
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  remarks: "\n<p>The NotOn* and OnlyOn* <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>, which constrain for which <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> states a continuation will be executed, are illegal with ContinueWhenAny.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 429
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  remarks: "\n<p>The NotOn* and OnlyOn* <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>, which constrain for which <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> states a continuation will be executed, are illegal with ContinueWhenAny.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 430
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)))
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 431
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 432
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  remarks: "\n<p>The NotOn* and OnlyOn* <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>, which constrain for which <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> states a continuation will be executed, are illegal with ContinueWhenAny.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 433
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  remarks: "\n<p>The NotOn* and OnlyOn* <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>, which constrain for which <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> states a continuation will be executed, are illegal with ContinueWhenAny.</p>\n"
  example:
  - 
  syntax:
    content: public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 434
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 435
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 436
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  remarks: "\n<p>The NotOn* and OnlyOn* <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>, which constrain for which <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> states a continuation will be executed, are illegal with ContinueWhenAny.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueWhenAny
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 437
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  remarks: "\n<p>The NotOn* and OnlyOn* <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>, which constrain for which <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> states a continuation will be executed, are illegal with ContinueWhenAny.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 438
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on.  This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 439
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>. The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> values <xref href=\"System.Threading.Tasks.TaskCreationOptions.PreferFairness\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskCreationOptions.LongRunning\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> are all mutually exclusive. In the FromAsync methods, either <strong>LongRunning</strong> or <strong>AttachedToParent</strong> by themselves will cause an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Action<IAsyncResult>)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 440
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> overloads that take an <em>asyncResult</em> parameter are not as efficient as the overloads that take a <em>beginMethod</em> parameter. If performance is an issue, use the overloads that provide the <em>beginMethod</em>/<em>endMethod</em> pattern.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult))
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult))
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 441
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> overloads that take an <em>asyncResult</em> parameter are not as efficient as the overloads that take a <em>beginMethod</em> parameter. If performance is an issue, use the overloads that provide the <em>beginMethod</em>/<em>endMethod</em> pattern.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 442
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> overloads that take an <em>asyncResult</em> parameter are not as efficient as the overloads that take a <em>beginMethod</em> parameter. If performance is an issue, use the overloads that provide the <em>beginMethod</em>/<em>endMethod</em> pattern.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the task that executes the end method.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 443
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 444
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 445
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)
    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)
  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 446
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 447
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> overloads that take an <em>asyncResult</em> parameter are not as efficient as the overloads that take a <em>beginMethod</em> parameter. If performance is an issue, use the overloads that provide the <em>beginMethod</em>/<em>endMethod</em> pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)
    content.vb: Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult))
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 448
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> overloads that take an <em>asyncResult</em> parameter are not as efficient as the overloads that take a <em>beginMethod</em> parameter. If performance is an issue, use the overloads that provide the <em>beginMethod</em>/<em>endMethod</em> pattern.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 449
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> overloads that take an <em>asyncResult</em> parameter are not as efficient as the overloads that take a <em>beginMethod</em> parameter. If performance is an issue, use the overloads that provide the <em>beginMethod</em>/<em>endMethod</em> pattern.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the task that executes the end method.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 450
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 451
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 452
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)
  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 453
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 454
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 455
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 456
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 457
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 458
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromAsync
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 459
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  remarks: "\n<p>The <em>beginMethod</em> delegate is started on the thread that <see cref=\"Overload:System.Threading.Tasks.TaskFactory.FromAsync\"></see> is running on. This method throws any exceptions thrown by the <em>beginMethod</em>.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  id: StartNew(System.Action)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 460
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  remarks: "\n<p>Calling <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule the task for execution. </p>\n<p>Starting with the .NET Framework 4.5, you can use the <xref href=\"System.Threading.Tasks.Task.Run(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> method as  a quick way to call <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref href=\"System.Threading.Tasks.Task.Run(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> by default does not allow child tasks started with the <xref href=\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> option to attach to the current <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance, whereas <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> does. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> method to repeatedly invoke an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters. </p>System.Threading.Tasks.TaskFactory.StartNew#1"
  syntax:
    content: public Task StartNew(Action action)
    content.vb: Public Function StartNew(action As Action) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  id: StartNew(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 461
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling <strong>StartNew</strong> is functionally equivalent to creating a Task using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution. </p>\n<p>Starting with the .NET Framework 4.5, you can use the <xref href=\"System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method as  a quick way to call <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref href=\"System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> by default does not allow child tasks started with the <xref href=\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> option to attach to the current <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance, whereas <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> does. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method to create a task that iterates the files in the C:\\Windows\\System32 directory. The lambda expression calls the <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method to add information about each  file to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object. Each detached nested task invoked by the <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref href=\"System.Threading.CancellationToken.ThrowIfCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Threading.CancellationToken.ThrowIfCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> exception that is handled in a <strong>catch</strong> block when the calling thread calls the <xref href=\"System.Threading.Tasks.Task.Wait\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.Threading.Tasks.TaskFactory.StartNew#2"
  syntax:
    content: public Task StartNew(Action action, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(action As Action, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 462
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as  a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - 
  syntax:
    content: public Task StartNew(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 463
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as  a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - 
  syntax:
    content: public Task StartNew(Action action, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(action As Action, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  id: StartNew(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 464
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>Calling <xref href=\"System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling the <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> method to schedule it for execution. </p>\n<p>Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as  a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - "\n<p>The following example defines an array of 6-letter words. Each word is then passed to an <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, which scrambles the word and displays the original word and its scrambled version. </p>System.Threading.Tasks.TaskFactory.StartNew#3<p>Note that the example initializes a single random number generator, which is protected by a lock. For the need of a lock, see \"The System.Random class and thread safety\" in the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>"
  syntax:
    content: public Task StartNew(Action<object> action, object state)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously. </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object)
  name.vb: StartNew(Action(Of Object), Object)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 465
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as  a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - "\n<p>The following example defines an array of 6-letter words. Each word is then passed to an <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, which scrambles the word and displays the original word and its scrambled version. </p>System.Threading.Tasks.TaskFactory.StartNew#4<p>Note that the example initializes a single random number generator, which is protected by a lock. For the need of a lock, see \"The System.Random class and thread safety\" in the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class topic. To handle the possibility of corruption of the random number generator, a cancellation token is passed to task. If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token. Before sorting the <code>chars</code> array that contains the six characters in a word, the method calls the <xref href=\"System.Threading.CancellationToken.ThrowIfCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> method to throw an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> if the token has been canceled. </p>"
  syntax:
    content: public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)
  name.vb: StartNew(Action(Of Object), Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 466
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as  a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - 
  syntax:
    content: public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Action(Of Object), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 467
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as  a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - 
  syntax:
    content: public Task StartNew(Action<object> action, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Action(Of Object), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  id: StartNew``1(System.Func{``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 468
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling <xref href=\"System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\" data-throw-if-not-resolved=\"false\"></xref> is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can call the <xref href=\"System.Threading.Tasks.Task.Run``1(System.Func{``0})\" data-throw-if-not-resolved=\"false\"></xref> method as a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref href=\"System.Threading.Tasks.Task.Run``1(System.Func{``0})\" data-throw-if-not-resolved=\"false\"></xref> by default does not allow child tasks started with the <xref href=\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> option to attach to the current <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> instance, whereas <xref href=\"System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\" data-throw-if-not-resolved=\"false\"></xref> does. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog. </p>\n"
  example:
  - "\n<p>The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum. It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number. The <xref href=\"System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\" data-throw-if-not-resolved=\"false\"></xref> is used to create the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects that return the random numbers to add. </p>System.Threading.Tasks.Task.Run#5"
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult))
  name.vb: StartNew(Of TResult)(Func(Of TResult))
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 469
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling <xref href=\"System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <xref href=\"System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method as a quick way to call <xref href=\"System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with default parameters. Note, however, that there is a difference in behavior between the two methods regarding : <xref href=\"System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> by default does not allow child tasks started with the <xref href=\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> option to attach to the current <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> instance, whereas <xref href=\"System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> does. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - "\n<p>The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1. Approximately half of the time, a cancellation token is set as the operations execute. The output from the example shows the result if the two tasks complete successfully and if the token is cancelled. </p>System.Threading.Tasks.Task.Run#9"
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)
  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 470
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 471
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<TResult> function, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Of TResult)(Func(Of TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  id: StartNew``1(System.Func{System.Object,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 472
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 473
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 474
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartNew
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 475
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling StartNew is functionally equivalent to creating a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> using one of its constructors and then calling <xref href=\"System.Threading.Tasks.Task.Start\" data-throw-if-not-resolved=\"false\"></xref> to schedule it for execution.</p>\n<p> Starting with the .NET Framework 4.5, you can use the <see cref=\"Overload:System.Threading.Tasks.Task.Run\"></see> method with an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> object as a quick way to call <see cref=\"Overload:System.Threading.Tasks.TaskFactory.StartNew\"></see> with default parameters. For more information and code examples, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx\">Task.Run vs. Task.Factory.StartNew</see> in the Parallel Programming with .NET blog.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, TaskCreationOptions)
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task[]
  isExternal: false
  name: Task[]
  fullName: System.Threading.Tasks.Task[]
  fullname.vb: System.Threading.Tasks.Task()
  name.vb: Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
- uid: System.Action{System.Threading.Tasks.Task[]}
  definition: System.Action`1
  name: Action<Task[]>
  fullName: System.Action<System.Threading.Tasks.Task[]>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task())
  name.vb: Action(Of Task())
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}
  definition: System.Func`2
  name: Func<Task[], TResult>
  fullName: System.Func<System.Threading.Tasks.Task[], TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)
  name.vb: Func(Of Task(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  fullName: System.Func<, >
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]
  isExternal: false
  name: Task<TAntecedentResult>[]
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  fullname.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()
  name.vb: Task(Of TAntecedentResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
  definition: System.Action`1
  name: Action<Task<TAntecedentResult>[]>
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)())
  name.vb: Action(Of Task(Of TAntecedentResult)())
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>[], TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Action{System.Threading.Tasks.Task}
  definition: System.Action`1
  name: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task)
  name.vb: Action(Of Task)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  definition: System.Func`2
  name: Func<Task, TResult>
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  name.vb: Func(Of Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
  definition: System.Action`1
  name: Action<Task<TAntecedentResult>>
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult))
  name.vb: Action(Of Task(Of TAntecedentResult))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>, TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`3
  name: Func<AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action{System.IAsyncResult}
  definition: System.Action`1
  name: Action<IAsyncResult>
  fullName: System.Action<System.IAsyncResult>
  fullname.vb: System.Action(Of System.IAsyncResult)
  name.vb: Action(Of IAsyncResult)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<, , >
  fullName: System.Func<, , >
  fullname.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`4
  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg1}'
  isExternal: false
  name: TArg1
  fullName: TArg1
- uid: System.Func`4
  isExternal: false
  name: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.IAsyncResult,{TResult}}
  definition: System.Func`2
  name: Func<IAsyncResult, TResult>
  fullName: System.Func<System.IAsyncResult, TResult>
  fullname.vb: System.Func(Of System.IAsyncResult, TResult)
  name.vb: Func(Of IAsyncResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`5
  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg2}'
  isExternal: false
  name: TArg2
  fullName: TArg2
- uid: System.Func`5
  isExternal: false
  name: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
  definition: System.Func`6
  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg3}'
  isExternal: false
  name: TArg3
  fullName: TArg3
- uid: System.Func`6
  isExternal: false
  name: Func<T1, T2, T3, T4, T5, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Action
  isExternal: false
  name: Action
  fullName: System.Action
- uid: System.Action{System.Object}
  definition: System.Action`1
  name: Action<Object>
  fullName: System.Action<System.Object>
  fullname.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TResult}}
  definition: System.Func`1
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<>
  fullName: System.Func<>
  fullname.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{System.Object,{TResult}}
  definition: System.Func`2
  name: Func<Object, TResult>
  fullName: System.Func<System.Object, TResult>
  fullname.vb: System.Func(Of System.Object, TResult)
  name.vb: Func(Of Object, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
