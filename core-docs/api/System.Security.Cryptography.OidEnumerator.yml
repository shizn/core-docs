items:
- uid: System.Security.Cryptography.OidEnumerator
  commentId: T:System.Security.Cryptography.OidEnumerator
  id: OidEnumerator
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.OidEnumerator.Current
  - System.Security.Cryptography.OidEnumerator.MoveNext
  - System.Security.Cryptography.OidEnumerator.Reset
  - System.Security.Cryptography.OidEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  - vb
  name: OidEnumerator
  fullName: System.Security.Cryptography.OidEnumerator
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OidEnumerator
    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
    startLine: 46
  assemblies:
  - System.Security.Cryptography.Encoding
  namespace: System.Security.Cryptography
  summary: "\n<p>Provides the ability to navigate through an <xref href=\"System.Security.Cryptography.OidCollection\" data-throw-if-not-resolved=\"false\"></xref> object. This class cannot be inherited.</p>\n"
  remarks: "\n<p>This class implements the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Security.Cryptography.OidEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Cryptography.Oid#1"
  syntax:
    content: 'public sealed class OidEnumerator : IEnumerator'
    content.vb: >-
      Public NotInheritable Class OidEnumerator
          Implements IEnumerator
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.OidEnumerator.Current
  commentId: P:System.Security.Cryptography.OidEnumerator.Current
  id: Current
  parent: System.Security.Cryptography.OidEnumerator
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Security.Cryptography.OidEnumerator.Current
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
    startLine: 49
  assemblies:
  - System.Security.Cryptography.Encoding
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the current <xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref> object in an <xref href=\"System.Security.Cryptography.OidCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>After an enumerator is created, the <xref href=\"System.Security.Cryptography.OidEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref href=\"System.Security.Cryptography.OidEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property; otherwise, <xref href=\"System.Security.Cryptography.OidEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>null</strong> or throws an exception.</p>\n<p>\n<xref href=\"System.Security.Cryptography.OidEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> also returns <strong>null</strong> or throws an exception if the last call to <xref href=\"System.Security.Cryptography.OidEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>, which indicates that the end of the collection has been reached.</p>\n<p>\n<xref href=\"System.Security.Cryptography.OidEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator, and consecutive calls to <xref href=\"System.Security.Cryptography.OidEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> return the same object, until <xref href=\"System.Security.Cryptography.OidEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Security.Cryptography.OidEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Cryptography.Oid#1"
  syntax:
    content: public Oid Current { get; }
    content.vb: Public ReadOnly Property Current As Oid
    parameters: []
    return:
      type: System.Security.Cryptography.Oid
      description: "\n<p>The current <xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref> object in the collection.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.OidEnumerator.System#Collections#IEnumerator#Current
  commentId: P:System.Security.Cryptography.OidEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.Cryptography.OidEnumerator
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  fullName: System.Security.Cryptography.OidEnumerator.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerator.Current
    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
    startLine: 50
  assemblies:
  - System.Security.Cryptography.Encoding
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the current <xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref> object in an <xref href=\"System.Security.Cryptography.OidCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: object IEnumerator.Current { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The current <xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IEnumerator.Current
- uid: System.Security.Cryptography.OidEnumerator.MoveNext
  commentId: M:System.Security.Cryptography.OidEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.Cryptography.OidEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  fullName: System.Security.Cryptography.OidEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveNext
    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
    startLine: 51
  assemblies:
  - System.Security.Cryptography.Encoding
  namespace: System.Security.Cryptography
  summary: "\n<p>Advances to the next <xref href=\"System.Security.Cryptography.Oid\" data-throw-if-not-resolved=\"false\"></xref> object in an <xref href=\"System.Security.Cryptography.OidCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>After an enumerator is created, it is positioned before the first element of the collection, and the first call to the <xref href=\"System.Security.Cryptography.OidEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method moves the enumerator over the first element of the collection. Subsequent calls to <xref href=\"System.Security.Cryptography.OidEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> advances the enumerator past subsequent items in the collection.</p>\n<p>After the end of the collection is passed, calls to <xref href=\"System.Security.Cryptography.OidEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> return <strong>false</strong>.</p>\n<p>An enumerator is valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator becomes invalid and the next call to <xref href=\"System.Security.Cryptography.OidEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Security.Cryptography.OidEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Cryptography.Oid#1"
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong>, if the enumerator was successfully advanced to the next element; <strong>false</strong>, if the enumerator has passed the end of the collection.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created.</p>\n"
  implements:
  - System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.OidEnumerator.Reset
  commentId: M:System.Security.Cryptography.OidEnumerator.Reset
  id: Reset
  parent: System.Security.Cryptography.OidEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Security.Cryptography.OidEnumerator.Reset()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Security.Cryptography.Encoding/ref/System.Security.Cryptography.Encoding.cs
    startLine: 52
  assemblies:
  - System.Security.Cryptography.Encoding
  namespace: System.Security.Cryptography
  summary: "\n<p>Sets an enumerator to its initial position.</p>\n"
  remarks: "\n<p>The initial position of an enumerator is before the first element in the <xref href=\"System.Security.Cryptography.OidCollection\" data-throw-if-not-resolved=\"false\"></xref> object. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator becomes invalid and the next call to the <xref href=\"System.Security.Cryptography.OidEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Security.Cryptography.OidEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Cryptography.Oid#1"
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created.</p>\n"
  implements:
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Security.Cryptography.Oid
  parent: System.Security.Cryptography
  isExternal: false
  name: Oid
  fullName: System.Security.Cryptography.Oid
- uid: System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: false
  name: Current
  fullName: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: false
  name: MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: false
  name: Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
