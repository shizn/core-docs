items:
- uid: System.Globalization.CompareInfo
  commentId: T:System.Globalization.CompareInfo
  id: CompareInfo
  parent: System.Globalization
  children:
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Compare(System.String,System.String)
  - System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Equals(System.Object)
  - System.Globalization.CompareInfo.GetCompareInfo(System.String)
  - System.Globalization.CompareInfo.GetHashCode
  - System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String)
  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String)
  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Name
  - System.Globalization.CompareInfo.ToString
  langs:
  - csharp
  - vb
  name: CompareInfo
  fullName: System.Globalization.CompareInfo
  type: Class
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareInfo
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 68
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Implements a set of methods for culture-sensitive string comparisons.</p>\n"
  remarks: "\n<p>Conventions for comparing and sorting data vary from culture to culture. For example, sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \"Ã†\" character that it sorts after \"Z\" in the alphabet. In addition, comparisons may be case-sensitive or case-insensitive, and casing rules may also differ by culture. The <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations. </p>\n<p>Typically, you do not have to instantiate a <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. However, if you do want to retrieve a <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object, you can do it in one of these ways: </p>\n<ul><li>\n<p>By retrieving the value of the <xref href=\"System.Globalization.CultureInfo.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> property for a particular culture. </p>\n</li><li>\n<p>By calling the static <xref href=\"System.Globalization.CompareInfo.GetCompareInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with a culture name. This allows for late-bound access to a <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n</li></ul>\n"
  example:
  - <p>The following example shows how the <xref href="System.Globalization.CompareInfo" data-throw-if-not-resolved="false"></xref> object associated with a <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> object affects string comparison.</p>CompareInfo#1
  syntax:
    content: 'public class CompareInfo : object'
    content.vb: >-
      Public Class CompareInfo
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.CompareInfo.Name
  commentId: P:System.Globalization.CompareInfo.Name
  id: Name
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Globalization.CompareInfo.Name
  type: Property
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 71
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the name of the culture used for sorting operations by this <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.CompareInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> properties can have different values. For example, an <xref href=\"System.Globalization.CompareInfo.LCID\" data-throw-if-not-resolved=\"false\"></xref> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book. The <xref href=\"System.Globalization.CompareInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property has a value of \"de-de_phoneb\", whereas the <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property of the associated German (Germany) culture has a value of \"de-DE\".</p>\n"
  example:
  - "\n<p>The following example compares three strings using the fr-FR and ja-JP cultures. The <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property is used to display the name of each culture. </p>CompareInfo#1"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of a culture.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, Int32, String, Int32, Int32)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 72
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares a section of one string with a section of another string.</p>\n"
  remarks: "\n<p>If a security decision depends on a string comparison or a case change, you should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n<p>When possible, you should use string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example compares portions of two strings using the different <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> objects: </p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with international sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with traditional sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li></ul>System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1"
  syntax:
    content: public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2)
    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: length1
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string1</em> to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    - id: length2
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string2</em> to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\n<p>-or- </p>\n<p>\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 73
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares a section of one string with a section of another string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>If a security decision depends on a string comparison or a case change, you should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example compares portions of two strings using different <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> settings.</p>System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1"
  syntax:
    content: public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options)
    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: length1
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string1</em> to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    - id: length2
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string2</em> to compare. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\n<p>-or- </p>\n<p>\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)
  id: Compare(System.String,System.Int32,System.String,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 74
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares the end section of a string with the end section of another string.</p>\n"
  remarks: "\n<p>If a security decision depends on a string comparison or a case change, you should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example compares portions of two strings using the different <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> objects: </p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with international sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with traditional sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li></ul>System.Globalization.CompareInfo.CompareStrIntStrInt#1"
  syntax:
    content: public virtual int Compare(string string1, int offset1, string string2, int offset2)
    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.String, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 75
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares the end section of a string with the end section of another string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>If a security decision depends on a string comparison or a case change, you should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example compares portions of two strings using different <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> settings.</p>System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1"
  syntax:
    content: public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options)
    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, String)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 76
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares two strings. </p>\n"
  remarks: "\n<p>By default, the comparison is performed by using <xref href=\"System.Globalization.CompareOptions.None\" data-throw-if-not-resolved=\"false\"></xref>. If a security decision depends on a string comparison or a case change, you should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example compares portions of two strings using the different <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> objects: </p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with international sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with traditional sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li></ul>System.Globalization.CompareInfo.CompareStrStr#1<p>The following example demonstrates calling the <see cref=\"Overload:System.Globalization.CompareInfo.Compare\"></see> method. </p>CompareInfo#1"
  syntax:
    content: public virtual int Compare(string string1, string string2)
    content.vb: Public Overridable Function Compare(string1 As String, string2 As String) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>\n<em>string1</em> is less than <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>\n<em>string1</em> is greater than <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)
  id: Compare(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 77
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares two strings using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>If a security decision depends on a string comparison or a case change, you should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example compares two strings using different <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> settings.</p>System.Globalization.CompareInfo.CompareStrStrOpt#1<p>The following example demonstrates calling the <see cref=\"Overload:System.Globalization.CompareInfo.Compare\"></see>  method. </p>CompareInfo#1"
  syntax:
    content: public virtual int Compare(string string1, string string2, CompareOptions options)
    content.vb: Public Overridable Function Compare(string1 As String, string2 As String, options As CompareOptions) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>\n<em>string1</em> is less than <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>\n<em>string1</em> is greater than <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Equals(System.Object)
  commentId: M:System.Globalization.CompareInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Globalization.CompareInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 78
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> objects are equal if their <xref href=\"System.Globalization.CompareInfo.LCID\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CompareInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> properties are equal.</p>\n<p>This method overrides <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a security decision depends on a string comparison or a case change, you should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.</p>\n"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to compare with the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.CompareInfo.GetCompareInfo(System.String)
  commentId: M:System.Globalization.CompareInfo.GetCompareInfo(System.String)
  id: GetCompareInfo(System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: GetCompareInfo(String)
  fullName: System.Globalization.CompareInfo.GetCompareInfo(System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCompareInfo
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 79
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Initializes a new <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is associated with the culture with the specified name.</p>\n"
  example:
  - "\n<p>The following example compares portions of two strings using the different <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> objects: </p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with international sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the Spanish (Spain) culture with traditional sort</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li></ul>System.Globalization.CompareInfo.CompareStrStr#1"
  syntax:
    content: public static CompareInfo GetCompareInfo(string name)
    content.vb: Public Shared Function GetCompareInfo(name As String) As CompareInfo
    parameters:
    - id: name
      type: System.String
      description: "\n<p>A string representing the culture name. </p>\n"
    return:
      type: System.Globalization.CompareInfo
      description: "\n<p>A new <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is an invalid culture name. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CompareInfo.GetHashCode
  commentId: M:System.Globalization.CompareInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Globalization.CompareInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 80
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Serves as a hash function for the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> for hashing algorithms and data structures, such as a hash table.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method generates the same hash code for two objects that are equal according to the <xref href=\"System.Globalization.CompareInfo.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Globalization.CompareInfo.Equals(System.Object)
    commentId: M:System.Globalization.CompareInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)
  id: GetHashCode(System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: GetHashCode(String, CompareOptions)
  fullName: System.Globalization.CompareInfo.GetHashCode(System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 81
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the hash code for a string based on specified comparison options. </p>\n"
  remarks: "\n<p>The behavior of <xref href=\"System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\" data-throw-if-not-resolved=\"false\"></xref> is dependent on its implementation, which might change from one version of the common language runtime to another, or from one .NET Framework platform to another. </p>\n<p>If two string objects are equal, the <xref href=\"System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\" data-throw-if-not-resolved=\"false\"></xref> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code. </p>\n<p>The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.</p>\n<p>As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted. </p>\n"
  syntax:
    content: public virtual int GetHashCode(string source, CompareOptions options)
    content.vb: Public Overridable Function GetHashCode(source As String, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string whose hash code is to be returned. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that determines how strings are compared. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  id: IndexOf(System.String,System.Char)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 82
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</p>\n"
  remarks: "\n<p>This method searches the source string from the beginning of the string to the end of the string.</p>\n<p>This overload performs a culture-sensitive search. If <em>value</em> represents a precomposed Unicode character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode code points are the same, you should call an overload that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value. Unlike <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, which performs a culture-sensitive comparison, overloads of the <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method that search for a character perform an ordinal comparison and overloads that search for a string perform a culture-sensitive comparison.</p>\n<p>When possible, you should use string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int IndexOf(string source, char value)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 83
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at the beginning of the string and ending at the end of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should use string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int IndexOf(string source, char value, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how the strings should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 84
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at <em>startIndex</em> and ending at the end of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> are searching in different portions of the string, even with the same <em>startIndex</em> parameter.</p>System.Globalization.CompareInfo.IndexOfInt#1"
  syntax:
    content: public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)
  id: IndexOf(System.String,System.Char,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, Int32, Int32)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 85
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at <em>startIndex</em> and ending at <em>startIndex</em> + <em>count</em> - 1.</p>\n<p>This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value. Overloads of <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int IndexOf(string source, char value, int startIndex, int count)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 86
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at <em>startIndex</em> and ending at <em>startIndex</em> + <em>count</em> - 1.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)
  id: IndexOf(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 87
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at the beginning of the string and ending at the end of the string.</p>\n<p>This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int IndexOf(string source, string value)
    content.vb: Public Overridable Function IndexOf(source As String, value As String) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 88
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at the beginning of the string and ending at the end of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int IndexOf(string source, string value, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As String, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 89
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at <em>startIndex</em> and ending at the end of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> are searching in different portions of the string, even with the same <em>startIndex</em> parameter.</p>System.Globalization.CompareInfo.IndexOfInt#1"
  syntax:
    content: public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)
  id: IndexOf(System.String,System.String,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, Int32, Int32)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 90
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at <em>startIndex</em> and ending at <em>startIndex</em> + <em>count</em> - 1.</p>\n<p>This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int IndexOf(string source, string value, int startIndex, int count)
    content.vb: Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 91
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched forward starting at <em>startIndex</em> and ending at <em>startIndex</em> + <em>count</em> - 1.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)
  id: IsPrefix(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsPrefix(String, String)
  fullName: System.Globalization.CompareInfo.IsPrefix(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPrefix
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 92
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string starts with the specified prefix.</p>\n"
  remarks: "\n<p>Every string starts and ends with an empty substring (\"\"); therefore, if <em>prefix</em> is an empty string, this method returns <strong>true</strong>.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines whether a string is the prefix or suffix of another string.</p>System.Globalization.CompareInfo.IsPrefixSuffix#1"
  syntax:
    content: public virtual bool IsPrefix(string source, string prefix)
    content.vb: Public Overridable Function IsPrefix(source As String, prefix As String) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: prefix
      type: System.String
      description: "\n<p>The string to compare with the beginning of <em>source</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>prefix</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  id: IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsPrefix(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.IsPrefix(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPrefix
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 93
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string starts with the specified prefix using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>Every string starts and ends with an empty substring (\"\"); therefore, if <em>prefix</em> is an empty string, this method returns <strong>true</strong>.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines whether a string is the prefix or suffix of another string using <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Globalization.CompareInfo.IsPrefixSuffixOpt#1"
  syntax:
    content: public virtual bool IsPrefix(string source, string prefix, CompareOptions options)
    content.vb: Public Overridable Function IsPrefix(source As String, prefix As String, options As CompareOptions) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: prefix
      type: System.String
      description: "\n<p>The string to compare with the beginning of <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>prefix</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>prefix</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)
  id: IsSuffix(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsSuffix(String, String)
  fullName: System.Globalization.CompareInfo.IsSuffix(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSuffix
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 94
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string ends with the specified suffix.</p>\n"
  remarks: "\n<p>Every string starts and ends with an empty substring (\"\"); therefore, if <em>suffix</em> is an empty string, this method returns <strong>true</strong>.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines whether a string is the prefix or suffix of another string.</p>System.Globalization.CompareInfo.IsPrefixSuffix#1"
  syntax:
    content: public virtual bool IsSuffix(string source, string suffix)
    content.vb: Public Overridable Function IsSuffix(source As String, suffix As String) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: suffix
      type: System.String
      description: "\n<p>The string to compare with the end of <em>source</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>suffix</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  id: IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsSuffix(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.IsSuffix(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSuffix
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 95
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string ends with the specified suffix using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>Every string starts and ends with an empty substring (\"\"); therefore, if <em>suffix</em> is an empty string, this method returns <strong>true</strong>.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines whether a string is the prefix or suffix of another string using <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Globalization.CompareInfo.IsPrefixSuffixOpt#1"
  syntax:
    content: public virtual bool IsSuffix(string source, string suffix, CompareOptions options)
    content.vb: Public Overridable Function IsSuffix(source As String, suffix As String, options As CompareOptions) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: suffix
      type: System.String
      description: "\n<p>The string to compare with the end of <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>suffix</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> used by itself, or the bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>suffix</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  id: LastIndexOf(System.String,System.Char)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 96
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</p>\n<p>This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value. Overloads of <xref href=\"System.String.LastIndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int LastIndexOf(string source, char value)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 97
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref href=\"System.String.LastIndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int LastIndexOf(string source, char value, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 98
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at <em>startIndex</em> and ending at the beginning of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref href=\"System.String.LastIndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> are searching in different portions of the string, even with the same <em>startIndex</em> parameter.</p>System.Globalization.CompareInfo.IndexOfInt#1"
  syntax:
    content: public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, Int32, Int32)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 99
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at <em>startIndex</em> and ending at <em>startIndex</em> - <em>count</em> + 1.</p>\n<p>This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value. Overloads of <xref href=\"System.String.LastIndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int LastIndexOf(string source, char value, int startIndex, int count)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 100
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at <em>startIndex</em> and ending at <em>startIndex</em> - <em>count</em> + 1.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref href=\"System.String.LastIndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)
  id: LastIndexOf(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 101
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</p>\n<p>This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int LastIndexOf(string source, string value)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 102
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at the end of the string and ending at the beginning of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a string.</p>System.Globalization.CompareInfo.IndexOf#1"
  syntax:
    content: public virtual int LastIndexOf(string source, string value, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 103
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at <em>startIndex</em> and ending at the beginning of the string.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref href=\"System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> are searching in different portions of the string, even with the same <em>startIndex</em> parameter.</p>System.Globalization.CompareInfo.IndexOfInt#1"
  syntax:
    content: public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, Int32, Int32)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 104
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at <em>startIndex</em> and ending at <em>startIndex</em> - <em>count</em> + 1.</p>\n<p>This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> and use the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons .</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int LastIndexOf(string source, string value, int startIndex, int count)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastIndexOf
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 105
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The source string is searched backward starting at <em>startIndex</em> and ending at <em>startIndex</em> - <em>count</em> + 1.</p>\n<p>The <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref> value is not valid for this method.</p>\n<p>If <em>options</em> does not include the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Ã†\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If <em>options</em> includes the <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.</p>\n<p>When possible, you should call string comparison methods that have a parameter of type <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.CompareOptions.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> for security comparisons.</p>\n"
  example:
  - "\n<p>The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.</p>System.Globalization.CompareInfo.IndexOfIntInt#1"
  syntax:
    content: public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.ToString
  commentId: M:System.Globalization.CompareInfo.ToString
  id: ToString
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Globalization.CompareInfo.ToString()
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 106
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method overrides the <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method. It returns a string that consists of the class name and the value of the instance <xref href=\"System.Globalization.CompareInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property, separated by a hyphen. </p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Object.ToString
    commentId: M:System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Globalization.CompareOptions
  parent: System.Globalization
  isExternal: false
  name: CompareOptions
  fullName: System.Globalization.CompareOptions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Globalization.CompareInfo
  parent: System.Globalization
  isExternal: false
  name: CompareInfo
  fullName: System.Globalization.CompareInfo
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
