items:
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  id: NullReferenceException
  parent: System
  children:
  - System.NullReferenceException.#ctor
  - System.NullReferenceException.#ctor(System.String)
  - System.NullReferenceException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: NullReferenceException
  fullName: System.NullReferenceException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/NullReferenceException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NullReferenceException
    path: src/mscorlib/src/System/NullReferenceException.cs
    startLine: 17
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when there is an attempt to dereference a null object reference.</p>\n"
  remarks: "\n<p>A <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown when you try to access a member on a type whose value is <strong>null</strong>. A <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception typically reflects developer error and is thrown in the following scenarios: </p>\n<ul><li>\n<p>You've forgotten to instantiate a reference type. In the following example, <em>names</em> is declared but never instantiated: </p>System.NullReferenceException.Class#1<p>Some compilers issue a warning when they compile this code. Others issue an error, and the compilation fails. To address this problem, instantiate the object so that its value is no longer <strong>null</strong>. The following example does this by calling a type's class constructor.</p>System.NullReferenceException.Class#2</li><li>\n<p>You've forgotten to dimension an array before initializing it. In the following example, <code>values</code> is declared to be an integer array, but the number of elements that it contains is never specified. The attempt to initialize its values therefore thrown a  <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>System.NullReferenceException.Class#10<p>You can eliminate the exception by declaring the number of elements in the array before initializing it, as the following example does. </p>System.NullReferenceException.Class#11<p>For more information on declaring and initializing arrays, see Arrays (C# Programming Guide) and Arrays in Visual Basic. </p></li><li>\n<p>You get a <strong>null</strong> return value from a method, and then call a method on the returned type. This sometimes is the result of a documentation error; the documentation fails to note that a method call can return <strong>null</strong>. In other cases, your code erroneously assumes that the method will always return a non-<strong>null</strong> value. </p>\n<p>The code in the following example assumes that the <xref href=\"System.Array.Find``1(``0[],System.Predicate{``0})\" data-throw-if-not-resolved=\"false\"></xref> method always returns <code>Person</code> object whose <code>FirstName</code> field matches a search string. Because there is no match, the runtime throws a <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>System.NullReferenceException.Class#4<p>To address this problem, test the method's return value to ensure that it is not <strong>null</strong> before calling any of its members, as the following example does. </p>System.NullReferenceException.Class#5</li><li>\n<p>You're using an expression (for example, you're chaining a list of methods or properties together) to retrieve a value and, although you're checking whether the value is <strong>null</strong>, the runtime still throws a <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception. This occurs because one of the intermediate values in the expression returns <strong>null</strong>. As a result, your rest for <strong>null</strong> is never evaluated. </p>\n<p>The following example defines a <code>Pages</code> object that  caches information about web pages, which are presented by <code>Page</code> objects. The <code>Example.Main</code> method checks whether the current web page has a non-null title and, if it does, displays the title. Despite this check, however, the method throws a <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>System.NullReferenceException.Class#6<p>The exception is thrown because <code>pages.CurrentPage</code> returns <strong>null</strong>   if no page information is  stored in the cache. This exception can be corrected by testing the value of the <code>CurrentPage</code> property before retrieving the current <code>Page</code> object's <code>Title</code> property, as the following example does: </p>System.NullReferenceException.Class#7</li><li>\n<p>You're enumerating the elements of an array that contains reference types, and your attempt to process one of the elements throws a <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n<p>The following example defines a string array. A <strong>for</strong> statement enumerates the elements in the array and calls each string's <xref href=\"System.String.Trim\" data-throw-if-not-resolved=\"false\"></xref> method before displaying the string. </p>System.NullReferenceException.Class#8<p>This exception occurs if you assume that each element of the array must contain a non-null value, and the value of the array element is in fact <strong>null</strong>. The exception can be eliminated by testing whether the element is <strong>null</strong> before performing any operation on that element, as the following example shows. </p>System.NullReferenceException.Class#9</li><li>\n<p>A <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown by a method that is passed <strong>null</strong>. Some methods validate the arguments that are passed to them. If they do and one of the arguments is <strong>null</strong>, the method throws an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref> exception. Otherwise, it throws a <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> exception. The following example illustrates this scenario. </p>System.NullReferenceException.Class#3<p>To address this issue, make sure that the argument passed to the method is not <strong>null</strong>, or handle the thrown exception in a <strong>try…catch…finally</strong> block. For more information, see Handling and Throwing Exceptions. </p></li></ul>\n<p>The following Microsoft intermediate language (MSIL) instructions throw <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref>: <strong>callvirt</strong>, <strong>cpblk</strong>, <strong>cpobj</strong>, <strong>initblk</strong>, <strong>ldelem.<type></strong>, <strong>ldelema</strong>, <strong>ldfld</strong>, <strong>ldflda</strong>, <strong>ldind.<type></strong>, <strong>ldlen</strong>, <strong>stelem.<type></strong>, <strong>stfld</strong>, <strong>stind.<type></strong>, <strong>throw</strong>, and <strong>unbox</strong>.  </p>\n<p>\n<xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT COR_E_NULLREFERENCE, which has the value 0x80004003.</p>\n<p>For a list of initial property values for an instance of <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.NullReferenceException.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p>\n<p>Handling NullReferenceException in release code</p>\n<p>It's usually better to avoid a NullReferenceException than to handle it after it occurs. Handling an exception can make your code harder to maintain and understand, and can sometimes introduce other bugs. A NullReferenceException is often a non-recoverable error. In these cases, letting the exception stop the app might be the best alternative. </p>\n<p>However, there are many situations where handling the error can be useful:</p>\n<ul><li>\n<p>Your app can ignore objects that are null. For example, if your app retrieves and processes records in a database, you might be able to ignore some number of bad records that result in null objects. Recording the bad data in a log file or in the application UI might be all you have to do.</p>\n</li><li>\n<p>You can recover from the exception. For example, a call to a web service that returns a reference type might return null if the connection is lost or the connection times out. You can attempt to reestablish the connection and try the call again.</p>\n</li><li>\n<p>You can restore the state of your app to a valid state. For example, you might be performing a multi-step task that requires you to save information to a data store before you call a method that throws a NullReferenceException. If the uninitialized object would corrupt the data record, you can remove the previous data before you close the app. </p>\n</li><li>\n<p>You want to report the exception. For example, if the error was caused by a mistake from the user of your app, you can generate a message to help him supply the correct information. You can also log information about the error to help you fix the problem. Some frameworks, like ASP.NET, have a high-level exception handler that captures all errors to that the app never crashes; in that case, logging the exception might be the only way you can know that it occurs.</p>\n</li></ul>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public class NullReferenceException : SystemException, ISerializable, _Exception
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public Class NullReferenceException
          Inherits SystemException
          Implements ISerializable, _Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.NullReferenceException.#ctor
  commentId: M:System.NullReferenceException.#ctor
  id: '#ctor'
  parent: System.NullReferenceException
  langs:
  - csharp
  - vb
  name: NullReferenceException()
  fullName: System.NullReferenceException.NullReferenceException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/NullReferenceException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/NullReferenceException.cs
    startLine: 20
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> class, setting the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"The value 'null' was found where an instance of an object was required.\" This message takes into account the current system culture.</p>\n"
  remarks: "\n<p>The following table shows the initial property values for an instance of <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public NullReferenceException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.NullReferenceException.#ctor(System.String)
  commentId: M:System.NullReferenceException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.NullReferenceException
  langs:
  - csharp
  - vb
  name: NullReferenceException(String)
  fullName: System.NullReferenceException.NullReferenceException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/NullReferenceException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/NullReferenceException.cs
    startLine: 25
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The following table shows the initial property values for an instance of <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public NullReferenceException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.NullReferenceException.#ctor(System.String,System.Exception)
  commentId: M:System.NullReferenceException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.NullReferenceException
  langs:
  - csharp
  - vb
  name: NullReferenceException(String, Exception)
  fullName: System.NullReferenceException.NullReferenceException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/NullReferenceException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/NullReferenceException.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.NullReferenceException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public NullReferenceException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: System.Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
