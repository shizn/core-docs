items:
- uid: System.Data.SqlClient.SqlParameter
  commentId: T:System.Data.SqlClient.SqlParameter
  id: SqlParameter
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlParameter.#ctor
  - System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType)
  - System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32)
  - System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)
  - System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Object)
  - System.Data.SqlClient.SqlParameter.CompareInfo
  - System.Data.SqlClient.SqlParameter.DbType
  - System.Data.SqlClient.SqlParameter.Direction
  - System.Data.SqlClient.SqlParameter.IsNullable
  - System.Data.SqlClient.SqlParameter.LocaleId
  - System.Data.SqlClient.SqlParameter.Offset
  - System.Data.SqlClient.SqlParameter.ParameterName
  - System.Data.SqlClient.SqlParameter.Precision
  - System.Data.SqlClient.SqlParameter.ResetDbType
  - System.Data.SqlClient.SqlParameter.ResetSqlDbType
  - System.Data.SqlClient.SqlParameter.Scale
  - System.Data.SqlClient.SqlParameter.Size
  - System.Data.SqlClient.SqlParameter.SourceColumn
  - System.Data.SqlClient.SqlParameter.SourceColumnNullMapping
  - System.Data.SqlClient.SqlParameter.SqlDbType
  - System.Data.SqlClient.SqlParameter.SqlValue
  - System.Data.SqlClient.SqlParameter.ToString
  - System.Data.SqlClient.SqlParameter.TypeName
  - System.Data.SqlClient.SqlParameter.Value
  - System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase
  - System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName
  - System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema
  langs:
  - csharp
  - vb
  name: SqlParameter
  fullName: System.Data.SqlClient.SqlParameter
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlParameter
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 12
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Represents a parameter to a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and optionally its mapping to <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> columns. This class cannot be inherited. For more information on parameters, see Configuring Parameters and Parameter Data Types.</p>\n"
  remarks: "\n<p>Parameter names are not case sensitive.</p>\n<p>Nameless, also called ordinal, parameters are not supported by the .NET Framework Data Provider for SQL Server.</p>\n<p>For more information, along with additional sample code demonstrating how to use parameters, see Commands and Parameters.</p>\n"
  example:
  - "\n<p>The following example creates multiple instances of <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> through the <xref href=\"System.Data.SqlClient.SqlParameterCollection\" data-throw-if-not-resolved=\"false\"></xref> collection within the <xref href=\"System.Data.SqlClient.SqlDataAdapter\" data-throw-if-not-resolved=\"false\"></xref>. These parameters are used to select data from the data source and put the data in the <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref>. This example assumes that a <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlDataAdapter\" data-throw-if-not-resolved=\"false\"></xref> have already been created by using the appropriate schema, commands, and connection. For more information and additional examples on using parameters, see Retrieving and Modifying Data in ADO.NET and Configuring Parameters and Parameter Data Types.</p>Classic WebData SqlParameter Example#1"
  syntax:
    content: 'public sealed class SqlParameter : DbParameter, DbParameter'
    content.vb: >-
      Public NotInheritable Class SqlParameter
          Inherits DbParameter
          Implements DbParameter
  seealso:
  - type: System.Data.SqlClient.SqlParameterCollection
    commentId: T:System.Data.SqlClient.SqlParameterCollection
  - type: System.Data.SqlClient.SqlCommand
    commentId: T:System.Data.SqlClient.SqlCommand
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlParameter.#ctor
  commentId: M:System.Data.SqlClient.SqlParameter.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SqlParameter()
  fullName: System.Data.SqlClient.SqlParameter.SqlParameter()
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 83
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.SqlParameter Example#1"
  syntax:
    content: public SqlParameter()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType)
  commentId: M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType)
  id: '#ctor(System.String,System.Data.SqlDbType)'
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SqlParameter(String, SqlDbType)
  fullName: System.Data.SqlClient.SqlParameter.SqlParameter(System.String, System.Data.SqlDbType)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 87
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> class that uses the parameter name and the data type.</p>\n"
  remarks: "\n<p>The data type and, if appropriate, <strong>Size</strong> and <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> are inferred from the value of the <em>dbType</em> parameter.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.SqlParameter2 Example#1"
  syntax:
    content: public SqlParameter(string parameterName, SqlDbType dbType)
    content.vb: Public Sub New(parameterName As String, dbType As SqlDbType)
    parameters:
    - id: parameterName
      type: System.String
    - id: dbType
      type: System.Data.SqlDbType
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value supplied in the <em>dbType</em> parameter is an invalid back-end data type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32)
  commentId: M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32)
  id: '#ctor(System.String,System.Data.SqlDbType,System.Int32)'
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SqlParameter(String, SqlDbType, Int32)
  fullName: System.Data.SqlClient.SqlParameter.SqlParameter(System.String, System.Data.SqlDbType, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 101
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> class that uses the parameter name, the <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref>, and the size.</p>\n"
  remarks: "\n<p>The <strong>Size</strong> is inferred from the value of the <em>dbType</em> parameter if it is not explicitly set in the <em>size</em> parameter.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.SqlParameter4 Example#1"
  syntax:
    content: public SqlParameter(string parameterName, SqlDbType dbType, int size)
    content.vb: Public Sub New(parameterName As String, dbType As SqlDbType, size As Integer)
    parameters:
    - id: parameterName
      type: System.String
    - id: dbType
      type: System.Data.SqlDbType
    - id: size
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value supplied in the <em>dbType</em> parameter is an invalid back-end data type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)
  commentId: M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)
  id: '#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)'
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SqlParameter(String, SqlDbType, Int32, String)
  fullName: System.Data.SqlClient.SqlParameter.SqlParameter(System.String, System.Data.SqlDbType, System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 108
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> class that uses the parameter name, the <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref>, the size, and the source column name.</p>\n"
  remarks: "\n<p>The <strong>Size</strong> is inferred from the value of the <em>dbType</em> parameter if it is not explicitly set in the <em>size</em> parameter. </p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.SqlParameter5 Example#1"
  syntax:
    content: public SqlParameter(string parameterName, SqlDbType dbType, int size, string sourceColumn)
    content.vb: Public Sub New(parameterName As String, dbType As SqlDbType, size As Integer, sourceColumn As String)
    parameters:
    - id: parameterName
      type: System.String
    - id: dbType
      type: System.Data.SqlDbType
    - id: size
      type: System.Int32
    - id: sourceColumn
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value supplied in the <em>dbType</em> parameter is an invalid back-end data type. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Object)
  commentId: M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SqlParameter(String, Object)
  fullName: System.Data.SqlClient.SqlParameter.SqlParameter(System.String, System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 93
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> class that uses the parameter name and a value of the new <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When you specify an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> in the <em>value</em> parameter, the <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> is inferred from the Microsoft .NET Framework type of the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use caution when you use this overload of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> constructor to specify integer parameter values. Because this overload takes a <em>value</em> of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>, you must convert the integral value to an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> type when the value is zero, as the following C# example demonstrates.</p>\n<pre><code>Parameter = new SqlParameter(\"@pname\", (object)0);</code></pre>\n<p>If you do not perform this conversion, the compiler assumes that you are trying to call the <strong>SqlParameter</strong> (<em>string</em>, <em>SqlDbType</em>) constructor overload.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.SqlParameter6 Example#1"
  syntax:
    content: public SqlParameter(string parameterName, object value)
    content.vb: Public Sub New(parameterName As String, value As Object)
    parameters:
    - id: parameterName
      type: System.String
    - id: value
      type: System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.CompareInfo
  commentId: P:System.Data.SqlClient.SqlParameter.CompareInfo
  id: CompareInfo
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: CompareInfo
  fullName: System.Data.SqlClient.SqlParameter.CompareInfo
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareInfo
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 131
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object that defines how string comparisons should be performed for this parameter.</p>\n"
  syntax:
    content: public SqlCompareOptions CompareInfo { get; set; }
    content.vb: Public Property CompareInfo As SqlCompareOptions
    parameters: []
    return:
      type: System.Data.SqlTypes.SqlCompareOptions
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.DbType
  commentId: P:System.Data.SqlClient.SqlParameter.DbType
  id: DbType
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: DbType
  fullName: System.Data.SqlClient.SqlParameter.DbType
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbType
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 197
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> of the parameter.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> are linked. Therefore, setting the <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> changes the <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> to a supporting <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of the supported data types, see the appropriate <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> member. For more information, see DataAdapter Parameters.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.IsNullable Example#1"
  syntax:
    content: public override DbType DbType { get; set; }
    content.vb: Public Overrides Property DbType As DbType
    parameters: []
    return:
      type: DbType
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.Direction
  commentId: P:System.Data.SqlClient.SqlParameter.Direction
  id: Direction
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: Direction
  fullName: System.Data.SqlClient.SqlParameter.Direction
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Direction
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 42
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Data.ParameterDirection\" data-throw-if-not-resolved=\"false\"></xref> is output, and execution of the associated <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> does not return a value, the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> contains a null value.</p>\n<p>\n<strong>Output</strong>, <strong>InputOut</strong>, and <strong>ReturnValue</strong> parameters returned by calling <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteReader\" data-throw-if-not-resolved=\"false\"></xref> cannot be accessed until you close the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>\n<p>Commands and Parameters</p>\n<p>DataAdapter Parameters</p>\n<p>SQL Server and ADO.NET</p>\n"
  syntax:
    content: public override ParameterDirection Direction { get; set; }
    content.vb: Public Overrides Property Direction As ParameterDirection
    parameters: []
    return:
      type: ParameterDirection
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The property was not set to one of the valid <xref href=\"System.Data.ParameterDirection\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.IsNullable
  commentId: P:System.Data.SqlClient.SqlParameter.IsNullable
  id: IsNullable
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: IsNullable
  fullName: System.Data.SqlClient.SqlParameter.IsNullable
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNullable
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 69
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a value that indicates whether the parameter accepts null values. <xref href=\"System.Data.SqlClient.SqlParameter.IsNullable\" data-throw-if-not-resolved=\"false\"></xref> is not used to validate the parameter’s value and will not prevent sending or receiving a null value when executing a command.</p>\n"
  remarks: "\n<p>Null values are handled using the <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>DataWorks SqlParam.Properties#2"
  syntax:
    content: public override bool IsNullable { get; set; }
    content.vb: Public Overrides Property IsNullable As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.LocaleId
  commentId: P:System.Data.SqlClient.SqlParameter.LocaleId
  id: LocaleId
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: LocaleId
  fullName: System.Data.SqlClient.SqlParameter.LocaleId
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocaleId
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 233
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the locale identifier that determines conventions and language for a particular region.</p>\n"
  remarks: "\n<p>The locale identifies conventions and language for a particular geographical region. The codepage used to encode a specific string (the character set) is based on the locale used by that string or the environment that produced it. This property sets (for input parameters) or gets (for output parameters) the locale to be attached to a string when exchanging data with the server. This property is typically used together with the <xref href=\"System.Data.SqlClient.SqlParameter.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<pre><code>static void CreateSqlParameterLocaleId(){\nSqlParameter parameter = new SqlParameter(\"pName\", SqlDbType.VarChar);\nparameter.LocaleId = 1033;   // English - United States\n}</code></pre>\n"
  syntax:
    content: public int LocaleId { get; set; }
    content.vb: Public Property LocaleId As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.Offset
  commentId: P:System.Data.SqlClient.SqlParameter.Offset
  id: Offset
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: Offset
  fullName: System.Data.SqlClient.SqlParameter.Offset
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Offset
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 82
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the offset to the <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>The <strong>Offset</strong> property is used for client-side chunking of binary and string data. For example, in order to insert 10MB of text into a column on a server, a user might execute 10 parameterized inserts of 1MB chunks, shifting the value of <strong>Offset</strong> on each iteration by 1MB.</p>\n<p>\n<strong>Offset</strong> specifies the number of bytes for binary types, and the number of characters for strings. The count for strings does not include the terminating character.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>DataWorks SqlParam.Properties#3"
  syntax:
    content: public int Offset { get; set; }
    content.vb: Public Property Offset As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.ParameterName
  commentId: P:System.Data.SqlClient.SqlParameter.ParameterName
  id: ParameterName
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: ParameterName
  fullName: System.Data.SqlClient.SqlParameter.ParameterName
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParameterName
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 443
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the name of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.ParameterName\" data-throw-if-not-resolved=\"false\"></xref> is specified in the form @paramname. You must set <xref href=\"System.Data.SqlClient.SqlParameter.ParameterName\" data-throw-if-not-resolved=\"false\"></xref> before executing a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> that relies on parameters.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.ParameterName Example#1"
  syntax:
    content: public override string ParameterName { get; set; }
    content.vb: Public Overrides Property ParameterName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.Precision
  commentId: P:System.Data.SqlClient.SqlParameter.Precision
  id: Precision
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: Precision
  fullName: System.Data.SqlClient.SqlParameter.Precision
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Precision
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 482
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the maximum number of digits used to represent the <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> property is used by parameters that have a <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> of <strong>Decimal</strong>.</p>\n<p>You do not need to specify values for the <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> properties for input parameters, as they can be inferred from the parameter value. <strong>Precision</strong> and <strong>Scale</strong> are required for output parameters and for scenarios where you need to specify complete metadata for a parameter without indicating a value, such as specifying a null value with a specific precision and scale.</p>\n<p>Use of this property to coerce data passed to the database is not supported. To round, truncate, or otherwise coerce data before passing it to the database, use the <xref href=\"System.Math\" data-throw-if-not-resolved=\"false\"></xref> class that is part of the <strong>System</strong> namespace prior to assigning a value to the parameter's <strong>Value</strong> property.</p>\n<p>  Microsoft .NET Framework data providers that are included with the .NET Framework version 1.0 do not verify the <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> parameter values. This can cause truncated data being inserted at the data source. If you are using .NET Framework version 1.0, validate the <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values before setting the parameter value. When you use .NET Framework version 1.1 or a later version, an exception is thrown if a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> parameter value is set with an invalid <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> values that exceed the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> parameter scale are still truncated.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>Classic WebData SqlParameter.Precision Example#1"
  syntax:
    content: public override byte Precision { get; set; }
    content.vb: Public Overrides Property Precision As Byte
    parameters: []
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.Scale
  commentId: P:System.Data.SqlClient.SqlParameter.Scale
  id: Scale
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: Scale
  fullName: System.Data.SqlClient.SqlParameter.Scale
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Scale
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 526
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the number of decimal places to which <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> is resolved.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> property is used by parameters that have a <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> of <strong>Decimal</strong>.</p>\n<p>Data may be truncated if the <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> property is not explicitly specified and the data on the server does not fit in scale 0 (the default). </p>\n<p>You do not need to specify values for the <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> properties for input parameters, as they can be inferred from the parameter value. <strong>Precision</strong> and <strong>Scale</strong> are required for output parameters and for scenarios where you need to specify complete metadata for a parameter without indicating a value, such as specifying a null value with a specific precision and scale.</p>\n<p>Use of this property to coerce data passed to the database is not supported. To round, truncate, or otherwise coerce data before passing it to the database, use the <xref href=\"System.Math\" data-throw-if-not-resolved=\"false\"></xref> class that is part of the <strong>System</strong> namespace prior to assigning a value to the parameter's <strong>Value</strong> property.</p>\n<p>.NET Framework data providers that are included with the .NET Framework version 1.0 do not verify the <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> parameter values. This can cause truncated data to be inserted at the data source. If you are using .NET Framework version 1.0, validate the <xref href=\"System.Data.SqlClient.SqlParameter.Precision\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values before setting the parameter value. <xref href=\"System.Data.SqlClient.SqlParameter.Scale\" data-throw-if-not-resolved=\"false\"></xref> values that exceed the <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> parameter scale are still truncated. </p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>DataWorks SqlParam.Properties#4"
  syntax:
    content: public override byte Scale { get; set; }
    content.vb: Public Overrides Property Scale As Byte
    parameters: []
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.Size
  commentId: P:System.Data.SqlClient.SqlParameter.Size
  id: Size
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: Size
  fullName: System.Data.SqlClient.SqlParameter.Size
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Size
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 98
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the maximum size, in bytes, of the data within the column.</p>\n"
  remarks: "\n<p>Return values are not affected by this property; return parameters from stored procedures are always fixed-size integers.</p>\n<p>For output parameters with a variable length type (nvarchar, for example), the size of the parameter defines the size of the buffer holding the output parameter. The output parameter can be truncated to a size specified with <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref>. For character types, the size specified with <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> is in characters.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> property is used for binary and string types. For parameters of type <strong>SqlType.String</strong>, <strong>Size</strong> means length in Unicode characters. For parameters of type <strong>SqlType.Xml</strong>, <strong>Size</strong> is ignored.</p>\n<p>For nonstring data types and ANSI string data, the <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> property refers to the number of bytes. For Unicode string data, <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> refers to the number of characters. The count for strings does not include the terminating character.</p>\n<p>For variable-length data types, <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> describes the maximum amount of data to transmit to the server. For example, for a Unicode string value, <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> could be used to limit the amount of data sent to the server to the first one hundred characters.</p>\n<p>If not explicitly set, the size is inferred from the actual size of the specified parameter value.</p>\n<p>If the fractional part of the parameter value is greater than the size, then the value will be truncated to match the size.</p>\n<p>For fixed length data types, the value of <xref href=\"System.Data.SqlClient.SqlParameter.Size\" data-throw-if-not-resolved=\"false\"></xref> is ignored. It can be retrieved for informational purposes, and returns the maximum amount of bytes the provider uses when transmitting the value of the parameter to the server.</p>\n<p>For information about streaming, see SqlClient Streaming Support.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>DataWorks SqlParam.Properties#5"
  syntax:
    content: public override int Size { get; set; }
    content.vb: Public Overrides Property Size As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.SourceColumn
  commentId: P:System.Data.SqlClient.SqlParameter.SourceColumn
  id: SourceColumn
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SourceColumn
  fullName: System.Data.SqlClient.SqlParameter.SourceColumn
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SourceColumn
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 129
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the name of the source column mapped to the <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> and used for loading or returning the <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  remarks: "\n<p>When <xref href=\"System.Data.SqlClient.SqlParameter.SourceColumn\" data-throw-if-not-resolved=\"false\"></xref> is set to anything other than an empty string, the value of the parameter is retrieved from the column with the <xref href=\"System.Data.SqlClient.SqlParameter.SourceColumn\" data-throw-if-not-resolved=\"false\"></xref> name. If <xref href=\"System.Data.SqlClient.SqlParameter.Direction\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>Input</strong>, the value is taken from the <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Data.SqlClient.SqlParameter.Direction\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>Output</strong>, the value is taken from the data source. A <xref href=\"System.Data.SqlClient.SqlParameter.Direction\" data-throw-if-not-resolved=\"false\"></xref> of <strong>InputOutput</strong> is a combination of both.</p>\n<p>For more information about how to use the <xref href=\"System.Data.SqlClient.SqlParameter.SourceColumn\" data-throw-if-not-resolved=\"false\"></xref> property, see DataAdapter Parameters and Updating Data Sources with DataAdapters.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>DataWorks SqlParam.Properties#6"
  syntax:
    content: public override string SourceColumn { get; set; }
    content.vb: Public Overrides Property SourceColumn As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.SourceColumnNullMapping
  commentId: P:System.Data.SqlClient.SqlParameter.SourceColumnNullMapping
  id: SourceColumnNullMapping
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SourceColumnNullMapping
  fullName: System.Data.SqlClient.SqlParameter.SourceColumnNullMapping
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SourceColumnNullMapping
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 142
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Sets or gets a value which indicates whether the source column is nullable. This allows <xref href=\"System.Data.SqlClient.SqlCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref> to correctly generate Update statements for nullable columns.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlParameter.SourceColumnNullMapping\" data-throw-if-not-resolved=\"false\"></xref> is used by the <xref href=\"System.Data.SqlClient.SqlCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref> to correctly generate update commands when dealing with nullable columns. Generally, use of <xref href=\"System.Data.SqlClient.SqlParameter.SourceColumnNullMapping\" data-throw-if-not-resolved=\"false\"></xref> is limited to developers inheriting from <xref href=\"System.Data.SqlClient.SqlCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Data.Common.DbCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref> uses this property to determine whether the source column is nullable, and sets this property to <strong>true</strong> if it is nullable, and <strong>false</strong> if it is not. When <xref href=\"System.Data.SqlClient.SqlCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref> is generating its Update statement, it examines the <xref href=\"System.Data.SqlClient.SqlParameter.SourceColumnNullMapping\" data-throw-if-not-resolved=\"false\"></xref> for each parameter. If the property is <strong>true</strong>, <xref href=\"System.Data.SqlClient.SqlCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref> generates a WHERE clauses like the following (in this query expression, \"FieldName\" represents the name of the field):</p>\n<pre><code>((@IsNull_FieldName = 1 AND FieldName IS NULL) OR \n(FieldName = @Original_FieldName))</code></pre>\n<p>If <xref href=\"System.Data.SqlClient.SqlParameter.SourceColumnNullMapping\" data-throw-if-not-resolved=\"false\"></xref> for the field is false, <xref href=\"System.Data.SqlClient.SqlCommandBuilder\" data-throw-if-not-resolved=\"false\"></xref> generates the following WHERE clause:</p>\n<pre><code>FieldName = @OriginalFieldName</code></pre>\n<p>In addition, @IsNull_FieldName contains 1 if the source field contains null, and 0 if it does not. This mechanism allows for a performance optimization in SQL Server, and provides for common code that works across multiple providers.</p>\n"
  syntax:
    content: public override bool SourceColumnNullMapping { get; set; }
    content.vb: Public Overrides Property SourceColumnNullMapping As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.SqlDbType
  commentId: P:System.Data.SqlClient.SqlParameter.SqlDbType
  id: SqlDbType
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SqlDbType
  fullName: System.Data.SqlClient.SqlParameter.SqlDbType
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlDbType
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 567
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> of the parameter.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> are linked. Therefore, setting the <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> changes the <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> to a supporting <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of the supported data types, see the appropriate <xref href=\"System.Data.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> member. For more information, see DataAdapter Parameters.</p>\n<p>For information about streaming, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public SqlDbType SqlDbType { get; set; }
    content.vb: Public Property SqlDbType As SqlDbType
    parameters: []
    return:
      type: System.Data.SqlDbType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.SqlValue
  commentId: P:System.Data.SqlClient.SqlParameter.SqlValue
  id: SqlValue
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: SqlValue
  fullName: System.Data.SqlClient.SqlParameter.SqlValue
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlValue
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 609
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the value of the parameter as an SQL type.</p>\n"
  remarks: "\n<p>For input parameters, the value is bound to the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> that is sent to the server. For output and return value parameters, the value is set on completion of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and after the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n<p>This property can be set to null or <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>. Use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref> to send a NULL value as the value of the parameter. Use null or do not set <xref href=\"System.Data.SqlClient.SqlParameter.SqlValue\" data-throw-if-not-resolved=\"false\"></xref> to use the default value for the parameter.</p>\n<p>If the application specifies the database type, the bound value is converted to that type when the provider sends the data to the server. The provider tries to convert any type of value if it supports the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. Conversion errors may result if the specified type is not compatible with the value.</p>\n<p>Both the <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> properties can be inferred by setting the <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> property is overwritten by <strong>SqlDataAdapter.UpdateCommand</strong>.</p>\n<p>Use the <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> property to return parameter values as common language runtime (CLR) types.</p>\n<p>For information about streaming, see SqlClient Streaming Support.</p>\n"
  syntax:
    content: public object SqlValue { get; set; }
    content.vb: Public Property SqlValue As Object
    parameters: []
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.TypeName
  commentId: P:System.Data.SqlClient.SqlParameter.TypeName
  id: TypeName
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: TypeName
  fullName: System.Data.SqlClient.SqlParameter.TypeName
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeName
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 650
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the type name for a table-valued parameter.</p>\n"
  syntax:
    content: public string TypeName { get; set; }
    content.vb: Public Property TypeName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.Value
  commentId: P:System.Data.SqlClient.SqlParameter.Value
  id: Value
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Data.SqlClient.SqlParameter.Value
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 663
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the value of the parameter.</p>\n"
  remarks: "\n<p>For input parameters, the value is bound to the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> that is sent to the server. For output and return value parameters, the value is set on completion of the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and after the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n<p>This property can be set to null or <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>. Use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref> to send a NULL value as the value of the parameter. Use null or do not set <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> to use the default value for the parameter.</p>\n<p>An exception is thrown if non-Unicode XML data is passed as a string.</p>\n<p>If the application specifies the database type, the bound value is converted to that type when the provider sends the data to the server. The provider tries to convert any type of value if it supports the <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. Conversion errors may result if the specified type is not compatible with the value. </p>\n<p>Both the <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> properties can be inferred by setting the Value.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlParameter.Value\" data-throw-if-not-resolved=\"false\"></xref> property is overwritten by <strong>SqlDataAdapter.UpdateCommand</strong>.</p>\n<p>For information about streaming, see SqlClient Streaming Support.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref> and sets some of its properties.</p>DataWorks SqlParam.Properties#8"
  syntax:
    content: public override object Value { get; set; }
    content.vb: Public Overrides Property Value As Object
    parameters: []
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase
  commentId: P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase
  id: XmlSchemaCollectionDatabase
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: XmlSchemaCollectionDatabase
  fullName: System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlSchemaCollectionDatabase
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 158
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the name of the database where the schema collection for this XML instance is located.</p>\n"
  remarks: "\n<p>This value is null (<strong>Nothing</strong> in Microsoft Visual Basic) if the collection is defined within the current database. It is also null if there is no schema collection, in which case <xref href=\"System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema\" data-throw-if-not-resolved=\"false\"></xref> are also null.</p>\n"
  syntax:
    content: public string XmlSchemaCollectionDatabase { get; set; }
    content.vb: Public Property XmlSchemaCollectionDatabase As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName
  commentId: P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName
  id: XmlSchemaCollectionName
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: XmlSchemaCollectionName
  fullName: System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlSchemaCollectionName
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 184
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets the name of the schema collection for this XML instance.</p>\n"
  remarks: "\n<p>This value is null (<strong>Nothing</strong> in Microsoft Visual Basic) if there is no associated schema collection. If the value is null, then <xref href=\"System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema\" data-throw-if-not-resolved=\"false\"></xref> are also null.</p>\n"
  syntax:
    content: public string XmlSchemaCollectionName { get; set; }
    content.vb: Public Property XmlSchemaCollectionName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema
  commentId: P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema
  id: XmlSchemaCollectionOwningSchema
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: XmlSchemaCollectionOwningSchema
  fullName: System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlSchemaCollectionOwningSchema
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 171
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>The owning relational schema where the schema collection for this XML instance is located.</p>\n"
  remarks: "\n<p>This value is null (<strong>Nothing</strong> in Microsoft Visual Basic) if the collection is defined within the current database. It is also null if there is no schema collection, in which case <xref href=\"System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName\" data-throw-if-not-resolved=\"false\"></xref> are also null.</p>\n"
  syntax:
    content: public string XmlSchemaCollectionOwningSchema { get; set; }
    content.vb: Public Property XmlSchemaCollectionOwningSchema As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.ResetDbType
  commentId: M:System.Data.SqlClient.SqlParameter.ResetDbType
  id: ResetDbType
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: ResetDbType()
  fullName: System.Data.SqlClient.SqlParameter.ResetDbType()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetDbType
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 218
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Resets the type associated with this <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When executing a command that includes parameter values, code can either set the type of a parameter explicitly, or the parameter can infer its type from its value. Calling this method resets the parameter so that it can again infer its type from the value passed in the parameter. Calling this method affects both the <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override void ResetDbType()
    content.vb: Public Overrides Sub ResetDbType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlParameter.ResetSqlDbType
  commentId: M:System.Data.SqlClient.SqlParameter.ResetSqlDbType
  id: ResetSqlDbType
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: ResetSqlDbType()
  fullName: System.Data.SqlClient.SqlParameter.ResetSqlDbType()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetSqlDbType
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameter.cs
    startLine: 600
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Resets the type associated with this <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When executing a command that includes parameter values, code can either set the type of a parameter explicitly, or the parameter can infer its type from its value. Calling this method resets the parameter so that it can again infer its type from the value passed in the parameter. Calling this method affects both the <xref href=\"System.Data.SqlClient.SqlParameter.DbType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlParameter.SqlDbType\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Data.SqlClient.SqlParameter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void ResetSqlDbType()
    content.vb: Public Sub ResetSqlDbType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlParameter.ToString
  commentId: M:System.Data.SqlClient.SqlParameter.ToString
  id: ToString
  parent: System.Data.SqlClient.SqlParameter
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Data.SqlClient.SqlParameter.ToString()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlParameterHelper.cs
    startLine: 170
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets a string that contains the <xref href=\"System.Data.SqlClient.SqlParameter.ParameterName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Data.SqlDbType
  parent: System.Data
  isExternal: false
  name: SqlDbType
  fullName: System.Data.SqlDbType
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Data.SqlTypes.SqlCompareOptions
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlCompareOptions
  fullName: System.Data.SqlTypes.SqlCompareOptions
- uid: System.Data.SqlTypes
  isExternal: false
  name: System.Data.SqlTypes
  fullName: System.Data.SqlTypes
- uid: System.Data.DbType
  parent: System.Data
  isExternal: false
  name: DbType
  fullName: System.Data.DbType
- uid: System.Data.ParameterDirection
  parent: System.Data
  isExternal: false
  name: ParameterDirection
  fullName: System.Data.ParameterDirection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
