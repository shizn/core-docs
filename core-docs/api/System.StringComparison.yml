items:
- uid: System.StringComparison
  commentId: T:System.StringComparison
  id: StringComparison
  parent: System
  children:
  - System.StringComparison.CurrentCulture
  - System.StringComparison.CurrentCultureIgnoreCase
  - System.StringComparison.Ordinal
  - System.StringComparison.OrdinalIgnoreCase
  langs:
  - csharp
  - vb
  name: StringComparison
  fullName: System.StringComparison
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/StringComparison.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringComparison
    path: src/mscorlib/src/System/StringComparison.cs
    startLine: 17
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Specifies the culture, case, and sort rules to be used by certain overloads of the <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.String.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  remarks: "\n<p>The <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.</p>\n<p>When you call a string comparison method such as <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.Equals(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, you should always call an overload that includes a parameter of type <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> so that you can specify the type of comparison that the method performs. For more information, see Best Practices for Using Strings in the .NET Framework.</p>\n<p>An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them. Using word sort rules and the conventions of a specific culture, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list.</p>\n<p>An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> in the string. An ordinal comparison is fast but culture-insensitive. When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.</p>\n<p>For more information about comparisons, see the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class remarks. For more information about culture, see the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> class remarks. For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see Best Practices for Using Strings in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following example compares four sets of words by using each member of the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> enumeration.  The comparisons use the conventions of the English (United States) and Sami, Nothern (Sweden) cultures. Note that the strings \"encyclop√¶dia\" and \"encyclopedia\" are considered equivalent in the en-US culture but not in the Sami, Northern (Sweden) culture. </p>System.String.Equals#3"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public enum StringComparison
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Enum StringComparison
  seealso:
  - type: System.String
    commentId: T:System.String
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  - type: System.Globalization.CompareInfo.Compare(System.String,System.String)
    commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String)
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.StringComparison.CurrentCulture
  commentId: F:System.StringComparison.CurrentCulture
  id: CurrentCulture
  parent: System.StringComparison
  langs:
  - csharp
  - vb
  name: CurrentCulture
  fullName: System.StringComparison.CurrentCulture
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/StringComparison.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentCulture
    path: src/mscorlib/src/System/StringComparison.cs
    startLine: 20
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compare strings using culture-sensitive sort rules and the current culture.</p>\n"
  syntax:
    content: CurrentCulture = 0
    return:
      type: System.StringComparison
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.StringComparison.CurrentCultureIgnoreCase
  commentId: F:System.StringComparison.CurrentCultureIgnoreCase
  id: CurrentCultureIgnoreCase
  parent: System.StringComparison
  langs:
  - csharp
  - vb
  name: CurrentCultureIgnoreCase
  fullName: System.StringComparison.CurrentCultureIgnoreCase
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/StringComparison.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentCultureIgnoreCase
    path: src/mscorlib/src/System/StringComparison.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.</p>\n"
  syntax:
    content: CurrentCultureIgnoreCase = 1
    return:
      type: System.StringComparison
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.StringComparison.Ordinal
  commentId: F:System.StringComparison.Ordinal
  id: Ordinal
  parent: System.StringComparison
  langs:
  - csharp
  - vb
  name: Ordinal
  fullName: System.StringComparison.Ordinal
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/StringComparison.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Ordinal
    path: src/mscorlib/src/System/StringComparison.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compare strings using ordinal (binary) sort rules.</p>\n"
  syntax:
    content: Ordinal = 4
    return:
      type: System.StringComparison
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.StringComparison.OrdinalIgnoreCase
  commentId: F:System.StringComparison.OrdinalIgnoreCase
  id: OrdinalIgnoreCase
  parent: System.StringComparison
  langs:
  - csharp
  - vb
  name: OrdinalIgnoreCase
  fullName: System.StringComparison.OrdinalIgnoreCase
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/StringComparison.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OrdinalIgnoreCase
    path: src/mscorlib/src/System/StringComparison.cs
    startLine: 25
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.</p>\n"
  syntax:
    content: OrdinalIgnoreCase = 5
    return:
      type: System.StringComparison
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.StringComparison
  parent: System
  isExternal: false
  name: StringComparison
  fullName: System.StringComparison
