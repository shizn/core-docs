items:
- uid: System.Security.AccessControl.FileSystemSecurity
  commentId: T:System.Security.AccessControl.FileSystemSecurity
  id: FileSystemSecurity
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.FileSystemSecurity.AccessRightType
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  langs:
  - csharp
  - vb
  name: FileSystemSecurity
  fullName: System.Security.AccessControl.FileSystemSecurity
  type: Class
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileSystemSecurity
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 106
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents the access control and audit security for a file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class is the base class for the <xref href=\"System.Security.AccessControl.FileSecurity\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.DirectorySecurity\" data-throw-if-not-resolved=\"false\"></xref> classes.  These classes represent all of the access rights for a system file or directory and define how access attempts are audited.  </p>\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class represents access and audit rights as a set of rules. Each access rule is represented by a <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object, while each audit rule is represented by a <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class is an abstraction of the underlying Microsoft Windows file security system. In this system, each file or directory has a discretionary access control list (DACL), which controls access to the file or directory, and a system access control list (SACL), which specifies the access control attempts that are audited.  The <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> classes are abstractions of access control entries (ACEs) that comprise DACLs and SACLs.      </p>\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class hides many of details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.</p>\n<p>To persist new or changed access control list (ACL) information to a file, use the <xref href=\"System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.  To persist new or changed ACL information to a directory, use the <xref href=\"System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To retrieve ACL information from a file, use the <see cref=\"Overload:System.IO.File.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.FileInfo.GetAccessControl\"></see> method.  To retrieve ACL information from a directory, use the <see cref=\"Overload:System.IO.Directory.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.DirectoryInfo.GetAccessControl\"></see> method.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.AccessControl.FileSecurity\" data-throw-if-not-resolved=\"false\"></xref> class to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.</p>IO.File.GetAccessControl-SetAccessControl#1"
  syntax:
    content: 'public abstract class FileSystemSecurity : NativeObjectSecurity'
    content.vb: >-
      Public MustInherit Class FileSystemSecurity
          Inherits NativeObjectSecurity
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.AccessControl.FileSystemSecurity.AccessRightType
  commentId: P:System.Security.AccessControl.FileSystemSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: AccessRightType
  fullName: System.Security.AccessControl.FileSystemSecurity.AccessRightType
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRightType
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 110
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the enumeration that the <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent access rights.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AccessRightType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object. </p>\n"
  example:
  - 
  syntax:
    content: public override Type AccessRightType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRightType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the <xref href=\"System.Security.AccessControl.FileSystemRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  commentId: P:System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleType
  fullName: System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleType
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 111
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the enumeration that the <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent access rules.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AccessRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</p>\n"
  example:
  - 
  syntax:
    content: public override Type AccessRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  commentId: P:System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleType
  fullName: System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleType
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 112
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type that the <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent audit rules.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AuditRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</p>\n"
  example:
  - 
  syntax:
    content: public override Type AuditRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AuditRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleFactory(Principal.IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)
  fullName: System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleFactory
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 113
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class that represents a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n"
  remarks: "\n<p>The recommended way to create access control rules is to use the constructors of the <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The return type of the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\" data-throw-if-not-resolved=\"false\"></xref> method is the base class, <xref href=\"System.Security.AccessControl.AccessRule\" data-throw-if-not-resolved=\"false\"></xref>, but the return value can be cast safely to the derived class.</p>\n"
  example:
  - 
  syntax:
    content: public override sealed AccessRule AccessRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public NotOverridable Overrides Function AccessRuleFactory(identityReference As Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType) As AccessRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object that represents a user account.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>An integer that specifies an access type.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the access rule is inherited; otherwise, <strong>false</strong>.    </p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies how to propagate access masks to child objects.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies how to propagate Access Control Entries (ACEs) to child objects.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values that specifies whether access is allowed or denied.</p>\n"
    return:
      type: System.Security.AccessControl.AccessRule
      description: "\n<p>A new <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that represents a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>type</em> parameters specify an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>identityReference</em> parameter is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>accessMask</em> parameter is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>identityReference</em> parameter is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  id: AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: AddAccessRule(FileSystemAccessRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAccessRule
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 114
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Adds the specified access control list (ACL) permission to the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds a new rule to the list of rules contained within a <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>If an access control list (ACL) already exists for the specified rule, the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method will still add the rule, with one exception: a <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> enumeration value supersedes an object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> enumeration value.</p>\n<p>To persist new or changed ACL information to a file, use the <xref href=\"System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.  To persist new or changed ACL information to a directory, use the <xref href=\"System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To retrieve ACL information from a file, use the <see cref=\"Overload:System.IO.File.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.FileInfo.GetAccessControl\"></see> method.  To retrieve ACL information from a directory, use the <see cref=\"Overload:System.IO.Directory.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.DirectoryInfo.GetAccessControl\"></see> method.</p>\n<p>When you add an access rule without setting the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag will be automatically added to your rule.  If you remove the rule later without specifying the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the flag will automatically be removed.  </p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.AccessControl.FileSecurity\" data-throw-if-not-resolved=\"false\"></xref> class to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.</p>IO.File.GetAccessControl-SetAccessControl#1"
  syntax:
    content: public void AddAccessRule(FileSystemAccessRule rule)
    content.vb: Public Sub AddAccessRule(rule As FileSystemAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAccessRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that represents an access control list (ACL) permission to add to a file or directory. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  id: AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: AddAuditRule(FileSystemAuditRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAuditRule
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 115
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Adds the specified audit rule to the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds a new audit rule to the list of rules contained within a <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>If an audit rule already exists for the specified rule, the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method will still add the rule.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method to add an audit rule to a file and uses the <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove the audit rule from the file.  You must supply a valid user or group account to run this example. </p>AccessControl.FileSystemAuditRule#1"
  syntax:
    content: public void AddAuditRule(FileSystemAuditRule rule)
    content.vb: Public Sub AddAuditRule(rule As FileSystemAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAuditRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref>  object that represents an audit rule to add to a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleFactory(Principal.IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)
  fullName: System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleFactory
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 116
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class representing the specified audit rule for the specified user.</p>\n"
  remarks: "\n<p>The recommended way to create audit rules is to use the constructors of the <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The return type of the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\" data-throw-if-not-resolved=\"false\"></xref> method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref>, but the return value can be cast safely to the derived class.</p>\n"
  example:
  - 
  syntax:
    content: public override sealed AuditRule AuditRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)
    content.vb: Public NotOverridable Overrides Function AuditRuleFactory(identityReference As Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags) As AuditRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object that represents a user account.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>An integer that specifies an access type.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the access rule is inherited; otherwise, <strong>false</strong>.    </p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies how to propagate access masks to child objects.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies how to propagate Access Control Entries (ACEs) to child objects.</p>\n"
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AuditFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the type of auditing to perform.</p>\n"
    return:
      type: System.Security.AccessControl.AuditRule
      description: "\n<p>A new <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object representing the specified audit rule for the specified user.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>flags</em> properties specify an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>identityReference</em> property is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>accessMask</em> property is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>identityReference</em> property is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRule(FileSystemAccessRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRule
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 117
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all matching allow or deny access control list (ACL) permissions from the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes either all matching <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rules or all matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> access rules from the current <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.  For example, you can use this method to remove all <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rules for a user by passing a <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account.  When you do this, the <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes any deny rules that specify the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value or the <xref href=\"System.Security.AccessControl.FileSystemRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>To persist new or changed access control list (ACL) information to a file, use the <xref href=\"System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.  To persist new or changed ACL information to a directory, use the <xref href=\"System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To retrieve ACL information from a file, use the <see cref=\"Overload:System.IO.File.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.FileInfo.GetAccessControl\"></see> method.  To retrieve ACL information from a directory, use the <see cref=\"Overload:System.IO.Directory.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.DirectoryInfo.GetAccessControl\"></see> method.</p>\n<p>When you add an access rule without setting the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag will be automatically added to your rule.  If you remove the rule later without specifying the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the flag will automatically be removed.  </p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.AccessControl.FileSecurity\" data-throw-if-not-resolved=\"false\"></xref> class to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.</p>IO.File.GetAccessControl-SetAccessControl#1"
  syntax:
    content: public bool RemoveAccessRule(FileSystemAccessRule rule)
    content.vb: Public Function RemoveAccessRule(rule As FileSystemAccessRule) As Boolean
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAccessRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that represents an access control list (ACL) permission to remove from a file or directory.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the access rule was removed; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRuleAll(FileSystemAccessRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRuleAll
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 118
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all access control list (ACL) permissions for the specified user from the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes all access control list (ACL) permissions for the specified user.  The method ignores all values in the <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object except the user account. </p>\n<p>To persist new or changed ACL information to a file, use the <xref href=\"System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.  To persist new or changed ACL information to a directory, use the <xref href=\"System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To retrieve ACL information from a file, use the <see cref=\"Overload:System.IO.File.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.FileInfo.GetAccessControl\"></see> method.  To retrieve ACL information from a directory, use the <see cref=\"Overload:System.IO.Directory.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.DirectoryInfo.GetAccessControl\"></see> method.</p>\n<p>When you add an access rule without setting the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag will be automatically added to your rule.  If you remove the rule later without specifying the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the flag will automatically be removed.    </p>\n"
  example:
  - 
  syntax:
    content: public void RemoveAccessRuleAll(FileSystemAccessRule rule)
    content.vb: Public Sub RemoveAccessRuleAll(rule As FileSystemAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAccessRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a user whose access control list (ACL) permissions should be removed from a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRuleSpecific(FileSystemAccessRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRuleSpecific
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 119
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes a single matching allow or deny access control list (ACL) permission from the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes the specified <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rule or the specified matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> access rule from the current <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.  For example, you can use this method to remove a specified <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rule for a user by passing a <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account.  When you do this, the <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes only the deny rule that specifies the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value.  It does not remove any deny rules that specify the <xref href=\"System.Security.AccessControl.FileSystemRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>To persist new or changed access control list (ACL) information to a file, use the <xref href=\"System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.  To persist new or changed ACL information to a directory, use the <xref href=\"System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To retrieve ACL information from a file, use the <see cref=\"Overload:System.IO.File.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.FileInfo.GetAccessControl\"></see> method.  To retrieve ACL information from a directory, use the <see cref=\"Overload:System.IO.Directory.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.DirectoryInfo.GetAccessControl\"></see> method.</p>\n<p>When you add an access rule without setting the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag will be automatically added to your rule.  If you remove the rule later without specifying the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> flag, the flag will automatically be removed.  </p>\n"
  example:
  - 
  syntax:
    content: public void RemoveAccessRuleSpecific(FileSystemAccessRule rule)
    content.vb: Public Sub RemoveAccessRuleSpecific(rule As FileSystemAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAccessRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a user whose access control list (ACL) permissions should be removed from a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRule(FileSystemAuditRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRule
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 120
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all matching allow or deny audit rules from the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes either all matching <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rules or all matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> audit rules from the current <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.  For example, you can use this method to remove all <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rules for a user by passing a <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account.  When you do this, the <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes any deny rules that specify the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value or the <xref href=\"System.Security.AccessControl.AuditFlags.Success\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method to add an audit rule to a file and uses the <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove the audit rule from the file.  You must supply a valid user or group account to run this example. </p>AccessControl.FileSystemAuditRule#1"
  syntax:
    content: public bool RemoveAuditRule(FileSystemAuditRule rule)
    content.vb: Public Function RemoveAuditRule(rule As FileSystemAuditRule) As Boolean
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAuditRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref>  object that represents an audit rule to remove from a file or directory.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the audit rule was removed; otherwise, <strong>false</strong></p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleAll(FileSystemAuditRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleAll
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 121
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all audit rules for the specified user from the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes all audit rules for the specified user.  It ignores all values in the <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object except the user account.</p>\n"
  example:
  - 
  syntax:
    content: public void RemoveAuditRuleAll(FileSystemAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleAll(rule As FileSystemAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAuditRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a user whose audit rules should be removed from a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleSpecific(FileSystemAuditRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleSpecific
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 122
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes a single matching allow or deny audit rule from the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes the specified matching <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rule or the specified matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> audit rule from the current <xref href=\"System.Security.AccessControl.FileSystemSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.  For example, you can use this method to remove a specified <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rule for a user by passing a <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account.  When you do this, the <xref href=\"System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes only a deny rule that specifies the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value.  It does not remove any deny rules that specify the <xref href=\"System.Security.AccessControl.AuditFlags.Success\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - 
  syntax:
    content: public void RemoveAuditRuleSpecific(FileSystemAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleSpecific(rule As FileSystemAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAuditRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref>  object that represents an audit rule to remove from a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: ResetAccessRule(FileSystemAccessRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetAccessRule
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 123
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Adds the specified access control list (ACL) permission to the current file or directory and removes all matching ACL permissions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds the specified access control list (ACL) rule or overwrites any identical ACL rules that match the <em>rule</em> parameter.  For example, if the <em>rule</em> parameter specifies a <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value and the <xref href=\"System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will be overwritten.  If the <xref href=\"System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.Security.AccessControl.FileSystemRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will also be overwritten. </p>\n<p>To persist new or changed ACL information to a file, use the <xref href=\"System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.  To persist new or changed ACL information to a directory, use the <xref href=\"System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To retrieve ACL information from a file, use the <see cref=\"Overload:System.IO.File.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.FileInfo.GetAccessControl\"></see> method.  To retrieve ACL information from a directory, use the <see cref=\"Overload:System.IO.Directory.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.DirectoryInfo.GetAccessControl\"></see> method.</p>\n"
  example:
  - 
  syntax:
    content: public void ResetAccessRule(FileSystemAccessRule rule)
    content.vb: Public Sub ResetAccessRule(rule As FileSystemAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAccessRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that represents an access control list (ACL) permission to add to a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  id: SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: SetAccessRule(FileSystemAccessRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAccessRule
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 124
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the specified access control list (ACL) permission for the current file or directory. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds the specified access control list (ACL) rule or overwrites any identical ACL rules that match the <xref href=\"System.Security.AccessControl.FileSystemRights\" data-throw-if-not-resolved=\"false\"></xref> value of the <em>rule</em> parameter.  For example, if the <em>rule</em> parameter specifies a <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value and the <xref href=\"System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will be overwritten.  If the <xref href=\"System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.Security.AccessControl.FileSystemRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will not be overwritten. </p>\n<p>To persist new or changed ACL information to a file, use the <xref href=\"System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.  To persist new or changed ACL information to a directory, use the <xref href=\"System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To retrieve ACL information from a file, use the <see cref=\"Overload:System.IO.File.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.FileInfo.GetAccessControl\"></see> method.  To retrieve ACL information from a directory, use the <see cref=\"Overload:System.IO.Directory.GetAccessControl\"></see> or <see cref=\"Overload:System.IO.DirectoryInfo.GetAccessControl\"></see> method.</p>\n"
  example:
  - 
  syntax:
    content: public void SetAccessRule(FileSystemAccessRule rule)
    content.vb: Public Sub SetAccessRule(rule As FileSystemAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAccessRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that represents an access control list (ACL) permission to set for a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  commentId: M:System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  id: SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  parent: System.Security.AccessControl.FileSystemSecurity
  langs:
  - csharp
  - vb
  name: SetAuditRule(FileSystemAuditRule)
  fullName: System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAuditRule
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 125
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the specified audit rule for the current file or directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds the specified audit rule or overwrites any identical audit rules that match the <xref href=\"System.Security.AccessControl.FileSystemRights\" data-throw-if-not-resolved=\"false\"></xref> value of the <em>rule</em> parameter.  For example, if the <em>rule</em> parameter specifies a <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value and the <xref href=\"System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical audit rule that specifies the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will be overwritten.  If the <xref href=\"System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical audit rule that specifies the <xref href=\"System.Security.AccessControl.FileSystemRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will not be overwritten. </p>\n"
  example:
  - 
  syntax:
    content: public void SetAuditRule(FileSystemAuditRule rule)
    content.vb: Public Sub SetAuditRule(rule As FileSystemAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.FileSystemAuditRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object that represents an audit rule to set for a file or directory.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.FileSystemAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSystemAccessRule
  fullName: System.Security.AccessControl.FileSystemAccessRule
- uid: System.Security.AccessControl.FileSystemAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSystemAuditRule
  fullName: System.Security.AccessControl.FileSystemAuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
