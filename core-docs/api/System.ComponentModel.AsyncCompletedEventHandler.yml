items:
- uid: System.ComponentModel.AsyncCompletedEventHandler
  commentId: T:System.ComponentModel.AsyncCompletedEventHandler
  id: AsyncCompletedEventHandler
  parent: System.ComponentModel
  children: []
  langs:
  - csharp
  - vb
  name: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
  type: Delegate
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsyncCompletedEventHandler
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 9
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Represents the method that will handle the MethodName<strong>Completed</strong> event of an asynchronous operation.</p>\n"
  remarks: "\n<p>When you create an <xref href=\"System.ComponentModel.AsyncCompletedEventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event-handler method is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see NIB: Events and Delegates.</p>\n<p>For an asynchronous method, called MethodName, in your component, you will have a corresponding MethodName<strong>Completed</strong> event, and an optional MethodName<strong>CompletedEventArgs</strong> class.</p>\n<p>For a component that supports multiple concurrent invocations of its asynchronous methods, the client can supply a unique token, or task ID, to distinguish which asynchronous task is raising particular events. The client's <xref href=\"System.ComponentModel.AsyncCompletedEventHandler\" data-throw-if-not-resolved=\"false\"></xref> can read the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.UserState\" data-throw-if-not-resolved=\"false\"></xref> property to determine which task is reporting completion. Your implementation should use the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> to create an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> that associates the client's task IDs with pending asynchronous tasks.</p>\n"
  example:
  - "\n<p>For a code example of the <xref href=\"System.ComponentModel.AsyncCompletedEventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate, see the example in the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public delegate void AsyncCompletedEventHandler(object sender, AsyncCompletedEventArgs e);
    content.vb: Public Delegate Sub AsyncCompletedEventHandler(sender As Object, e As AsyncCompletedEventArgs)
    parameters:
    - id: sender
      type: System.Object
    - id: e
      type: System.ComponentModel.AsyncCompletedEventArgs
  seealso:
  - type: System.ComponentModel.AsyncCompletedEventArgs
    commentId: T:System.ComponentModel.AsyncCompletedEventArgs
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.ComponentModel.AsyncCompletedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: AsyncCompletedEventArgs
  fullName: System.ComponentModel.AsyncCompletedEventArgs
- uid: System
  isExternal: false
  name: System
  fullName: System
