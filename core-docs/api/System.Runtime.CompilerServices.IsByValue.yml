items:
- uid: System.Runtime.CompilerServices.IsByValue
  commentId: T:System.Runtime.CompilerServices.IsByValue
  id: IsByValue
  parent: System.Runtime.CompilerServices
  children: []
  langs:
  - csharp
  - vb
  name: IsByValue
  fullName: System.Runtime.CompilerServices.IsByValue
  type: Class
  source:
    remote:
      path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsByValue
    path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
    startLine: 34
  assemblies:
  - System.Runtime.CompilerServices.VisualC
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Indicates that a modified method argument should be interpreted as having object passed-by-value semantics. This modifier is applied to reference types.  This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.CompilerServices.IsByValue\" data-throw-if-not-resolved=\"false\"></xref> class is used by the Microsoft C++ compiler to denote method parameters and return values whose semantics follow the C++ rules for objects passed by value.  </p>\n<p>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  </p>\n<p>You can emit custom modifiers into metadata using one of the following techniques:</p>\n<ul><li>\n<p>Using methods in the <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> class such as <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineField\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineConstructor\"></see>, and <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineProperty\"></see>.</p>\n</li><li>\n<p>Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <strong>modopt</strong> and <strong>modreq</strong>, and assembling the file with the Ilasm.exe (IL Assembler).</p>\n</li><li>\n<p>Using the unmanaged reflection API.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example demonstrates how to emit an <xref href=\"System.Runtime.CompilerServices.IsByValue\" data-throw-if-not-resolved=\"false\"></xref> object into an assembly using reflection.</p>Runtime.CompilerServices.IsByValue#1"
  syntax:
    content: 'public class IsByValue : object'
    content.vb: >-
      Public Class IsByValue
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
