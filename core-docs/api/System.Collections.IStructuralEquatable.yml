items:
- uid: System.Collections.IStructuralEquatable
  commentId: T:System.Collections.IStructuralEquatable
  id: IStructuralEquatable
  parent: System.Collections
  children:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  langs:
  - csharp
  - vb
  name: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IStructuralEquatable
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2354
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Defines methods to support the comparison of objects for structural equality. </p>\n"
  remarks: "\n<p>Structural equality means that two objects are equal because they have equal values. It differs from reference equality, which indicates that two object references are equal because they reference the same physical object. The <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface enables you to implement customized comparisons to check for the structural equality of collection objects. That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface. The interface has two members: <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref>, which tests for equality by using a specified <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation, and <xref href=\"System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref>, which returns identical hash codes for objects that are equal.</p>\n<p>The <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface supports only custom comparisons for structural equality. The <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface supports custom structural comparisons for sorting and ordering. </p>\n<p>The .NET Framework also provides default equality comparers, which are returned by the <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.StructuralComparisons.StructuralEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> properties. For more information, see the example. </p>\n<p>The generic tuple classes (<xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`2\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`3\" data-throw-if-not-resolved=\"false\"></xref>, and so on) and the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> class provide explicit implementations of the <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface value and providing your <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation as an argument to the <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method, you can define a custom equality comparison for the array or collection. </p>\n"
  example:
  - "\n<p>The default equality comparer, <strong>EqualityComparer<Object>.Default.Equals</strong>, considers two <strong>NaN</strong> values to be equal. However, in some cases, you may want the comparison of <strong>NaN</strong> values for equality to return <strong>false</strong>, which indicates that the values cannot be compared. The following example defines a <code>NanComparer</code> class that implements the <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface. It compares two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> or two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values by using the equality operator. It passes values of any other type to the default equality comparer.</p>System.Collections.IStructuralEquatable#1<p>The following example creates two identical 3-tuple objects whose components consist of three <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. The value of the second component is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. The example then calls the <xref href=\"System.Tuple`3.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, and it calls the <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method three times. The first time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property. The second time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.StructuralComparisons.StructuralEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> property. The third time, it passes the custom <code>NanComparer</code> object. As the output from the example shows, the first three method calls return <strong>true</strong>, whereas the fourth call returns <strong>false</strong>. </p>System.Collections.IStructuralEquatable#2"
  syntax:
    content: public interface IStructuralEquatable
    content.vb: Public Interface IStructuralEquatable
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  - type: System.Collections.IStructuralComparable
    commentId: T:System.Collections.IStructuralComparable
  - type: System.Collections.StructuralComparisons.StructuralEqualityComparer
    commentId: P:System.Collections.StructuralComparisons.StructuralEqualityComparer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  id: Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  langs:
  - csharp
  - vb
  name: Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2356
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Determines whether an object is structurally equal to the current instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method supports custom structural comparison of array and tuple objects. This method in turn calls the <em>comparer</em> object's <xref href=\"System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref href=\"System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> end and the <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method returns a value either when a method call returns <strong>false</strong> or after all array elements or tuple components have been compared. </p>\n"
  example:
  - "\n<p>The default equality comparer, <strong>EqualityComparer<Object>.Default.Equals</strong>, considers two <strong>NaN</strong> values to be equal. However, in some cases, you may want the comparison of <strong>NaN</strong> values for equality to return <strong>false</strong>, which indicates that the values cannot be compared. The following example defines a <code>NanComparer</code> class that implements the <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface. It compares two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> or two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values by using the equality operator. It passes values of any other type to the default equality comparer.</p>System.Collections.IStructuralEquatable#1<p>The following example creates two identical 3-tuple objects whose components consist of three <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. The value of the second component is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. The example then calls the <xref href=\"System.Tuple`3.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, and it calls the <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method three times. The first time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property. The second time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.StructuralComparisons.StructuralEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> property. The third time, it passes the custom <code>NanComparer</code> object. As the output from the example shows, the first three method calls return <strong>true</strong>, whereas the fourth call returns <strong>false</strong>. </p>System.Collections.IStructuralEquatable#2"
  syntax:
    content: bool Equals(object other, IEqualityComparer comparer)
    content.vb: Function Equals(other As Object, comparer As IEqualityComparer) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The object to compare with the current instance.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that determines whether the current instance and <em>other</em> are equal. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects are equal; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.StructuralComparisons.StructuralEqualityComparer
    commentId: P:System.Collections.StructuralComparisons.StructuralEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  id: GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  langs:
  - csharp
  - vb
  name: GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2357
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Returns a hash code for the current instance.</p>\n"
  remarks: "\n<p>Implement this method to return customized hash codes for collection objects that correspond to the customized comparison for structural equality provided by the <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: int GetHashCode(IEqualityComparer comparer)
    content.vb: Function GetHashCode(comparer As IEqualityComparer) As Integer
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that computes the hash code of the current object.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The hash code for the current instance.</p>\n"
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
