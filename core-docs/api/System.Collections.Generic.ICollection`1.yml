items:
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  id: ICollection`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.ICollection`1.Add(`0)
  - System.Collections.Generic.ICollection`1.Clear
  - System.Collections.Generic.ICollection`1.Contains(`0)
  - System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.ICollection`1.Count
  - System.Collections.Generic.ICollection`1.IsReadOnly
  - System.Collections.Generic.ICollection`1.Remove(`0)
  langs:
  - csharp
  - vb
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ICollection
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2362
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Defines methods to manipulate generic collections.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface is the base interface for classes in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace.</p>\n<p>The <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface extends <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>; <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> are more specialized interfaces that extend <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>. A <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> implementation is a collection of key/value pairs, like the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class. A <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> implementation is a collection of values, and its members can be accessed by index, like the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>If neither the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interface nor the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> interface meet the requirements of the required collection, derive the new collection class from the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface instead for more flexibility.</p>\n"
  example:
  - "\n<p>The following example implements the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface to create a collection of custom <code>Box</code> objects named <code>BoxCollection</code>. Each <code>Box</code> has height, length, and width properties, which are used to define equality. Equality can be defined as all dimensions being the same or the volume being the same. The <code>Box</code> class implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface to define the default equality as the dimensions being the same.</p>\n<p>The <code>BoxCollection</code> class implements the <xref href=\"System.Collections.Generic.ICollection`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to use the default equality to determine whether a <code>Box</code> is in the collection. This method is used by the <xref href=\"System.Collections.Generic.ICollection`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> method so that each <code>Box</code> added to the collection has a unique set of dimensions. The <code>BoxCollection</code> class also provides an overload of the  <xref href=\"System.Collections.Generic.ICollection`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method that takes a specified <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> object, such as <code>BoxSameDimensions</code> and <code>BoxSameVol</code> classes in the example.</p>\n<p>This example also implements an <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> interface for the <code>BoxCollection</code> class so that the collection can be enumerated. </p>System.Collections.Generic.BoxExamples#1"
  syntax:
    content: 'public interface ICollection<T> : IEnumerable<T>, IEnumerable'
    content.vb: >-
      Public Interface ICollection(Of T)
          Inherits IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements in the collection.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.IList`1
    commentId: T:System.Collections.Generic.IList`1
  - type: System.Collections
    commentId: N:System.Collections
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  id: Count
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2364
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: int Count { get; }
    content.vb: ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements contained in the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2365
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition or removal of elements after the collection is created. Note that read-only in this context does not indicate whether individual elements of the collection can be modified, since the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface only supports addition and removal operations. For example, the <xref href=\"System.Collections.Generic.ICollection`1.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property of an array that is cast or converted to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> object returns <strong>true</strong>, even though individual array elements can be modified. </p>\n"
  syntax:
    content: bool IsReadOnly { get; }
    content.vb: ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2366
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Adds an item to the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void Add(T item)
    content.vb: Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to add to the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  seealso:
  - type: System.Collections.Generic.ICollection`1.IsReadOnly
    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  id: Clear
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2367
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all items from the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.ICollection`1.Count\" data-throw-if-not-resolved=\"false\"></xref> must be set to 0, and references to other objects from elements of the collection must be released.</p>\n"
  syntax:
    content: void Clear()
    content.vb: Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  seealso:
  - type: System.Collections.Generic.ICollection`1.IsReadOnly
    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2368
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> contains a specific value.</p>\n"
  remarks: "\n<p>Implementations can vary in how they determine equality of objects; for example, <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> uses <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, whereas <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> allows the user to specify the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use for comparing keys.</p>\n"
  syntax:
    content: bool Contains(T item)
    content.vb: Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>item</em> is found in the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2369
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at a particular <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> index.</p>\n"
  syntax:
    content: void CopyTo(T[] array, int arrayIndex)
    content.vb: Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\n"
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2370
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Implementations can vary in how they determine equality of objects; for example, <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> uses <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, whereas, <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> allows the user to specify the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use for comparing keys.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n"
  syntax:
    content: bool Remove(T item)
    content.vb: Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to remove from the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>item</em> was successfully removed from the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>. This method also returns <strong>false</strong> if <em>item</em> is not found in the original <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  seealso:
  - type: System.Collections.Generic.ICollection`1.IsReadOnly
    commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
