items:
- uid: System.Collections.ObjectModel.KeyedCollection`2
  commentId: T:System.Collections.ObjectModel.KeyedCollection`2
  id: KeyedCollection`2
  parent: System.Collections.ObjectModel
  children:
  - System.Collections.ObjectModel.KeyedCollection`2.#ctor
  - System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  - System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  - System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  - System.Collections.ObjectModel.KeyedCollection`2.Comparer
  - System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  - System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  - System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  - System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  - System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  langs:
  - csharp
  - vb
  name: KeyedCollection<TKey, TItem>
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>
  type: Class
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyedCollection
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 11
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Provides the abstract base class for a collection whose keys are embedded in the values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1). It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class. To use <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, derive your collection type from the appropriate constructed type.</p>\n<p>The <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class is a hybrid between a collection based on the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface and a collection based on the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> generic interface. Like collections based on the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> is an indexed list of items. Like collections based on the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> generic interface, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> has a key associated with each element.  </p>\n<p>Unlike dictionaries, an element of <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.  For example, an element of a collection derived from <code>KeyedCollection<String,String></code> (<code>KeyedCollection(Of String, String)</code> in Visual Basic) might be \"John Doe Jr.\" where the value is \"John Doe Jr.\" and the key is \"Doe\"; or a collection of employee records containing integer keys could be derived from <code>KeyedCollection<int,Employee></code>. The abstract <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method extracts the key from the element.</p>\n<p>By default, the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> includes a lookup dictionary that you can obtain with the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property.  When an item is added to the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior is overridden by specifying a dictionary creation threshold when you create the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>. The lookup dictionary is created the first time the number of elements exceeds that threshold.  If you specify â€“1 as the threshold, the lookup dictionary is never created. </p>\n<p>When the internal lookup dictionary is used, it contains references to all the items in the collection if <em>TItem</em> is a reference type, or copies of all the items in the collection if <em>TItem</em> is a value type. Thus, using the lookup dictionary may not be appropriate if <em>TItem</em> is a value type.</p>\n<p>You can access an item by its index or key by using the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref>property. You can add items without a key, but these items can subsequently be accessed only by index.</p>\n"
  example:
  - "\n<p>This section contains two code examples. The first example shows the minimum code required to derive from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, and demonstrates many of the inherited methods. The second example shows how to override the protected methods of <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> to provide custom behavior. </p>\n<p>Example 1</p>\n<p>This code example shows the minimum code necessary to derive a collection class from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>: overriding the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> classes. </p>\n<p>The <code>SimpleOrder</code> class is a very simple requisition list that contains <code>OrderItem</code> objects, each of which represents a line item in the order. The key of <code>OrderItem</code> is immutable, an important consideration for classes that derive from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>. For a code example that uses mutable keys, see <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>KeyedCollection#1<p>Example 2</p><p>The following code example shows how to override the protected <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ClearItems\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref> methods, to provide custom behavior for the <xref href=\"System.Collections.ObjectModel.Collection`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.ObjectModel.Collection`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> methods, and for setting the default <xref href=\"System.Collections.ObjectModel.Collection`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#). The custom behavior provided in this example is a notification event named <code>Changed</code>, which is raised at the end of each of the overridden methods.</p><p>The code example creates the <code>SimpleOrder</code> class, which derives from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> and represents a simple order form. The order form contains <code>OrderItem</code> objects representing items ordered. The code example also creates a <code>SimpleOrderChangedEventArgs</code> class to contain the event information, and an enumeration to identify the type of change.</p><p>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <code>Main</code> method of the <code>Demo</code> class.</p><p>This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>KeyedCollection2#1"
  syntax:
    content: 'public abstract class KeyedCollection<TKey, TItem> : Collection<TItem>'
    content.vb: >-
      Public MustInherit Class KeyedCollection(Of TKey, TItem)
          Inherits Collection(Of TItem)
    typeParameters:
    - id: TKey
    - id: TItem
  seealso:
  - type: System.Collections.Specialized.StringDictionary
    commentId: T:System.Collections.Specialized.StringDictionary
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem)
  name.vb: KeyedCollection(Of TKey, TItem)
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.#ctor
  id: '#ctor'
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: KeyedCollection()
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.KeyedCollection()
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 22
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class that uses the default equality comparer.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. To specify a different generic equality comparer, use the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor or the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>By default, the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior can be overridden by using the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor and specifying a dictionary creation threshold. </p>\n<p>Because the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class is abstract (<strong>MustInherit</strong> in Visual Basic), you must derive from it in order to use it. In the constructor for your derived type, call the appropriate <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> constructor. It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>This code example shows the minimum code necessary to derive a collection class from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>: overriding the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> classes. </p>\n<p>The <code>SimpleOrder</code> class is a very simple requisition list that contains <code>OrderItem</code> objects, each of which represents a line item in the order. The key of <code>OrderItem</code> is immutable, an important consideration for classes that derive from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>. For a code example that uses mutable keys, see <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>KeyedCollection#1"
  syntax:
    content: protected KeyedCollection()
    content.vb: Protected Sub New
  seealso:
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).KeyedCollection()
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: KeyedCollection(Generic.IEqualityComparer<TKey>)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 13
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified equality comparer.</p>\n"
  remarks: "\n<p>By default, the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior can be overridden by using the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor and specifying a dictionary creation threshold. </p>\n<p>Because the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class is abstract (<strong>MustInherit</strong> in Visual Basic), you must derive from it in order to use it. In the constructor for your derived type, call the appropriate <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> constructor. It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: protected KeyedCollection(Generic.IEqualityComparer<TKey> comparer)
    content.vb: Protected Sub New(comparer As Generic.IEqualityComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>The implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface to use when comparing keys, or <strong>null</strong> to use the default equality comparer for the type of the key, obtained from <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).KeyedCollection(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: KeyedCollection(Generic.IEqualityComparer(Of TKey))
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)'
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: KeyedCollection(Generic.IEqualityComparer<TKey>, Int32)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey>, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 14
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</p>\n"
  remarks: "\n<p>By default, the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This constructor allows you to override that behavior. Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on. If you specify â€“1 as the threshold, the lookup dictionary is never created.</p>\n<p>For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary. Setting a threshold allows you to decide when to make that tradeoff.</p>\n<p>Because the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> class is abstract (<strong>MustInherit</strong> in Visual Basic), you must derive from it in order to use it. In the constructor for your derived type, call the appropriate <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> constructor. It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to override the protected <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ClearItems\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref> methods, to provide custom behavior for the <xref href=\"System.Collections.ObjectModel.Collection`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.ObjectModel.Collection`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> methods, and for setting the default <xref href=\"System.Collections.ObjectModel.Collection`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#). The custom behavior provided in this example is a notification event named <code>Changed</code>, which is raised at the end of each of the overridden methods.</p>\n<p>The code example uses the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</p>\n<p>The code example creates the <code>SimpleOrder</code> class, which derives from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> and represents a simple order form. The order form contains <code>OrderItem</code> objects representing items ordered. The code example also creates a <code>SimpleOrderChangedEventArgs</code> class to contain the event information, and an enumeration to identify the type of change.</p>\n<p>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <code>Main</code> method of the <code>Demo</code> class.</p>\n<p>This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>KeyedCollection2#1"
  syntax:
    content: protected KeyedCollection(Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold)
    content.vb: Protected Sub New(comparer As Generic.IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>The implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface to use when comparing keys, or <strong>null</strong> to use the default equality comparer for the type of the key, obtained from <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: dictionaryCreationThreshold
      type: System.Int32
      description: "\n<p>The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or â€“1 to specify that a lookup dictionary is never created.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>dictionaryCreationThreshold</em> is less than â€“1.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).KeyedCollection(System.Collections.Generic.IEqualityComparer(Of TKey), System.Int32)
  name.vb: KeyedCollection(Generic.IEqualityComparer(Of TKey), Int32)
- uid: System.Collections.ObjectModel.KeyedCollection`2.Comparer
  commentId: P:System.Collections.ObjectModel.KeyedCollection`2.Comparer
  id: Comparer
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: Comparer
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Comparer
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comparer
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 63
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Gets the generic equality comparer that is used to determine equality of keys in the collection.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public IEqualityComparer<TKey> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)
    parameters: []
    return:
      type: IEqualityComparer{{TKey}}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).Comparer
- uid: System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  commentId: P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  id: Dictionary
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: Dictionary
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Dictionary
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dictionary
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 154
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Gets the lookup dictionary of the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>By default, the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior can be overridden by using the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor and specifying a dictionary creation threshold. </p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to override the protected <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref> method to support mutable keys, and how to override the protected <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ClearItems\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref> methods to maintain the integrity of the keys and the collection.</p>\n<p>The code example creates the <code>MutableKeys</code> collection, which derives from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, and the <code>MutableKey</code> class. The <code>MutableKey</code> class has a settable <code>Key</code> property. When a new key is assigned to the property, the property setter calls the <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>ChangeKey</code> method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.</p>\n<p>In order to maintain the connection between a <code>MutableKey</code> object and the <code>MutableKeys</code> collection and to prevent an object from being inserted into two collections, the <code>MutableKey</code> class has an <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>Collection</code> field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref> method. The field is set when the item is added to a collection and cleared when the item is removed.</p>KeyedCollectionMutable#1"
  syntax:
    content: protected IDictionary<TKey, TItem> Dictionary { get; }
    content.vb: Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)
    parameters: []
    return:
      type: IDictionary{{TKey},{TItem}}
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).Dictionary
- uid: System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  commentId: P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 71
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Gets the element with the specified key. </p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code> (<code>myCollection(key)</code> in Visual Basic).</p>\n<p>This property is distinct from the inherited <xref href=\"System.Collections.ObjectModel.Collection`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property, which gets and sets elements by numeric index. However, if <em>TKey</em> is of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, this property masks the inherited property. In that case, you can access the inherited property by casting the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> to its base type. For example, <code>KeyedCollection<int, MyType></code> (<code>KeyedCollection(Of Integer, MyType)</code> in Visual Basic, <code>KeyedCollection<int, MyType^></code> in C++) can be cast to <code>Collection<MyType></code> (<code>Collection(Of MyType)</code> in Visual Basic, <code>Collection<MyType^></code> in C++).</p>\n<p>If the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> has a lookup dictionary, <em>key</em> is used to retrieve the element from the dictionary.  If there is no lookup dictionary, the key of each element is extracted using the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method and compared with the specified key.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(1) operation if the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> has a lookup dictionary; otherwise it is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>This code example shows the minimum code necessary to derive a collection class from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>: overriding the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> classes. </p>\n<p>The code example calls both the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property, which is read-only and retrieves by key, and the <xref href=\"System.Collections.ObjectModel.Collection`1.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property, which is settable and retrieves by index. It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</p>\n<p>The <code>SimpleOrder</code> class is a very simple requisition list that contains <code>OrderItem</code> objects, each of which represents a line item in the order. The key of <code>OrderItem</code> is immutable, an important consideration for classes that derive from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>. For a code example that uses mutable keys, see <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>KeyedCollection#1"
  syntax:
    content: public TItem this[TKey key] { get; }
    content.vb: Public ReadOnly Property Item(key As TKey) As TItem
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TItem}'
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>An element with the specified key does not exist in the collection.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  id: ChangeItemKey(`1,`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: ChangeItemKey(TItem, TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.ChangeItemKey(TItem, TKey)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeItemKey
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 159
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Changes the key associated with the specified element in the lookup dictionary.</p>\n"
  remarks: "\n<p>This method does not modify the key embedded in <em>item</em>; it simply replaces the key saved in the lookup dictionary.  Therefore, if <em>newKey</em> is different from the key that is embedded in <em>item</em>, you cannot access <em>item</em> by using the key returned by <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method does nothing if the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> does not have a lookup dictionary.</p>\n<p>Every key in a <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique. A key cannot be <strong>null</strong>.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - >-
    <p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref> method to support mutable keys, and how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods to maintain the integrity of the keys and the collection.</p>

    <p>The code example creates the <code>MutableKeys</code> collection, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref>, and the <code>MutableKey</code> class. The <code>MutableKey</code> class has a settable <code>Key</code> property. When a new key is assigned to the property, the property setter calls the <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>ChangeKey</code> method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.</p>

    <p>In order to maintain the connection between a <code>MutableKey</code> object and the <code>MutableKeys</code> collection and to prevent an object from being inserted into two collections, the <code>MutableKey</code> class has an <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>Collection</code> field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> method. The field is set when the item is added to a collection and cleared when the item is removed.</p>KeyedCollectionMutable#1
  syntax:
    content: protected void ChangeItemKey(TItem item, TKey newKey)
    content.vb: Protected Sub ChangeItemKey(item As TItem, newKey As TKey)
    parameters:
    - id: item
      type: '{TItem}'
    - id: newKey
      type: '{TKey}'
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>item</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>item</em> is not found.</p>\n<p>-or-</p>\n<p>\n<em>key</em> already exists in the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  - type: System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
    commentId: P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).ChangeItemKey(TItem, TKey)
- uid: System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  id: ClearItems
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: ClearItems()
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.ClearItems()
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClearItems
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 182
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If there is a lookup dictionary, this method clears it but does not delete it.</p>\n<p>If the number of elements has exceeded the dictionary creation threshold and the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - >-
    <p>This section contains two code examples that demonstrate overriding the <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref> method to provide custom behavior for clearing all objects from the collection. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</p>

    <p>Example 1</p>

    <p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods, to provide custom behavior for the <xref href="System.Collections.ObjectModel.Collection`1.Add(`0)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.Collection`1.Clear" data-throw-if-not-resolved="false"></xref> methods, and for setting the default <xref href="System.Collections.ObjectModel.Collection`1.Item(System.Int32)" data-throw-if-not-resolved="false"></xref> property (the indexer in C#). The custom behavior provided in this example is a notification event named <code>Changed</code>, which is raised at the end of each of the overridden methods.</p>

    <p>The code example creates the <code>SimpleOrder</code> class, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref> and represents a simple order form. The order form contains <code>OrderItem</code> objects representing items ordered. The code example also creates a <code>SimpleOrderChangedEventArgs</code> class to contain the event information, and an enumeration to identify the type of change.</p>

    <p>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <code>Main</code> method of the <code>Demo</code> class.</p>

    <p>This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref>.</p>KeyedCollection2#1<p>Example 2</p><p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref> method to support mutable keys, and how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods to maintain the integrity of the keys and the collection.</p><p>The code example creates the <code>MutableKeys</code> collection, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref>, and the <code>MutableKey</code> class. The <code>MutableKey</code> class has a settable <code>Key</code> property. When a new key is assigned to the property, the property setter calls the <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>ChangeKey</code> method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.</p><p>In order to maintain the connection between a <code>MutableKey</code> object and the <code>MutableKeys</code> collection and to prevent an object from being inserted into two collections, the <code>MutableKey</code> class has an <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>Collection</code> field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> method. The field is set when the item is added to a collection and cleared when the item is removed.</p>KeyedCollectionMutable#1
  syntax:
    content: protected override void ClearItems()
    content.vb: Protected Overrides Sub ClearItems
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  - type: System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).ClearItems()
- uid: System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: Contains(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Contains(TKey)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 94
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Determines whether the collection contains an element with the specified key.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> has a lookup dictionary, <em>key</em> is used to search the dictionary. If there is no lookup dictionary, the key of each element is extracted using the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method and compared with the specified key.  </p>\n<p>This method is an O(1) operation if the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> has a lookup dictionary; otherwise it is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>This code example shows the minimum code necessary to derive a collection class from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>: overriding the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> classes. </p>\n<p>The <code>SimpleOrder</code> class is a very simple requisition list that contains <code>OrderItem</code> objects, each of which represents a line item in the order. The key of <code>OrderItem</code> is immutable, an important consideration for classes that derive from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>. For a code example that uses mutable keys, see <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>KeyedCollection#1"
  syntax:
    content: public bool Contains(TKey key)
    content.vb: Public Function Contains(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).Contains(TKey)
- uid: System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  id: GetKeyForItem(`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: GetKeyForItem(TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.GetKeyForItem(TItem)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetKeyForItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 193
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>When implemented in a derived class, extracts the key from the specified element.</p>\n"
  remarks: "\n<p>If the key in the lookup dictionary is different from the key that is embedded in <em>item</em>, you cannot access <em>item</em> by using the key returned by <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You can implement this method to return <strong>null</strong> for a collection that contains items without keys, in which case the items can be accessed only by their index. This method is an O(1) operation.</p>\n"
  example:
  - >-
    <p>This code example shows the minimum code necessary to derive a collection class from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref>: overriding the <xref href="System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" data-throw-if-not-resolved="false"></xref> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref> and <xref href="System.Collections.ObjectModel.Collection`1" data-throw-if-not-resolved="false"></xref> classes. </p>

    <p>The <code>SimpleOrder</code> class is a very simple requisition list that contains <code>OrderItem</code> objects, each of which represents a line item in the order. The key of <code>OrderItem</code> is immutable, an important consideration for classes that derive from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref>. For a code example that uses mutable keys, see <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref>.</p>KeyedCollection#1
  syntax:
    content: protected abstract TKey GetKeyForItem(TItem item)
    content.vb: Protected MustOverride Function GetKeyForItem(item As TItem) As TKey
    parameters:
    - id: item
      type: '{TItem}'
    return:
      type: '{TKey}'
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  - type: System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
    commentId: P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).GetKeyForItem(TItem)
- uid: System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  id: InsertItem(System.Int32,`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: InsertItem(Int32, TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.InsertItem(System.Int32, TItem)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 195
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Inserts an element into the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>If <em>index</em> is equal to <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>, <em>item</em> is added to the end of the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)\" data-throw-if-not-resolved=\"false\"></xref> is called by the <xref href=\"System.Collections.ObjectModel.Collection`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  example:
  - >-
    <p>This section contains two code examples that demonstrate overriding the <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> method to provide custom behavior for adding or inserting objects into the collection. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</p>

    <p>Example 1</p>

    <p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods, to provide custom behavior for the <xref href="System.Collections.ObjectModel.Collection`1.Add(`0)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.Collection`1.Clear" data-throw-if-not-resolved="false"></xref> methods, and for setting the default <xref href="System.Collections.ObjectModel.Collection`1.Item(System.Int32)" data-throw-if-not-resolved="false"></xref> property (the indexer in C#). The custom behavior provided in this example is a notification event named <code>Changed</code>, which is raised at the end of each of the overridden methods.</p>

    <p>The code example creates the <code>SimpleOrder</code> class, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref> and represents a simple order form. The order form contains <code>OrderItem</code> objects representing items ordered. The code example also creates a <code>SimpleOrderChangedEventArgs</code> class to contain the event information, and an enumeration to identify the type of change.</p>

    <p>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <code>Main</code> method of the <code>Demo</code> class.</p>

    <p>This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref>.</p>KeyedCollection2#1<p>Example 2</p><p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref> method to support mutable keys, and how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods to maintain the integrity of the keys and the collection.</p><p>The code example creates the <code>MutableKeys</code> collection, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref>, and the <code>MutableKey</code> class. The <code>MutableKey</code> class has a settable <code>Key</code> property. When a new key is assigned to the property, the property setter calls the <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>ChangeKey</code> method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.</p><p>In order to maintain the connection between a <code>MutableKey</code> object and the <code>MutableKeys</code> collection and to prevent an object from being inserted into two collections, the <code>MutableKey</code> class has an <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>Collection</code> field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> method. The field is set when the item is added to a collection and cleared when the item is removed.</p>KeyedCollectionMutable#1
  syntax:
    content: protected override void InsertItem(int index, TItem item)
    content.vb: Protected Overrides Sub InsertItem(index As Integer, item As TItem)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{TItem}'
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).InsertItem(System.Int32, TItem)
- uid: System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 130
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The key of the element is also removed from the lookup dictionary.</p>\n<p>If the number of elements has exceeded the dictionary creation threshold and the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</p>\n<p>To customize the behavior of this method, override the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>This code example shows the minimum code necessary to derive a collection class from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>: overriding the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)\" data-throw-if-not-resolved=\"false\"></xref> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n<p>The example demonstrates <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method inherited from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>, which removes the item with a specified key, and also the <xref href=\"System.Collections.ObjectModel.Collection`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods inherited from <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref>, which remove by object and by index respectively. </p>\n<p>The <code>SimpleOrder</code> class is a very simple requisition list that contains <code>OrderItem</code> objects, each of which represents a line item in the order. The key of <code>OrderItem</code> is immutable, an important consideration for classes that derive from <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>. For a code example that uses mutable keys, see <xref href=\"System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)\" data-throw-if-not-resolved=\"false\"></xref>.</p>KeyedCollection#1"
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  - type: System.Collections.ObjectModel.KeyedCollection`2.ClearItems
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).Remove(TKey)
- uid: System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: RemoveItem(Int32)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.RemoveItem(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 205
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The key of the element is also removed from the lookup dictionary.</p>\n<p>If the number of elements has exceeded the dictionary creation threshold and the <xref href=\"System.Collections.ObjectModel.KeyedCollection`2\" data-throw-if-not-resolved=\"false\"></xref> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.ObjectModel.Collection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - >-
    <p>This section contains two code examples that demonstrate overriding the <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref> method to provide custom behavior for removing objects from the collection. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</p>

    <p>Example 1</p>

    <p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods, to provide custom behavior for the <xref href="System.Collections.ObjectModel.Collection`1.Add(`0)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.Collection`1.Clear" data-throw-if-not-resolved="false"></xref> methods, and for setting the default <xref href="System.Collections.ObjectModel.Collection`1.Item(System.Int32)" data-throw-if-not-resolved="false"></xref> property (the indexer in C#). The custom behavior provided in this example is a notification event named <code>Changed</code>, which is raised at the end of each of the overridden methods.</p>

    <p>The code example creates the <code>SimpleOrder</code> class, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref> and represents a simple order form. The order form contains <code>OrderItem</code> objects representing items ordered. The code example also creates a <code>SimpleOrderChangedEventArgs</code> class to contain the event information, and an enumeration to identify the type of change.</p>

    <p>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <code>Main</code> method of the <code>Demo</code> class.</p>

    <p>This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref>.</p>KeyedCollection2#1<p>Example 2</p><p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref> method to support mutable keys, and how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods to maintain the integrity of the keys and the collection.</p><p>The code example creates the <code>MutableKeys</code> collection, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref>, and the <code>MutableKey</code> class. The <code>MutableKey</code> class has a settable <code>Key</code> property. When a new key is assigned to the property, the property setter calls the <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>ChangeKey</code> method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.</p><p>In order to maintain the connection between a <code>MutableKey</code> object and the <code>MutableKeys</code> collection and to prevent an object from being inserted into two collections, the <code>MutableKey</code> class has an <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>Collection</code> field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> method. The field is set when the item is added to a collection and cleared when the item is removed.</p>KeyedCollectionMutable#1
  syntax:
    content: protected override void RemoveItem(int index)
    content.vb: Protected Overrides Sub RemoveItem(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  - type: System.Collections.ObjectModel.KeyedCollection`2.ClearItems
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).RemoveItem(System.Int32)
- uid: System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  commentId: M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  id: SetItem(System.Int32,`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  - vb
  name: SetItem(Int32, TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.SetItem(System.Int32, TItem)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs
    startLine: 215
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Replaces the item at the specified index with the specified item.</p>\n"
  remarks: "\n<p>The lookup dictionary is updated accordingly. That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - >-
    <p>This section contains two code examples that demonstrate overriding the <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> method to provide custom behavior for setting the <xref href="System.Collections.ObjectModel.Collection`1.Item(System.Int32)" data-throw-if-not-resolved="false"></xref> property. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</p>

    <p>Example 1</p>

    <p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods, to provide custom behavior for the <xref href="System.Collections.ObjectModel.Collection`1.Add(`0)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.Collection`1.Clear" data-throw-if-not-resolved="false"></xref> methods, and for setting the default <xref href="System.Collections.ObjectModel.Collection`1.Item(System.Int32)" data-throw-if-not-resolved="false"></xref> property (the indexer in C#). The custom behavior provided in this example is a notification event named <code>Changed</code>, which is raised at the end of each of the overridden methods.</p>

    <p>The code example creates the <code>SimpleOrder</code> class, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref> and represents a simple order form. The order form contains <code>OrderItem</code> objects representing items ordered. The code example also creates a <code>SimpleOrderChangedEventArgs</code> class to contain the event information, and an enumeration to identify the type of change.</p>

    <p>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <code>Main</code> method of the <code>Demo</code> class.</p>

    <p>This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref>.</p>KeyedCollection2#1<p>Example 2</p><p>The following code example shows how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" data-throw-if-not-resolved="false"></xref> method to support mutable keys, and how to override the protected <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" data-throw-if-not-resolved="false"></xref>, <xref href="System.Collections.ObjectModel.KeyedCollection`2.ClearItems" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> methods to maintain the integrity of the keys and the collection.</p><p>The code example creates the <code>MutableKeys</code> collection, which derives from <xref href="System.Collections.ObjectModel.KeyedCollection`2" data-throw-if-not-resolved="false"></xref>, and the <code>MutableKey</code> class. The <code>MutableKey</code> class has a settable <code>Key</code> property. When a new key is assigned to the property, the property setter calls the <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>ChangeKey</code> method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.</p><p>In order to maintain the connection between a <code>MutableKey</code> object and the <code>MutableKeys</code> collection and to prevent an object from being inserted into two collections, the <code>MutableKey</code> class has an <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) <code>Collection</code> field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref href="System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" data-throw-if-not-resolved="false"></xref> method. The field is set when the item is added to a collection and cleared when the item is removed.</p>KeyedCollectionMutable#1
  syntax:
    content: protected override void SetItem(int index, TItem item)
    content.vb: Protected Overrides Sub SetItem(index As Integer, item As TItem)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{TItem}'
  seealso:
  - type: System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
    commentId: P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  - type: System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
    commentId: M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem).SetItem(System.Int32, TItem)
references:
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: Collections.Generic.IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: Collections.Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IDictionary{{TKey},{TItem}}
  definition: System.Collections.Generic.IDictionary`2
  name: Generic.IDictionary<TKey, TItem>
  fullName: System.Collections.Generic.IDictionary<TKey, TItem>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TItem)
  name.vb: Generic.IDictionary(Of TKey, TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TItem
    fullName: TItem
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TItem
    fullName: TItem
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TItem}'
  isExternal: false
  name: TItem
  fullName: TItem
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
