items:
- uid: System.Reflection.Emit.Label
  commentId: T:System.Reflection.Emit.Label
  id: Label
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.Label.Equals(System.Object)
  - System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)
  - System.Reflection.Emit.Label.GetHashCode
  - System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  - System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  langs:
  - csharp
  - vb
  name: Label
  fullName: System.Reflection.Emit.Label
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Label.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Label
    path: src/mscorlib/src/System/Reflection/Emit/Label.cs
    startLine: 27
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Represents a label in the instruction stream. <strong>Label</strong> is used in conjunction with the <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public struct Label
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Structure Label
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Reflection.Emit.Label.Equals(System.Object)
  commentId: M:System.Reflection.Emit.Label.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.Label
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Emit.Label.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Label.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/Label.cs
    startLine: 50
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Checks if the given object is an instance of <strong>Label</strong> and is equal to this instance.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)
  id: Equals(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.Label
  langs:
  - csharp
  - vb
  name: Equals(Label)
  fullName: System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Label.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/Label.cs
    startLine: 58
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates whether the current instance is equal to the specified <xref href=\"System.Reflection.Emit.Label\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Equals(Label obj)
    content.vb: Public Function Equals(obj As Label) As Boolean
    parameters:
    - id: obj
      type: System.Reflection.Emit.Label
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.Label.GetHashCode
  commentId: M:System.Reflection.Emit.Label.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.Label
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Emit.Label.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Label.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Emit/Label.cs
    startLine: 45
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Generates a hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  id: op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.Label
  langs:
  - csharp
  - vb
  name: Equality(Label, Label)
  fullName: System.Reflection.Emit.Label.Equality(System.Reflection.Emit.Label, System.Reflection.Emit.Label)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Label.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Reflection/Emit/Label.cs
    startLine: 63
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates whether two <xref href=\"System.Reflection.Emit.Label\" data-throw-if-not-resolved=\"false\"></xref> structures are equal.</p>\n"
  syntax:
    content: public static bool operator ==(Label a, Label b)
    content.vb: Public Shared Operator =(a As Label, b As Label) As Boolean
    parameters:
    - id: a
      type: System.Reflection.Emit.Label
    - id: b
      type: System.Reflection.Emit.Label
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  id: op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.Label
  langs:
  - csharp
  - vb
  name: Inequality(Label, Label)
  fullName: System.Reflection.Emit.Label.Inequality(System.Reflection.Emit.Label, System.Reflection.Emit.Label)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/Label.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Reflection/Emit/Label.cs
    startLine: 68
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Indicates whether two <xref href=\"System.Reflection.Emit.Label\" data-throw-if-not-resolved=\"false\"></xref> structures are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(Label a, Label b)
    content.vb: Public Shared Operator <>(a As Label, b As Label) As Boolean
    parameters:
    - id: a
      type: System.Reflection.Emit.Label
    - id: b
      type: System.Reflection.Emit.Label
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  fullName: System.Reflection.Emit.Label
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
