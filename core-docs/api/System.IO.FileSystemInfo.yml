items:
- uid: System.IO.FileSystemInfo
  commentId: T:System.IO.FileSystemInfo
  id: FileSystemInfo
  parent: System.IO
  children:
  - System.IO.FileSystemInfo.#ctor
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Delete
  - System.IO.FileSystemInfo.Exists
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Name
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Refresh
  langs:
  - csharp
  - vb
  name: FileSystemInfo
  fullName: System.IO.FileSystemInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FileSystemInfo
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 27
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Provides the base class for both <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> class contains methods that are common to file and directory manipulation. A <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object can represent either a file or a directory, thus serving as the basis for <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects. Use this base class when parsing a lot of files and directories.</p>\n<p>A derived class can inherit from <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> only if the derived class has the AllAccess permission from the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n<p>In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths: </p>\n<ul><li>\n<p>\"c:\\\\MyDir\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.</p>\n</li><li>\n<p>\"c:\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.</p>\n</li><li>\n<p>\"MyDir\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.</p>\n</li><li>\n<p>\"\\\\\\\\MyServer\\\\MyShare\" in C#, or \"\\\\MyServer\\MyShare\" in Visual Basic.</p>\n</li></ul>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows how to loop through all the files and directories, querying some information about each entry.</p>FileSystemInfo#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public abstract class FileSystemInfo : ISerializable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public MustInherit Class FileSystemInfo
          Implements ISerializable
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - type: System.IO.DriveInfo
    commentId: T:System.IO.DriveInfo
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.IO.FileSystemInfo.FullPath
  commentId: F:System.IO.FileSystemInfo.FullPath
  id: FullPath
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: FullPath
  fullName: System.IO.FileSystemInfo.FullPath
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullPath
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 47
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Represents the fully qualified path of the directory or file.</p>\n"
  syntax:
    content: protected string FullPath
    content.vb: Protected FullPath As String
    return:
      type: System.String
  exceptions:
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The fully qualified path is 260 or more characters.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemInfo.OriginalPath
  commentId: F:System.IO.FileSystemInfo.OriginalPath
  id: OriginalPath
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OriginalPath
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 48
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>The path originally specified by the user, whether relative or absolute.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: protected string OriginalPath
    content.vb: Protected OriginalPath As String
    return:
      type: System.String
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemInfo.#ctor
  commentId: M:System.IO.FileSystemInfo.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: FileSystemInfo()
  fullName: System.IO.FileSystemInfo.FileSystemInfo()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 53
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      protected FileSystemInfo()
    content.vb: >-
      <SecurityCritical>

      Protected Sub New
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemInfo.Attributes
  commentId: P:System.IO.FileSystemInfo.Attributes
  id: Attributes
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.IO.FileSystemInfo.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 289
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the attributes for the current file or directory.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> methods:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The value of this property is a combination of the archive, compressed, directory, hidden, offline, read-only, system, and temporary file attribute flags. </p>\n<p>When you set this value, use the bitwise OR operator (<strong>|</strong> in C# or <strong>Or</strong> in Visual Basic) to apply more than one value. To retain any existing values in the <xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property, include the value of the <xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property in your assignment. For example: </p>\n<p>\n<code>exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;</code>\n</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>FileSystemInfo#2"
  syntax:
    content: >-
      public FileAttributes Attributes

      {
          [SecuritySafeCritical]
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Property Attributes As FileAttributes
    parameters: []
    return:
      type: System.IO.FileAttributes
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The specified file does not exist. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid; for example, it is on an unmapped drive. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The caller attempts to set an invalid file attribute. </p>\n<p>-or-</p>\n<p>The user attempts to set an attribute value but does not have write permission.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot initialize the data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemInfo.CreationTime
  commentId: P:System.IO.FileSystemInfo.CreationTime
  id: CreationTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreationTime
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 154
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the creation time of the current file or directory.</p>\n"
  remarks: "\n<p>Note   This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>The value of the <xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> methods:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If the file described in the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</p>\n<p>NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.</p>\n<p>This property value is <strong>null</strong> if the file system containing the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not support this information.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>FileSystemInfo#2"
  syntax:
    content: public DateTime CreationTime { get; set; }
    content.vb: Public Property CreationTime As Date
    parameters: []
    return:
      type: System.DateTime
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot initialize the data. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid; for example, it is on an unmapped drive.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Windows NT or later.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The caller attempts to set an invalid creation time.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  commentId: P:System.IO.FileSystemInfo.CreationTimeUtc
  id: CreationTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreationTimeUtc
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 166
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</p>\n"
  remarks: "\n<p>Note   This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>The value of the <xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> methods:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If the file described in the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).</p>\n<p>NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.</p>\n<p>This property value is <strong>null</strong> if the file system containing the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not support this information.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public DateTime CreationTimeUtc

      {
          [SecuritySafeCritical]
          get;
          set;
      }
    content.vb: >-
      <ComVisible(False)>

      Public Property CreationTimeUtc As Date
    parameters: []
    return:
      type: System.DateTime
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot initialize the data. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid; for example, it is on an unmapped drive.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Windows NT or later.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The caller attempts to set an invalid access time.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemInfo.Exists
  commentId: P:System.IO.FileSystemInfo.Exists
  id: Exists
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: Exists
  fullName: System.IO.FileSystemInfo.Exists
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 146
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the file or directory exists.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public abstract bool Exists { get; }
    content.vb: Public MustOverride ReadOnly Property Exists As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.IO.FileSystemInfo.Extension
  commentId: P:System.IO.FileSystemInfo.Extension
  id: Extension
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: Extension
  fullName: System.IO.FileSystemInfo.Extension
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Extension
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 122
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the string representing the extension part of the file.</p>\n"
  remarks: "\n<p>The <strong>Extension</strong> property returns the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> extension, including the period (.). For example, for a file c:\\NewFile.txt, this property returns \".txt\".</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Retrieve the fully qualified path of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.Path.GetFullPath(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Retrieve only the file name a path. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.Path.GetFileNameWithoutExtension(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Retrieve only the directory name from a path. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.Path.GetDirectoryName(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Change the extension of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.Path.ChangeExtension(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public string Extension { get; }
    content.vb: Public ReadOnly Property Extension As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileSystemInfo.FullName
  commentId: P:System.IO.FileSystemInfo.FullName
  id: FullName
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.IO.FileSystemInfo.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 86
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the full path of the directory or file.</p>\n"
  remarks: "\n<p>For example, for a file c:\\NewFile.txt, this property returns \"c:\\NewFile.txt\".</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.IO.FileSystemInfo.FullName\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>FileSystemInfo#2"
  syntax:
    content: >-
      public virtual string FullName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The fully qualified path and file name is 260 or more characters.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.FileSystemInfo.LastAccessTime
  commentId: P:System.IO.FileSystemInfo.LastAccessTime
  id: LastAccessTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastAccessTime
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 198
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the time the current file or directory was last accessed.</p>\n"
  remarks: "\n<p>Note   This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>If the file described in the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</p>\n<p>The value of the <xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> methods:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the updating of the <xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref> property through a \"touch\" operation. In this example, the file is \"touched\", updating the <xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> properties to the current date and time.</p>System.IO.FileSystemInfo_touch#00"
  syntax:
    content: public DateTime LastAccessTime { get; set; }
    content.vb: Public Property LastAccessTime As Date
    parameters: []
    return:
      type: System.DateTime
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot initialize the data. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Windows NT or later.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The caller attempts to set an invalid access time</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  commentId: P:System.IO.FileSystemInfo.LastAccessTimeUtc
  id: LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastAccessTimeUtc
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 209
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</p>\n"
  remarks: "\n<p>Note   This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>The value of the <xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref>  object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> methods:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref>  method.</p>\n<p>If the file described in the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public DateTime LastAccessTimeUtc

      {
          [SecuritySafeCritical]
          get;
          set;
      }
    content.vb: >-
      <ComVisible(False)>

      Public Property LastAccessTimeUtc As Date
    parameters: []
    return:
      type: System.DateTime
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot initialize the data. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Windows NT or later.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The caller attempts to set an invalid access time.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemInfo.LastWriteTime
  commentId: P:System.IO.FileSystemInfo.LastWriteTime
  id: LastWriteTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastWriteTime
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 240
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the time when the current file or directory was last written to.</p>\n"
  remarks: "\n<p>Note   This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>The value of the <xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> methods:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If the file described in the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</p>\n<p>This property value is <strong>null</strong> if the file system containing the file does not support this information.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the updating of the <xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property through a \"touch\" operation. In this example, the file is \"touched\", updating the <xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> properties to the current date and time.</p>System.IO.FileSystemInfo_touch#00"
  syntax:
    content: public DateTime LastWriteTime { get; set; }
    content.vb: Public Property LastWriteTime As Date
    parameters: []
    return:
      type: System.DateTime
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot initialize the data. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Windows NT or later.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The caller attempts to set an invalid write time.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  commentId: P:System.IO.FileSystemInfo.LastWriteTimeUtc
  id: LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastWriteTimeUtc
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 252
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</p>\n"
  remarks: "\n<p>Note   This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.</p>\n<p>The value of the <xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> methods:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If the file described in the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).</p>\n<p>This property value is <strong>null</strong> if the file system containing the file does not support this information.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public DateTime LastWriteTimeUtc

      {
          [SecuritySafeCritical]
          get;
          set;
      }
    content.vb: >-
      <ComVisible(False)>

      Public Property LastWriteTimeUtc As Date
    parameters: []
    return:
      type: System.DateTime
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot initialize the data. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Windows NT or later.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The caller attempts to set an invalid write time.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemInfo.Name
  commentId: P:System.IO.FileSystemInfo.Name
  id: Name
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.FileSystemInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 141
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <strong>Name</strong> property gets the name of the directory.</p>\n"
  remarks: "\n<p>For a directory, <strong>Name</strong> returns only the name of the parent directory, such as Dir, not c:\\Dir. For a subdirectory, <strong>Name</strong> returns only the name of the subdirectory, such as Sub1, not c:\\Dir\\Sub1.</p>\n<p>For a file, <strong>Name</strong> returns only the file name and file name extension, such as MyFile.txt, not c:\\Dir\\Myfile.txt.</p>\n"
  syntax:
    content: public abstract string Name { get; }
    content.vb: Public MustOverride ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.IO.FileSystemInfo.Delete
  commentId: M:System.IO.FileSystemInfo.Delete
  id: Delete
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delete
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 152
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Deletes a file or directory.</p>\n"
  syntax:
    content: public abstract void Delete()
    content.vb: Public MustOverride Sub Delete
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid; for example, it is on an unmapped drive.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.IO.FileSystemInfo.Refresh
  commentId: M:System.IO.FileSystemInfo.Refresh
  id: Refresh
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  - vb
  name: Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileSystemInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Refresh
    path: src/mscorlib/src/System/IO/FileSystemInfo.cs
    startLine: 283
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Refreshes the state of the object.</p>\n"
  remarks: "\n<p>\n<strong>FileSystemInfo.Refresh</strong> takes a snapshot of the file from the current file system. <strong>Refresh</strong> cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98.</p>\n<p>Calls must be made to <strong>Refresh</strong> before attempting to get the attribute information, or the information will be outdated.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Refresh()
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Refresh
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A device such as a disk drive is not ready. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.FileAttributes
  parent: System.IO
  isExternal: false
  name: FileAttributes
  fullName: System.IO.FileAttributes
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
