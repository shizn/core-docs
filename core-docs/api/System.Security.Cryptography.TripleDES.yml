items:
- uid: System.Security.Cryptography.TripleDES
  commentId: T:System.Security.Cryptography.TripleDES
  id: TripleDES
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.TripleDES.#ctor
  - System.Security.Cryptography.TripleDES.Create
  - System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.TripleDES.Key
  - System.Security.Cryptography.TripleDES.LegalBlockSizes
  - System.Security.Cryptography.TripleDES.LegalKeySizes
  langs:
  - csharp
  - vb
  name: TripleDES
  fullName: System.Security.Cryptography.TripleDES
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TripleDES
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
    startLine: 10
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the base class for Triple Data Encryption Standard algorithms from which all <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> implementations must derive.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> uses three successive iterations of the <xref href=\"System.Security.Cryptography.DES\" data-throw-if-not-resolved=\"false\"></xref> algorithm. It can use either two or three 56-bit keys.</p>\n<p>A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref href=\"System.Security.Cryptography.Aes\" data-throw-if-not-resolved=\"false\"></xref> class and its derived classes instead of the <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> class. Use <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> only for compatibility with legacy applications and data.</p>\n<p>This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.</p>\n"
  example:
  - "\n<p>The following code example method uses <xref href=\"System.Security.Cryptography.TripleDESCryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> with the specified key (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref>) and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>) to encrypt a file specified by <code>inName</code>. It then outputs the encrypted result to the file specified by <code>outName</code>.</p>Classic TripleDESCryptoServiceProvider Example#1<p>Decryption can be handled in the same way; use <xref href=\"System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> instead of <xref href=\"System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref>. The same key (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref>) and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>) used to encrypt the file must be used to decrypt it.</p>"
  syntax:
    content: 'public abstract class TripleDES : SymmetricAlgorithm'
    content.vb: >-
      Public MustInherit Class TripleDES
          Inherits SymmetricAlgorithm
  seealso:
  - type: System.Security.Cryptography.Aes
    commentId: T:System.Security.Cryptography.Aes
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.TripleDES.#ctor
  commentId: M:System.Security.Cryptography.TripleDES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  - vb
  name: TripleDES()
  fullName: System.Security.Cryptography.TripleDES.TripleDES()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
    startLine: 13
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</p>\n<p>This method initializes the protected fields of the <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class to the default values listed in the following table.</p>\n<p>Field </p>\n<p>Default Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>192 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>64 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>64 </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: protected TripleDES()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.TripleDES.Key
  commentId: P:System.Security.Cryptography.TripleDES.Key
  id: Key
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Security.Cryptography.TripleDES.Key
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
    startLine: 40
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the secret key for the <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  remarks: "\n<p>This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.</p>\n"
  syntax:
    content: public override byte[] Key { get; set; }
    content.vb: Public Overrides Property Key As Byte()
    parameters: []
    return:
      type: System.Byte[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>An attempt was made to set the key to <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An attempt was made to set a key whose length is invalid.</p>\n<p>-or- </p>\n<p>An attempt was made to set a weak key (see <xref href=\"System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.TripleDES.LegalBlockSizes
  commentId: P:System.Security.Cryptography.TripleDES.LegalBlockSizes
  id: LegalBlockSizes
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  - vb
  name: LegalBlockSizes
  fullName: System.Security.Cryptography.TripleDES.LegalBlockSizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalBlockSizes
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
    startLine: 32
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override KeySizes[] LegalBlockSizes { get; }
    content.vb: Public Overrides ReadOnly Property LegalBlockSizes As KeySizes()
    parameters: []
    return:
      type: KeySizes[]
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.TripleDES.LegalKeySizes
  commentId: P:System.Security.Cryptography.TripleDES.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  - vb
  name: LegalKeySizes
  fullName: System.Security.Cryptography.TripleDES.LegalKeySizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizes
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
    startLine: 24
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override KeySizes[] LegalKeySizes { get; }
    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()
    parameters: []
    return:
      type: KeySizes[]
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.TripleDES.Create
  commentId: M:System.Security.Cryptography.TripleDES.Create
  id: Create
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  - vb
  name: Create()
  fullName: System.Security.Cryptography.TripleDES.Create()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
    startLine: 19
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates an instance of a cryptographic object to perform the <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> algorithm.</p>\n"
  remarks: "\n<p>Creates a new instance of the <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example shows how to create and use a <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> object to encrypt and decrypt data in a file.</p>Cryptography.3DES.Create.File#1<p>The following code example shows how to create and use a <xref href=\"System.Security.Cryptography.TripleDES\" data-throw-if-not-resolved=\"false\"></xref> object to encrypt and decrypt data in memory.</p>Cryptography.3DES.Create.Memory#1"
  syntax:
    content: public static TripleDES Create()
    content.vb: Public Shared Function Create As TripleDES
    return:
      type: System.Security.Cryptography.TripleDES
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  commentId: M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  - vb
  name: IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsWeakKey
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/TripleDES.cs
    startLine: 68
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether the specified key is weak.</p>\n"
  remarks: "\n<p>Weak keys are keys that result in ciphers that are easy to break. If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text. In 128-bit mode, if the first 64 bits are the same as the last 64 bits, the key is weak. In 192-bit mode, if the first 64 bits are the same as the second 64 bits or if the second 64 bits are the same as the last 64 bits, the key is weak.</p>\n<p>Attempting to set a weak key results in a <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref>. When <xref href=\"System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey\" data-throw-if-not-resolved=\"false\"></xref> is called to create a random key, a weak key will never be returned.</p>\n"
  syntax:
    content: public static bool IsWeakKey(byte[] rgbKey)
    content.vb: Public Shared Function IsWeakKey(rgbKey As Byte()) As Boolean
    parameters:
    - id: rgbKey
      type: System.Byte[]
    return:
      type: System.Boolean
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The size of the <em>rgbKey</em> parameter is not valid. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte())
  name.vb: IsWeakKey(Byte())
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.KeySizes[]
  isExternal: false
  name: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  fullname.vb: System.Security.Cryptography.KeySizes()
  name.vb: KeySizes()
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.TripleDES
  parent: System.Security.Cryptography
  isExternal: false
  name: TripleDES
  fullName: System.Security.Cryptography.TripleDES
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
