items:
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  id: DirectoryInfo
  parent: System.IO
  children:
  - System.IO.DirectoryInfo.#ctor(System.String)
  - System.IO.DirectoryInfo.Create
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  - System.IO.DirectoryInfo.Delete
  - System.IO.DirectoryInfo.Delete(System.Boolean)
  - System.IO.DirectoryInfo.EnumerateDirectories
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFiles
  - System.IO.DirectoryInfo.EnumerateFiles(System.String)
  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.Exists
  - System.IO.DirectoryInfo.GetDirectories
  - System.IO.DirectoryInfo.GetDirectories(System.String)
  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFiles
  - System.IO.DirectoryInfo.GetFiles(System.String)
  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFileSystemInfos
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.MoveTo(System.String)
  - System.IO.DirectoryInfo.Name
  - System.IO.DirectoryInfo.Parent
  - System.IO.DirectoryInfo.Root
  - System.IO.DirectoryInfo.ToString
  langs:
  - csharp
  - vb
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  type: Class
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DirectoryInfo
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.Windows.cs
    startLine: 9
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>Use the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> class for typical operations such as copying, moving, renaming, creating, and deleting directories.</p>\n<p>If you are going to reuse an object several times, consider using the instance method of <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> instead of the corresponding static methods of the <xref href=\"System.IO.Directory\" data-throw-if-not-resolved=\"false\"></xref> class, because a security check will not always be necessary.</p>\n<p>In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.</p>\n<p>In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths: </p>\n<ul><li>\n<p>\"c:\\\\MyDir\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.</p>\n</li><li>\n<p>\"c:\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.</p>\n</li><li>\n<p>\"MyDir\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.</p>\n</li><li>\n<p>\"\\\\\\\\MyServer\\\\MyShare\" in C#, or \"\\\\MyServer\\MyShare\" in Visual Basic.</p>\n</li></ul>\n<p>By default, full read/write access to new directories is granted to all users.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates some of the main members of the <strong>DirectoryInfo</strong> class.</p>DirInfo Class Example#1<p>The following example demonstrates how to copy a directory and its contents.</p>IO.DirectoryInfo-CopyDir#1"
  syntax:
    content: 'public sealed class DirectoryInfo : FileSystemInfo, IFileSystemObject'
    content.vb: >-
      Public NotInheritable Class DirectoryInfo
          Inherits FileSystemInfo
          Implements IFileSystemObject
  seealso:
  - type: System.IO.File
    commentId: T:System.IO.File
  - type: System.IO.FileSystemInfo.Attributes
    commentId: P:System.IO.FileSystemInfo.Attributes
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - type: System.IO.Directory
    commentId: T:System.IO.Directory
  - type: System.IO.Path
    commentId: T:System.IO.Path
  inheritance:
  - System.Object
  - System.IO.FileSystemInfo
  inheritedMembers:
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Refresh
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  commentId: M:System.IO.DirectoryInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 64
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> class on the specified path.</p>\n"
  remarks: "\n<p>This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.</p>\n<p>The <em>path</em> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.</p>DirInfo Ctor#1"
  syntax:
    content: public DirectoryInfo(string path)
    content.vb: Public Sub New(path As String)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>A string specifying the path on which to create the <strong>DirectoryInfo</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains invalid characters such as \", <, >, or |. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</p>\n"
  seealso:
  - type: System.IO.DriveInfo
    commentId: T:System.IO.DriveInfo
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.Exists
  commentId: P:System.IO.DirectoryInfo.Exists
  id: Exists
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: Exists
  fullName: System.IO.DirectoryInfo.Exists
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exists
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 109
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the directory exists.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.DirectoryInfo.Exists\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong> if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</p>\n"
  example:
  - "\n<p>The following example demonstrates a use of the <strong>Exists</strong> property in the context of copying a source directory to a target directory.</p>DirectoryInfo Usage Example#1"
  syntax:
    content: public override bool Exists { get; }
    content.vb: Public Overrides ReadOnly Property Exists As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.IO.FileSystemInfo.Exists
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.DirectoryInfo.Name
  commentId: P:System.IO.DirectoryInfo.Name
  id: Name
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.DirectoryInfo.Name
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 36
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the name of this <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>This <xref href=\"System.IO.DirectoryInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref href=\"System.IO.FileSystemInfo.FullName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property of a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> requires no permission (beyond the read permission to the directory necessary to construct the <xref href=\"System.IO.DirectoryInfo.Exists\" data-throw-if-not-resolved=\"false\"></xref>) but can give out the directory name. If it is necessary to hand out a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example displays the name of the current <strong>DirectoryInfo</strong> instance only.</p>Classic DirectoryInfo.Name Example#1"
  syntax:
    content: public override String Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: String
  overridden: System.IO.FileSystemInfo.Name
  seealso:
  - type: System.IO.FileSystemInfo.FullName
    commentId: P:System.IO.FileSystemInfo.FullName
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.DirectoryInfo.Parent
  commentId: P:System.IO.DirectoryInfo.Parent
  id: Parent
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: Parent
  fullName: System.IO.DirectoryInfo.Parent
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parent
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 44
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the parent directory of a specified subdirectory.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates referring to the parent directory of a specified directory.</p>directoryinfoparent#1"
  syntax:
    content: public DirectoryInfo Parent { get; }
    content.vb: Public ReadOnly Property Parent As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DirectoryInfo.Root
  commentId: P:System.IO.DirectoryInfo.Root
  id: Root
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: Root
  fullName: System.IO.DirectoryInfo.Root
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Root
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 362
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the root portion of the directory.</p>\n"
  example:
  - "\n<p>The following example displays root locations for specified directories.</p>directoryinforoot#2"
  syntax:
    content: public DirectoryInfo Root { get; }
    content.vb: Public ReadOnly Property Root As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DirectoryInfo.Create
  commentId: M:System.IO.DirectoryInfo.Create
  id: Create
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: Create()
  fullName: System.IO.DirectoryInfo.Create()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 98
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a directory.</p>\n"
  remarks: "\n<p>If the directory already exists, this method does nothing.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.</p>DirInfo Create#1"
  syntax:
    content: public void Create()
    content.vb: Public Sub Create
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The directory cannot be created. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  commentId: M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  id: CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSubdirectory
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 70
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Any and all directories specified in <em>path</em> are created, unless some part of <em>path</em> is invalid. The <em>path</em> parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.</p>\n<p>Path names are limited to 248 characters.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.</p>directoryinfocreatesub#1"
  syntax:
    content: public DirectoryInfo CreateSubdirectory(string path)
    content.vb: Public Function CreateSubdirectory(path As String) As DirectoryInfo
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </p>\n"
    return:
      type: System.IO.DirectoryInfo
      description: "\n<p>The last directory specified in <em>path</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> does not specify a valid file path or contains invalid <strong>DirectoryInfo</strong> characters. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The subdirectory cannot be created.</p>\n<p>-or- </p>\n<p>A file or directory already has the name specified by <em>path</em>. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have code access permission to create the directory.</p>\n<p>-or-</p>\n<p>The caller does not have code access permission to read the directory described by the returned <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object.  This can occur when the <em>path</em> parameter describes an existing directory.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> contains a colon character (:) that is not part of a drive label (\"C:\\\").</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.Delete
  commentId: M:System.IO.DirectoryInfo.Delete
  id: Delete
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: Delete()
  fullName: System.IO.DirectoryInfo.Delete()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Delete
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 418
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Deletes this <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> if it is empty.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example throws an exception if you attempt to delete a directory that is not empty.</p>DirInfo Delete1#1"
  syntax:
    content: public override void Delete()
    content.vb: Public Overrides Sub Delete
  overridden: System.IO.FileSystemInfo.Delete
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The directory contains a read-only file.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The directory described by this <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist or could not be found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The directory is not empty. </p>\n<p>-or-</p>\n<p>The directory is the application's current working directory.</p>\n<p>-or-</p>\n<p>There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see How to: Enumerate Directories and Files.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  commentId: M:System.IO.DirectoryInfo.Delete(System.Boolean)
  id: Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Delete
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 424
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Deletes this instance of a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, specifying whether to delete subdirectories and files.</p>\n"
  remarks: "\n<p>If the <strong>DirectoryInfo</strong> has no files or subdirectories, this method deletes the <strong>DirectoryInfo</strong> even if <em>recursive</em> is <strong>false</strong>. Attempting to delete a <strong>DirectoryInfo</strong> that is not empty when <em>recursive</em> is <strong>false</strong> throws an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates deleting a directory. Because the directory is removed, first comment out the <strong>Delete</strong> line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.</p>directoryinfodelete#1"
  syntax:
    content: public void Delete(bool recursive)
    content.vb: Public Sub Delete(recursive As Boolean)
    parameters:
    - id: recursive
      type: System.Boolean
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The directory contains a read-only file.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The directory described by this <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object does not exist or could not be found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The directory is read-only.</p>\n<p>-or- </p>\n<p>The directory contains one or more files or subdirectories and <em>recursive</em> is <strong>false</strong>.</p>\n<p>-or-</p>\n<p>The directory is the application's current working directory. </p>\n<p>-or-</p>\n<p>There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermissionAccess
    commentId: T:System.Security.Permissions.FileIOPermissionAccess
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories
  id: EnumerateDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateDirectories
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 253
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of directory information in the current directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on  the collection will start a new enumeration.</p>\n"
  example:
  - "\n<p>The following example enumerates the subdirectories under the C:\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>If you only need the names of the subdirectories, use the static <xref href=\"System.IO.Directory\" data-throw-if-not-resolved=\"false\"></xref> class for better performance. For an example, see the <xref href=\"System.IO.Directory.EnumerateDirectories(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.DirectoryInfo.EnumDirs#1"
  syntax:
    content: public IEnumerable<DirectoryInfo> EnumerateDirectories()
    content.vb: Public Function EnumerateDirectories As IEnumerable(Of DirectoryInfo)
    return:
      type: IEnumerable{System.IO.DirectoryInfo}
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateDirectories
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 74
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of directory information that matches a specified search pattern.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on  the collection will start a new enumeration.</p>\n"
  example:
  - 
  syntax:
    content: public Collections.Generic.IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern)
    content.vb: Public Function EnumerateDirectories(searchPattern As String) As Collections.Generic.IEnumerable(Of DirectoryInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "\n<p>An enumerable collection of directories that matches <em>searchPattern</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  commentId: M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateDirectories(String, SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateDirectories
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 75
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option. </p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on  the collection will start a new enumeration.</p>\n"
  example:
  - "\n<p>The following example, starting from a specified directory, uses this method and the <xref href=\"System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)\" data-throw-if-not-resolved=\"false\"></xref> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size. </p>System.IO.DirectoryInfo.EnumerateDirectories#1"
  syntax:
    content: public Collections.Generic.IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption)
    content.vb: Public Function EnumerateDirectories(searchPattern As String, searchOption As SearchOption) As Collections.Generic.IEnumerable(Of DirectoryInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    - id: searchOption
      type: System.IO.SearchOption
      description: "\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "\n<p>An enumerable collection of directories that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>searchOption</em> is not a valid <xref href=\"System.IO.SearchOption\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateFiles
  commentId: M:System.IO.DirectoryInfo.EnumerateFiles
  id: EnumerateFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateFiles
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 286
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of file information in the current directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on the collection will start a new enumeration.</p>\n"
  example:
  - "\n<p>The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>If you only need the names of the files, use the static <xref href=\"System.IO.Directory\" data-throw-if-not-resolved=\"false\"></xref> class for better performance. For an example, see the <xref href=\"System.IO.Directory.EnumerateFiles(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.DirectoryInfo.EnumFiles#1"
  - "\n<p>The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.</p>System.IO.DirectoryInfo.EnumFiles#2"
  syntax:
    content: public IEnumerable<FileInfo> EnumerateFiles()
    content.vb: Public Function EnumerateFiles As IEnumerable(Of FileInfo)
    return:
      type: IEnumerable{System.IO.FileInfo}
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  commentId: M:System.IO.DirectoryInfo.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateFiles
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 77
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of file information that matches a search pattern.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on the collection will start a new enumeration.</p>\n"
  example:
  - "\n<p>The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.</p>System.IO.DirectoryInfo.EnumFiles#2"
  syntax:
    content: public Collections.Generic.IEnumerable<FileInfo> EnumerateFiles(string searchPattern)
    content.vb: Public Function EnumerateFiles(searchPattern As String) As Collections.Generic.IEnumerable(Of FileInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "\n<p>An enumerable collection of files that matches <em>searchPattern</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid, (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  commentId: M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateFiles(String, SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateFiles
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 78
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on the collection will start a new enumeration.</p>\n"
  example:
  - "\n<p>The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.</p>System.IO.DirectoryInfo.EnumFiles#2"
  syntax:
    content: public Collections.Generic.IEnumerable<FileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption)
    content.vb: Public Function EnumerateFiles(searchPattern As String, searchOption As SearchOption) As Collections.Generic.IEnumerable(Of FileInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    - id: searchOption
      type: System.IO.SearchOption
      description: "\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "\n<p>An enumerable collection of files that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>searchOption</em> is not a valid <xref href=\"System.IO.SearchOption\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos
  id: EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateFileSystemInfos
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 319
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of file system information in the current directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on the collection will start a new enumeration.</p>\n"
  example:
  - 
  syntax:
    content: public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos()
    content.vb: Public Function EnumerateFileSystemInfos As IEnumerable(Of FileSystemInfo)
    return:
      type: IEnumerable{System.IO.FileSystemInfo}
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  id: EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateFileSystemInfos
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 80
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of file system information that matches a specified search pattern.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on the collection will start a new enumeration.</p>\n"
  example:
  - 
  syntax:
    content: public Collections.Generic.IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern)
    content.vb: Public Function EnumerateFileSystemInfos(searchPattern As String) As Collections.Generic.IEnumerable(Of FileSystemInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "\n<p>An enumerable collection of file system information objects that matches <em>searchPattern</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  commentId: M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: EnumerateFileSystemInfos(String, SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerateFileSystemInfos
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 81
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The returned collection is not cached; each call to the <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method on the collection will start a new enumeration.</p>\n"
  example:
  - 
  syntax:
    content: public Collections.Generic.IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption)
    content.vb: Public Function EnumerateFileSystemInfos(searchPattern As String, searchOption As SearchOption) As Collections.Generic.IEnumerable(Of FileSystemInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    - id: searchOption
      type: System.IO.SearchOption
      description: "\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "\n<p>An enumerable collection of file system information objects that matches <em>searchPattern</em> and <em>searchOption</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>searchOption</em> is not a valid <xref href=\"System.IO.SearchOption\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetDirectories
  commentId: M:System.IO.DirectoryInfo.GetDirectories
  id: GetDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDirectories
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 168
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the subdirectories of the current directory.</p>\n"
  remarks: "\n<p>If there are no subdirectories, this method returns an empty array. This method is not recursive.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example retrieves all the directories in the root directory and displays the directory names.</p>directoryinfogetdirectories#1"
  syntax:
    content: public DirectoryInfo[] GetDirectories()
    content.vb: Public Function GetDirectories As DirectoryInfo()
    return:
      type: System.IO.DirectoryInfo[]
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  commentId: M:System.IO.DirectoryInfo.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDirectories
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 83
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> matching the given search criteria.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example counts the directories in a path that contain the specified letter.</p>DirInfo GetDirs2#1"
  syntax:
    content: public DirectoryInfo[] GetDirectories(string searchPattern)
    content.vb: Public Function GetDirectories(searchPattern As String) As DirectoryInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    return:
      type: System.IO.DirectoryInfo[]
      description: "\n<p>An array of type <strong>DirectoryInfo</strong> matching <em>searchPattern</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <strong>DirectoryInfo</strong> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  commentId: M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetDirectories(String, SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDirectories
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 84
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an array of directories in the current <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> matching the given search criteria and using a value to determine whether to search subdirectories.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>If there are no subdirectories, or no subdirectories match the <em>searchPattern</em> parameter, this method returns an empty array.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example lists all of the directories and files that begin with the letter \"c\" in \"c:\\\".</p>System.IO.DirectoryInfo_SearchOptions#00"
  syntax:
    content: public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption)
    content.vb: Public Function GetDirectories(searchPattern As String, searchOption As SearchOption) As DirectoryInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    - id: searchOption
      type: System.IO.SearchOption
      description: "\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\n"
    return:
      type: System.IO.DirectoryInfo[]
      description: "\n<p>An array of type <strong>DirectoryInfo</strong> matching <em>searchPattern</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>searchOption</em> is not a valid <xref href=\"System.IO.SearchOption\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path encapsulated in the <strong>DirectoryInfo</strong> object is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetFiles
  commentId: M:System.IO.DirectoryInfo.GetFiles
  id: GetFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFiles
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 162
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns a file list from the current directory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>If there are no files in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method returns an empty array.</p>\n<p>The order of the returned file names is not guaranteed; use the <see cref=\"Overload:System.Array.Sort\"></see> method if a specific sort order is required.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.</p>directoryinfogetfiles#2"
  syntax:
    content: public FileInfo[] GetFiles()
    content.vb: Public Function GetFiles As FileInfo()
    return:
      type: System.IO.FileInfo[]
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path is invalid, such as being on an unmapped drive. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  commentId: M:System.IO.DirectoryInfo.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFiles
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 86
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns a file list from the current directory matching the given search pattern.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned. </p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>If there are no files in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method returns an empty array.</p>\n<p>The following wildcard specifiers are permitted in the <em>searchPattern</em> parameter.</p>\n<p>Wildcard character </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>* </p>\n</td><td>\n<p>Zero or more characters. </p>\n</td></tr><tr><td>\n<p>? </p>\n</td><td>\n<p>Exactly zero or one character. </p>\n</td></tr></tbody></table>\n<p>The order of the returned file names is not guaranteed; use the <see cref=\"Overload:System.Array.Sort\"></see> method if a specific sort order is required.</p>\n<p>Wildcards are permitted. For example, the <em>searchPattern</em> string \"*.txt\" searches for all file names having an extension of \"txt\". The <em>searchPattern</em> string \"s*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the <em>searchPattern</em> string in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method returns an empty array.</p>\n<p>When using the asterisk wildcard character in a <em>searchPattern</em> (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A <em>searchPattern</em> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <em>searchPattern</em>. A <em>searchPattern</em> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <em>searchPattern</em>. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file*.txt\" returns both files.</p>\n<p>Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1*.txt\" may return unexpected file names. For example, using a search pattern of \"*1*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.</p>directoryinfogetfiles#2"
  syntax:
    content: public FileInfo[] GetFiles(string searchPattern)
    content.vb: Public Function GetFiles(searchPattern As String) As FileInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    return:
      type: System.IO.FileInfo[]
      description: "\n<p>An array of type <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  commentId: M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetFiles(String, SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFiles
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 87
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref> methods differ as follows: </p>\n<ul><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>, you can start enumerating the collection of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects before the whole collection is returned.</p>\n</li><li>\n<p>When you use <xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>, you must wait for the whole array of <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> objects to be returned before you can access the array. </p>\n</li></ul>\n<p>Therefore, when you are working with many files and directories, <xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref> can be more efficient.</p>\n<p>If there are no files in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method returns an empty array.</p>\n<p>The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard character </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>* (asterisk) </p>\n</td><td>\n<p>Zero or more characters. </p>\n</td></tr><tr><td>\n<p>? (question mark) </p>\n</td><td>\n<p>Exactly zero or one character. </p>\n</td></tr></tbody></table>\n<p>The order of the returned file names is not guaranteed; use the <see cref=\"Overload:System.Array.Sort\"></see> method if a specific sort order is required.</p>\n<p>Wildcards are permitted. For example, the <em>searchPattern</em> string \"*.txt\" searches for all file names having an extension of \"txt\". The <em>searchPattern</em> string \"s*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the <em>searchPattern</em> string in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method returns an empty array.</p>\n<p>When using the asterisk wildcard character in a <em>searchPattern</em> (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A <em>searchPattern</em> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <em>searchPattern</em>. A <em>searchPattern</em> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <em>searchPattern</em>. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file*.txt\" returns both files.</p>\n<p>The following list shows the behavior of different lengths for the <em>searchPattern</em> parameter: </p>\n<ul><li>\n<p>\"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.</p>\n</li><li>\n<p>\"*.abcd\" returns only files having an extension of.abcd.</p>\n</li><li>\n<p>\"*.abcde\" returns only files having an extension of.abcde.</p>\n</li><li>\n<p>\"*.abcdef\" returns only files having an extension of.abcdef.</p>\n</li></ul>\n<p>Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1*.txt\" may return unexpected file names. For example, using a search pattern of \"*1*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ol><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ol>\n"
  example:
  - "\n<p>The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.</p>directoryinfogetfiles#2"
  syntax:
    content: public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption)
    content.vb: Public Function GetFiles(searchPattern As String, searchOption As SearchOption) As FileInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    - id: searchOption
      type: System.IO.SearchOption
      description: "\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</p>\n"
    return:
      type: System.IO.FileInfo[]
      description: "\n<p>An array of type <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>searchOption</em> is not a valid <xref href=\"System.IO.SearchOption\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos
  id: GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFileSystemInfos
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 210
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns an array of strongly typed <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> entries representing all the files and subdirectories in a directory.</p>\n"
  remarks: "\n<p>If there are no files or directories in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method returns an empty array. This method is not recursive.</p>\n<p>For subdirectories, the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects returned by this method can be cast to the derived class <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.IO.FileAttributes\" data-throw-if-not-resolved=\"false\"></xref> value returned by the <xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> represents a file or a directory.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example counts the files and directories under the specified directory.</p>FSizeSort#1"
  syntax:
    content: public FileSystemInfo[] GetFileSystemInfos()
    content.vb: Public Function GetFileSystemInfos As FileSystemInfo()
    return:
      type: System.IO.FileSystemInfo[]
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path is invalid (for example, it is on an unmapped drive). </p>\n"
  seealso:
  - type: System.IO.FileSystemInfo
    commentId: T:System.IO.FileSystemInfo
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  id: GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFileSystemInfos
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 89
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Retrieves an array of strongly typed <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects representing the files and subdirectories that match the specified search criteria.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>This method is not recursive.</p>\n<p>For subdirectories, the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects returned by this method can be cast to the derived class <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.IO.FileAttributes\" data-throw-if-not-resolved=\"false\"></xref> value returned by the <xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> represents a file or a directory.</p>\n<p>Wild cards are permitted. For example, the <em>searchPattern</em> string \"*t\" searches for all directory names in <em>path</em> ending with the letter \"t\". The <em>searchPattern</em> string \"s*\" searches for all directory names in <em>path</em> beginning with the letter \"s\".</p>\n<p>The string \"..\" can only be used in <em>searchPattern</em> if it is specified as a part of a valid directory name, such as in the directory name \"a..b\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the <em>searchPattern</em> string in the <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>, this method returns an empty array.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example counts the files and directories that match the specified search pattern.</p>DirInfo GetFileSysInfos2#1"
  syntax:
    content: public FileSystemInfo[] GetFileSystemInfos(string searchPattern)
    content.vb: Public Function GetFileSystemInfos(searchPattern As String) As FileSystemInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    return:
      type: System.IO.FileSystemInfo[]
      description: "\n<p>An array of strongly typed <strong>FileSystemInfo</strong> objects matching the search criteria.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.FileSystemInfo
    commentId: T:System.IO.FileSystemInfo
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  commentId: M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  id: GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: GetFileSystemInfos(String, SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFileSystemInfos
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 90
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Retrieves an array of <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the files and subdirectories matching the specified search criteria.</p>\n"
  remarks: "\n<p>\n<em>searchPattern</em> can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in <em>searchPattern</em>.</p>\n<p>Wildcard specifier </p>\n<p>Matches </p>\n<table><tbody><tr><td>\n<p>* (asterisk)</p>\n</td><td>\n<p>Zero or more characters in that position. </p>\n</td></tr><tr><td>\n<p>? (question mark)</p>\n</td><td>\n<p>Zero or one character in that position. </p>\n</td></tr></tbody></table>\n<p>Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The <em>searchPattern</em> string \"s*\" searches for all names in <em>path</em> beginning with the letter \"s\".</p>\n<p>For subdirectories, the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> objects returned by this method can be cast to the derived class <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.IO.FileAttributes\" data-throw-if-not-resolved=\"false\"></xref> value returned by the <xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> represents a file or a directory.</p>\n<p>This method pre-populates the values of the following <xref href=\"System.IO.FileSystemInfo\" data-throw-if-not-resolved=\"false\"></xref> properties:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.CreationTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastAccessTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.FileSystemInfo.LastWriteTimeUtc\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public FileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption)
    content.vb: Public Function GetFileSystemInfos(searchPattern As String, searchOption As SearchOption) As FileSystemInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: "\n<p>The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is \"*\", which returns all files.</p>\n"
    - id: searchOption
      type: System.IO.SearchOption
      description: "\n<p>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <xref href=\"System.IO.SearchOption.TopDirectoryOnly\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.IO.FileSystemInfo[]
      description: "\n<p>An array of file system entries that match the search criteria.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>searchPattern </em>contains one or more invalid characters defined by the <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>searchPattern</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>searchOption</em> is not a valid <xref href=\"System.IO.SearchOption\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  commentId: M:System.IO.DirectoryInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveTo
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.cs
    startLine: 91
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Moves a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> instance and its contents to a new path.</p>\n"
  remarks: "\n<p>This method throws an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify \"c:\\\\public\\\\mydir\" as the <em>destDirName</em> parameter, or specify a new directory name such as \"c:\\\\newdir\".</p>\n<p>This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates moving a directory.</p>directoryinfomoveto#1"
  syntax:
    content: public void MoveTo(string destDirName)
    content.vb: Public Sub MoveTo(destDirName As String)
    parameters:
    - id: destDirName
      type: System.String
      description: "\n<p>The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destDirName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destDirName</em> is an empty string (''\"). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An attempt was made to move a directory to a different volume. </p>\n<p>-or-</p>\n<p>\n<em>destDirName</em> already exists.</p>\n<p>-or-</p>\n<p>You are not authorized to access this path.</p>\n<p>-or- </p>\n<p>The directory being moved and the destination directory have the same name.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The destination directory cannot be found.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DirectoryInfo.ToString
  commentId: M:System.IO.DirectoryInfo.ToString
  id: ToString
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.IO.DirectoryInfo.ToString()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs
    startLine: 433
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the original path that was passed by the user.</p>\n"
  syntax:
    content: public override String ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.FileSystemInfo
  parent: System.IO
  isExternal: false
  name: FileSystemInfo
  fullName: System.IO.FileSystemInfo
- uid: System.IO.FileSystemInfo.FullPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullPath
  fullName: System.IO.FileSystemInfo.FullPath
- uid: System.IO.FileSystemInfo.OriginalPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
- uid: System.IO.FileSystemInfo.Attributes
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Attributes
  fullName: System.IO.FileSystemInfo.Attributes
- uid: System.IO.FileSystemInfo.CreationTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
- uid: System.IO.FileSystemInfo.Extension
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Extension
  fullName: System.IO.FileSystemInfo.Extension
- uid: System.IO.FileSystemInfo.FullName
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullName
  fullName: System.IO.FileSystemInfo.FullName
- uid: System.IO.FileSystemInfo.LastAccessTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
- uid: System.IO.FileSystemInfo.LastWriteTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
- uid: System.IO.FileSystemInfo.Refresh
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.Exists
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Exists
  fullName: System.IO.FileSystemInfo.Exists
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemInfo.Name
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Name
  fullName: System.IO.FileSystemInfo.Name
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.FileSystemInfo.Delete
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<DirectoryInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.IO.DirectoryInfo)
  name.vb: Collections.Generic.IEnumerable(Of DirectoryInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  fullName: System.IO.SearchOption
- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<FileInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.IO.FileInfo)
  name.vb: Collections.Generic.IEnumerable(Of FileInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<FileSystemInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.IO.FileSystemInfo)
  name.vb: Collections.Generic.IEnumerable(Of FileSystemInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
  - name: )
    fullName: )
- uid: System.IO.DirectoryInfo[]
  isExternal: false
  name: DirectoryInfo[]
  fullName: System.IO.DirectoryInfo[]
  fullname.vb: System.IO.DirectoryInfo()
  name.vb: DirectoryInfo()
  spec.csharp:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
  - name: ()
    fullName: ()
- uid: System.IO.FileInfo[]
  isExternal: false
  name: FileInfo[]
  fullName: System.IO.FileInfo[]
  fullname.vb: System.IO.FileInfo()
  name.vb: FileInfo()
  spec.csharp:
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
  - name: ()
    fullName: ()
- uid: System.IO.FileSystemInfo[]
  isExternal: false
  name: FileSystemInfo[]
  fullName: System.IO.FileSystemInfo[]
  fullname.vb: System.IO.FileSystemInfo()
  name.vb: FileSystemInfo()
  spec.csharp:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
