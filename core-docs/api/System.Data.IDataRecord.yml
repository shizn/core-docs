items:
- uid: System.Data.IDataRecord
  commentId: T:System.Data.IDataRecord
  id: IDataRecord
  parent: System.Data
  children:
  - System.Data.IDataRecord.FieldCount
  - System.Data.IDataRecord.GetBoolean(System.Int32)
  - System.Data.IDataRecord.GetByte(System.Int32)
  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.IDataRecord.GetChar(System.Int32)
  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.IDataRecord.GetData(System.Int32)
  - System.Data.IDataRecord.GetDataTypeName(System.Int32)
  - System.Data.IDataRecord.GetDateTime(System.Int32)
  - System.Data.IDataRecord.GetDecimal(System.Int32)
  - System.Data.IDataRecord.GetDouble(System.Int32)
  - System.Data.IDataRecord.GetFieldType(System.Int32)
  - System.Data.IDataRecord.GetFloat(System.Int32)
  - System.Data.IDataRecord.GetGuid(System.Int32)
  - System.Data.IDataRecord.GetInt16(System.Int32)
  - System.Data.IDataRecord.GetInt32(System.Int32)
  - System.Data.IDataRecord.GetInt64(System.Int32)
  - System.Data.IDataRecord.GetName(System.Int32)
  - System.Data.IDataRecord.GetOrdinal(System.String)
  - System.Data.IDataRecord.GetString(System.Int32)
  - System.Data.IDataRecord.GetValue(System.Int32)
  - System.Data.IDataRecord.GetValues(System.Object[])
  - System.Data.IDataRecord.IsDBNull(System.Int32)
  - System.Data.IDataRecord.Item(System.Int32)
  - System.Data.IDataRecord.Item(System.String)
  langs:
  - csharp
  - vb
  name: IDataRecord
  fullName: System.Data.IDataRecord
  type: Interface
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IDataRecord
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 9
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Provides access to the column values within each row for a <strong>DataReader</strong>, and is implemented by .NET Framework data providers that access relational databases.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.IDataRecord\" data-throw-if-not-resolved=\"false\"></xref> interfaces enable an inheriting class to implement a <strong>DataReader</strong> class. This provides a way of reading one or more forward-only streams of result sets. For more information about <strong>DataReader</strong> classes, see Retrieving Data Using a DataReader. </p>\n<p>An application does not create an instance of the <xref href=\"System.Data.IDataRecord\" data-throw-if-not-resolved=\"false\"></xref> interface directly, but creates an instance of a class that inherits <xref href=\"System.Data.IDataRecord\" data-throw-if-not-resolved=\"false\"></xref>. Typically, you do this by obtaining a <strong>DataReader</strong> through the <strong>ExecuteReader</strong> method of the <strong>Command</strong> object.</p>\n<p>Classes that inherit <xref href=\"System.Data.IDataRecord\" data-throw-if-not-resolved=\"false\"></xref> must implement all inherited members, and typically define additional members to add provider-specific functionality.</p>\n<p>Providers implementing a <strong>DataReader</strong> are required to expose data in common language runtime (CLR) types. Type coercion is defined for some types not included in the CLR. These values may be accessed as alternative types that comply with CLR types. As an example, the following table lists suggested mappings from OLE DB data types to CLR types, with alternative types in parentheses.</p>\n<p>OLE DB type </p>\n<p>CLR type </p>\n<table><tbody><tr><td>\n<p>DBTYPE_BOOL </p>\n</td><td>\n<p>Int16 </p>\n</td></tr><tr><td>\n<p>DBTYPE_BSTR </p>\n</td><td>\n<p>string </p>\n</td></tr><tr><td>\n<p>DBTYPE_BYTES </p>\n</td><td>\n<p>byte[] </p>\n</td></tr><tr><td>\n<p>DBTYPE_CY </p>\n</td><td>\n<p>Decimal </p>\n</td></tr><tr><td>\n<p>DBTYPE_DATE </p>\n</td><td>\n<p>DateTime </p>\n</td></tr><tr><td>\n<p>DBTYPE_DBDATE </p>\n</td><td>\n<p>DateTime </p>\n</td></tr><tr><td>\n<p>DBTYPE_DBTIME </p>\n</td><td>\n<p>DateTime </p>\n</td></tr><tr><td>\n<p>DBTYPE_DBTIMESTAMP </p>\n</td><td>\n<p>DateTime </p>\n</td></tr><tr><td>\n<p>DBTYPE_DECIMAL </p>\n</td><td>\n<p>Decimal </p>\n</td></tr><tr><td>\n<p>DBTYPE_EMPTY </p>\n</td><td>\n<p>null </p>\n</td></tr><tr><td>\n<p>DBTYPE_ERROR </p>\n</td><td>\n<p>ExternalException </p>\n</td></tr><tr><td>\n<p>DBTYPE_FILETIME </p>\n</td><td>\n<p>DateTime </p>\n</td></tr><tr><td>\n<p>DBTYPE_GUID </p>\n</td><td>\n<p>Guid </p>\n</td></tr><tr><td>\n<p>DBTYPE_HCHAPTER </p>\n</td><td>\n<p>not supported </p>\n</td></tr><tr><td>\n<p>DBTYPE_I1 </p>\n</td><td>\n<p>SByte </p>\n</td></tr><tr><td>\n<p>DBTYPE_I2 </p>\n</td><td>\n<p>Int16 </p>\n</td></tr><tr><td>\n<p>DBTYPE_I4 </p>\n</td><td>\n<p>Int32 </p>\n</td></tr><tr><td>\n<p>DBTYPE_I8 </p>\n</td><td>\n<p>Int64 </p>\n</td></tr><tr><td>\n<p>DBTYPE_IDISPATCH </p>\n</td><td>\n<p>object </p>\n</td></tr><tr><td>\n<p>DBTYPE_IUNKNOWN </p>\n</td><td>\n<p>object </p>\n</td></tr><tr><td>\n<p>DBTYPE_NULL </p>\n</td><td>\n<p>DBNull.Value </p>\n</td></tr><tr><td>\n<p>DBTYPE_NUMERIC </p>\n</td><td>\n<p>Decimal </p>\n</td></tr><tr><td>\n<p>DBTYPE_PROPVARIANT </p>\n</td><td>\n<p>object </p>\n</td></tr><tr><td>\n<p>DBTYPE_R4 </p>\n</td><td>\n<p>Single </p>\n</td></tr><tr><td>\n<p>DBTYPE_R8 </p>\n</td><td>\n<p>Double </p>\n</td></tr><tr><td>\n<p>DBTYPE_STR </p>\n</td><td>\n<p>string </p>\n</td></tr><tr><td>\n<p>DBTYPE_UDT </p>\n</td><td>\n<p>not supported </p>\n</td></tr><tr><td>\n<p>DBTYPE_UI1 </p>\n</td><td>\n<p>byte (Int16) </p>\n</td></tr><tr><td>\n<p>DBTYPE_UI2 </p>\n</td><td>\n<p>UInt16 (Int32) </p>\n</td></tr><tr><td>\n<p>DBTYPE_UI4 </p>\n</td><td>\n<p>UInt32 (Int64) </p>\n</td></tr><tr><td>\n<p>DBTYPE_UI8 </p>\n</td><td>\n<p>UInt64 (Decimal) </p>\n</td></tr><tr><td>\n<p>DBTYPE_VARIANT </p>\n</td><td>\n<p>object </p>\n</td></tr><tr><td>\n<p>DBTYPE_VARNUMERIC </p>\n</td><td>\n<p>not supported </p>\n</td></tr><tr><td>\n<p>DBTYPE_WSTR </p>\n</td><td>\n<p>string </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example creates instances of the derived classes, <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref>, and then the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic WebData SqlDataReader.Read Example#1"
  syntax:
    content: public interface IDataRecord
    content.vb: Public Interface IDataRecord
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Data.IDataRecord.FieldCount
  commentId: P:System.Data.IDataRecord.FieldCount
  id: FieldCount
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: FieldCount
  fullName: System.Data.IDataRecord.FieldCount
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldCount
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 12
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the number of columns in the current row.</p>\n"
  remarks: "\n<p>After executing a query that does not return rows (for example, using the <xref href=\"System.Data.IDbCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref> method), <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref> returns -1.</p>\n"
  syntax:
    content: int FieldCount { get; }
    content.vb: ReadOnly Property FieldCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Data.IDataRecord.Item(System.Int32)
  commentId: P:System.Data.IDataRecord.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Data.IDataRecord.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 14
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the column located at the specified index.</p>\n"
  syntax:
    content: object this[int i] { get; }
    content.vb: ReadOnly Property Item(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Object
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Data.IDataRecord.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Data.IDataRecord.Item(System.String)
  commentId: P:System.Data.IDataRecord.Item(System.String)
  id: Item(System.String)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: System.Data.IDataRecord.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 16
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the column with the specified name.</p>\n"
  remarks: "\n<p>A case-sensitive lookup is performed first. If it fails, a second case-insensitive search is made.</p>\n<p>This method is kana-width insensitive.</p>\n"
  syntax:
    content: object this[string name] { get; }
    content.vb: ReadOnly Property Item(name As String) As Object
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>No column with the specified name was found. </p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Data.IDataRecord.Item(System.String)
  name.vb: Item(String)
- uid: System.Data.IDataRecord.GetBoolean(System.Int32)
  commentId: M:System.Data.IDataRecord.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetBoolean(Int32)
  fullName: System.Data.IDataRecord.GetBoolean(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBoolean
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 30
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the value of the specified column as a Boolean.</p>\n"
  remarks: "\n<p>No conversions are performed. Therefore, the data retrieved must already be a Boolean; otherwise an exception is generated.</p>\n"
  syntax:
    content: bool GetBoolean(int i)
    content.vb: Function GetBoolean(i As Integer) As Boolean
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Boolean
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetByte(System.Int32)
  commentId: M:System.Data.IDataRecord.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetByte(Int32)
  fullName: System.Data.IDataRecord.GetByte(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByte
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 32
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 8-bit unsigned integer value of the specified column.</p>\n"
  syntax:
    content: byte GetByte(int i)
    content.vb: Function GetByte(i As Integer) As Byte
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Byte
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)
  fullName: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 34
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the number of available bytes in the field. Frequently this is the exact length of the field. However, the number returned may be less than the true length of the field if <strong>GetBytes</strong> has already been used to obtain bytes from the field.</p>\n<p>If you pass a buffer that is <strong>null</strong>, <xref href=\"System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the length of the row in bytes.</p>\n<p>No conversions are performed; therefore the data retrieved must already be a byte array.</p>\n"
  syntax:
    content: long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)
    content.vb: Function GetBytes(i As Integer, fieldOffset As Long, buffer As Byte(), bufferoffset As Integer, length As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
    - id: fieldOffset
      type: System.Int64
    - id: buffer
      type: System.Byte[]
    - id: bufferoffset
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  fullName.vb: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)
- uid: System.Data.IDataRecord.GetChar(System.Int32)
  commentId: M:System.Data.IDataRecord.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetChar(Int32)
  fullName: System.Data.IDataRecord.GetChar(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChar
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 36
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the character value of the specified column.</p>\n"
  syntax:
    content: char GetChar(int i)
    content.vb: Function GetChar(i As Integer) As Char
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Char
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetChars(Int32, Int64, Char[], Int32, Int32)
  fullName: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 38
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the number of available characters in the field. Frequently this is the exact length of the field. However, the number returned may be less than the exact length of the field if <strong>GetChars</strong> has already been used to obtain characters from the field.</p>\n<p>If you pass a buffer that is <strong>null</strong>, <strong>GetChars</strong> returns the length of the field in characters.</p>\n<p>No conversions are performed; therefore the data retrieved must already be a character array.</p>\n"
  syntax:
    content: long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)
    content.vb: Function GetChars(i As Integer, fieldoffset As Long, buffer As Char(), bufferoffset As Integer, length As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
    - id: fieldoffset
      type: System.Int64
    - id: buffer
      type: System.Char[]
    - id: bufferoffset
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.Int64
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  fullName.vb: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)
  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)
- uid: System.Data.IDataRecord.GetData(System.Int32)
  commentId: M:System.Data.IDataRecord.GetData(System.Int32)
  id: GetData(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetData(Int32)
  fullName: System.Data.IDataRecord.GetData(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetData
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 58
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Returns an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> for the specified column ordinal.</p>\n"
  syntax:
    content: IDataReader GetData(int i)
    content.vb: Function GetData(i As Integer) As IDataReader
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Data.IDataReader
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetDataTypeName(Int32)
  fullName: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDataTypeName
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 20
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the data type information for the specified field.</p>\n"
  remarks: "\n<p>The data type information can differ from the type information returned by <strong>GetFieldType</strong>, especially where the underlying data types do not map one for one to the runtime types supported by the language. (for example, <strong>DataTypeName</strong> may be \"integer\", while <strong>Type.Name</strong> may be \"Int32\".) </p>\n"
  syntax:
    content: string GetDataTypeName(int i)
    content.vb: Function GetDataTypeName(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetDateTime(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetDateTime(Int32)
  fullName: System.Data.IDataRecord.GetDateTime(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDateTime
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 56
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the date and time data value of the specified field.</p>\n"
  syntax:
    content: DateTime GetDateTime(int i)
    content.vb: Function GetDateTime(i As Integer) As Date
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.DateTime
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetDecimal(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetDecimal(Int32)
  fullName: System.Data.IDataRecord.GetDecimal(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDecimal
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 54
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the fixed-position numeric value of the specified field.</p>\n"
  syntax:
    content: decimal GetDecimal(int i)
    content.vb: Function GetDecimal(i As Integer) As Decimal
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Decimal
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetDouble(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetDouble(Int32)
  fullName: System.Data.IDataRecord.GetDouble(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDouble
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 50
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the double-precision floating point number of the specified field.</p>\n"
  syntax:
    content: double GetDouble(int i)
    content.vb: Function GetDouble(i As Integer) As Double
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Double
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetFieldType(System.Int32)
  commentId: M:System.Data.IDataRecord.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetFieldType(Int32)
  fullName: System.Data.IDataRecord.GetFieldType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldType
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 22
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> information corresponding to the type of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that would be returned from <xref href=\"System.Data.IDataRecord.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This information can be used to increase performance by indicating the strongly-typed accessor to call. (for example, using <strong>GetInt32</strong> is roughly ten times faster than using <strong>GetValue</strong>.) </p>\n"
  syntax:
    content: Type GetFieldType(int i)
    content.vb: Function GetFieldType(i As Integer) As Type
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Type
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetFloat(System.Int32)
  commentId: M:System.Data.IDataRecord.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetFloat(Int32)
  fullName: System.Data.IDataRecord.GetFloat(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFloat
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 48
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the single-precision floating point number of the specified field.</p>\n"
  syntax:
    content: float GetFloat(int i)
    content.vb: Function GetFloat(i As Integer) As Single
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Single
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetGuid(System.Int32)
  commentId: M:System.Data.IDataRecord.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetGuid(Int32)
  fullName: System.Data.IDataRecord.GetGuid(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGuid
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 40
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Returns the GUID value of the specified field.</p>\n"
  syntax:
    content: Guid GetGuid(int i)
    content.vb: Function GetGuid(i As Integer) As Guid
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Guid
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetInt16(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetInt16(Int32)
  fullName: System.Data.IDataRecord.GetInt16(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt16
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 42
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 16-bit signed integer value of the specified field.</p>\n"
  syntax:
    content: short GetInt16(int i)
    content.vb: Function GetInt16(i As Integer) As Short
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Int16
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetInt32(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetInt32(Int32)
  fullName: System.Data.IDataRecord.GetInt32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt32
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 44
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 32-bit signed integer value of the specified field.</p>\n"
  syntax:
    content: int GetInt32(int i)
    content.vb: Function GetInt32(i As Integer) As Integer
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetInt64(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetInt64(Int32)
  fullName: System.Data.IDataRecord.GetInt64(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt64
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 46
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 64-bit signed integer value of the specified field.</p>\n"
  syntax:
    content: long GetInt64(int i)
    content.vb: Function GetInt64(i As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Int64
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetName(System.Int32)
  commentId: M:System.Data.IDataRecord.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetName(Int32)
  fullName: System.Data.IDataRecord.GetName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetName
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 18
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the name for the field to find.</p>\n"
  syntax:
    content: string GetName(int i)
    content.vb: Function GetName(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetOrdinal(System.String)
  commentId: M:System.Data.IDataRecord.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetOrdinal(String)
  fullName: System.Data.IDataRecord.GetOrdinal(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOrdinal
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 28
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Return the index of the named field.</p>\n"
  remarks: "\n<p>\n<strong>GetOrdinal</strong> performs a case-sensitive lookup first. If it fails, a second case-insensitive search is made.<strong> GetOrdinal</strong> is kana-width insensitive. If the index of the named field is not found, an <strong>IndexOutOfRangeException</strong> is thrown. </p>\n<p>Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call <strong>GetOrdinal</strong> within a loop. Save time by calling <strong>GetOrdinal</strong> one time and assigning the results to an integer variable for use within the loop.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the inherited <xref href=\"System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Classic WebData OdbcDataReader.GetOrdinal#1"
  syntax:
    content: int GetOrdinal(string name)
    content.vb: Function GetOrdinal(name As String) As Integer
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Int32
- uid: System.Data.IDataRecord.GetString(System.Int32)
  commentId: M:System.Data.IDataRecord.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetString(Int32)
  fullName: System.Data.IDataRecord.GetString(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetString
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 52
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the string value of the specified field.</p>\n"
  syntax:
    content: string GetString(int i)
    content.vb: Function GetString(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetValue(System.Int32)
  commentId: M:System.Data.IDataRecord.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  fullName: System.Data.IDataRecord.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 24
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Return the value of the specified field.</p>\n"
  syntax:
    content: object GetValue(int i)
    content.vb: Function GetValue(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Object
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
- uid: System.Data.IDataRecord.GetValues(System.Object[])
  commentId: M:System.Data.IDataRecord.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: GetValues(Object[])
  fullName: System.Data.IDataRecord.GetValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValues
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 26
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Populates an array of objects with the column values of the current record.</p>\n"
  remarks: "\n<p>For most applications, the <xref href=\"System.Data.IDataRecord.GetValues(System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method provides an efficient means for retrieving all columns, instead of retrieving each column individually.</p>\n<p>You can pass an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array that contains fewer than the number of columns that are contained in the resulting row. Only the amount of data the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array holds is copied to the array. You can also pass an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array whose length is more than the number of columns that are contained in the resulting row.</p>\n"
  syntax:
    content: int GetValues(object[] values)
    content.vb: Function GetValues(values As Object()) As Integer
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: System.Int32
  fullName.vb: System.Data.IDataRecord.GetValues(System.Object())
  name.vb: GetValues(Object())
- uid: System.Data.IDataRecord.IsDBNull(System.Int32)
  commentId: M:System.Data.IDataRecord.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: IsDBNull(Int32)
  fullName: System.Data.IDataRecord.IsDBNull(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDBNull
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 60
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Return whether the specified field is set to null.</p>\n"
  remarks: "\n<p>Call this method to see if there are null column values before calling the typed get methods (for example, <xref href=\"System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, and so on) to avoid raising an error.</p>\n"
  syntax:
    content: bool IsDBNull(int i)
    content.vb: Function IsDBNull(i As Integer) As Boolean
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Boolean
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
references:
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  fullName: System.Data.IDataReader
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
