items:
- uid: System.Text.UnicodeEncoding
  commentId: T:System.Text.UnicodeEncoding
  id: UnicodeEncoding
  parent: System.Text
  children:
  - System.Text.UnicodeEncoding.#ctor
  - System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)
  - System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Text.UnicodeEncoding.Equals(System.Object)
  - System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.UnicodeEncoding.GetByteCount(System.String)
  - System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.UnicodeEncoding.GetDecoder
  - System.Text.UnicodeEncoding.GetEncoder
  - System.Text.UnicodeEncoding.GetHashCode
  - System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  - System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
  - System.Text.UnicodeEncoding.GetPreamble
  - System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: UnicodeEncoding
  fullName: System.Text.UnicodeEncoding
  type: Class
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnicodeEncoding
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 38
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Represents a UTF-16 encoding of Unicode characters. </p>\n"
  remarks: "\n<p>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</p>\n<p>The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> uses the following UTFs: </p>\n<ul><li>\n<p>UTF-8, which represents each code point as a sequence of one to four bytes.</p>\n</li><li>\n<p>UTF-16, which represents each code point as a sequence of one to two 16-bit integers. </p>\n</li><li>\n<p>UTF-32, which represents each code point as a 32-bit integer. </p>\n</li></ul>\n<p>For more information about the UTFs and other encodings supported by <xref href=\"System.Text\" data-throw-if-not-resolved=\"false\"></xref>, see Character Encoding in the .NET Framework. </p>\n<p>The <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class represents a UTF-16 encoding. The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal): </p>\n<ul><li>\n<p>Big endian byte order: 00 00 00 41 </p>\n</li><li>\n<p>Little endian byte order: 41 00 00 00 </p>\n</li></ul>\n<p>It is generally more efficient to store Unicode characters using the native byte order of a particular platform. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. The <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order). You can determine the \"endianness\" of a particular architecture by calling the <xref href=\"System.BitConverter.IsLittleEndian\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Optionally, the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF. </p>\n<p>If the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> instance is configured to provide a BOM, you can retrieve it by calling the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method; otherwise, the method returns an empty array. Note that, even if a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class do not do this automatically. </p>\n<p>To enable error detection and to make the class instance more secure, you should instantiate a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object by calling the <xref href=\"System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor and setting its <em>throwOnInvalidBytes</em> argument to <strong>true</strong>. With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, no exception is thrown, and the invalid sequence is generally ignored. </p>\n<p>You can instantiate a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> constructors and the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> properties that return a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>Member</p>\n<p>Endianness</p>\n<p>BOM</p>\n<p>Error detection</p>\n<p>The <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many bytes result in encoding a set of Unicode characters, and the <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method performs the actual encoding.</p>\n<p>Likewise, the <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many characters result in decoding a sequence of bytes, and the <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods perform the actual decoding.</p>\n<p>For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref href=\"System.Text.UnicodeEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UnicodeEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> properties, respectively. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object. The byte array is decoded into a string to demonstrate that there is no loss of data.</p>System.Text.UnicodeEncoding Example#1"
  - "\n<p>The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM). It then reads the file in two different ways: as a text file by using a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object; and as a binary file. As you would expect, in neither case is the BOM included in the newly read string. </p>System.Text.UnicodeEncoding Example#2"
  syntax:
    content: 'public class UnicodeEncoding : Encoding'
    content.vb: >-
      Public Class UnicodeEncoding
          Inherits Encoding
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.UTF32Encoding
    commentId: T:System.Text.UTF32Encoding
  - type: System.Text.UTF8Encoding
    commentId: T:System.Text.UTF8Encoding
  - type: System.Text.UTF7Encoding
    commentId: T:System.Text.UTF7Encoding
  - type: System.Text.ASCIIEncoding
    commentId: T:System.Text.ASCIIEncoding
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  - type: System.Globalization.CharUnicodeInfo
    commentId: T:System.Globalization.CharUnicodeInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.UnicodeEncoding.#ctor
  commentId: M:System.Text.UnicodeEncoding.#ctor
  id: '#ctor'
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: UnicodeEncoding()
  fullName: System.Text.UnicodeEncoding.UnicodeEncoding()
  type: Constructor
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 40
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</p>\n<p>For security reasons, you should enable error detection by calling the <xref href=\"System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor and setting its <em>throwOnInvalidBytes</em> argument to <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a new <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> instance and display the name of the encoding.</p>System.Text.UnicodeEncoding.ctor Example#1"
  syntax:
    content: public UnicodeEncoding()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)
  commentId: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean)'
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: UnicodeEncoding(Boolean, Boolean)
  fullName: System.Text.UnicodeEncoding.UnicodeEncoding(System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 41
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns a Unicode byte order mark. </p>\n"
  remarks: "\n<p>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</p>\n<p>For security reasons, you should enable error detection by calling the <xref href=\"System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor and setting its <em>throwOnInvalidBytes</em> argument to <strong>true</strong>.</p>\n<p>The <em>byteOrderMark</em> parameter controls the operation of the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method. If <strong>true</strong>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If <strong>false</strong>, it returns a zero-length byte array. However, setting <em>byteOrderMark</em> to <strong>true</strong> does not cause the <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to include the number of bytes in the BOM in the byte count. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a new <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark. </p>System.Text.UnicodeEncoding.ctor2 Example#1"
  syntax:
    content: public UnicodeEncoding(bool bigEndian, bool byteOrderMark)
    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean)
    parameters:
    - id: bigEndian
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to use the big endian byte order (most significant byte first), or <strong>false</strong> to use the little endian byte order (least significant byte first). </p>\n"
    - id: byteOrderMark
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns a Unicode byte order mark; otherwise, <strong>false</strong>. See the Remarks section for more information. </p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetPreamble
    commentId: M:System.Text.UnicodeEncoding.GetPreamble
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: UnicodeEncoding(Boolean, Boolean, Boolean)
  fullName: System.Text.UnicodeEncoding.UnicodeEncoding(System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 42
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\n"
  remarks: "\n<p>The <em>byteOrderMark</em> parameter controls the operation of the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method. If <strong>true</strong>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If <strong>false</strong>, it returns a zero-length byte array. However, setting <em>byteOrderMark</em> to <strong>true</strong> does not cause the <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to include the number of bytes in the BOM in the byte count. </p>\n<p>If the <em>throwOnInvalidBytes</em> parameter is <strong>true</strong>, a method that detects an invalid byte sequence throws <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</p>\n<p>For security reasons, your applications are recommended to use this constructor to create an instance of the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> class and turn on error detection by setting <em>throwOnInvalidBytes</em> to <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the behavior of <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, both with error detection enabled and without.</p>System.Text.UnicodeEncoding.ErrorDetection#1"
  syntax:
    content: public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes)
    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)
    parameters:
    - id: bigEndian
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to use the big endian byte order (most significant byte first); <strong>false</strong> to use the little endian byte order (least significant byte first). </p>\n"
    - id: byteOrderMark
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to specify that the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns a Unicode byte order mark; otherwise, <strong>false</strong>. See the Remarks section for more information. </p>\n"
    - id: throwOnInvalidBytes
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <strong>false</strong>. </p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetPreamble
    commentId: M:System.Text.UnicodeEncoding.GetPreamble
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.UnicodeEncoding.Equals(System.Object)
  commentId: M:System.Text.UnicodeEncoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Text.UnicodeEncoding.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 43
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Determines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> objects are considered equal if all of the following conditions are true: </p>\n<ul><li>\n<p>Both objects use the same byte order (little-endian or big-endian).</p>\n</li><li>\n<p>Both objects provide the byte order mark, or both do not.</p>\n</li><li>\n<p>Both objects use the same encoder fallback. </p>\n</li><li>\n<p>Both objects use the same decoder fallback. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.UnicodeEncoding.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether the current <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a different <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object. Five <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> objects are created and compared, and the results of the comparisons are displayed.</p>System.Text.UnicodeEncoding.ctor2 Example#1"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to compare with the current object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is an instance of <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> and is equal to the current object; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.#ctor
    commentId: M:System.Text.UnicodeEncoding.#ctor
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char[], Int32, Int32)
  fullName: System.Text.UnicodeEncoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByteCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 44
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, you call the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection enabled, an invalid sequence causes this method to throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the number of bytes needed to encode the Latin lowercase characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters. The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to determine the number of bytes needed to encode the Cyrillic characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, which indicates maximum number of bytes needed to encode the Cyrillic characters. </p>System.Text.UnicodeEncoding.GetByteCount#2"
  syntax:
    content: public override int GetByteCount(char[] chars, int index, int count)
    content.vb: Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the set of characters to encode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first character to encode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UnicodeEncoding.GetEncoder
    commentId: M:System.Text.UnicodeEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UnicodeEncoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
- uid: System.Text.UnicodeEncoding.GetByteCount(System.String)
  commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetByteCount(String)
  fullName: System.Text.UnicodeEncoding.GetByteCount(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByteCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 45
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding the characters in the specified string.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods to calculate the maximum and actual number of bytes required to encode a string. It also displays the actual number of bytes required to store a byte stream with a byte order mark. </p>System.Text.UnicodeEncoding.GetByteCount#1"
  syntax:
    content: public override int GetByteCount(string s)
    content.vb: Public Overrides Function GetByteCount(s As String) As Integer
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The string that contains the set of characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null </strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  - type: System.Text.UnicodeEncoding.GetEncoder
    commentId: M:System.Text.UnicodeEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: System.Text.UnicodeEncoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 46
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UnicodeEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UnicodeEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not prepend a preamble to the beginning of a sequence of encoded bytes. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to encode a range of characters from a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and store the encoded bytes in a range of elements in a byte array.</p>System.Text.UnicodeEncoding.GetBytes3 Example#1"
  syntax:
    content: public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the set of characters to encode. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index of the first character to encode. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array to contain the resulting sequence of bytes. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting sequence of bytes. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written into <em>bytes</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetEncoder
    commentId: M:System.Text.UnicodeEncoding.GetEncoder
  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UnicodeEncoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
- uid: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: System.Text.UnicodeEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 47
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, you call the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. To calculate the maximum array size, you call the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster. </p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UnicodeEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UnicodeEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not prepend a preamble to the beginning of a sequence of encoded bytes. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</p>System.Text.UnicodeEncoding.GetBytes1 Example#1"
  syntax:
    content: public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The string containing the set of characters to encode. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index of the first character to encode. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array to contain the resulting sequence of bytes. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting sequence of bytes. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written into <em>bytes</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null </strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetEncoder
    commentId: M:System.Text.UnicodeEncoding.GetEncoder
  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UnicodeEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
- uid: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.UnicodeEncoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCharCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 48
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of characters produced by decoding a range of elements in a byte array using <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.UnicodeEncoding.GetCharCount Example#1"
  syntax:
    content: public override int GetCharCount(byte[] bytes, int index, int count)
    content.vb: Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UnicodeEncoding.GetDecoder
    commentId: M:System.Text.UnicodeEncoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UnicodeEncoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
- uid: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.UnicodeEncoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 49
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.UnicodeEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.UnicodeEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to decode a range of elements in a byte array and store the result in a character array.</p>System.Text.UnicodeEncoding.GetChars Example#1"
  syntax:
    content: public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
    content.vb: Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array to contain the resulting set of characters. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting set of characters. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of characters written into <em>chars</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
  - type: System.Text.UnicodeEncoding.GetDecoder
    commentId: M:System.Text.UnicodeEncoding.GetDecoder
  - type: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UnicodeEncoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
- uid: System.Text.UnicodeEncoding.GetDecoder
  commentId: M:System.Text.UnicodeEncoding.GetDecoder
  id: GetDecoder
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetDecoder()
  fullName: System.Text.UnicodeEncoding.GetDecoder()
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDecoder
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 50
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. However, a <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref href=\"System.Text.UnicodeEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UnicodeEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n<p>If error detection is enabled, that is, the <em>throwOnInvalidBytes</em> parameter of the constructor is set to <strong>true</strong>, error detection is also enabled in the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</p>\n"
  example:
  - "\n<p>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</p>System.Text.UnicodeEncoding.EncDec#1"
  syntax:
    content: public override Decoder GetDecoder()
    content.vb: Public Overrides Function GetDecoder As Decoder
    return:
      type: System.Text.Decoder
      description: "\n<p>A <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</p>\n"
  seealso:
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetEncoder
    commentId: M:System.Text.UnicodeEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetEncoder
  commentId: M:System.Text.UnicodeEncoding.GetEncoder
  id: GetEncoder
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetEncoder()
  fullName: System.Text.UnicodeEncoding.GetEncoder()
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEncoder
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 51
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method of this class. However, a <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object maintains state information between calls so that it can correctly encode character sequences that span blocks. The <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref href=\"System.Text.UnicodeEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.UnicodeEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n<p>If error detection is enabled, that is, the <em>throwOnInvalidBytes</em> parameter of the constructor is set to <strong>true</strong>, error detection is also enabled in the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</p>\n"
  example:
  - "\n<p>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</p>System.Text.UnicodeEncoding.EncDec#1"
  syntax:
    content: public override Encoder GetEncoder()
    content.vb: Public Overrides Function GetEncoder As Encoder
    return:
      type: System.Text.Encoder
      description: "\n<p>A <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</p>\n"
  seealso:
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetDecoder
    commentId: M:System.Text.UnicodeEncoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetHashCode
  commentId: M:System.Text.UnicodeEncoding.GetHashCode
  id: GetHashCode
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Text.UnicodeEncoding.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 52
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Returns the hash code for the current instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code for the current <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetMaxByteCount(Int32)
  fullName: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMaxByteCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 53
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> retrieves a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref>. If a fallback is chosen with a potentially large string, <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> can return large values.</p>\n<p>In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <see cref=\"Overload:System.Text.UnicodeEncoding.GetByteCount\"></see> or <see cref=\"Overload:System.Text.Encoder.Convert\"></see>.</p>\n<p>\n<xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relation to <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If your application needs a similar function to use with <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, it should use <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the maximum number of bytes required to encode a specified number of characters.</p>System.Text.UnicodeEncoding.GetMaxByteCount Example#1"
  syntax:
    content: public override int GetMaxByteCount(int charCount)
    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer
    parameters:
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetEncoder
    commentId: M:System.Text.UnicodeEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetMaxCharCount(Int32)
  fullName: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMaxCharCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 54
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> retrieves a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref>. If a fallback is chosen with a potentially large string, <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> retrieves large values.</p>\n<p>In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <see cref=\"Overload:System.Text.UnicodeEncoding.GetCharCount\"></see> or <see cref=\"Overload:System.Text.Decoder.Convert\"></see>.</p>\n<p>\n<xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relation to <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If your application needs a similar function to use with <xref href=\"System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, it should use <xref href=\"System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the maximum number of characters produced by decoding a specified number of bytes.</p>System.Text.UnicodeEncoding.GetMaxCharCount Example#1"
  syntax:
    content: public override int GetMaxCharCount(int byteCount)
    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer
    parameters:
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetDecoder
    commentId: M:System.Text.UnicodeEncoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetPreamble
  commentId: M:System.Text.UnicodeEncoding.GetPreamble
  id: GetPreamble
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetPreamble()
  fullName: System.Text.UnicodeEncoding.GetPreamble()
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPreamble
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 55
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</p>\n<ul><li>\n<p>Big endian byte order: FE FF </p>\n</li><li>\n<p>Little endian byte order: FF FE </p>\n</li></ul>\n<p>You can instantiate a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object whose <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns a valid BOM in the following ways: </p>\n<ul><li>\n<p>By retrieving the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Text.Encoding.Unicode\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.Encoding.BigEndianUnicode\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By calling the parameterless <xref href=\"System.Text.UnicodeEncoding.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n</li><li>\n<p>By supplying <strong>true</strong> as the value of the <em>byteOrderMark</em> argument to the <xref href=\"System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructors. </p>\n</li></ul>\n<p>We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns. Often user problems might be avoided if data is consistently and properly tagged.  </p>\n<p>For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  </p>\n<p>There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended. </p>\n<p>To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble. Note that the <see cref=\"Overload:System.Text.UnicodeEncoding.GetBytes\"></see> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Text.UnicodeEncoding.GetPreamble Example#1"
  - "\n<p>The following example instantiates two <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> objects, the first of which does not provide a BOM, and the second of which does. It then calls the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method to write the BOM to a file before writing a Unicode-encoded string. As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first. </p>System.Text.UnicodeEncoding.GetPreamble#1<p>You can also compare the files by using the <strong>fc</strong> command in a console window, or you can inspect the files in a text editor that includes a Hex View mode. Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed. </p>"
  syntax:
    content: public override byte[] GetPreamble()
    content.vb: Public Overrides Function GetPreamble As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A byte array containing the Unicode byte order mark, if the <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UnicodeEncoding
  langs:
  - csharp
  - vb
  name: GetString(Byte[], Int32, Int32)
  fullName: System.Text.UnicodeEncoding.GetString(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetString
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 56
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a range of bytes from a byte array into a string.</p>\n"
  remarks: "\n<p>With error detection, an invalid sequence causes this method to throw a <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n<p>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> object provided by the <xref href=\"System.Text.UnicodeEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.UnicodeEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n"
  example:
  - "\n<p>The following example initializes an array by calling the <xref href=\"System.Text.UnicodeEncoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM). The example then calls the <xref href=\"System.Text.UnicodeEncoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method to store the BOM to the array before calling the <xref href=\"System.Text.Encoding.GetBytes(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to store the encoded bytes to the array. The example then calls the <xref href=\"System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to decode the string. </p>System.Text.UTF8Encoding.GetString#1<p>Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD. This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character \"?\". To remove the BOM at the beginning of the string, you can call the <xref href=\"System.String.TrimStart(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>"
  syntax:
    content: public override string GetString(byte[] bytes, int index, int count)
    content.vb: Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object containing the results of decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.UnicodeEncoding.GetDecoder
    commentId: M:System.Text.UnicodeEncoding.GetDecoder
  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.UnicodeEncoding.GetString(System.Byte(), System.Int32, System.Int32)
  name.vb: GetString(Byte(), Int32, Int32)
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  fullName: System.Text.Encoder
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.Text.DecoderFallbackException
  isExternal: false
  name: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
