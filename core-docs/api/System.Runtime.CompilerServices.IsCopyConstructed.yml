items:
- uid: System.Runtime.CompilerServices.IsCopyConstructed
  commentId: T:System.Runtime.CompilerServices.IsCopyConstructed
  id: IsCopyConstructed
  parent: System.Runtime.CompilerServices
  children: []
  langs:
  - csharp
  - vb
  name: IsCopyConstructed
  fullName: System.Runtime.CompilerServices.IsCopyConstructed
  type: Class
  source:
    remote:
      path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsCopyConstructed
    path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
    startLine: 37
  assemblies:
  - System.Runtime.CompilerServices.VisualC
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Indicates that any copying of values of this type must use the copy constructor provided by the type.  This class cannot be inherited.</p>\n"
  remarks: "\n<p>Any type modified by the <xref href=\"System.Runtime.CompilerServices.IsCopyConstructed\" data-throw-if-not-resolved=\"false\"></xref> class must implement a method named <strong>MarshalCopy</strong> that calls the native copy constructor.  </p>\n<p>Any native C++ type that is emitted into metadata with copy constructors needs to have those methods called by the marshaler when copying values across the marshaling boundary.  The Microsoft C++ compiler modifies all native C++ types in method parameters and return types that have this modifier to trigger this behavior in the marshaling code.</p>\n<p>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  </p>\n<p>You can emit custom modifiers into metadata using one of the following techniques:</p>\n<ul><li>\n<p>Using methods in the <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> class such as <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineField\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineConstructor\"></see>, and <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineProperty\"></see>.</p>\n</li><li>\n<p>Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <strong>modopt</strong> and <strong>modreq</strong>, and assembling the file with the Ilasm.exe (IL Assembler).</p>\n</li><li>\n<p>Using the unmanaged reflection API.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: 'public class IsCopyConstructed : object'
    content.vb: >-
      Public Class IsCopyConstructed
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
