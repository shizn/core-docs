items:
- uid: System.IO.DriveInfo
  commentId: T:System.IO.DriveInfo
  id: DriveInfo
  parent: System.IO
  children:
  - System.IO.DriveInfo.#ctor(System.String)
  - System.IO.DriveInfo.AvailableFreeSpace
  - System.IO.DriveInfo.DriveFormat
  - System.IO.DriveInfo.DriveType
  - System.IO.DriveInfo.GetDrives
  - System.IO.DriveInfo.IsReady
  - System.IO.DriveInfo.Name
  - System.IO.DriveInfo.RootDirectory
  - System.IO.DriveInfo.ToString
  - System.IO.DriveInfo.TotalFreeSpace
  - System.IO.DriveInfo.TotalSize
  - System.IO.DriveInfo.VolumeLabel
  langs:
  - csharp
  - vb
  name: DriveInfo
  fullName: System.IO.DriveInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DriveInfo
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 42
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Provides access to information on a drive.</p>\n"
  remarks: "\n<p>This class models a drive and provides methods and properties to query for drive information. Use <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> to determine what drives are available, and what type of drives they are. You can also query to determine the capacity and available free space on the drive.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class DriveInfo : ISerializable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class DriveInfo
          Implements ISerializable
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.DriveInfo.#ctor(System.String)
  commentId: M:System.IO.DriveInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: DriveInfo(String)
  fullName: System.IO.DriveInfo.DriveInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 50
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Provides access to information on the specified drive.</p>\n"
  remarks: "\n<p>Use this class to obtain information on drives. The drive name must be either an uppercase or lowercase letter from 'a' to 'z'. You cannot use this method to obtain information on drive names that are <strong>null</strong> or use UNC (\\\\server\\share) paths.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public DriveInfo(string driveName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(driveName As String)
    parameters:
    - id: driveName
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The drive letter cannot be <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The first letter of <em>driveName</em> is not an uppercase or lowercase letter from 'a' to 'z'.</p>\n<p>-or-</p>\n<p>\n<em>driveName</em> does not refer to a valid drive.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.DriveInfo.AvailableFreeSpace
  commentId: P:System.IO.DriveInfo.AvailableFreeSpace
  id: AvailableFreeSpace
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: AvailableFreeSpace
  fullName: System.IO.DriveInfo.AvailableFreeSpace
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AvailableFreeSpace
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 139
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Indicates the amount of available free space on a drive, in bytes.</p>\n"
  remarks: "\n<p>This property indicates the amount of free space available on the drive. Note that this number may be different from the <xref href=\"System.IO.DriveInfo.TotalFreeSpace\" data-throw-if-not-resolved=\"false\"></xref> number because this property takes into account disk quotas.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      public long AvailableFreeSpace

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property AvailableFreeSpace As Long
    parameters: []
    return:
      type: System.Int64
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.DriveFormat
  commentId: P:System.IO.DriveInfo.DriveFormat
  id: DriveFormat
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: DriveFormat
  fullName: System.IO.DriveInfo.DriveFormat
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DriveFormat
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 108
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the name of the file system, such as NTFS or FAT32.</p>\n"
  remarks: "\n<p>Use <xref href=\"System.IO.DriveInfo.DriveFormat\" data-throw-if-not-resolved=\"false\"></xref> to determine what formatting a drive uses.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      public string DriveFormat

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property DriveFormat As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive does not exist or is not mapped.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.DriveType
  commentId: P:System.IO.DriveInfo.DriveType
  id: DriveType
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: DriveType
  fullName: System.IO.DriveInfo.DriveType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DriveType
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 100
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the drive type, such as CD-ROM, removable, network, or fixed.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.DriveInfo.DriveType\" data-throw-if-not-resolved=\"false\"></xref> property indicates whether a drive is one of the following: <strong>CDRom</strong>, <strong>Fixed</strong>, <strong>Network</strong>, <strong>NoRootDirectory</strong>, <strong>Ram</strong>, <strong>Removable</strong>, or <strong>Unknown</strong>. These values are described in the <xref href=\"System.IO.DriveType\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      public DriveType DriveType

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property DriveType As DriveType
    parameters: []
    return:
      type: System.IO.DriveType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.IsReady
  commentId: P:System.IO.DriveInfo.IsReady
  id: IsReady
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: IsReady
  fullName: System.IO.DriveInfo.IsReady
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReady
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 132
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets a value that indicates whether a drive is ready.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.DriveInfo.IsReady\" data-throw-if-not-resolved=\"false\"></xref> indicates whether a drive is ready. For example, it indicates whether a CD is in a CD drive or whether a removable storage device is ready for read/write operations. If you do not test whether a drive is ready, and it is not ready,  querying the drive using <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> will raise an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Do not rely on <xref href=\"System.IO.DriveInfo.IsReady\" data-throw-if-not-resolved=\"false\"></xref> to avoid catching exceptions from other members such as <xref href=\"System.IO.DriveInfo.TotalSize\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.DriveInfo.TotalFreeSpace\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.DriveInfo.DriveFormat\" data-throw-if-not-resolved=\"false\"></xref>. Between the time that your code checks <xref href=\"System.IO.DriveInfo.IsReady\" data-throw-if-not-resolved=\"false\"></xref> and then accesses one of the other properties (even if the access occurs immediately after the check), a drive may have been disconnected or a disk may have been removed.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      public bool IsReady

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property IsReady As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.Name
  commentId: P:System.IO.DriveInfo.Name
  id: Name
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.DriveInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 96
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the name of a drive, such as C:\\.</p>\n"
  remarks: "\n<p>This property is the name assigned to the drive, such as C:\\ or E:\\.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.RootDirectory
  commentId: P:System.IO.DriveInfo.RootDirectory
  id: RootDirectory
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: RootDirectory
  fullName: System.IO.DriveInfo.RootDirectory
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RootDirectory
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 202
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the root directory of a drive.</p>\n"
  syntax:
    content: public DirectoryInfo RootDirectory { get; }
    content.vb: Public ReadOnly Property RootDirectory As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.TotalFreeSpace
  commentId: P:System.IO.DriveInfo.TotalFreeSpace
  id: TotalFreeSpace
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: TotalFreeSpace
  fullName: System.IO.DriveInfo.TotalFreeSpace
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TotalFreeSpace
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 156
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the total amount of free space available on a drive, in bytes.</p>\n"
  remarks: "\n<p>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      public long TotalFreeSpace

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property TotalFreeSpace As Long
    parameters: []
    return:
      type: System.Int64
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive is not mapped or does not exist.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.TotalSize
  commentId: P:System.IO.DriveInfo.TotalSize
  id: TotalSize
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: TotalSize
  fullName: System.IO.DriveInfo.TotalSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TotalSize
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 173
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the total size of storage space on a drive, in bytes.</p>\n"
  remarks: "\n<p>This property indicates the total size of the drive in bytes, not just what is available to the current user.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      public long TotalSize

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property TotalSize As Long
    parameters: []
    return:
      type: System.Int64
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive is not mapped or does not exist. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.DriveInfo.VolumeLabel
  commentId: P:System.IO.DriveInfo.VolumeLabel
  id: VolumeLabel
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: VolumeLabel
  fullName: System.IO.DriveInfo.VolumeLabel
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: VolumeLabel
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 209
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets or sets the volume label of a drive.</p>\n"
  remarks: "\n<p>The label length is determined by the operating system. For example, NTFS allows a volume label to be up to 32 characters long. Note that <strong>null</strong> is a valid <xref href=\"System.IO.DriveInfo.VolumeLabel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: >-
      public string VolumeLabel

      {
          [SecuritySafeCritical]
          get;
          [SecuritySafeCritical]
          set;
      }
    content.vb: Public Property VolumeLabel As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive is not mapped or does not exist.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The volume label is being set on a network or CD-ROM drive.</p>\n<p>-or-</p>\n<p>Access to the drive information is denied.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.DriveInfo.GetDrives
  commentId: M:System.IO.DriveInfo.GetDrives
  id: GetDrives
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: GetDrives()
  fullName: System.IO.DriveInfo.GetDrives()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDrives
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 192
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Retrieves the drive names of all logical drives on a computer.</p>\n"
  remarks: "\n<p>This method retrieves all logical drive names on a computer. You can use this information to iterate through the array and obtain information on the drives using other <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> methods and properties. Use the <xref href=\"System.IO.DriveInfo.IsReady\" data-throw-if-not-resolved=\"false\"></xref> property to test whether a drive is ready because using this method on a drive that is not ready will throw a <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> class to display information about all of the drives on the current system.</p>System.IO.DriveInfo#00"
  syntax:
    content: public static DriveInfo[] GetDrives()
    content.vb: Public Shared Function GetDrives As DriveInfo()
    return:
      type: System.IO.DriveInfo[]
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.DriveInfo.ToString
  commentId: M:System.IO.DriveInfo.ToString
  id: ToString
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.IO.DriveInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 259
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Returns a drive name as a string.</p>\n"
  remarks: "\n<p>This method returns the <xref href=\"System.IO.DriveInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IO.DriveType
  parent: System.IO
  isExternal: false
  name: DriveType
  fullName: System.IO.DriveType
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.DriveInfo[]
  isExternal: false
  name: DriveInfo[]
  fullName: System.IO.DriveInfo[]
  fullname.vb: System.IO.DriveInfo()
  name.vb: DriveInfo()
  spec.csharp:
  - uid: System.IO.DriveInfo
    name: DriveInfo
    fullName: System.IO.DriveInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.DriveInfo
    name: DriveInfo
    fullName: System.IO.DriveInfo
  - name: ()
    fullName: ()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.IO.DriveNotFoundException
  isExternal: false
  name: DriveNotFoundException
  fullName: System.IO.DriveNotFoundException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
