items:
- uid: System.Reflection.AssemblyFlagsAttribute
  commentId: T:System.Reflection.AssemblyFlagsAttribute
  id: AssemblyFlagsAttribute
  parent: System.Reflection
  children:
  - System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)
  - System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  langs:
  - csharp
  - vb
  name: AssemblyFlagsAttribute
  fullName: System.Reflection.AssemblyFlagsAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyFlagsAttribute
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2716
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Specifies a bitwise combination of <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> enumeration describes the assembly characteristics that can be set using this attribute.</p>\n<p>To access the flags that have been specified for an assembly, use the <see cref=\"Overload:System.Reflection.Assembly.GetName\"></see> property to obtain an <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object, then use the <xref href=\"System.Reflection.AssemblyName.Flags\" data-throw-if-not-resolved=\"false\"></xref> property to obtain an <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>To specify <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> flags for a dynamic assembly, set the <xref href=\"System.Reflection.AssemblyName.Flags\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> object that you pass to the <see cref=\"Overload:System.AppDomain.DefineDynamicAssembly\"></see> method.</p>\n"
  example:
  - "\n<p>The following code example shows how to apply the <xref href=\"System.Reflection.AssemblyFlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> to an assembly, and how to read the flags at run time. The example also creates an instance of the attribute, and uses the <xref href=\"System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\" data-throw-if-not-resolved=\"false\"></xref> property to display the flags. For an example of how to apply the <xref href=\"System.Reflection.AssemblyFlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a dynamic assembly, see the <xref href=\"System.Reflection.AssemblyName.Flags\" data-throw-if-not-resolved=\"false\"></xref> property.</p>AssemblyFlagsAttribute#1"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]

      public sealed class AssemblyFlagsAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False)>

      Public NotInheritable Class AssemblyFlagsAttribute
          Inherits Attribute
  seealso:
  - type: System.Reflection.AssemblyNameFlags
    commentId: T:System.Reflection.AssemblyNameFlags
  - type: System.Reflection.AssemblyName.Flags
    commentId: P:System.Reflection.AssemblyName.Flags
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 1
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)
  commentId: M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)
  id: '#ctor(System.Reflection.AssemblyNameFlags)'
  parent: System.Reflection.AssemblyFlagsAttribute
  langs:
  - csharp
  - vb
  name: AssemblyFlagsAttribute(AssemblyNameFlags)
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(System.Reflection.AssemblyNameFlags)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2719
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.AssemblyFlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the specified combination of <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> flags.</p>\n"
  example:
  - "\n<p>The following code example shows how to apply the <xref href=\"System.Reflection.AssemblyFlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> to an assembly, and how to read the flags at run time. The example also creates an instance of the attribute, and uses the <xref href=\"System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\" data-throw-if-not-resolved=\"false\"></xref> property to display the flags. For an example of how to apply the <xref href=\"System.Reflection.AssemblyFlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a dynamic assembly, see the <xref href=\"System.Reflection.AssemblyName.Flags\" data-throw-if-not-resolved=\"false\"></xref> property.</p>AssemblyFlagsAttribute#1"
  syntax:
    content: public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags)
    content.vb: Public Sub New(assemblyFlags As AssemblyNameFlags)
    parameters:
    - id: assemblyFlags
      type: System.Reflection.AssemblyNameFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</p>\n"
  seealso:
  - type: System.Reflection.AssemblyNameFlags
    commentId: T:System.Reflection.AssemblyNameFlags
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  commentId: P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  id: AssemblyFlags
  parent: System.Reflection.AssemblyFlagsAttribute
  langs:
  - csharp
  - vb
  name: AssemblyFlags
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyFlags
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2720
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Gets an integer value representing the combination of <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> flags specified when this attribute instance was created.</p>\n"
  remarks: "\n<p>This property returns an integer for backward compatibility. Cast the value to the <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> type before using it.</p>\n"
  example:
  - "\n<p>The following code example shows how to apply the <xref href=\"System.Reflection.AssemblyFlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> to an assembly, and how to read the flags at run time. The example also creates an instance of the attribute, and uses the <xref href=\"System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\" data-throw-if-not-resolved=\"false\"></xref> property to display the flags. For an example of how to apply the <xref href=\"System.Reflection.AssemblyFlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a dynamic assembly, see the <xref href=\"System.Reflection.AssemblyName.Flags\" data-throw-if-not-resolved=\"false\"></xref> property.</p>AssemblyFlagsAttribute#1"
  syntax:
    content: public int AssemblyFlags { get; }
    content.vb: Public ReadOnly Property AssemblyFlags As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An integer value representing a bitwise combination of <xref href=\"System.Reflection.AssemblyNameFlags\" data-throw-if-not-resolved=\"false\"></xref> flags.</p>\n"
  seealso:
  - type: System.Reflection.AssemblyNameFlags
    commentId: T:System.Reflection.AssemblyNameFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: false
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.AssemblyNameFlags
  parent: System.Reflection
  isExternal: false
  name: AssemblyNameFlags
  fullName: System.Reflection.AssemblyNameFlags
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
