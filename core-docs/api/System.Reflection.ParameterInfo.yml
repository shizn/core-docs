items:
- uid: System.Reflection.ParameterInfo
  commentId: T:System.Reflection.ParameterInfo
  id: ParameterInfo
  parent: System.Reflection
  children:
  - System.Reflection.ParameterInfo.Attributes
  - System.Reflection.ParameterInfo.CustomAttributes
  - System.Reflection.ParameterInfo.DefaultValue
  - System.Reflection.ParameterInfo.HasDefaultValue
  - System.Reflection.ParameterInfo.IsIn
  - System.Reflection.ParameterInfo.IsOptional
  - System.Reflection.ParameterInfo.IsOut
  - System.Reflection.ParameterInfo.IsRetval
  - System.Reflection.ParameterInfo.Member
  - System.Reflection.ParameterInfo.Name
  - System.Reflection.ParameterInfo.ParameterType
  - System.Reflection.ParameterInfo.Position
  langs:
  - csharp
  - vb
  name: ParameterInfo
  fullName: System.Reflection.ParameterInfo
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParameterInfo
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 212
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of a parameter and provides access to parameter metadata.</p>\n"
  remarks: "\n<p>Use an instance of <strong>ParameterInfo</strong> to obtain information about the parameter's data type, default value, and so on.</p>\n<p>\n<xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref> returns an array of <strong>ParameterInfo</strong> objects representing the parameters of a method, in order.</p>\n"
  example:
  - "\n<p>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</p>Reflection#1"
  syntax:
    content: 'public class ParameterInfo : object'
    content.vb: >-
      Public Class ParameterInfo
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.ParameterInfo.Attributes
  commentId: P:System.Reflection.ParameterInfo.Attributes
  id: Attributes
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.ParameterInfo.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 215
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the attributes for this parameter.</p>\n"
  remarks: "\n<p>This method utilizes the <xref href=\"System.Reflection.ParameterInfo.AttrsImpl\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a method with three parameters. It uses the <xref href=\"System.Reflection.ParameterInfo.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property to get the attributes of the second parameter and display them at the console.</p>ParameterInfo_Attributes1#1"
  syntax:
    content: public virtual ParameterAttributes Attributes { get; }
    content.vb: Public Overridable ReadOnly Property Attributes As ParameterAttributes
    parameters: []
    return:
      type: System.Reflection.ParameterAttributes
      description: "\n<p>A <strong>ParameterAttributes</strong> object representing the attributes for this parameter.</p>\n"
  seealso:
  - type: System.Reflection.ParameterAttributes
    commentId: T:System.Reflection.ParameterAttributes
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.ParameterInfo.CustomAttributes
  commentId: P:System.Reflection.ParameterInfo.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: CustomAttributes
  fullName: System.Reflection.ParameterInfo.CustomAttributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAttributes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 216
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection that contains this parameter's custom attributes.</p>\n"
  syntax:
    content: public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As Collections.Generic.IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: "\n<p>A collection that contains this parameter's custom attributes.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.ParameterInfo.DefaultValue
  commentId: P:System.Reflection.ParameterInfo.DefaultValue
  id: DefaultValue
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: DefaultValue
  fullName: System.Reflection.ParameterInfo.DefaultValue
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultValue
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 217
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating the default value if the parameter has a default value.</p>\n"
  remarks: "\n<p>This property is used only in the execution context. In the reflection-only context, use the <xref href=\"System.Reflection.ParameterInfo.RawDefaultValue\" data-throw-if-not-resolved=\"false\"></xref> property instead.</p>\n<p>The default value is used when an actual value is not specified in the method call. A parameter can have a default value that is <strong>null</strong>. This is distinct from the case where a default value is not defined.</p>\n<p>This method utilizes the <xref href=\"System.Reflection.ParameterInfo.DefaultValueImpl\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object DefaultValue { get; }
    content.vb: Public Overridable ReadOnly Property DefaultValue As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The default value of the parameter, or <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref> if the parameter has no default value.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.ParameterInfo.HasDefaultValue
  commentId: P:System.Reflection.ParameterInfo.HasDefaultValue
  id: HasDefaultValue
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: HasDefaultValue
  fullName: System.Reflection.ParameterInfo.HasDefaultValue
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasDefaultValue
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 218
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value that indicates whether this parameter has a default value.</p>\n"
  syntax:
    content: public virtual bool HasDefaultValue { get; }
    content.vb: Public Overridable ReadOnly Property HasDefaultValue As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this parameter has a default value; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.ParameterInfo.IsIn
  commentId: P:System.Reflection.ParameterInfo.IsIn
  id: IsIn
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: IsIn
  fullName: System.Reflection.ParameterInfo.IsIn
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIn
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 219
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this is an input parameter.</p>\n"
  remarks: "\n<p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.</p>\n<p>This method utilizes the <strong>In</strong> flag of the <strong>ParameterAttributes</strong> enumerator.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to test method parameters for the <xref href=\"System.Reflection.ParameterAttributes.In\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.ParameterAttributes.Out\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.ParameterAttributes.Optional\" data-throw-if-not-resolved=\"false\"></xref> attributes.</p>\n<p>The example contains a <code>DefineMethod</code> method that does the following:</p>\n<ul><li>\n<p>Creates a dynamic assembly containing a <code>MyType</code> type.</p>\n</li><li>\n<p>Adds a <code>MyMethod</code> method to <code>MyType</code>. <code>MyMethod</code> has three parameters. The first parameter is defined with <xref href=\"System.Reflection.ParameterAttributes.In\" data-throw-if-not-resolved=\"false\"></xref>, the second with <xref href=\"System.Reflection.ParameterAttributes.Out\" data-throw-if-not-resolved=\"false\"></xref>, and the third with <xref href=\"System.Reflection.ParameterAttributes.Optional\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>Calls <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> to complete the type.</p>\n</li></ul>\n<p>After executing <code>DefineMethod</code>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads <code>MyType</code> from the assembly, gets a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the <code>MyMethod</code> method, and examines the parameters. The example uses the <xref href=\"System.Reflection.ParameterInfo.IsIn\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.ParameterInfo.IsOut\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.ParameterInfo.IsOptional\" data-throw-if-not-resolved=\"false\"></xref> properties to display information about the parameters.</p>ParameterInfo_IsIn_IsOut_IsOptional#1"
  syntax:
    content: public bool IsIn { get; }
    content.vb: Public ReadOnly Property IsIn As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the parameter is an input parameter; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.ParameterInfo.IsOptional
  commentId: P:System.Reflection.ParameterInfo.IsOptional
  id: IsOptional
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: IsOptional
  fullName: System.Reflection.ParameterInfo.IsOptional
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsOptional
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 220
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this parameter is optional.</p>\n"
  remarks: "\n<p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.</p>\n<p>This method utilizes the <strong>Optional</strong> flag of the <strong>ParameterAttributes</strong> enumerator.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to test method parameters for the <xref href=\"System.Reflection.ParameterAttributes.In\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.ParameterAttributes.Out\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.ParameterAttributes.Optional\" data-throw-if-not-resolved=\"false\"></xref> attributes.</p>\n<p>The example contains a <code>DefineMethod</code> method that does the following:</p>\n<ul><li>\n<p>Creates a dynamic assembly containing a <code>MyType</code> type.</p>\n</li><li>\n<p>Adds a <code>MyMethod</code> method to <code>MyType</code>. <code>MyMethod</code> has three parameters. The first parameter is defined with <xref href=\"System.Reflection.ParameterAttributes.In\" data-throw-if-not-resolved=\"false\"></xref>, the second with <xref href=\"System.Reflection.ParameterAttributes.Out\" data-throw-if-not-resolved=\"false\"></xref>, and the third with <xref href=\"System.Reflection.ParameterAttributes.Optional\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>Calls <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> to complete the type.</p>\n</li></ul>\n<p>After executing <code>DefineMethod</code>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads <code>MyType</code> from the assembly, gets a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the <code>MyMethod</code> method, and examines the parameters. The example uses the <xref href=\"System.Reflection.ParameterInfo.IsIn\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.ParameterInfo.IsOut\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.ParameterInfo.IsOptional\" data-throw-if-not-resolved=\"false\"></xref> properties to display information about the parameters.</p>ParameterInfo_IsIn_IsOut_IsOptional#1"
  syntax:
    content: public bool IsOptional { get; }
    content.vb: Public ReadOnly Property IsOptional As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the parameter is optional; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.ParameterInfo.IsOut
  commentId: P:System.Reflection.ParameterInfo.IsOut
  id: IsOut
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: IsOut
  fullName: System.Reflection.ParameterInfo.IsOut
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsOut
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 221
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this is an output parameter.</p>\n"
  remarks: "\n<p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.</p>\n<p>This method utilizes the <strong>Out</strong> flag of the <strong>ParameterAttributes</strong> enumerator.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to test method parameters for the <xref href=\"System.Reflection.ParameterAttributes.In\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.ParameterAttributes.Out\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.ParameterAttributes.Optional\" data-throw-if-not-resolved=\"false\"></xref> attributes.</p>\n<p>The example contains a <code>DefineMethod</code> method that does the following:</p>\n<ul><li>\n<p>Creates a dynamic assembly containing a <code>MyType</code> type.</p>\n</li><li>\n<p>Adds a <code>MyMethod</code> method to <code>MyType</code>. <code>MyMethod</code> has three parameters. The first parameter is defined with <xref href=\"System.Reflection.ParameterAttributes.In\" data-throw-if-not-resolved=\"false\"></xref>, the second with <xref href=\"System.Reflection.ParameterAttributes.Out\" data-throw-if-not-resolved=\"false\"></xref>, and the third with <xref href=\"System.Reflection.ParameterAttributes.Optional\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>Calls <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> to complete the type.</p>\n</li></ul>\n<p>After executing <code>DefineMethod</code>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads <code>MyType</code> from the assembly, gets a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the <code>MyMethod</code> method, and examines the parameters. The example uses the <xref href=\"System.Reflection.ParameterInfo.IsIn\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.ParameterInfo.IsOut\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.ParameterInfo.IsOptional\" data-throw-if-not-resolved=\"false\"></xref> properties to display information about the parameters.</p>Classic ParameterInfo.IsOut Example#1"
  syntax:
    content: public bool IsOut { get; }
    content.vb: Public ReadOnly Property IsOut As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the parameter is an output parameter; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.ParameterInfo.IsRetval
  commentId: P:System.Reflection.ParameterInfo.IsRetval
  id: IsRetval
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: IsRetval
  fullName: System.Reflection.ParameterInfo.IsRetval
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsRetval
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 222
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this is a <strong>Retval</strong> parameter.</p>\n"
  remarks: "\n<p>This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.</p>\n<p>This method utilizes the <strong>Retval</strong> flag of the <strong>ParameterAttributes</strong> enumerator.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool IsRetval { get; }
    content.vb: Public ReadOnly Property IsRetval As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the parameter is a <strong>Retval</strong>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.ParameterInfo.Member
  commentId: P:System.Reflection.ParameterInfo.Member
  id: Member
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: Member
  fullName: System.Reflection.ParameterInfo.Member
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Member
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 223
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating the member in which the parameter is implemented.</p>\n"
  syntax:
    content: public virtual MemberInfo Member { get; }
    content.vb: Public Overridable ReadOnly Property Member As MemberInfo
    parameters: []
    return:
      type: System.Reflection.MemberInfo
      description: "\n<p>The member which implanted the parameter represented by this <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.ParameterInfo.Name
  commentId: P:System.Reflection.ParameterInfo.Name
  id: Name
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.ParameterInfo.Name
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 224
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the name of the parameter.</p>\n"
  remarks: "\n<p>This property utilizes the protected <xref href=\"System.Reflection.ParameterInfo.NameImpl\" data-throw-if-not-resolved=\"false\"></xref> field, and depends on an optional metadata flag that might not be available in all compilers.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call the <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If this <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> represents a return value (that is, if it was obtained by using the <xref href=\"System.Reflection.MethodInfo.ReturnParameter\" data-throw-if-not-resolved=\"false\"></xref> property), this property will be <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following example shows how to get <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> objects for the parameters of a method, and then use the <xref href=\"System.Reflection.ParameterInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the parameter names.</p>Classic ParameterInfo.Name Example#1"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The simple name of this parameter.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.ParameterInfo.ParameterType
  commentId: P:System.Reflection.ParameterInfo.ParameterType
  id: ParameterType
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: ParameterType
  fullName: System.Reflection.ParameterInfo.ParameterType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParameterType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 225
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <strong>Type</strong> of this parameter.</p>\n"
  remarks: "\n<p>This method depends on an optional metadata and might not be available in all compilers.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to get <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> objects for the parameters of a method, and then use the <xref href=\"System.Reflection.ParameterInfo.ParameterType\" data-throw-if-not-resolved=\"false\"></xref> property to display the type of each parameter.</p>Classic ParameterInfo.ParameterType Example#1"
  syntax:
    content: public virtual Type ParameterType { get; }
    content.vb: Public Overridable ReadOnly Property ParameterType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <strong>Type</strong> object that represents the <strong>Type</strong> of this parameter.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.ParameterInfo.Position
  commentId: P:System.Reflection.ParameterInfo.Position
  id: Position
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.Reflection.ParameterInfo.Position
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 226
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the zero-based position of the parameter in the formal parameter list.</p>\n"
  remarks: "\n<p>Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position. For instance methods, the hidden parameter that represents <strong>this</strong> (<strong>Me</strong> in Visual Basic) is not counted. </p>\n<p>This method utilizes the <xref href=\"System.Reflection.ParameterInfo.PositionImpl\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To get the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> array, first get the method or the constructor and then call <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual int Position { get; }
    content.vb: Public Overridable ReadOnly Property Position As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An integer representing the position this parameter occupies in the parameter list.</p>\n"
  seealso:
  - type: System.Reflection.ParameterInfo.Name
    commentId: P:System.Reflection.ParameterInfo.Name
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: Collections.Generic.IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
