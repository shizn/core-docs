items:
- uid: System.AppContext
  commentId: T:System.AppContext
  id: AppContext
  parent: System
  children:
  - System.AppContext.BaseDirectory
  - System.AppContext.GetData(System.String)
  - System.AppContext.SetSwitch(System.String,System.Boolean)
  - System.AppContext.TargetFrameworkName
  - System.AppContext.TryGetSwitch(System.String,System.Boolean@)
  langs:
  - csharp
  - vb
  name: AppContext
  fullName: System.AppContext
  type: Class
  source:
    remote:
      path: src/System.AppContext/ref/System.AppContext.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppContext
    path: src/System.AppContext/ref/System.AppContext.cs
    startLine: 10
  assemblies:
  - System.AppContext
  namespace: System
  summary: "\n<p>Provides members for setting and retrieving data about an application's context. </p>\n"
  remarks: "\n<p>The <xref href=\"System.AppContext\" data-throw-if-not-resolved=\"false\"></xref> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users. It establishes a loosely-coupled contract between components in order to communicate an opt-out request. This capability is typically important when a change is made to existing functionality. Conversely, there is already an implicit opt-in for new functionality. </p>\n<p>With <xref href=\"System.AppContext\" data-throw-if-not-resolved=\"false\"></xref>, libraries define and expose compatibility switches, while code that depends on them can set those switches to affect the library behavior. By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set. </p>\n<p>An application (or a library) can declare the value of a switch (which is always a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value) that a dependent library defines. The switch is always implicitly <strong>false</strong>, which provides the new behavior. Setting the switch to <strong>true</strong> enables it, which provides the legacy behavior. Explicitly setting the switch to <strong>false</strong> also provides the new behavior. </p>\n<p>For example, the following line of code sets a switch named <strong>Switch.AmazingLib.ThrowOnException</strong> to <strong>true</strong>, which enables a legacy behavior. </p>System.AppContext.Class#1<p>The library must then check if a consumer has declared the value of the switch and then act appropriately on it, as the following example illustrates. </p>System.AppContext.Class#2<p>It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library. The following are two obvious formats.</p><ul><li><p>Switch.namespace.switchname</p></li><li><p>Switch.library.switchname</p></li></ul>"
  syntax:
    content: 'public class AppContext : object'
    content.vb: >-
      Public Class AppContext
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.AppContext.BaseDirectory
  commentId: P:System.AppContext.BaseDirectory
  id: BaseDirectory
  parent: System.AppContext
  langs:
  - csharp
  - vb
  name: BaseDirectory
  fullName: System.AppContext.BaseDirectory
  type: Property
  source:
    remote:
      path: src/System.AppContext/ref/System.AppContext.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseDirectory
    path: src/System.AppContext/ref/System.AppContext.cs
    startLine: 12
  assemblies:
  - System.AppContext
  namespace: System
  summary: "\n<p>Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies. </p>\n"
  remarks: "\n<p>This is a per application domain property. Its value corresponds to the <xref href=\"System.AppDomain.BaseDirectory\" data-throw-if-not-resolved=\"false\"></xref> property of the current application domain. </p>\n"
  syntax:
    content: public static string BaseDirectory { get; }
    content.vb: Public Shared ReadOnly Property BaseDirectory As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>the pathname of the base directory that the assembly resolver uses to probe for assemblies. </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.AppContext.SetSwitch(System.String,System.Boolean)
  commentId: M:System.AppContext.SetSwitch(System.String,System.Boolean)
  id: SetSwitch(System.String,System.Boolean)
  parent: System.AppContext
  langs:
  - csharp
  - vb
  name: SetSwitch(String, Boolean)
  fullName: System.AppContext.SetSwitch(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.AppContext/ref/System.AppContext.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSwitch
    path: src/System.AppContext/ref/System.AppContext.cs
    startLine: 13
  assemblies:
  - System.AppContext
  namespace: System
  summary: "\n<p>Sets the value of a switch. </p>\n"
  remarks: "\n<p>The <xref href=\"System.AppContext\" data-throw-if-not-resolved=\"false\"></xref> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users. It establishes a loosely-coupled contract between components in order to communicate an opt-out request. This capability is typically important when a change is made to existing functionality. Conversely, there is already an implicit opt-in for new functionality.  </p>\n<p>The <xref href=\"System.AppContext.SetSwitch(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method is called by an application (or a library) to declare the value of a switch (which is always a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value) that a dependent library defines. The switch is always implicitly <strong>false</strong>, which provides the new behavior. Setting the switch to <strong>true</strong> enables it, which provides the legacy behavior. Explicitly setting the switch to <strong>false</strong> also provides the new behavior. The dependent library can then check the value of the switch by calling the <xref href=\"System.AppContext.TryGetSwitch(System.String,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>It's beneficial to use a consistent format for switch names, since they are a formal contract exposed by a library. The following are two obvious formats.</p>\n<ul><li>\n<p>Switch.namespace.switchname</p>\n</li><li>\n<p>Switch.library.switchname</p>\n</li></ul>\n<p>If <em>switchName</em> already exists, its value is overwritten by the <em>isEnabled</em> argument. </p>\n"
  example:
  - "\n<p>The following line of code sets a switch named <strong>Switch.AmazingLib.ThrowOnException</strong> to <strong>true</strong>, which enables a legacy behavior. The library can then check whether a library consumer has set the value of the switch by calling the <xref href=\"System.AppContext.TryGetSwitch(System.String,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.AppContext.Class#1"
  syntax:
    content: public static void SetSwitch(string switchName, bool isEnabled)
    content.vb: Public Shared Sub SetSwitch(switchName As String, isEnabled As Boolean)
    parameters:
    - id: switchName
      type: System.String
      description: "\n<p>The name of the switch. </p>\n"
    - id: isEnabled
      type: System.Boolean
      description: "\n<p>The value of the switch. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>switchName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>switchName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.AppContext.TryGetSwitch(System.String,System.Boolean@)
    commentId: M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.AppContext.TryGetSwitch(System.String,System.Boolean@)
  commentId: M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)
  id: TryGetSwitch(System.String,System.Boolean@)
  parent: System.AppContext
  langs:
  - csharp
  - vb
  name: TryGetSwitch(String, out Boolean)
  fullName: System.AppContext.TryGetSwitch(System.String, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.AppContext/ref/System.AppContext.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetSwitch
    path: src/System.AppContext/ref/System.AppContext.cs
    startLine: 14
  assemblies:
  - System.AppContext
  namespace: System
  summary: "\n<p>Tries to get the value of a switch. </p>\n"
  remarks: "\n<p>The <xref href=\"System.AppContext\" data-throw-if-not-resolved=\"false\"></xref> class enables library writers to provide a uniform opt-out mechanism for new functionality for their users. It establishes a loosely-coupled contract between components in order to communicate an opt-out request. This capability is typically important when a change is made to existing functionality. Conversely, there is already an implicit opt-in for new functionality.  </p>\n<p>A library calls the <xref href=\"System.AppContext.TryGetSwitch(System.String,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method to check whether its consumers have declared the value of the switch and then act appropriately on it.  By default, if the switch is not defined, the new functionality is enabled.. If the switch is defined and its value is <strong>false</strong>, the new functionality is also enabled. If its value is <strong>true</strong>, the legacy behavior is enabled. </p>\n"
  example:
  - "\n<p>The following example determines whether a library consumer has set a switch named <strong>Switch.AmazingLib.ThrowOnException</strong>. </p>System.AppContext.Class#2"
  syntax:
    content: public static bool TryGetSwitch(string switchName, out bool isEnabled)
    content.vb: Public Shared Function TryGetSwitch(switchName As String, ByRef isEnabled As Boolean) As Boolean
    parameters:
    - id: switchName
      type: System.String
      description: "\n<p>The name of the switch. </p>\n"
    - id: isEnabled
      type: System.Boolean
      description: "\n<p>When this method returns, contains the value of <em>switchName</em> if <em>switchName</em> was found, or <strong>false</strong> if <em>switchName</em> was not found. This parameter is passed uninitialized. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>switchName</em> was set and the <em>isEnabled</em> argument contains the value of the switch; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>switchName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>switchName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.AppContext.SetSwitch(System.String,System.Boolean)
    commentId: M:System.AppContext.SetSwitch(System.String,System.Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.AppContext.TryGetSwitch(System.String, ByRef System.Boolean)
  name.vb: TryGetSwitch(String, ByRef Boolean)
- uid: System.AppContext.TargetFrameworkName
  commentId: P:System.AppContext.TargetFrameworkName
  id: TargetFrameworkName
  parent: System.AppContext
  langs:
  - csharp
  - vb
  name: TargetFrameworkName
  fullName: System.AppContext.TargetFrameworkName
  type: Property
  source:
    remote:
      path: src/System.AppContext/ref/System.AppContext.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TargetFrameworkName
    path: src/System.AppContext/ref/System.AppContext.cs
    startLine: 15
  assemblies:
  - System.AppContext
  namespace: System
  syntax:
    content: public static string TargetFrameworkName { get; }
    content.vb: Public Shared ReadOnly Property TargetFrameworkName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.AppContext.GetData(System.String)
  commentId: M:System.AppContext.GetData(System.String)
  id: GetData(System.String)
  parent: System.AppContext
  langs:
  - csharp
  - vb
  name: GetData(String)
  fullName: System.AppContext.GetData(System.String)
  type: Method
  source:
    remote:
      path: src/System.AppContext/ref/System.AppContext.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetData
    path: src/System.AppContext/ref/System.AppContext.cs
    startLine: 16
  assemblies:
  - System.AppContext
  namespace: System
  syntax:
    content: public static object GetData(string name)
    content.vb: Public Shared Function GetData(name As String) As Object
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
