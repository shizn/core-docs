items:
- uid: System.Random
  commentId: T:System.Random
  id: Random
  parent: System
  children:
  - System.Random.#ctor
  - System.Random.#ctor(System.Int32)
  - System.Random.Next
  - System.Random.Next(System.Int32)
  - System.Random.Next(System.Int32,System.Int32)
  - System.Random.NextBytes(System.Byte[])
  - System.Random.NextDouble
  - System.Random.Sample
  langs:
  - csharp
  - vb
  name: Random
  fullName: System.Random
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Random
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 544
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/random.cs#bb77e610694e64ca\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/random.cs#bb77e610694e64ca\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p></p>\n<p>Pseudo-random numbers are chosen with equal probability from a finite set of numbers. The chosen numbers are not completely random because a mathematical algorithm is used to select them, but they are sufficiently random for practical purposes. The current implementation of the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class is based on a modified version of Donald E. Knuth's subtractive random number generator algorithm. For more information, see D. E. Knuth. <em>The Art of Computer Programming, Volume 2: Seminumerical Algorithms</em>. Addison-Wesley, Reading, MA, third edition, 1997. </p>\n<p>To generate a cryptographically secure random number, such as one that's suitable for creating a random password, use the <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class or derive a class from <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In this topic: </p>\n<p>Instantiating the random number generatorAvoiding multiple instantiationsThe System.Random class and thread safetyGenerating different types of random numbersSubstituting your own algorithmHow do you use System.Random toâ€¦\nRetrieve the same sequence of random values\nRetrieve unique sequences of random values\nRetrieve integers in a specified range\nRetrieve integers with a specified number of digits\nRetrieve floating-point values in a specified range\nGenerate random Boolean values\nGenerate random 64-bit integers\nRetrieve bytes in a specified range\nRetrieve an element from an array or collection at random\nRetrieve a unique element from an array or collection</p>\n"
  example:
  - <p>The following example creates a single random number generator and calls its <xref href="System.Random.NextBytes(System.Byte[])" data-throw-if-not-resolved="false"></xref>, <see cref="Overload:System.Random.Next"></see>, and <xref href="System.Random.NextDouble" data-throw-if-not-resolved="false"></xref> methods to generate sequences of random numbers within different ranges.</p>System.Random#2
  - <p>The following example generates a random integer that it uses as an index to retrieve a string value from an array. </p>System.Random.Next#3
  syntax:
    content: 'public class Random : object'
    content.vb: >-
      Public Class Random
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Random.#ctor
  commentId: M:System.Random.#ctor
  id: '#ctor'
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Random()
  fullName: System.Random.Random()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 546
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class, using a time-dependent default seed value.</p>\n"
  remarks: "\n<p>The default seed value is derived from the system clock and has finite resolution. As a result, different <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> objects that are created in close succession by a call to the default constructor will have identical default seed values and, therefore, will produce identical sets of random numbers. This problem can be avoided by using a single <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> object to generate all random numbers. You can also work around it by modifying the seed value returned by the system clock and then explicitly providing this new seed value to the <xref href=\"System.Random.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor. For more information, see the <xref href=\"System.Random.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>Call this constructor if you want your random number generator to generate a random sequence of numbers. To generate a fixed  sequence of random numbers that will be the same for different random number generators, call the <xref href=\"System.Random.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a fixed seed value . This <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> constructor overload is frequently used when testing apps that use random numbers.</p>\n<p>Once you've instantiated the random number generator, you call individual <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> methods, such as <xref href=\"System.Random.Next\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Random.NextDouble\" data-throw-if-not-resolved=\"false\"></xref>, to generate random numbers. </p>\n"
  example:
  - "\n<p>The following example uses the default constructor to instantiate three <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> objects and displays a sequence of five random integers for each. Because the first two <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> objects are created in close succession, they are instantiated using identical seed values based on the system clock and, therefore, they produce an identical sequence of random numbers. On the other hand, the default constructor of the third <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> object is called after a two-second delay caused by calling the <xref href=\"System.Threading.Thread.Sleep(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Because this produces a different seed value for the third <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> object, it produces a different sequence of random numbers. </p>System.Random.Ctor#2"
  syntax:
    content: public Random()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Random.#ctor(System.Int32)
  commentId: M:System.Random.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Random(Int32)
  fullName: System.Random.Random(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 547
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class, using the specified seed value.</p>\n"
  remarks: "\n<p>Providing an identical seed value to different <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> objects causes each instance to produce identical sequences of random numbers. This is often done when testing apps that rely on random number generators. </p>\n<p>If your application requires different random number sequences, invoke this constructor repeatedly with different seed values. One way to produce a unique seed value is to make it time-dependent. For example, derive the seed value from the system clock, as the <xref href=\"System.Random.#ctor\" data-throw-if-not-resolved=\"false\"></xref> overload does. However, the system clock might not have sufficient resolution to provide different invocations of this constructor with a different seed value. This results in random number generators that generate identical sequences of pseudo-random numbers, as illustrated by the first two <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> objects in the following example. To prevent this, apply an algorithm to differentiate the seed value in each invocation, or call the <xref href=\"System.Threading.Thread.Sleep(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that you provide each constructor with a different seed value. </p>System.Random.Ctor#4<p>Another option is to instantiate a single <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> object that you use to generate all the random numbers in your application. This yields slightly better performance, since instantiating a random number generator is fairly expensive. </p>"
  example:
  - "\n<p>The following example creates <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> objects with the class constructor that takes a seed parameter and generates a sequence of random integers and doubles. The example illustrates that the same sequence is generated when the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> object is created again with the constructor and seed parameter.</p>System.Random.Ctor#1"
  syntax:
    content: public Random(int Seed)
    content.vb: Public Sub New(Seed As Integer)
    parameters:
    - id: Seed
      type: System.Int32
      description: "\n<p>A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Random.Next
  commentId: M:System.Random.Next
  id: Next
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Next()
  fullName: System.Random.Next()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Next
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 548
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a non-negative random integer.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Random.Next\" data-throw-if-not-resolved=\"false\"></xref> generates a random number whose value ranges from 0 to less than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. To generate a random number whose value ranges from 0 to some other positive number, use the <xref href=\"System.Random.Next(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload. To generate a random number within a different range, use the <xref href=\"System.Random.Next(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n"
  example:
  - "\n<p>The following example makes repeated calls to the <xref href=\"System.Random.Next\" data-throw-if-not-resolved=\"false\"></xref> method to generate a specific number of random numbers requested by the user. The <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method is used to get customer input. </p>System.Random.Next#5<p>The following example derives a class from <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> to generate a sequence of random numbers whose distribution differs from the uniform distribution generated by the <xref href=\"System.Random.Sample\" data-throw-if-not-resolved=\"false\"></xref> method of the base class. It overrides the <xref href=\"System.Random.Sample\" data-throw-if-not-resolved=\"false\"></xref> method to provide the distribution of random numbers, and overrides the <xref href=\"System.Random.Next\" data-throw-if-not-resolved=\"false\"></xref> method to use series of random numbers. </p>System.Random.Sample#1"
  syntax:
    content: public virtual int Next()
    content.vb: Public Overridable Function Next As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is greater than or equal to 0 and less than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.Next(System.Int32)
  commentId: M:System.Random.Next(System.Int32)
  id: Next(System.Int32)
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Next(Int32)
  fullName: System.Random.Next(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Next
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 549
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a non-negative random integer that is less than the specified maximum.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Random.Next(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overload returns random integers that range from 0 to <em>maxValue</em> â€“ 1. However, if <em>maxValue</em> is 0, the method returns 0. </p>\n"
  example:
  - "\n<p>The following example generates random integers with various overloads of the <xref href=\"System.Random.Next\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Random.Next#1"
  - "\n<p>The following example generates a random integer that it uses as an index to retrieve a string value from an array. Because the highest index of the array is one less than its length, the value of the <xref href=\"System.Array.Length\" data-throw-if-not-resolved=\"false\"></xref> property is supplied as a the <em>maxValue</em> parameter. </p>System.Random.Next#3"
  syntax:
    content: public virtual int Next(int maxValue)
    content.vb: Public Overridable Function Next(maxValue As Integer) As Integer
    parameters:
    - id: maxValue
      type: System.Int32
      description: "\n<p>The exclusive upper bound of the random number to be generated. <em>maxValue</em> must be greater than or equal to 0. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is greater than or equal to 0, and less than <em>maxValue</em>; that is, the range of return values ordinarily includes 0 but not <em>maxValue</em>. However, if <em>maxValue</em> equals 0, <em>maxValue</em> is returned.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>maxValue</em> is less than 0. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.Next(System.Int32,System.Int32)
  commentId: M:System.Random.Next(System.Int32,System.Int32)
  id: Next(System.Int32,System.Int32)
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Next(Int32, Int32)
  fullName: System.Random.Next(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Next
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 550
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a random integer that is within a specified range.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Random.Next(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overload returns random integers that range from <em>minValue</em> to <em>maxValue</em> â€“ 1. However, if <em>maxValue</em> equals <em>minValue</em>, the method returns <em>minValue</em>.</p>\n<p>Unlike the other overloads of the <xref href=\"System.Random.Next\" data-throw-if-not-resolved=\"false\"></xref> method, which return only non-negative values, this method can return a negative random integer.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Random.Next(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to generate random integers with three distinct ranges. Note that the exact output from the example depends on the system-supplied seed value passed to the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Random.Next#2"
  - "\n<p>The following example generates a random integer that it uses as an index to retrieve a string value from an array. Because the highest index of the array is one less than its length, the value of the <xref href=\"System.Array.Length\" data-throw-if-not-resolved=\"false\"></xref> property is supplied as a the <em>maxValue</em> parameter. </p>System.Random.Next#4"
  syntax:
    content: public virtual int Next(int minValue, int maxValue)
    content.vb: Public Overridable Function Next(minValue As Integer, maxValue As Integer) As Integer
    parameters:
    - id: minValue
      type: System.Int32
      description: "\n<p>The inclusive lower bound of the random number returned. </p>\n"
    - id: maxValue
      type: System.Int32
      description: "\n<p>The exclusive upper bound of the random number returned. <em>maxValue</em> must be greater than or equal to <em>minValue</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer greater than or equal to <em>minValue</em> and less than <em>maxValue</em>; that is, the range of return values includes <em>minValue</em> but not <em>maxValue</em>. If <em>minValue</em> equals <em>maxValue</em>, <em>minValue</em> is returned.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>minValue</em> is greater than <em>maxValue</em>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.NextBytes(System.Byte[])
  commentId: M:System.Random.NextBytes(System.Byte[])
  id: NextBytes(System.Byte[])
  parent: System.Random
  langs:
  - csharp
  - vb
  name: NextBytes(Byte[])
  fullName: System.Random.NextBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextBytes
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 551
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Fills the elements of a specified array of bytes with random numbers.</p>\n"
  remarks: "\n<p>Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or equal to <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For example, to generate a cryptographically secured random number suitable for creating a random password, use a method such as <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Random.NextBytes(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method to fill an array of bytes with random byte values.</p>Classic Random.NextBytes Example#1"
  syntax:
    content: public virtual void NextBytes(byte[] buffer)
    content.vb: Public Overridable Sub NextBytes(buffer As Byte())
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of bytes to contain random numbers. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Random.NextBytes(System.Byte())
  name.vb: NextBytes(Byte())
- uid: System.Random.NextDouble
  commentId: M:System.Random.NextDouble
  id: NextDouble
  parent: System.Random
  langs:
  - csharp
  - vb
  name: NextDouble()
  fullName: System.Random.NextDouble()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextDouble
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 552
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</p>\n"
  remarks: "\n<p>The actual upper bound of the random number returned by this method is 0.99999999999999978.</p>\n<p>To retrieve random floating-point values within a range other than 0.0 and 1.0, see the \"Retrieve floating-point values in a specified range\" section of the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class topic.  </p>\n<p>This method is the public version of the protected method, <xref href=\"System.Random.Sample\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Random.NextDouble\" data-throw-if-not-resolved=\"false\"></xref> method to generate sequences of random doubles.</p>System.Random.Ctor#1"
  - "\n<p>The following example calls the <xref href=\"System.Random.NextDouble\" data-throw-if-not-resolved=\"false\"></xref> method to generate 100 random numbers and displays their frequency distribution.</p>System.Random.NextDouble#2"
  syntax:
    content: public virtual double NextDouble()
    content.vb: Public Overridable Function NextDouble As Double
    return:
      type: System.Double
      description: "\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.Sample
  commentId: M:System.Random.Sample
  id: Sample
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Sample()
  fullName: System.Random.Sample()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sample
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 553
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a random floating-point number between 0.0 and 1.0.</p>\n"
  remarks: "\n<p>To produce a different random distribution or a different random number generator principle, derive a class from the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class and override the <xref href=\"System.Random.Sample\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Random.Sample\" data-throw-if-not-resolved=\"false\"></xref> method is <strong>protected</strong>, which means that it is accessible only within the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class and its derived classes. To generate a random number between 0 and 1 from a <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> instance, call the <xref href=\"System.Random.NextDouble\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example derives a class from <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> and overrides the <xref href=\"System.Random.Sample\" data-throw-if-not-resolved=\"false\"></xref> method to generate a distribution of random numbers. This distribution is different than the uniform distribution generated by the <xref href=\"System.Random.Sample\" data-throw-if-not-resolved=\"false\"></xref> method of the base class.</p>System.Random.Sample#1"
  syntax:
    content: protected virtual double Sample()
    content.vb: Protected Overridable Function Sample As Double
    return:
      type: System.Double
      description: "\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\n"
  seealso:
  - type: System.Random.NextDouble
    commentId: M:System.Random.NextDouble
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
