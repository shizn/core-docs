items:
- uid: System.Resources.ResourceReader
  commentId: T:System.Resources.ResourceReader
  id: ResourceReader
  parent: System.Resources
  children:
  - System.Resources.ResourceReader.#ctor(System.IO.Stream)
  - System.Resources.ResourceReader.Dispose
  - System.Resources.ResourceReader.GetEnumerator
  langs:
  - csharp
  - vb
  name: ResourceReader
  fullName: System.Resources.ResourceReader
  type: Class
  source:
    remote:
      path: src/System.Resources.Reader/src/System/Resources/ResourceReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResourceReader
    path: src/System.Resources.Reader/src/System/Resources/ResourceReader.cs
    startLine: 10
  assemblies:
  - System.Resources.Reader
  namespace: System.Resources
  summary: "\n<p>Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</p>\n<p>\n<strong>Security Note</strong>: Calling methods in this class with untrusted data is a security risk. Call the methods in the class only with trusted data. For more information, see <see href=\"http://curah.microsoft.com/57301/security-some-apis-are-not-necessarily-appropriate-for-untrusted-input\">Untrusted Data Security Risks</see>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class provides a standard implementation of the <xref href=\"System.Resources.IResourceReader\" data-throw-if-not-resolved=\"false\"></xref> interface. A <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly. It is used to enumerate the resources in a .resources file and retrieve its name/value pairs. It differs from the <xref href=\"System.Resources.ResourceManager\" data-throw-if-not-resolved=\"false\"></xref> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly. The <xref href=\"System.Resources.ResourceManager\" data-throw-if-not-resolved=\"false\"></xref> class is used to retrieve resources whose names are known in advance, whereas the <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class is useful for retrieving resources whose number or precise names are not known at compile time. For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance. Resources can then be named generically (such as <code>Section1</code>, <code>Section1Item1</code>, <code>Section1Item2</code>, and so on) and retrieved by using a <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>For more information about using the <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class, see the following sections:</p>\n<ul><li>\n<p>Instantiating a ResourceReader object</p>\n</li><li>\n<p>Enumerating a ResourceReader object's resources</p>\n<ul><li>\n<p>Retrieving resources by using IDictionaryEnumerator properties</p>\n</li><li>\n<p>Retrieving resources by name with GetResourceData</p>\n</li></ul>\n</li></ul>\n"
  syntax:
    content: 'public sealed class ResourceReader : IDisposable'
    content.vb: >-
      Public NotInheritable Class ResourceReader
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Resources.ResourceReader.#ctor(System.IO.Stream)
  commentId: M:System.Resources.ResourceReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  - vb
  name: ResourceReader(IO.Stream)
  fullName: System.Resources.ResourceReader.ResourceReader(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/System.Resources.Reader/ref/System.Resources.Reader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Resources.Reader/ref/System.Resources.Reader.cs
    startLine: 12
  assemblies:
  - System.Resources.Reader
  namespace: System.Resources
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Resources.ResourceReader.#ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> constructor instantiates a <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly. To read from a standalone .resources file, instantiate a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object and pass it to the <xref href=\"System.Resources.ResourceReader.#ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> constructor. To read from an embedded .resources file, call the <xref href=\"System.Reflection.Assembly.GetManifestResourceStream(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the case-sensitive name of the .resources file, and pass the returned <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Resources.ResourceReader.#ctor(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n<p>Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=330378\">Untrusted Data Security Risks</see>.</p>\n"
  example:
  - "\n<p>The example in this section uses the following .txt file named <code>PatientForm.txt</code> to define the resources used by an application.</p>\n<pre><code>Title=\"Top Pet Animal Clinic\"\nLabel1=\"Patient Number:\"\nLabel2=\"Pet Name:\"\nLabel3=\"Species:\"\nLabel4=\"Breed:\"\nLabel5=\"Date of Birth:\"\nLabel6=\"Age:\"\nLabel7=\"Owner:\"\nLabel8=\"Address:\"\nLabel9=\"Home Phone:\"\nLabel10=\"Work Phone:\"\nLabel11=\"Mobile Phone:\"</code></pre>\n<p>You can compile the .txt file into a .resources file by issuing the following command:</p>\n<p>resgen PatientForm.txt</p>\n<p>The following example assumes that the resource file is embedded in the assembly that contains the application's executable code. It retrieves a resource file named <code>PatientForm.resources</code> from the currently executing assemblies and displays the name and value of each of its resources.</p>System.Resources.ResourceReader.Ctor#1<p>If the C# example is named <code>Example.cs</code>, you can compile it by using the following command:</p><p>csc Example.cs /res:PatientForm.resources</p><p>If the Visual Basic example is named <code>Example.vb</code>, you can compile it by using the following command:</p><p>vbc Example.vb /res:PatientForm.resources</p>"
  syntax:
    content: public ResourceReader(IO.Stream stream)
    content.vb: Public Sub New(stream As IO.Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The input stream for reading resources. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>stream</em> parameter is not readable. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>stream</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error has occurred while accessing <em>stream</em>. </p>\n"
  seealso:
  - type: System.Reflection.Assembly.GetManifestResourceStream(System.String)
    commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Resources.ResourceReader.Dispose
  commentId: M:System.Resources.ResourceReader.Dispose
  id: Dispose
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Resources.ResourceReader.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Resources.Reader/src/System/Resources/ResourceReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Resources.Reader/src/System/Resources/ResourceReader.cs
    startLine: 45
  assemblies:
  - System.Resources.Reader
  namespace: System.Resources
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>When you are finished using this instance of <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.Resources.ResourceReader.Dispose\" data-throw-if-not-resolved=\"false\"></xref> to release all resources used by this instance. You should eliminate further references to this <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization. </p>\n<p>\n<xref href=\"System.Resources.ResourceReader.Dispose\" data-throw-if-not-resolved=\"false\"></xref> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources. For more information, see Implementing a Dispose Method. </p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Resources.ResourceReader.GetEnumerator
  commentId: M:System.Resources.ResourceReader.GetEnumerator
  id: GetEnumerator
  parent: System.Resources.ResourceReader
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Resources.ResourceReader.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Resources.Reader/src/System/Resources/ResourceReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Resources.Reader/src/System/Resources/ResourceReader.cs
    startLine: 88
  assemblies:
  - System.Resources.Reader
  namespace: System.Resources
  summary: "\n<p>Returns an enumerator for this <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Typically, you enumerate resources by calling the <xref href=\"System.Resources.ResourceReader.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method and then repeatedly calling the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method on the returned <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object until the method returns <strong>false</strong>. The resource name is available from the <xref href=\"System.Collections.IDictionaryEnumerator.Key\" data-throw-if-not-resolved=\"false\"></xref> property; its value from the <xref href=\"System.Collections.IDictionaryEnumerator.Value\" data-throw-if-not-resolved=\"false\"></xref> property. The example illustrates how to enumerate resources in this way.</p>\n<p>The implementation of the <xref href=\"System.Collections.IDictionaryEnumerator.Value\" data-throw-if-not-resolved=\"false\"></xref> property by the <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class can throw the following exceptions:</p>\n<ul><li>\n<p>\n<xref href=\"System.IO.FileNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>The assembly that contains the type to which the data belongs cannot be found.</p>\n</li><li>\n<p>\n<xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>The data is not in the expected format.</p>\n</li><li>\n<p>\n<xref href=\"System.TypeLoadException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>The type to which the data belongs cannot be found.</p>\n</li></ul>\n<p>You can handle the exception by calling the <xref href=\"System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve information about the data type and the byte array assigned to the named resource. For more information, see the \"Retrieving Resources by Name with GetResourceData\" section in the <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class topic.</p>\n<p>The <xref href=\"System.Resources.ResourceReader\" data-throw-if-not-resolved=\"false\"></xref> class includes two methods that return enumerators. The <xref href=\"System.Resources.ResourceReader.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface object and is the recommended method to call when enumerating resources.</p>\n"
  example:
  - "\n<p>The example in this section uses the following .txt file named <code>PatientForm.txt</code> to define the resources used by an application. </p>\n<pre><code>Title=\"Top Pet Animal Clinic\"\nLabel1=\"Patient Number:\"\nLabel2=\"Pet Name:\"\nLabel3=\"Species:\"\nLabel4=\"Breed:\"\nLabel5=\"Date of Birth:\"\nLabel6=\"Age:\"\nLabel7=\"Owner:\"\nLabel8=\"Address:\"\nLabel9=\"Home Phone:\"\nLabel10=\"Work Phone:\"\nLabel11=\"Mobile Phone:\"</code></pre>\n<p>You can compile the .txt file into a .resources file by issuing the following command:</p>\n<p>resgen PatientForm.txt</p>\n<p>The following example enumerates the resources in <code>PatientForm.resources</code> and displays the name and value of each.</p>System.Resources.ResourceReader.Ctor#2"
  syntax:
    content: public IDictionaryEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IDictionaryEnumerator
    return:
      type: IDictionaryEnumerator
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader has been closed or disposed, and cannot be accessed. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Resources
  isExternal: false
  name: System.Resources
  fullName: System.Resources
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
