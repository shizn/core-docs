items:
- uid: System.Reflection.CallingConventions
  commentId: T:System.Reflection.CallingConventions
  id: CallingConventions
  parent: System.Reflection
  children:
  - System.Reflection.CallingConventions.Any
  - System.Reflection.CallingConventions.ExplicitThis
  - System.Reflection.CallingConventions.HasThis
  - System.Reflection.CallingConventions.Standard
  - System.Reflection.CallingConventions.VarArgs
  langs:
  - csharp
  - vb
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
  type: Enum
  source:
    remote:
      path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CallingConventions
    path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
    startLine: 10
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Defines the valid calling conventions for a method.</p>\n"
  remarks: "\n<p>The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods. It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.</p>\n"
  example:
  - Type_GetConstructor3#1
  syntax:
    content: 'public enum CallingConventions : int'
    content.vb: Public Enum CallingConventions As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Reflection.CallingConventions.Any
  commentId: F:System.Reflection.CallingConventions.Any
  id: Any
  parent: System.Reflection.CallingConventions
  langs:
  - csharp
  - vb
  name: Any
  fullName: System.Reflection.CallingConventions.Any
  type: Field
  source:
    remote:
      path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
    startLine: 13
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that either the <strong>Standard</strong> or the <strong>VarArgs</strong> calling convention may be used.</p>\n"
  syntax:
    content: Any = null
    content.vb: Any = Nothing
    return:
      type: System.Reflection.CallingConventions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.CallingConventions.ExplicitThis
  commentId: F:System.Reflection.CallingConventions.ExplicitThis
  id: ExplicitThis
  parent: System.Reflection.CallingConventions
  langs:
  - csharp
  - vb
  name: ExplicitThis
  fullName: System.Reflection.CallingConventions.ExplicitThis
  type: Field
  source:
    remote:
      path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExplicitThis
    path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
    startLine: 14
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If <strong>ExplicitThis</strong> is set, <strong>HasThis</strong> must also be set. The first argument passed to the called method is still a <strong>this</strong> pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the <strong>this</strong> pointer is explicitly stored into its metadata signature.</p>\n"
  syntax:
    content: ExplicitThis = null
    content.vb: ExplicitThis = Nothing
    return:
      type: System.Reflection.CallingConventions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.CallingConventions.HasThis
  commentId: F:System.Reflection.CallingConventions.HasThis
  id: HasThis
  parent: System.Reflection.CallingConventions
  langs:
  - csharp
  - vb
  name: HasThis
  fullName: System.Reflection.CallingConventions.HasThis
  type: Field
  source:
    remote:
      path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasThis
    path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
    startLine: 15
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the <strong>this</strong> pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</p>\n"
  syntax:
    content: HasThis = null
    content.vb: HasThis = Nothing
    return:
      type: System.Reflection.CallingConventions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.CallingConventions.Standard
  commentId: F:System.Reflection.CallingConventions.Standard
  id: Standard
  parent: System.Reflection.CallingConventions
  langs:
  - csharp
  - vb
  name: Standard
  fullName: System.Reflection.CallingConventions.Standard
  type: Field
  source:
    remote:
      path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Standard
    path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
    startLine: 16
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use <strong>HasThis</strong>.</p>\n"
  syntax:
    content: Standard = null
    content.vb: Standard = Nothing
    return:
      type: System.Reflection.CallingConventions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.CallingConventions.VarArgs
  commentId: F:System.Reflection.CallingConventions.VarArgs
  id: VarArgs
  parent: System.Reflection.CallingConventions
  langs:
  - csharp
  - vb
  name: VarArgs
  fullName: System.Reflection.CallingConventions.VarArgs
  type: Field
  source:
    remote:
      path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VarArgs
    path: src/System.Reflection.Primitives/ref/System.Reflection.Primitives.cs
    startLine: 17
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies the calling convention for methods with variable arguments.</p>\n"
  syntax:
    content: VarArgs = null
    content.vb: VarArgs = Nothing
    return:
      type: System.Reflection.CallingConventions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
