items:
- uid: System.Security.Cryptography.KeySizes
  commentId: T:System.Security.Cryptography.KeySizes
  id: KeySizes
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)
  - System.Security.Cryptography.KeySizes.MaxSize
  - System.Security.Cryptography.KeySizes.MinSize
  - System.Security.Cryptography.KeySizes.SkipSize
  langs:
  - csharp
  - vb
  name: KeySizes
  fullName: System.Security.Cryptography.KeySizes
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySizes
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 114
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines the set of valid key sizes for the symmetric cryptographic algorithms.</p>\n"
  example:
  - "\n<p>The following example shows the use of members of the <xref href=\"System.Security.Cryptography.KeySizes\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Cryptography.KeySizes#1"
  syntax:
    content: public sealed class KeySizes
    content.vb: Public NotInheritable Class KeySizes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: System.Security.Cryptography.KeySizes
  langs:
  - csharp
  - vb
  name: KeySizes(Int32, Int32, Int32)
  fullName: System.Security.Cryptography.KeySizes.KeySizes(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 116
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.KeySizes\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key values.</p>\n"
  example:
  - "\n<p>The following code shows the use of the <xref href=\"System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.KeySizes\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Cryptography.KeySizes#2"
  syntax:
    content: public KeySizes(int minSize, int maxSize, int skipSize)
    content.vb: Public Sub New(minSize As Integer, maxSize As Integer, skipSize As Integer)
    parameters:
    - id: minSize
      type: System.Int32
      description: "\n<p>The minimum valid key size. </p>\n"
    - id: maxSize
      type: System.Int32
      description: "\n<p>The maximum valid key size. </p>\n"
    - id: skipSize
      type: System.Int32
      description: "\n<p>The interval between valid key sizes. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.KeySizes.MaxSize
  commentId: P:System.Security.Cryptography.KeySizes.MaxSize
  id: MaxSize
  parent: System.Security.Cryptography.KeySizes
  langs:
  - csharp
  - vb
  name: MaxSize
  fullName: System.Security.Cryptography.KeySizes.MaxSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxSize
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 117
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies the maximum key size in bits.</p>\n"
  example:
  - "\n<p>The following code shows how to retrieve the use of the <xref href=\"System.Security.Cryptography.KeySizes.MaxSize\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.KeySizes\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Cryptography.KeySizes#4"
  syntax:
    content: public int MaxSize { get; }
    content.vb: Public ReadOnly Property MaxSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The maximum key size in bits.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.KeySizes.MinSize
  commentId: P:System.Security.Cryptography.KeySizes.MinSize
  id: MinSize
  parent: System.Security.Cryptography.KeySizes
  langs:
  - csharp
  - vb
  name: MinSize
  fullName: System.Security.Cryptography.KeySizes.MinSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinSize
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 118
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies the minimum key size in bits.</p>\n"
  example:
  - "\n<p>The following code shows how to retrieve the use of the <xref href=\"System.Security.Cryptography.KeySizes.MinSize\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.KeySizes\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Cryptography.KeySizes#3"
  syntax:
    content: public int MinSize { get; }
    content.vb: Public ReadOnly Property MinSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The minimum key size in bits.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.KeySizes.SkipSize
  commentId: P:System.Security.Cryptography.KeySizes.SkipSize
  id: SkipSize
  parent: System.Security.Cryptography.KeySizes
  langs:
  - csharp
  - vb
  name: SkipSize
  fullName: System.Security.Cryptography.KeySizes.SkipSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipSize
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 119
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies the interval between valid key sizes in bits.</p>\n"
  example:
  - "\n<p>The following code shows how to retrieve the use of the <xref href=\"System.Security.Cryptography.KeySizes.SkipSize\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.KeySizes\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Cryptography.KeySizes#5"
  syntax:
    content: public int SkipSize { get; }
    content.vb: Public ReadOnly Property SkipSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The interval between valid key sizes in bits.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
