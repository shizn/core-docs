items:
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs
  commentId: T:System.Diagnostics.Contracts.ContractFailedEventArgs
  id: ContractFailedEventArgs
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  - System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  - System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  - System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled
  - System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  langs:
  - csharp
  - vb
  name: ContractFailedEventArgs
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContractFailedEventArgs
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 80
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Provides methods and data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object is passed to the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event when a contract fails. The <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event enables a managed application environment such as an interactive interpreter, a Web browser host, a test harness, or a logging infrastructure to be notified of contract failures. The event requires full trust. </p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class ContractFailedEventArgs : EventArgs'
    content.vb: >-
      Public NotInheritable Class ContractFailedEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)
  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)
  id: '#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)'
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: ContractFailedEventArgs(ContractFailureKind, String, String, Exception)
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.ContractFailedEventArgs(System.Diagnostics.Contracts.ContractFailureKind, System.String, System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 82
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Provides data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  example:
  - 
  syntax:
    content: public ContractFailedEventArgs(ContractFailureKind failureKind, string message, string condition, Exception originalException)
    content.vb: Public Sub New(failureKind As ContractFailureKind, message As String, condition As String, originalException As Exception)
    parameters:
    - id: failureKind
      type: System.Diagnostics.Contracts.ContractFailureKind
      description: "\n<p>One of the enumeration values that specifies the contract that failed.</p>\n"
    - id: message
      type: System.String
      description: "\n<p>The message for the event.</p>\n"
    - id: condition
      type: System.String
      description: "\n<p>The condition for the event.</p>\n"
    - id: originalException
      type: System.Exception
      description: "\n<p>The exception that caused the event.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  id: Condition
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: Condition
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Condition
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 83
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the condition for the failure of the contract.</p>\n"
  example:
  - 
  syntax:
    content: public string Condition { get; }
    content.vb: Public ReadOnly Property Condition As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The condition for the failure.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  id: FailureKind
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: FailureKind
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FailureKind
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 84
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the type of contract that failed.</p>\n"
  example:
  - 
  syntax:
    content: public ContractFailureKind FailureKind { get; }
    content.vb: Public ReadOnly Property FailureKind As ContractFailureKind
    parameters: []
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
      description: "\n<p>One of the enumeration values that specifies the type of contract that failed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  id: Handled
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: Handled
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Handled
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 85
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Indicates whether the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event has been handled.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event has not been handled, the debugger is notified. If no debugger is attached, an Assert dialog box is displayed.</p>\n"
  example:
  - "\n<p></p>\n"
  syntax:
    content: public bool Handled { get; }
    content.vb: Public ReadOnly Property Handled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the event has been handled; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  id: Message
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: Message
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Message
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 86
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the message that describes the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  example:
  - "\n<p></p>\n<p></p>\n"
  syntax:
    content: public string Message { get; }
    content.vb: Public ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The message that describes the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  id: OriginalException
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: OriginalException
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OriginalException
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 87
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the original exception that caused the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  example:
  - "\n<p></p>\n<p></p>\n"
  syntax:
    content: public Exception OriginalException { get; }
    content.vb: Public ReadOnly Property OriginalException As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>The exception that caused the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  id: Unwind
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: Unwind
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unwind
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 88
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Indicates whether the code contract escalation policy should be applied.</p>\n"
  remarks: "\n<p>If the return value is <strong>true</strong>, the escalation policy is to notify the attached debugger about a contract failure or to display an Assert dialog box if a debugger is not attached.</p>\n<p>This value should be set to <strong>false</strong> for analysis tools that run on a server (for example, ASP.NET).</p>\n"
  example:
  - 
  syntax:
    content: public bool Unwind { get; }
    content.vb: Public ReadOnly Property Unwind As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to apply the escalation policy; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled
  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled
  id: SetHandled
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: SetHandled()
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetHandled
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 89
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled\" data-throw-if-not-resolved=\"false\"></xref> method provides a way for the runtime analysis checker to indicate that a contract exception has been handled. See the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\" data-throw-if-not-resolved=\"false\"></xref> property for more information.</p>\n"
  example:
  - 
  syntax:
    content: public void SetHandled()
    content.vb: Public Sub SetHandled
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind
  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind
  id: SetUnwind
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: SetUnwind()
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetUnwind
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 91
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind\" data-throw-if-not-resolved=\"false\"></xref> method provides a way to indicate that the escalation policy for the code contract should be applied. See the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\" data-throw-if-not-resolved=\"false\"></xref> property for more information.</p>\n"
  example:
  - 
  syntax:
    content: public void SetUnwind()
    content.vb: Public Sub SetUnwind
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics.Contracts
  isExternal: false
  name: System.Diagnostics.Contracts
  fullName: System.Diagnostics.Contracts
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Diagnostics.Contracts.ContractFailureKind
  parent: System.Diagnostics.Contracts
  isExternal: false
  name: ContractFailureKind
  fullName: System.Diagnostics.Contracts.ContractFailureKind
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
