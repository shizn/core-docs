items:
- uid: System.Runtime.InteropServices.ComVisibleAttribute
  commentId: T:System.Runtime.InteropServices.ComVisibleAttribute
  id: ComVisibleAttribute
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
  - System.Runtime.InteropServices.ComVisibleAttribute.Value
  langs:
  - csharp
  - vb
  name: ComVisibleAttribute
  fullName: System.Runtime.InteropServices.ComVisibleAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Attributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ComVisibleAttribute
    path: src/mscorlib/src/System/Runtime/InteropServices/Attributes.cs
    startLine: 137
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.</p>\n"
  remarks: "\n<p>You can apply this attribute to assemblies, interfaces, classes, structures, delegates, enumerations, fields, methods, or properties.</p>\n<p>The default is <strong>true</strong>, which indicates that the managed type is visible to COM. This attribute is not needed to make public managed assemblies and types visible; they are visible to COM by default. Only <strong>public</strong> types can be made visible. The attribute cannot be used to make an otherwise <strong>internal</strong> or <strong>protected</strong> type visible to COM or to make members of a nonvisible type visible.</p>\n<p>Setting the attribute to <strong>false</strong> on the assembly hides all <strong>public</strong> types within the assembly. You can selectively make types within the assembly visible by setting the individual types to <strong>true</strong>. Setting the attribute to <strong>false</strong> on a specific type hides that type and its members. However, you cannot make members of a type visible if the type is invisible. Setting the attribute to <strong>false</strong> on a type prevents that type from being exported to a type library; classes are not registered; interfaces are never responsive to unmanaged <strong>QueryInterface</strong> calls.</p>\n<p>Unless you explicitly set a class and its members to <strong>false</strong>, inherited classes can expose to COM base class members that are invisible in the original class. For example, if you set ClassA to <strong>false</strong> and do not apply the attribute to its members, the class and its members are invisible to COM. However, if you derive ClassB from ClassA and export ClassB to COM, ClassA members become visible base class members of ClassB.</p>\n<p>For a detailed description of the export process, see Assembly to Type Library Conversion Summary.</p>\n"
  example:
  - "\n<p>The following example shows how you can control the visibility to COM of a class so that its members are invisible. By setting <strong>ComVisibleAttribute</strong> to <strong>false</strong> on <code>MyClass</code>(<code>SampleClass</code> in the Visual Basic example), and <strong>false</strong> on <code>MyMethod</code> and <code>MyProperty</code>, you can avoid inadvertently exposing the members to COM through inheritance.</p>Classic ComVisibleAttribute Example#1"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]

      [ComVisible(true)]

      public sealed class ComVisibleAttribute : Attribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly Or AttributeTargets.Class Or AttributeTargets.Struct Or AttributeTargets.Enum Or AttributeTargets.Method Or AttributeTargets.Property Or AttributeTargets.Field Or AttributeTargets.Interface Or AttributeTargets.Delegate, Inherited:=False)>

      <ComVisible(True)>

      Public NotInheritable Class ComVisibleAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 5597
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
  commentId: M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Runtime.InteropServices.ComVisibleAttribute
  langs:
  - csharp
  - vb
  name: ComVisibleAttribute(Boolean)
  fullName: System.Runtime.InteropServices.ComVisibleAttribute.ComVisibleAttribute(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Attributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/InteropServices/Attributes.cs
    startLine: 142
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <strong>ComVisibleAttribute</strong> class.</p>\n"
  remarks: "\n<p>To make types visible to COM, set the attribute to <strong>true</strong>. To hide types from COM, set the attribute to <strong>false</strong>.</p>\n"
  syntax:
    content: public ComVisibleAttribute(bool visibility)
    content.vb: Public Sub New(visibility As Boolean)
    parameters:
    - id: visibility
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.ComVisibleAttribute.Value
  commentId: P:System.Runtime.InteropServices.ComVisibleAttribute.Value
  id: Value
  parent: System.Runtime.InteropServices.ComVisibleAttribute
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Runtime.InteropServices.ComVisibleAttribute.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Attributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Runtime/InteropServices/Attributes.cs
    startLine: 146
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets a value that indicates whether the COM type is visible.</p>\n"
  syntax:
    content: public bool Value { get; }
    content.vb: Public ReadOnly Property Value As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
