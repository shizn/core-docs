items:
- uid: System.Net.NetworkCredential
  commentId: T:System.Net.NetworkCredential
  id: NetworkCredential
  parent: System.Net
  children:
  - System.Net.NetworkCredential.#ctor
  - System.Net.NetworkCredential.#ctor(System.String,System.String)
  - System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)
  - System.Net.NetworkCredential.Domain
  - System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)
  - System.Net.NetworkCredential.GetCredential(System.Uri,System.String)
  - System.Net.NetworkCredential.Password
  - System.Net.NetworkCredential.UserName
  langs:
  - csharp
  - vb
  name: NetworkCredential
  fullName: System.Net.NetworkCredential
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkCredential
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 229
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> class is a base class that supplies credentials in password-based authentication schemes such as basic, digest, NTLM, and Kerberos. Classes that implement the <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref> interface, such as the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> class, return <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n<p>This class does not support public key-based authentication methods such as Secure Sockets Layer (SSL) client authentication.</p>\n"
  example:
  - "\n<p>The following code example associates a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> object with a set of Uniform Resource Identifiers (URIs) in a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref>. It then passes the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> object, which uses it to authenticate requests to an Internet server.</p>Classic NetworkCredential Example#1"
  syntax:
    content: 'public class NetworkCredential : ICredentials, ICredentialsByHost'
    content.vb: >-
      Public Class NetworkCredential
          Implements ICredentials, ICredentialsByHost
  inheritance:
  - System.Object
  implements:
  - System.Net.ICredentials
  - System.Net.ICredentialsByHost
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.NetworkCredential.#ctor
  commentId: M:System.Net.NetworkCredential.#ctor
  id: '#ctor'
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: NetworkCredential()
  fullName: System.Net.NetworkCredential.NetworkCredential()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 231
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The default constructor for the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> class initializes all properties to <strong>null</strong>.</p>\n"
  syntax:
    content: public NetworkCredential()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkCredential.#ctor(System.String,System.String)
  commentId: M:System.Net.NetworkCredential.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: NetworkCredential(String, String)
  fullName: System.Net.NetworkCredential.NetworkCredential(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 232
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> class with the specified user name and password.</p>\n"
  remarks: "\n<p>The constructor initializes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Net.NetworkCredential.UserName\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>userName</em> and the <xref href=\"System.Net.NetworkCredential.Password\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>password</em>.</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> object using the specified user name and password.</p>NetworkCredential_Constructor2#1"
  syntax:
    content: public NetworkCredential(string userName, string password)
    content.vb: Public Sub New(userName As String, password As String)
    parameters:
    - id: userName
      type: System.String
      description: "\n<p>The user name associated with the credentials. </p>\n"
    - id: password
      type: System.String
      description: "\n<p>The password for the user name associated with the credentials. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)
  commentId: M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: NetworkCredential(String, String, String)
  fullName: System.Net.NetworkCredential.NetworkCredential(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 233
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> class with the specified user name, password, and domain.</p>\n"
  remarks: "\n<p>The constructor initializes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.Net.NetworkCredential.UserName\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>userName</em>, the <xref href=\"System.Net.NetworkCredential.Password\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>password</em>, and the <xref href=\"System.Net.NetworkCredential.Domain\" data-throw-if-not-resolved=\"false\"></xref> property set to <em>domain</em>.</p>\n"
  syntax:
    content: public NetworkCredential(string userName, string password, string domain)
    content.vb: Public Sub New(userName As String, password As String, domain As String)
    parameters:
    - id: userName
      type: System.String
      description: "\n<p>The user name associated with the credentials. </p>\n"
    - id: password
      type: System.String
      description: "\n<p>The password for the user name associated with the credentials. </p>\n"
    - id: domain
      type: System.String
      description: "\n<p>The domain associated with these credentials. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkCredential.Domain
  commentId: P:System.Net.NetworkCredential.Domain
  id: Domain
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: Domain
  fullName: System.Net.NetworkCredential.Domain
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Domain
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 234
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the domain or computer name that verifies the credentials.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.NetworkCredential.Domain\" data-throw-if-not-resolved=\"false\"></xref> property specifies the domain or realm to which the user name belongs. Typically, this is the host computer name where the application runs or the user domain for the currently logged in user.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.NetworkCredential.Domain\" data-throw-if-not-resolved=\"false\"></xref> property to set the domain associated with the credentials.</p>NetworkCredential_UserName_Password_Domain#1"
  syntax:
    content: public string Domain { get; set; }
    content.vb: Public Property Domain As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the domain associated with the credentials.</p>\n"
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.NetworkCredential.Password
  commentId: P:System.Net.NetworkCredential.Password
  id: Password
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: Password
  fullName: System.Net.NetworkCredential.Password
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Password
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 235
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the password for the user name associated with the credentials.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.NetworkCredential.Password\" data-throw-if-not-resolved=\"false\"></xref> property to set the password associated with the credentials.</p>NetworkCredential_UserName_Password_Domain#1"
  syntax:
    content: public string Password { get; set; }
    content.vb: Public Property Password As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The password associated with the credentials. If this <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance was initialized with the <em>password</em> parameter set to <strong>null</strong>, then the <xref href=\"System.Net.NetworkCredential.Password\" data-throw-if-not-resolved=\"false\"></xref> property will return an empty string.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.NetworkCredential.UserName
  commentId: P:System.Net.NetworkCredential.UserName
  id: UserName
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: UserName
  fullName: System.Net.NetworkCredential.UserName
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserName
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 236
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the user name associated with the credentials.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.NetworkCredential.UserName\" data-throw-if-not-resolved=\"false\"></xref> property to set the user name associated with the credentials.</p>NetworkCredential_UserName_Password_Domain#1"
  syntax:
    content: public string UserName { get; set; }
    content.vb: Public Property UserName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The user name associated with the credentials.</p>\n"
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)
  commentId: M:System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)
  id: GetCredential(System.String,System.Int32,System.String)
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: GetCredential(String, Int32, String)
  fullName: System.Net.NetworkCredential.GetCredential(System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCredential
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 237
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns an instance of the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> class for the specified host, port, and authentication type.</p>\n"
  remarks: "\n<p>The value of <em>authType</em> corresponds to the <xref href=\"System.Net.IAuthenticationModule.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public NetworkCredential GetCredential(string host, int port, string authenticationType)
    content.vb: Public Function GetCredential(host As String, port As Integer, authenticationType As String) As NetworkCredential
    parameters:
    - id: host
      type: System.String
      description: "\n<p>The host computer that authenticates the client.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port on the <em>host</em> that the client communicates with.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication requested, as defined in the <xref href=\"System.Net.IAuthenticationModule.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>A <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> for the specified host, port, and authentication protocol, or <strong>null</strong> if there are no credentials available for the specified host, port, and authentication protocol.</p>\n"
  implements:
  - System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.NetworkCredential.GetCredential(System.Uri,System.String)
  commentId: M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)
  id: GetCredential(System.Uri,System.String)
  parent: System.Net.NetworkCredential
  langs:
  - csharp
  - vb
  name: GetCredential(Uri, String)
  fullName: System.Net.NetworkCredential.GetCredential(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCredential
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 238
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns an instance of the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> class for the specified Uniform Resource Identifier (URI) and authentication type.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.NetworkCredential.GetCredential(System.Uri,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> object for the specified URI.</p>NetworkCredential_GetCredential#1"
  syntax:
    content: public NetworkCredential GetCredential(Uri uri, string authType)
    content.vb: Public Function GetCredential(uri As Uri, authType As String) As NetworkCredential
    parameters:
    - id: uri
      type: System.Uri
      description: "\n<p>The URI that the client provides authentication for. </p>\n"
    - id: authType
      type: System.String
      description: "\n<p>The type of authentication requested, as defined in the <xref href=\"System.Net.IAuthenticationModule.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>A <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.Net.ICredentials.GetCredential(System.Uri,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.ICredentialsByHost
  parent: System.Net
  isExternal: false
  name: ICredentialsByHost
  fullName: System.Net.ICredentialsByHost
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
  parent: System.Net.ICredentialsByHost
  isExternal: true
  name: GetCredential(String, Int32, String)
  fullName: System.Net.ICredentialsByHost.GetCredential(System.String, System.Int32, System.String)
  spec.csharp:
  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
    name: GetCredential
    fullName: System.Net.ICredentialsByHost.GetCredential
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
    name: GetCredential
    fullName: System.Net.ICredentialsByHost.GetCredential
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: false
  name: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
  parent: System.Net.ICredentials
  isExternal: true
  name: GetCredential(Uri, String)
  fullName: System.Net.ICredentials.GetCredential(System.Uri, System.String)
  spec.csharp:
  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
    name: GetCredential
    fullName: System.Net.ICredentials.GetCredential
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
    name: GetCredential
    fullName: System.Net.ICredentials.GetCredential
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  fullName: System.Uri
