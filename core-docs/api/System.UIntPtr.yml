items:
- uid: System.UIntPtr
  commentId: T:System.UIntPtr
  id: UIntPtr
  parent: System
  children:
  - System.UIntPtr.#ctor(System.UInt32)
  - System.UIntPtr.#ctor(System.UInt64)
  - System.UIntPtr.#ctor(System.Void*)
  - System.UIntPtr.Add(System.UIntPtr,System.Int32)
  - System.UIntPtr.Equals(System.Object)
  - System.UIntPtr.GetHashCode
  - System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)
  - System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)
  - System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr
  - System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr
  - System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32
  - System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64
  - System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*
  - System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr
  - System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)
  - System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)
  - System.UIntPtr.Size
  - System.UIntPtr.Subtract(System.UIntPtr,System.Int32)
  - System.UIntPtr.ToPointer
  - System.UIntPtr.ToString
  - System.UIntPtr.ToUInt32
  - System.UIntPtr.ToUInt64
  - System.UIntPtr.Zero
  langs:
  - csharp
  - vb
  name: UIntPtr
  fullName: System.UIntPtr
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UIntPtr
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>A platform-specific type that is used to represent a pointer or a handle.</p>\n"
  remarks: "\n<p>The <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> type is designed to be an integer whose size is platform-specific. That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.</p>\n<p>   The <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> type is CLS-compliant, while the <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> type is not. Only the <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> type is used in the common language runtime. The <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> type is provided mostly to maintain architectural symmetry with the <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n<p>The <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers. <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> objects can also be used to hold handles.</p>\n<p>This type implements the <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [CLSCompliant(false)]

      [ComVisible(true)]

      public struct UIntPtr : ISerializable
    content.vb: >-
      <Serializable>

      <CLSCompliant(False)>

      <ComVisible(True)>

      Public Structure UIntPtr
          Implements ISerializable
  seealso:
  - type: System.IntPtr
    commentId: T:System.IntPtr
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.UIntPtr.Zero
  commentId: F:System.UIntPtr.Zero
  id: Zero
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Zero
  fullName: System.UIntPtr.Zero
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Zero
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 29
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>A read-only field that represents a pointer or handle that has been initialized to zero.</p>\n"
  remarks: "\n<p>The value of this field is not equivalent to <strong>null</strong>. Use this field to efficiently determine whether an instance of <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> has been set to a value other than zero.</p>\n<p>For example, assume the variable, uip, is an instance of <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref>. You can determine if it has been set by comparing it to the value returned by a constructor, for example: \" <code>if uip != new UIntPtr(0)...</code> \". However, invoking a constructor to get an unintialized pointer is inefficient. It is better to code either \" <code>if uip != UIntPtr.Zero...</code> \", or \" <code>if !UIntPtr.Zero.Equals(uip)...</code> \".</p>\n"
  syntax:
    content: public static readonly UIntPtr Zero
    content.vb: Public Shared ReadOnly Zero As UIntPtr
    return:
      type: System.UIntPtr
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.UIntPtr.#ctor(System.UInt32)
  commentId: M:System.UIntPtr.#ctor(System.UInt32)
  id: '#ctor(System.UInt32)'
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: UIntPtr(UInt32)
  fullName: System.UIntPtr.UIntPtr(System.UInt32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 32
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> structure using the specified 32-bit pointer or handle.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public UIntPtr(uint value)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Sub New(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.UIntPtr.#ctor(System.UInt64)
  commentId: M:System.UIntPtr.#ctor(System.UInt64)
  id: '#ctor(System.UInt64)'
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: UIntPtr(UInt64)
  fullName: System.UIntPtr.UIntPtr(System.UInt64)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 39
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> using the specified 64-bit pointer or handle.</p>\n"
  remarks: "\n<p>An exception is only thrown if the value of <em>value</em> requires more bits than the current platform supports.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public UIntPtr(ulong value)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Sub New(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 32-bit platform, <em>value</em> is too large to represent as an <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.UIntPtr.#ctor(System.Void*)
  commentId: M:System.UIntPtr.#ctor(System.Void*)
  id: '#ctor(System.Void*)'
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: UIntPtr(Void*)
  fullName: System.UIntPtr.UIntPtr(System.Void*)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 50
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> using the specified pointer to an unspecified type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [NonVersionable]

      public UIntPtr(void *value)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <NonVersionable>

      Public Sub New(value As  *)
    parameters:
    - id: value
      type: System.Void*
  seealso:
  - type: System.Void
    commentId: T:System.Void
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.UIntPtr.Size
  commentId: P:System.UIntPtr.Size
  id: Size
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Size
  fullName: System.UIntPtr.Size
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Size
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 220
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the size of this instance.</p>\n"
  syntax:
    content: >-
      public static int Size

      {
          [NonVersionable]
          get;
      }
    content.vb: Public Shared ReadOnly Property Size As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.UIntPtr.Add(System.UIntPtr,System.Int32)
  commentId: M:System.UIntPtr.Add(System.UIntPtr,System.Int32)
  id: Add(System.UIntPtr,System.Int32)
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Add(UIntPtr, Int32)
  fullName: System.UIntPtr.Add(System.UIntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 192
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Adds an offset to the value of an unsigned pointer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IntPtr.Add(System.IntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, the addition operation is performed in an unchecked context.</p>\n<p>Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of an unsigned pointer.</p>\n"
  example:
  - "\n<p>The following example instantiates a <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> object that points to the beginning of a ten-element array, and then calls the <xref href=\"System.UIntPtr.Add(System.UIntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to iterate the elements in the array.</p>System.UIntPtr.Add#1"
  syntax:
    content: >-
      [NonVersionable]

      public static UIntPtr Add(UIntPtr pointer, int offset)
    content.vb: >-
      <NonVersionable>

      Public Shared Function Add(pointer As UIntPtr, offset As Integer) As UIntPtr
    parameters:
    - id: pointer
      type: System.UIntPtr
    - id: offset
      type: System.Int32
    return:
      type: System.UIntPtr
  seealso:
  - type: System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)
    commentId: M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.UIntPtr.Equals(System.Object)
  commentId: M:System.UIntPtr.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.UIntPtr.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 81
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override bool Equals(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.UIntPtr.GetHashCode
  commentId: M:System.UIntPtr.GetHashCode
  id: GetHashCode
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.UIntPtr.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 89
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)
  commentId: M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)
  id: op_Addition(System.UIntPtr,System.Int32)
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Addition(UIntPtr, Int32)
  fullName: System.UIntPtr.Addition(System.UIntPtr, System.Int32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Addition
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 197
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Adds an offset to the value of an unsigned pointer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method defines the addition operation for <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> objects. It enables code such as the following.</p>System.UIntPtr.op_Addition#1<p>Languages that do not support custom operators can call the <xref href=\"System.UIntPtr.Add(System.UIntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p><p>The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.</p>"
  example:
  - 
  syntax:
    content: >-
      [NonVersionable]

      public static UIntPtr operator +(UIntPtr pointer, int offset)
    content.vb: >-
      <NonVersionable>

      Public Shared Operator +(pointer As UIntPtr, offset As Integer) As UIntPtr
    parameters:
    - id: pointer
      type: System.UIntPtr
    - id: offset
      type: System.Int32
    return:
      type: System.UIntPtr
  seealso:
  - type: System.UIntPtr.Add(System.UIntPtr,System.Int32)
    commentId: M:System.UIntPtr.Add(System.UIntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)
  commentId: M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)
  id: op_Equality(System.UIntPtr,System.UIntPtr)
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Equality(UIntPtr, UIntPtr)
  fullName: System.UIntPtr.Equality(System.UIntPtr, System.UIntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 177
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified instances of <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> are equal.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public static bool operator ==(UIntPtr value1, UIntPtr value2)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Shared Operator =(value1 As UIntPtr, value2 As UIntPtr) As Boolean
    parameters:
    - id: value1
      type: System.UIntPtr
    - id: value2
      type: System.UIntPtr
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr
  commentId: M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr
  id: op_Explicit(System.UInt32)~System.UIntPtr
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Explicit(UInt32 to UIntPtr)
  fullName: System.UIntPtr.Explicit(System.UInt32 to System.UIntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 130
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a 32-bit unsigned integer to an <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [NonVersionable]

      public static explicit operator UIntPtr(uint value)
    content.vb: >-
      <NonVersionable>

      Public Shared Narrowing Operator CType(value As UInteger) As UIntPtr
    parameters:
    - id: value
      type: System.UInt32
    return:
      type: System.UIntPtr
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.UIntPtr.Narrowing(System.UInt32 to System.UIntPtr)
  name.vb: Narrowing(UInt32 to UIntPtr)
- uid: System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr
  commentId: M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr
  id: op_Explicit(System.UInt64)~System.UIntPtr
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Explicit(UInt64 to UIntPtr)
  fullName: System.UIntPtr.Explicit(System.UInt64 to System.UIntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 136
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a 64-bit unsigned integer to an <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [NonVersionable]

      public static explicit operator UIntPtr(ulong value)
    content.vb: >-
      <NonVersionable>

      Public Shared Narrowing Operator CType(value As ULong) As UIntPtr
    parameters:
    - id: value
      type: System.UInt64
    return:
      type: System.UIntPtr
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 32-bit platform, <em>value</em> is too large to represent as an <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.UIntPtr.Narrowing(System.UInt64 to System.UIntPtr)
  name.vb: Narrowing(UInt64 to UIntPtr)
- uid: System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32
  commentId: M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32
  id: op_Explicit(System.UIntPtr)~System.UInt32
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Explicit(UIntPtr to UInt32)
  fullName: System.UIntPtr.Explicit(System.UIntPtr to System.UInt32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 142
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> to a 32-bit unsigned integer.</p>\n"
  remarks: "\n<p>An exception is only thrown if the value of <em>value</em> requires more bits than the current platform supports.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public static explicit operator uint (UIntPtr value)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As UIntPtr) As UInteger
    parameters:
    - id: value
      type: System.UIntPtr
    return:
      type: System.UInt32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 64-bit platform, the value of <em>value</em> is too large to represent as a 32-bit unsigned integer. </p>\n"
  seealso:
  - type: System.UIntPtr.ToUInt32
    commentId: M:System.UIntPtr.ToUInt32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.UIntPtr.Narrowing(System.UIntPtr to System.UInt32)
  name.vb: Narrowing(UIntPtr to UInt32)
- uid: System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64
  commentId: M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64
  id: op_Explicit(System.UIntPtr)~System.UInt64
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Explicit(UIntPtr to UInt64)
  fullName: System.UIntPtr.Explicit(System.UIntPtr to System.UInt64)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 153
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> to a 64-bit unsigned integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public static explicit operator ulong (UIntPtr value)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As UIntPtr) As ULong
    parameters:
    - id: value
      type: System.UIntPtr
    return:
      type: System.UInt64
  seealso:
  - type: System.UIntPtr.ToUInt64
    commentId: M:System.UIntPtr.ToUInt64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.UIntPtr.Narrowing(System.UIntPtr to System.UInt64)
  name.vb: Narrowing(UIntPtr to UInt64)
- uid: System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*
  commentId: M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*
  id: op_Explicit(System.UIntPtr)~System.Void*
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Explicit(UIntPtr to Void*)
  fullName: System.UIntPtr.Explicit(System.UIntPtr to System.Void*)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 168
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> to a pointer to an unspecified type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [NonVersionable]

      public static explicit operator void *(UIntPtr value)
    content.vb: "<SecurityCritical>\n<CLSCompliant(False)>\n<NonVersionable>\nPublic Shared Narrowing Operator CType(value As UIntPtr) As "
    parameters:
    - id: value
      type: System.UIntPtr
    return:
      type: System.Void*
  seealso:
  - type: System.UIntPtr.ToPointer
    commentId: M:System.UIntPtr.ToPointer
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.UIntPtr.Narrowing(System.UIntPtr to System.Void*)
  name.vb: Narrowing(UIntPtr to Void*)
- uid: System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr
  commentId: M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr
  id: op_Explicit(System.Void*)~System.UIntPtr
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Explicit(Void* to UIntPtr)
  fullName: System.UIntPtr.Explicit(System.Void* to System.UIntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 160
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified pointer to an unspecified type to a <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [NonVersionable]

      public static explicit operator UIntPtr(void *value)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As  *) As UIntPtr
    parameters:
    - id: value
      type: System.Void*
    return:
      type: System.UIntPtr
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.UIntPtr.Narrowing(System.Void* to System.UIntPtr)
  name.vb: Narrowing(Void* to UIntPtr)
- uid: System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)
  commentId: M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)
  id: op_Inequality(System.UIntPtr,System.UIntPtr)
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Inequality(UIntPtr, UIntPtr)
  fullName: System.UIntPtr.Inequality(System.UIntPtr, System.UIntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 185
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified instances of <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> are not equal.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public static bool operator !=(UIntPtr value1, UIntPtr value2)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Shared Operator <>(value1 As UIntPtr, value2 As UIntPtr) As Boolean
    parameters:
    - id: value1
      type: System.UIntPtr
    - id: value2
      type: System.UIntPtr
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)
  commentId: M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)
  id: op_Subtraction(System.UIntPtr,System.Int32)
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Subtraction(UIntPtr, Int32)
  fullName: System.UIntPtr.Subtraction(System.UIntPtr, System.Int32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Subtraction
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 211
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Subtracts an offset from the value of an unsigned pointer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method defines the subtraction operation for <xref href=\"System.UIntPtr\" data-throw-if-not-resolved=\"false\"></xref> objects. It enables code such as the following.</p>System.UIntPtr.op_Addition#2<p>Languages that do not support custom operators can call the <xref href=\"System.UIntPtr.Subtract(System.UIntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p><p>The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.</p>"
  example:
  - 
  syntax:
    content: >-
      [NonVersionable]

      public static UIntPtr operator -(UIntPtr pointer, int offset)
    content.vb: >-
      <NonVersionable>

      Public Shared Operator -(pointer As UIntPtr, offset As Integer) As UIntPtr
    parameters:
    - id: pointer
      type: System.UIntPtr
    - id: offset
      type: System.Int32
    return:
      type: System.UIntPtr
  seealso:
  - type: System.UIntPtr.Subtract(System.UIntPtr,System.Int32)
    commentId: M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.UIntPtr.Subtract(System.UIntPtr,System.Int32)
  commentId: M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)
  id: Subtract(System.UIntPtr,System.Int32)
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: Subtract(UIntPtr, Int32)
  fullName: System.UIntPtr.Subtract(System.UIntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Subtract
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 206
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Subtracts an offset from the value of an unsigned pointer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IntPtr.Subtract(System.IntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, the subtraction operation is performed in an unchecked context.</p>\n<p>Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of an unsigned pointer.</p>\n"
  example:
  - "\n<p>The following example instantiates an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object that points to the end of a ten-element array, and then calls the <xref href=\"System.IntPtr.Subtract(System.IntPtr,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to iterate the elements in the array in reverse order. </p>System.UIntPtr.Subtract#1"
  syntax:
    content: >-
      [NonVersionable]

      public static UIntPtr Subtract(UIntPtr pointer, int offset)
    content.vb: >-
      <NonVersionable>

      Public Shared Function Subtract(pointer As UIntPtr, offset As Integer) As UIntPtr
    parameters:
    - id: pointer
      type: System.UIntPtr
    - id: offset
      type: System.Int32
    return:
      type: System.UIntPtr
  seealso:
  - type: System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)
    commentId: M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.UIntPtr.ToPointer
  commentId: M:System.UIntPtr.ToPointer
  id: ToPointer
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: ToPointer()
  fullName: System.UIntPtr.ToPointer()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToPointer
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 233
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to a pointer to an unspecified type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [CLSCompliant(false)]

      [NonVersionable]

      public void *ToPointer()
    content.vb: "<SecuritySafeCritical>\n<CLSCompliant(False)>\n<NonVersionable>\nPublic Function ToPointer As "
    return:
      type: System.Void*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.UIntPtr.ToString
  commentId: M:System.UIntPtr.ToString
  id: ToString
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.UIntPtr.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 119
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation.</p>\n"
  remarks: "\n<p>If the value of the <xref href=\"System.IntPtr.Size\" data-throw-if-not-resolved=\"false\"></xref> property for this instance is 4, then this method is equivalent to <xref href=\"System.UInt32.ToString\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, this method is equivalent to <xref href=\"System.UInt64.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override string ToString()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.UIntPtr.ToUInt32
  commentId: M:System.UIntPtr.ToUInt32
  id: ToUInt32
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: ToUInt32()
  fullName: System.UIntPtr.ToUInt32()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt32
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 103
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to a 32-bit unsigned integer.</p>\n"
  remarks: "\n<p>An exception is only thrown if the value of <em>value</em> requires more bits than the current platform supports.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public uint ToUInt32()
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Function ToUInt32 As UInteger
    return:
      type: System.UInt32
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.UIntPtr.ToUInt64
  commentId: M:System.UIntPtr.ToUInt64
  id: ToUInt64
  parent: System.UIntPtr
  langs:
  - csharp
  - vb
  name: ToUInt64()
  fullName: System.UIntPtr.ToUInt64()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/UIntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt64
    path: src/mscorlib/src/System/UIntPtr.cs
    startLine: 113
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to a 64-bit unsigned integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public ulong ToUInt64()
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Function ToUInt64 As ULong
    return:
      type: System.UInt64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.UIntPtr
  parent: System
  isExternal: false
  name: UIntPtr
  fullName: System.UIntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.Void*
  isExternal: true
  name: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
