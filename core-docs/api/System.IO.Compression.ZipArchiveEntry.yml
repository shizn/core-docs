items:
- uid: System.IO.Compression.ZipArchiveEntry
  commentId: T:System.IO.Compression.ZipArchiveEntry
  id: ZipArchiveEntry
  parent: System.IO.Compression
  children:
  - System.IO.Compression.ZipArchiveEntry.Archive
  - System.IO.Compression.ZipArchiveEntry.CompressedLength
  - System.IO.Compression.ZipArchiveEntry.Delete
  - System.IO.Compression.ZipArchiveEntry.FullName
  - System.IO.Compression.ZipArchiveEntry.LastWriteTime
  - System.IO.Compression.ZipArchiveEntry.Length
  - System.IO.Compression.ZipArchiveEntry.Name
  - System.IO.Compression.ZipArchiveEntry.Open
  - System.IO.Compression.ZipArchiveEntry.ToString
  langs:
  - csharp
  - vb
  name: ZipArchiveEntry
  fullName: System.IO.Compression.ZipArchiveEntry
  type: Class
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ZipArchiveEntry
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 77
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Represents a compressed file within a zip archive.</p>\n"
  remarks: "\n<p>A zip archive contains an entry for each compressed file. The <xref href=\"System.IO.Compression.ZipArchiveEntry\" data-throw-if-not-resolved=\"false\"></xref> class enables you to examine the properties of an entry, and open or delete the entry. When you open an entry, you can modify the compressed file by writing to the stream for that compressed file. </p>\n<p>The methods for manipulating zip archives and their file entries are spread across three classes: <xref href=\"System.IO.Compression.ZipFile\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Compression.ZipArchiveEntry\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To…</p>\n<p>Use…</p>\n<table><tbody><tr><td>\n<p>Create a zip archive from a directory</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Extract the contents of a zip archive to a directory</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Add new files to an existing zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchive.CreateEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Retrieve an file in a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchive.GetEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Retrieve all of the files in a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchive.Entries\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>To open a stream to an individual file contained in a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchiveEntry.Open\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Delete a file from a zip archive</p>\n</td><td>\n<p>\n<xref href=\"System.IO.Compression.ZipArchiveEntry.Delete\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr></tbody></table>\n<p>If you reference the <strong>System.IO.Compression.FileSystem</strong> assembly in your project, you can access two extension methods for the <xref href=\"System.IO.Compression.ZipArchiveEntry\" data-throw-if-not-resolved=\"false\"></xref> class. Those methods are <xref href=\"System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, and they enable you to decompress the contents of the entry to a file. The <strong>System.IO.Compression.FileSystem</strong> assembly is not available in Windows 8. In Windows 8.x Store apps, you can decompress the contents of an archive by using <xref href=\"System.IO.Compression.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Compression.GZipStream\" data-throw-if-not-resolved=\"false\"></xref>, or you can use the Windows Runtime types <see href=\"http://go.microsoft.com/fwlink/p/?LinkId=246357\">Compressor</see> and <see href=\"http://go.microsoft.com/fwlink/?LinkId=246358\">Decompressor</see> to compress and decompress files.</p>\n"
  example:
  - "\n<p>The first example shows how to create a new entry in a zip archive and write to it.</p>System.IO.Compression.ZipArchiveMode#1"
  - "\n<p>The second example shows how to use the <xref href=\"System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String)\" data-throw-if-not-resolved=\"false\"></xref> extension method. You must reference the <strong>System.IO.Compression.FileSystem</strong> assembly in your project for the code to execute.</p>System.IO.Compression.ZipArchive#1"
  syntax:
    content: public class ZipArchiveEntry
    content.vb: Public Class ZipArchiveEntry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.Compression.ZipArchiveEntry.Archive
  commentId: P:System.IO.Compression.ZipArchiveEntry.Archive
  id: Archive
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: Archive
  fullName: System.IO.Compression.ZipArchiveEntry.Archive
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Archive
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 80
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets the zip archive that the entry belongs to.</p>\n"
  syntax:
    content: public ZipArchive Archive { get; }
    content.vb: Public ReadOnly Property Archive As ZipArchive
    parameters: []
    return:
      type: System.IO.Compression.ZipArchive
      description: "\n<p>The zip archive that the entry belongs to, or <strong>null</strong> if the entry has been deleted.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchiveEntry.CompressedLength
  commentId: P:System.IO.Compression.ZipArchiveEntry.CompressedLength
  id: CompressedLength
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: CompressedLength
  fullName: System.IO.Compression.ZipArchiveEntry.CompressedLength
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompressedLength
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 81
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets the compressed size of the entry in the zip archive.</p>\n"
  remarks: "\n<p>This property cannot be retrieved when the mode is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, or the mode is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and the entry has been opened.</p>\n"
  example:
  - "\n<p>The following example shows how to retrieve entries in a zip archive, and evaluate the properties of the entries. It uses the <xref href=\"System.IO.Compression.ZipArchiveEntry.Name\" data-throw-if-not-resolved=\"false\"></xref> property to display the name of the entry, and the <xref href=\"System.IO.Compression.ZipArchiveEntry.Length\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Compression.ZipArchiveEntry.CompressedLength\" data-throw-if-not-resolved=\"false\"></xref> properties to calculate how much the file was compressed.</p>System.IO.Compression.ZipArchiveEntry#1"
  syntax:
    content: public long CompressedLength { get; }
    content.vb: Public ReadOnly Property CompressedLength As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The compressed size of the entry in the zip archive.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The value of the property is not available because the entry has been modified.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchiveEntry.FullName
  commentId: P:System.IO.Compression.ZipArchiveEntry.FullName
  id: FullName
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.IO.Compression.ZipArchiveEntry.FullName
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 82
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets the relative path of the entry in the zip archive.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property contains the relative path, including the subdirectory hierarchy, of an entry in a zip archive. (In contrast, the <xref href=\"System.IO.Compression.ZipArchiveEntry.Name\" data-throw-if-not-resolved=\"false\"></xref> property contains only the name of the entry and does not include the subdirectory hierarchy.) For example, if you create two entries in a zip archive by using the <xref href=\"System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and provide <code>NewEntry.txt</code> as the name for the first entry and <code>AddedFolder\\\\NewEntry.txt</code> for the second entry, both entries will have <strong>NewEntry.txt</strong> in the <xref href=\"System.IO.Compression.ZipArchiveEntry.Name\" data-throw-if-not-resolved=\"false\"></xref> property. The first entry will also have <strong>NewEntry.txt</strong> in the <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property, but the second entry will have <strong>AddedFolder\\\\NewEntry.txt</strong> in the <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>You can specify any string as the path of an entry, including strings that specify invalid and absolute paths. Therefore, the <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property might contain a value that is not correctly formatted. An invalid or absolute path might result in an exception when you extract the contents of the zip archive.</p>\n"
  example:
  - "\n<p>The following example shows how to iterate through the contents of a .zip file, and extract files that contain the .txt extension.</p>System.IO.Compression.ZipArchive#1"
  syntax:
    content: public string FullName { get; }
    content.vb: Public ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The relative path of the entry in the zip archive.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchiveEntry.LastWriteTime
  commentId: P:System.IO.Compression.ZipArchiveEntry.LastWriteTime
  id: LastWriteTime
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: LastWriteTime
  fullName: System.IO.Compression.ZipArchiveEntry.LastWriteTime
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastWriteTime
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 83
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets or sets the last time the entry in the zip archive was changed.</p>\n"
  remarks: "\n<p>When you create a new entry from an existing file by calling the <xref href=\"System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.IO.Compression.ZipArchiveEntry.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property for the entry is automatically set to the last time the file was modified. When you create a new entry programmatically by calling the <xref href=\"System.IO.Compression.ZipArchive.CreateEntry(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.IO.Compression.ZipArchiveEntry.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property for the entry is automatically set to the time of execution. If you modify the entry, you must explicitly set the <xref href=\"System.IO.Compression.ZipArchiveEntry.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property if you want the value to reflect the time of the latest change.</p>\n<p>When you set this property, the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value is converted to a timestamp format that is specific to zip archives. This format supports a resolution of two seconds. The earliest permitted value is 1980 January 1 0:00:00 (midnight). The latest permitted value is 2107 December 31 23:59:58 (one second before midnight). If the value for the last write time is not valid, the property returns a default value of 1980 January 1 0:00:00 (midnight).</p>\n"
  example:
  - "\n<p>The following example shows how to open an entry in a zip archive, modify it, and set the <xref href=\"System.IO.Compression.ZipArchiveEntry.LastWriteTime\" data-throw-if-not-resolved=\"false\"></xref> property to the current time.</p>System.IO.Compression.ZipArchiveEntry#2"
  syntax:
    content: public DateTimeOffset LastWriteTime { get; set; }
    content.vb: Public Property LastWriteTime As DateTimeOffset
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\n<p>The last time the entry in the zip archive was changed.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The attempt to set this property failed, because the zip archive for the entry is in <xref href=\"System.IO.Compression.ZipArchiveMode.Read\" data-throw-if-not-resolved=\"false\"></xref> mode.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The archive mode is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>- or -</p>\n<p>The archive mode is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and the entry has been opened.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>An attempt was made to set this property to a value that is either earlier than 1980 January 1 0:00:00 (midnight) or later than 2107 December 31 23:59:58 (one second before midnight).</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchiveEntry.Length
  commentId: P:System.IO.Compression.ZipArchiveEntry.Length
  id: Length
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.Compression.ZipArchiveEntry.Length
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 84
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets the uncompressed size of the entry in the zip archive.</p>\n"
  remarks: "\n<p>This property cannot be retrieved when the mode is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, or the mode is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and the entry has been opened.</p>\n"
  example:
  - "\n<p>The following example shows how to retrieve entries from a zip archive, and evaluate the properties of the entries. It uses the <xref href=\"System.IO.Compression.ZipArchiveEntry.Name\" data-throw-if-not-resolved=\"false\"></xref> property to display the name of the entry, and the <xref href=\"System.IO.Compression.ZipArchiveEntry.Length\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Compression.ZipArchiveEntry.CompressedLength\" data-throw-if-not-resolved=\"false\"></xref> properties to calculate how much the file was compressed.</p>System.IO.Compression.ZipArchiveEntry#1"
  syntax:
    content: public long Length { get; }
    content.vb: Public ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The uncompressed size of the entry in the zip archive.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The value of the property is not available because the entry has been modified.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchiveEntry.Name
  commentId: P:System.IO.Compression.ZipArchiveEntry.Name
  id: Name
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.Compression.ZipArchiveEntry.Name
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 85
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets the file name of the entry in the zip archive.</p>\n"
  remarks: "\n<p></p>\n<p>The <xref href=\"System.IO.Compression.ZipArchiveEntry.Name\" data-throw-if-not-resolved=\"false\"></xref> property contains the portion of the <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property that follows the final directory separator character (\\), and does not include the subdirectory hierarchy. For example, if you create two entries in a zip archive by using the <xref href=\"System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and provide <strong>NewEntry.txt</strong> as the name for the first entry and <strong>AddedFolder\\\\NewEntry.txt</strong> for the second entry, both entries will have <strong>NewEntry.txt</strong> in the <xref href=\"System.IO.Compression.ZipArchiveEntry.Name\" data-throw-if-not-resolved=\"false\"></xref> property. The first entry will also have <strong>NewEntry.txt</strong> in the <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property, but the second entry will have <strong>AddedFolder\\\\NewEntry.txt</strong> in the <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example shows how to retrieve entries from a zip archive and evaluate the properties of the entries. It uses the <xref href=\"System.IO.Compression.ZipArchiveEntry.Name\" data-throw-if-not-resolved=\"false\"></xref> property to display the name of the entry, and the <xref href=\"System.IO.Compression.ZipArchiveEntry.Length\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Compression.ZipArchiveEntry.CompressedLength\" data-throw-if-not-resolved=\"false\"></xref> properties to calculate how much the file was compressed.</p>System.IO.Compression.ZipArchiveEntry#1"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The file name of the entry in the zip archive.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchiveEntry.Delete
  commentId: M:System.IO.Compression.ZipArchiveEntry.Delete
  id: Delete
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: Delete()
  fullName: System.IO.Compression.ZipArchiveEntry.Delete()
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Delete
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 86
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Deletes the entry from the zip archive.</p>\n"
  syntax:
    content: public void Delete()
    content.vb: Public Sub Delete
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The entry is already open for reading or writing.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive for this entry was opened in a mode other than <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive for this entry has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchiveEntry.Open
  commentId: M:System.IO.Compression.ZipArchiveEntry.Open
  id: Open
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: Open()
  fullName: System.IO.Compression.ZipArchiveEntry.Open()
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 87
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Opens the entry from the zip archive.</p>\n"
  remarks: "\n<p>You use this method to access the stream for an entry in a zip archive. After retrieving the stream, you can read from or write to the stream. When you write to the stream, the modifications you make to the entry will appear in the zip archive.</p>\n"
  example:
  - "\n<p>The following example shows how to create a new entry, open it with the <xref href=\"System.IO.Compression.ZipArchiveEntry.Open\" data-throw-if-not-resolved=\"false\"></xref> method, and write to the stream.</p>System.IO.Compression.ZipArchiveMode#1"
  syntax:
    content: public Stream Open()
    content.vb: Public Function Open As Stream
    return:
      type: System.IO.Stream
      description: "\n<p>The stream that represents the contents of the entry.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The entry is already currently open for writing.</p>\n<p>-or-</p>\n<p>The entry has been deleted from the archive.</p>\n<p>-or-</p>\n<p>The archive for this entry was opened with the <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref> mode, and this entry has already been written to. </p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The entry is either missing from the archive or is corrupt and cannot be read. </p>\n<p>-or-</p>\n<p>The entry has been compressed by using a compression method that is not supported.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive for this entry has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchiveEntry.ToString
  commentId: M:System.IO.Compression.ZipArchiveEntry.ToString
  id: ToString
  parent: System.IO.Compression.ZipArchiveEntry
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.IO.Compression.ZipArchiveEntry.ToString()
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/ref/System.IO.Compression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.IO.Compression/ref/System.IO.Compression.cs
    startLine: 88
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Retrieves the relative path of the entry in the zip archive.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The relative path of the entry, which is the value stored in the <xref href=\"System.IO.Compression.ZipArchiveEntry.FullName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO.Compression
  isExternal: false
  name: System.IO.Compression
  fullName: System.IO.Compression
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Compression.ZipArchive
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchive
  fullName: System.IO.Compression.ZipArchive
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.InvalidDataException
  isExternal: false
  name: InvalidDataException
  fullName: System.IO.InvalidDataException
