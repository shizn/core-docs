items:
- uid: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute
  commentId: T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute
  id: RuntimeCompatibilityAttribute
  parent: System.Runtime.CompilerServices
  children:
  - System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor
  - System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows
  langs:
  - csharp
  - vb
  name: RuntimeCompatibilityAttribute
  fullName: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/RuntimeCompatibilityAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RuntimeCompatibilityAttribute
    path: src/mscorlib/src/System/Runtime/CompilerServices/RuntimeCompatibilityAttribute.cs
    startLine: 20
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Specifies whether to wrap exceptions that do not derive from the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class with a <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\" data-throw-if-not-resolved=\"false\"></xref> object. This class cannot be inherited.</p>\n"
  remarks: "\n<p>Some languages, such as C++, allow you to throw exceptions of any type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> in a <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>You can use the <xref href=\"System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.</p>\n<p>Note that the runtime still wraps exceptions even if you use the <xref href=\"System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.  </p>\n"
  example:
  - "\n<p>The following code example demonstrates how to apply the <xref href=\"System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to an assembly that throws a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object as an exception in C++ and catches it using a <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Runtime.CompilerServices.RuntimeWrappedException#1"
  syntax:
    content: >-
      [Serializable]

      [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]

      public sealed class RuntimeCompatibilityAttribute : Attribute, _Attribute
    content.vb: >-
      <Serializable>

      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False, AllowMultiple:=False)>

      Public NotInheritable Class RuntimeCompatibilityAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 1
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
    - name: AllowMultiple
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor
  commentId: M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor
  id: '#ctor'
  parent: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute
  langs:
  - csharp
  - vb
  name: RuntimeCompatibilityAttribute()
  fullName: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.RuntimeCompatibilityAttribute()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/RuntimeCompatibilityAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/CompilerServices/RuntimeCompatibilityAttribute.cs
    startLine: 28
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  example:
  - "\n<p>The following code example applies the <xref href=\"System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to an assembly to disable exception wrapping. </p>System.Runtime.CompilerServices.RuntimeCompatibilityAttribute#1"
  syntax:
    content: public RuntimeCompatibilityAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows
  commentId: P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows
  id: WrapNonExceptionThrows
  parent: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute
  langs:
  - csharp
  - vb
  name: WrapNonExceptionThrows
  fullName: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/RuntimeCompatibilityAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WrapNonExceptionThrows
    path: src/mscorlib/src/System/Runtime/CompilerServices/RuntimeCompatibilityAttribute.cs
    startLine: 38
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Gets or sets a value that indicates whether to wrap exceptions that do not derive from the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class with a <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following code example applies the <xref href=\"System.Runtime.CompilerServices.RuntimeCompatibilityAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to an assembly to disable exception wrapping. </p>System.Runtime.CompilerServices.RuntimeCompatibilityAttribute#1"
  syntax:
    content: public bool WrapNonExceptionThrows { get; set; }
    content.vb: Public Property WrapNonExceptionThrows As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
