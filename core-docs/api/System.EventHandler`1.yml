items:
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  id: EventHandler`1
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  type: Delegate
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventHandler
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 835
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the method that will handle an event when the event provides data. </p>\n"
  remarks: "\n<p>The event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: </p>\n<ul><li>\n<p>A delegate that refers to a method that provides the response to the event. </p>\n</li><li>\n<p>Optionally, a class that holds the event data, if the event provides data. </p>\n</li></ul>\n<p>The delegate is a type that defines a signature, that is, the return value type and parameter list types for a method. You can use the delegate type to declare a variable that can refer to any method with the same signature as the delegate. </p>\n<p>The standard signature of an event handler delegate defines a method that does not return a value. This method's first parameter is of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and refers to the instance that raises the event. Its second parameter is derived from type <xref href=\"System.EventArgs\" data-throw-if-not-resolved=\"false\"></xref> and holds the event data. If the event does not generate event data, the second parameter is simply the value of the <xref href=\"System.EventArgs.Empty\" data-throw-if-not-resolved=\"false\"></xref> field. Otherwise, the second parameter is a type derived from <xref href=\"System.EventArgs\" data-throw-if-not-resolved=\"false\"></xref> and supplies any fields or properties needed to hold the event data.</p>\n<p>The <xref href=\"System.EventHandler`1\" data-throw-if-not-resolved=\"false\"></xref> delegate is a predefined delegate that represents an event handler method for an event that generates data. The advantage of using <xref href=\"System.EventHandler`1\" data-throw-if-not-resolved=\"false\"></xref> is that you do not need to code your own custom delegate if your event generates event data. You simply provide the type of the event data object as the generic parameter. </p>\n<p>To associate the event with the method that will handle the event, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. </p>\n<p>For more information about event handler delegates, see Handling and Raising Events.</p>\n"
  example:
  - "\n<p>The following example shows an event named <code>ThresholdReached</code>. The event is associated with an <xref href=\"System.EventHandler`1\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>EventsOverview#6"
  syntax:
    content: public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e);
    content.vb: Public Delegate Sub EventHandler(Of TEventArgs)(sender As Object, e As TEventArgs)
    parameters:
    - id: sender
      type: System.Object
      description: "\n<p>The source of the event.</p>\n"
    - id: e
      type: '{TEventArgs}'
      description: "\n<p>An object that contains the event data. </p>\n"
    typeParameters:
    - id: TEventArgs
      description: "\n<p>The type of the event data generated by the event.</p>\n"
  seealso:
  - type: System.EventHandler
    commentId: T:System.EventHandler
  - type: System.EventArgs
    commentId: T:System.EventArgs
  - type: System.Delegate
    commentId: T:System.Delegate
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: '{TEventArgs}'
  isExternal: false
  name: TEventArgs
  fullName: TEventArgs
