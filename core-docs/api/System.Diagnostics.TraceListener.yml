items:
- uid: System.Diagnostics.TraceListener
  commentId: T:System.Diagnostics.TraceListener
  id: TraceListener
  parent: System.Diagnostics
  children:
  - System.Diagnostics.TraceListener.#ctor
  - System.Diagnostics.TraceListener.#ctor(System.String)
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  langs:
  - csharp
  - vb
  name: TraceListener
  fullName: System.Diagnostics.TraceListener
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceListener
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 16
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Provides the <strong>abstract</strong> base class for the listeners who monitor trace and debug output.</p>\n"
  remarks: "\n<p>For examples of how to implement a <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.Diagnostics.DefaultTraceListener\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.TextWriterTraceListener\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Diagnostics.EventLogTraceListener\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n<p>You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</p>\n<ul><li>\n<p>To enable debugging in C#, add the <strong>/d:DEBUG</strong> flag to the compiler command line when you compile your code, or you can add <strong>#define DEBUG</strong> to the top of your file. In Visual Basic, add the <strong>/d:DEBUG=True</strong> flag to the compiler command line.</p>\n</li><li>\n<p>To enable tracing in C#, add the <strong>/d:TRACE</strong> flag to the compiler command line when you compile your code, or add <strong>#define TRACE</strong> to the top of your file. In Visual Basic, add the <strong>/d:TRACE=True</strong> flag to the compiler command line.</p>\n</li></ul>\n<p>To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example. </p>\n<pre><code><configuration>\n<system.diagnostics>\n<trace autoflush=\"false\" indentsize=\"4\">\n<listeners>\n<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"TextWriterOutput.log\" />\n<remove name=\"Default\" />\n</listeners>\n</trace>\n</system.diagnostics>\n</configuration></code></pre>\n<p>For more information on using configuration files for tracing, see <system.diagnostics> Element.</p>\n"
  syntax:
    content: 'public abstract class TraceListener : IDisposable'
    content.vb: >-
      Public MustInherit Class TraceListener
          Implements IDisposable
  seealso:
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Diagnostics.TraceListener.#ctor
  commentId: M:System.Diagnostics.TraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 29
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Default Value </p>\n<table><tbody><tr><td>\n<p>Name </p>\n</td><td>\n<p>The empty string (\"\"). </p>\n</td></tr><tr><td>\n<p>Indent </p>\n</td><td>\n<p>Zero. </p>\n</td></tr><tr><td>\n<p>IndentSize </p>\n</td><td>\n<p>Four spaces. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: protected TraceListener()
    content.vb: Protected Sub New
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  commentId: M:System.Diagnostics.TraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 37
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class using the specified name as the listener.</p>\n"
  syntax:
    content: protected TraceListener(string name)
    content.vb: Protected Sub New(name As String)
    parameters:
    - id: name
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.TraceListener.Filter
  commentId: P:System.Diagnostics.TraceListener.Filter
  id: Filter
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Filter
  fullName: System.Diagnostics.TraceListener.Filter
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Filter
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 114
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets and sets the trace filter for the trace listener.</p>\n"
  remarks: "\n<p>A trace filter can be added to a trace listener to provide a layer of screening beyond that provided to the trace source by switches. For example, the <xref href=\"System.Diagnostics.EventTypeFilter\" data-throw-if-not-resolved=\"false\"></xref> can be added to a trace listener to control the event types that are output by the listener.  Listeners that are called because the switch criteria are met can query their filter, if present, to determine if a trace is to be sent to output.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Diagnostics.TraceListener.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to add a source filter to a console trace listener. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.TraceSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Diagnostics.TraceSource2#28"
  syntax:
    content: public TraceFilter Filter { get; set; }
    content.vb: Public Property Filter As TraceFilter
    parameters: []
    return:
      type: System.Diagnostics.TraceFilter
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceListener.IndentLevel
  commentId: P:System.Diagnostics.TraceListener.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndentLevel
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 83
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the indent level.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.TraceListener.IndentLevel\" data-throw-if-not-resolved=\"false\"></xref> property represents the number of times that the indent specified by the <xref href=\"System.Diagnostics.TraceListener.IndentSize\" data-throw-if-not-resolved=\"false\"></xref> property is applied. This property is stored on per-thread/per-request basis.</p>\n"
  syntax:
    content: public int IndentLevel { get; set; }
    content.vb: Public Property IndentLevel As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceListener.IndentSize
  commentId: P:System.Diagnostics.TraceListener.IndentSize
  id: IndentSize
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndentSize
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 99
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the number of spaces in an indent.</p>\n"
  remarks: "\n<p>The property is stored on per-thread/per-request basis.</p>\n"
  syntax:
    content: public int IndentSize { get; set; }
    content.vb: Public Property IndentSize As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Set operation failed because the value is less than zero.</p>\n"
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  commentId: P:System.Diagnostics.TraceListener.IsThreadSafe
  id: IsThreadSafe
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsThreadSafe
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 52
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value indicating whether the trace listener is thread safe. </p>\n"
  remarks: "\n<p>The value of <xref href=\"System.Diagnostics.TraceListener.IsThreadSafe\" data-throw-if-not-resolved=\"false\"></xref> is used to determine whether to use a global lock when writing to the listener. If the value of <xref href=\"System.Diagnostics.TraceListener.IsThreadSafe\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>, the global lock is used regardless of the value of <xref href=\"System.Diagnostics.Trace.UseGlobalLock\" data-throw-if-not-resolved=\"false\"></xref>. The global lock is not used only if the value of <xref href=\"System.Diagnostics.TraceListener.IsThreadSafe\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> and the value of <xref href=\"System.Diagnostics.Trace.UseGlobalLock\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. The default behavior is to use the global lock whenever writing to the listener.</p>\n"
  syntax:
    content: public virtual bool IsThreadSafe { get; }
    content.vb: Public Overridable ReadOnly Property IsThreadSafe As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Diagnostics.TraceListener.Name
  commentId: P:System.Diagnostics.TraceListener.Name
  id: Name
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Diagnostics.TraceListener.Name
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 45
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets a name for this <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The name can be used to organize and access listeners in a <xref href=\"System.Diagnostics.TraceListenerCollection\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public virtual string Name { get; set; }
    content.vb: Public Overridable Property Name As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.NeedIndent
  commentId: P:System.Diagnostics.TraceListener.NeedIndent
  id: NeedIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NeedIndent
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 130
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets a value indicating whether to indent the output.</p>\n"
  remarks: "\n<p>Note   The <xref href=\"System.Diagnostics.TraceListener.WriteIndent\" data-throw-if-not-resolved=\"false\"></xref> method, called by the <xref href=\"System.Diagnostics.DefaultTraceListener\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.TextWriterTraceListener\" data-throw-if-not-resolved=\"false\"></xref> classes, sets the <xref href=\"System.Diagnostics.TraceListener.NeedIndent\" data-throw-if-not-resolved=\"false\"></xref> property value to <strong>false</strong> to prevent later, unnecessary indents. You must set the <xref href=\"System.Diagnostics.TraceListener.NeedIndent\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong> each time you wish to indent trace output. </p>\n"
  syntax:
    content: protected bool NeedIndent { get; set; }
    content.vb: Protected Property NeedIndent As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  commentId: P:System.Diagnostics.TraceListener.TraceOutputOptions
  id: TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceOutputOptions
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 143
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the trace output options.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.TraceListener.TraceOutputOptions\" data-throw-if-not-resolved=\"false\"></xref> property determines the optional content of trace output. The property can be set in the configuration file or programmatically during execution to include additional data specifically for a section of code. For example, you can set the <xref href=\"System.Diagnostics.TraceListener.TraceOutputOptions\" data-throw-if-not-resolved=\"false\"></xref> property for the console trace listener to <xref href=\"System.Diagnostics.TraceOptions.Callstack\" data-throw-if-not-resolved=\"false\"></xref> to add call stack information to the trace output. </p>\n<p>The <xref href=\"System.Diagnostics.TraceOptions\" data-throw-if-not-resolved=\"false\"></xref> enumeration is not used by the following classes and methods:</p>\n<ul><li>\n<p>The <xref href=\"System.Diagnostics.EventLogTraceListener\" data-throw-if-not-resolved=\"false\"></xref> class, because it can cause a large volume of data to be written to the log. </p>\n</li><li>\n<p>The <strong>Write</strong> and <strong>WriteLine</strong> methods of the <xref href=\"System.Diagnostics.ConsoleTraceListener\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.DefaultTraceListener\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TextWriterTraceListener\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n</li><li>\n<p>The <see cref=\"Overload:System.Diagnostics.TraceListener.Write\"></see> and <see cref=\"Overload:System.Diagnostics.TraceListener.WriteLine\"></see> methods of the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class when they are not overridden in a derived class.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example shows the setting of the <xref href=\"System.Diagnostics.TraceListener.TraceOutputOptions\" data-throw-if-not-resolved=\"false\"></xref> property for a console trace listener. The console trace listener is one of the listeners enumerated in the <xref href=\"System.Diagnostics.TraceSource.Listeners\" data-throw-if-not-resolved=\"false\"></xref> property of a trace source. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.TraceSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Diagnostics.TraceSource2#16"
  syntax:
    content: public TraceOptions TraceOutputOptions { get; set; }
    content.vb: Public Property TraceOutputOptions As TraceOptions
    parameters: []
    return:
      type: System.Diagnostics.TraceOptions
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Set operation failed because the value is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceListener.Dispose
  commentId: M:System.Diagnostics.TraceListener.Dispose
  id: Dispose
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 59
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Releases all resources used by the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling <xref href=\"System.Diagnostics.TraceListener.Dispose\" data-throw-if-not-resolved=\"false\"></xref> allows the resources used by the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> to be reallocated for other purposes. For more information about <xref href=\"System.Diagnostics.TraceListener.Dispose\" data-throw-if-not-resolved=\"false\"></xref>, see Cleaning Up Unmanaged Resources.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  commentId: M:System.Diagnostics.TraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 67
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.Diagnostics.TraceListener.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose</strong> invokes the protected <xref href=\"System.Diagnostics.TraceListener.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  commentId: M:System.Diagnostics.TraceListener.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Fail
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 160
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Emits an error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The default behavior is to display the specified message in a message box when the application is running in a user-interface mode, and to the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> instances in a <xref href=\"System.Diagnostics.TraceListenerCollection\" data-throw-if-not-resolved=\"false\"></xref> collection. By default, the <xref href=\"System.Diagnostics.TraceListenerCollection\" data-throw-if-not-resolved=\"false\"></xref> collection has an instance of a <xref href=\"System.Diagnostics.DefaultTraceListener\" data-throw-if-not-resolved=\"false\"></xref>. You can customize this behavior by adding a <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> to or removing one from the collection.</p>\n"
  syntax:
    content: public virtual void Fail(string message)
    content.vb: Public Overridable Sub Fail(message As String)
    parameters:
    - id: message
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  commentId: M:System.Diagnostics.TraceListener.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Fail(String, String)
  fullName: System.Diagnostics.TraceListener.Fail(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Fail
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 168
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Emits an error message and a detailed error message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The default behavior is to display the message and detailed message in a message box when the application is running in a user-interface mode, and to the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> instances in a <xref href=\"System.Diagnostics.TraceListenerCollection\" data-throw-if-not-resolved=\"false\"></xref> collection. By default, the <xref href=\"System.Diagnostics.TraceListenerCollection\" data-throw-if-not-resolved=\"false\"></xref> collection has an instance of a <xref href=\"System.Diagnostics.DefaultTraceListener\" data-throw-if-not-resolved=\"false\"></xref>. You can customize this behavior by adding a <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> to or removing one from the collection.</p>\n"
  syntax:
    content: public virtual void Fail(string message, string detailMessage)
    content.vb: Public Overridable Sub Fail(message As String, detailMessage As String)
    parameters:
    - id: message
      type: System.String
    - id: detailMessage
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.Flush
  commentId: M:System.Diagnostics.TraceListener.Flush
  id: Flush
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 75
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>When overridden in a derived class, flushes the output buffer.</p>\n"
  syntax:
    content: public virtual void Flush()
    content.vb: Public Overridable Sub Flush
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  commentId: M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)
  fullName: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceData
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 309
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes trace information, a data object and event information to the listener specific output.</p>\n"
  remarks: "\n<p>This method is not intended to be called directly by application code but by members of the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSource\" data-throw-if-not-resolved=\"false\"></xref> classes to write trace data to output.</p>\n<p>The default implementation writes the <em>eventCache</em>, <em>source</em>, <em>eventType</em> and <em>id</em> parameters in the header and footer of the trace. The <em>data</em> parameter is written as the body of the trace message. The <strong>ToString</strong> method of the data object is used to convert the object to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data)
    content.vb: Public Overridable Sub TraceData(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
    - id: source
      type: System.String
    - id: eventType
      type: System.Diagnostics.TraceEventType
    - id: id
      type: System.Int32
    - id: data
      type: System.Object
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  commentId: M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceData
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 323
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes trace information, an array of data objects and event information to the listener specific output.</p>\n"
  remarks: "\n<p>This method is not intended to be called directly by application code but by members of the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSource\" data-throw-if-not-resolved=\"false\"></xref> classes to write trace data to output.</p>\n<p>The default implementation writes the values of the <em>source</em>, <em>eventType</em> and <em>id</em> parameters as a header. The data objects are converted to strings using the <strong>ToString</strong> method of each object. The <em>eventCache</em> data is written as a footer, the nature of the output data being dependent on the value of the <xref href=\"System.Diagnostics.TraceListener.TraceOutputOptions\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, params object[] data)
    content.vb: Public Overridable Sub TraceData(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
    - id: source
      type: System.String
    - id: eventType
      type: System.Diagnostics.TraceEventType
    - id: id
      type: System.Int32
    - id: data
      type: System.Object[]
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object())
  name.vb: TraceData(TraceEventCache, String, TraceEventType, Int32, Object())
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  commentId: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceEvent
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 347
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes trace and event information to the listener specific output.</p>\n"
  remarks: "\n<p>This method is not intended to be called directly by application code but by members of the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSource\" data-throw-if-not-resolved=\"false\"></xref> classes to write trace data to output.</p>\n<p>The default implementation writes the values of the <em>source</em>, <em>eventType</em> and <em>id</em> parameters as a header. The <em>eventCache</em> data is written as a footer, the nature of the output data being dependent on the value of the <xref href=\"System.Diagnostics.TraceListener.TraceOutputOptions\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id)
    content.vb: Public Overridable Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer)
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
    - id: source
      type: System.String
    - id: eventType
      type: System.Diagnostics.TraceEventType
    - id: id
      type: System.Int32
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  commentId: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceEvent
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 353
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes trace information, a message, and event information to the listener specific output.</p>\n"
  remarks: "\n<p>This method is not intended to be called directly by application code but by members of the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSource\" data-throw-if-not-resolved=\"false\"></xref> classes to write trace data to output.</p>\n<p>The default implementation writes the values of the <em>source</em>, <em>eventType</em> and <em>id</em> parameters as a header, followed by the <em>message</em> data. The <em>eventCache</em> data is written as a footer, the nature of the output data being dependent on the value of the <xref href=\"System.Diagnostics.TraceListener.TraceOutputOptions\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message)
    content.vb: Public Overridable Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
    - id: source
      type: System.String
    - id: eventType
      type: System.Diagnostics.TraceEventType
    - id: id
      type: System.Int32
    - id: message
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  commentId: M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TraceEvent
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 364
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes trace information, a formatted array of objects and event information to the listener specific output.</p>\n"
  remarks: "\n<p>This method is not intended to be called directly by application code but by members of the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.TraceSource\" data-throw-if-not-resolved=\"false\"></xref> classes to write trace data to output.</p>\n<p>The default implementation writes the values of the <em>source</em>, <em>eventType</em> and <em>id</em> parameters as a header. The <em>args</em> object array is converted to a string using the <xref href=\"System.String.Format(System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method, passing the <em>format</em> string and <em>args</em> array to format the string as the message portion of the trace. The <em>eventCache</em> data is written as a footer, the nature of the output data being dependent on the value of the <xref href=\"System.Diagnostics.TraceListener.TraceOutputOptions\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, params object[] args)
    content.vb: Public Overridable Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
    - id: source
      type: System.String
    - id: eventType
      type: System.Diagnostics.TraceEventType
    - id: id
      type: System.Int32
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object())
  name.vb: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object())
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  commentId: M:System.Diagnostics.TraceListener.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 193
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes the value of the object's <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public virtual void Write(object o)
    content.vb: Public Overridable Sub Write(o As Object)
    parameters:
    - id: o
      type: System.Object
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  commentId: M:System.Diagnostics.TraceListener.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Write(Object, String)
  fullName: System.Diagnostics.TraceListener.Write(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 223
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes a category name and the value of the object's <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public virtual void Write(object o, string category)
    content.vb: Public Overridable Sub Write(o As Object, category As String)
    parameters:
    - id: o
      type: System.Object
    - id: category
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.Write(System.String)
  commentId: M:System.Diagnostics.TraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Write(String)
  fullName: System.Diagnostics.TraceListener.Write(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 187
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>When overridden in a derived class, writes the specified message to the listener you create in the derived class.</p>\n"
  syntax:
    content: public abstract void Write(string message)
    content.vb: Public MustOverride Sub Write(message As String)
    parameters:
    - id: message
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  commentId: M:System.Diagnostics.TraceListener.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: Write(String, String)
  fullName: System.Diagnostics.TraceListener.Write(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 207
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes a category name and a message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public virtual void Write(string message, string category)
    content.vb: Public Overridable Sub Write(message As String, category As String)
    parameters:
    - id: message
      type: System.String
    - id: category
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.WriteIndent
  commentId: M:System.Diagnostics.TraceListener.WriteIndent
  id: WriteIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteIndent
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 239
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes the indent to the listener you create when you implement this class, and resets the <xref href=\"System.Diagnostics.TraceListener.NeedIndent\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong>.</p>\n"
  remarks: "\n<p>This method writes the indent and resets the <xref href=\"System.Diagnostics.TraceListener.NeedIndent\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong>. Call this method if <xref href=\"System.Diagnostics.TraceListener.NeedIndent\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> when you are overriding the <xref href=\"System.Diagnostics.TraceListener.Write(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.TraceListener.WriteLine(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods. By default, this method uses blank spaces for indentation. The size of the indent is determined by the values of the <xref href=\"System.Diagnostics.TraceListener.IndentSize\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.TraceListener.IndentLevel\" data-throw-if-not-resolved=\"false\"></xref> properties. The <xref href=\"System.Diagnostics.TraceListener.IndentLevel\" data-throw-if-not-resolved=\"false\"></xref> property represents the number of times the indent of the size specified by the <xref href=\"System.Diagnostics.TraceListener.IndentSize\" data-throw-if-not-resolved=\"false\"></xref> property is applied. This method is called by the <xref href=\"System.Diagnostics.DefaultTraceListener\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.TextWriterTraceListener\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n"
  syntax:
    content: protected virtual void WriteIndent()
    content.vb: Protected Overridable Sub WriteIndent
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 268
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes the value of the object's <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class, followed by a line terminator.</p>\n"
  remarks: "\n<p>The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).</p>\n"
  syntax:
    content: public virtual void WriteLine(object o)
    content.vb: Public Overridable Sub WriteLine(o As Object)
    parameters:
    - id: o
      type: System.Object
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: WriteLine(Object, String)
  fullName: System.Diagnostics.TraceListener.WriteLine(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 298
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes a category name and the value of the object's <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class, followed by a line terminator.</p>\n"
  remarks: "\n<p>The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).</p>\n"
  syntax:
    content: public virtual void WriteLine(object o, string category)
    content.vb: Public Overridable Sub WriteLine(o As Object, category As String)
    parameters:
    - id: o
      type: System.Object
    - id: category
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 261
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.</p>\n"
  remarks: "\n<p>The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).</p>\n"
  syntax:
    content: public abstract void WriteLine(string message)
    content.vb: Public MustOverride Sub WriteLine(message As String)
    parameters:
    - id: message
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  commentId: M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  - vb
  name: WriteLine(String, String)
  fullName: System.Diagnostics.TraceListener.WriteLine(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceListener.cs
    startLine: 281
  assemblies:
  - System.Diagnostics.TraceSource
  namespace: System.Diagnostics
  summary: "\n<p>Writes a category name and a message to the listener you create when you implement the <xref href=\"System.Diagnostics.TraceListener\" data-throw-if-not-resolved=\"false\"></xref> class, followed by a line terminator.</p>\n"
  remarks: "\n<p>The typical line terminator you might implement is a carriage return followed by a line feed (\\r\\n).</p>\n"
  syntax:
    content: public virtual void WriteLine(string message, string category)
    content.vb: Public Overridable Sub WriteLine(message As String, category As String)
    parameters:
    - id: message
      type: System.String
    - id: category
      type: System.String
  seealso:
  - type: System.Diagnostics.TraceListener
    commentId: T:System.Diagnostics.TraceListener
  - type: System.Diagnostics.DefaultTraceListener
    commentId: T:System.Diagnostics.DefaultTraceListener
  - type: System.Diagnostics.ConsoleTraceListener
    commentId: T:System.Diagnostics.ConsoleTraceListener
  - type: System.Diagnostics.EventLogTraceListener
    commentId: T:System.Diagnostics.EventLogTraceListener
  - type: System.Diagnostics.TextWriterTraceListener
    commentId: T:System.Diagnostics.TextWriterTraceListener
  - type: System.Diagnostics.Debug
    commentId: T:System.Diagnostics.Debug
  - type: System.Diagnostics.Trace
    commentId: T:System.Diagnostics.Trace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Diagnostics.TraceFilter
  parent: System.Diagnostics
  isExternal: false
  name: TraceFilter
  fullName: System.Diagnostics.TraceFilter
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.TraceOptions
  parent: System.Diagnostics
  isExternal: false
  name: TraceOptions
  fullName: System.Diagnostics.TraceOptions
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
