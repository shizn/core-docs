items:
- uid: System.Net.Security.NegotiateStream
  commentId: T:System.Net.Security.NegotiateStream
  id: NegotiateStream
  parent: System.Net.Security
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  langs:
  - csharp
  - vb
  name: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/InternalNegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegotiateStream
    path: src/System.Net.Security/src/System/Net/SecureProtocols/InternalNegotiateStream.cs
    startLine: 14
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: 'public class NegotiateStream : AuthenticatedStream'
    content.vb: >-
      Public Class NegotiateStream
          Inherits AuthenticatedStream
  inheritance:
  - System.Object
  - System.Net.Security.AuthenticatedStream
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  commentId: M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: NegotiateStream(IO.Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 31
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public NegotiateStream(IO.Stream innerStream)
    content.vb: Public Sub New(innerStream As IO.Stream)
    parameters:
    - id: innerStream
      type: System.IO.Stream
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  commentId: M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: NegotiateStream(IO.Stream, Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 32
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public NegotiateStream(IO.Stream innerStream, bool leaveInnerStreamOpen)
    content.vb: Public Sub New(innerStream As IO.Stream, leaveInnerStreamOpen As Boolean)
    parameters:
    - id: innerStream
      type: System.IO.Stream
    - id: leaveInnerStreamOpen
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Security.NegotiateStream.CanRead
  commentId: P:System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 351
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.CanSeek
  commentId: P:System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 343
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.CanTimeout
  commentId: P:System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanTimeout
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 359
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool CanTimeout { get; }
    content.vb: Public Overrides ReadOnly Property CanTimeout As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.CanWrite
  commentId: P:System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 367
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  commentId: P:System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImpersonationLevel
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 304
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual TokenImpersonationLevel ImpersonationLevel { get; }
    content.vb: Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel
    parameters: []
    return:
      type: TokenImpersonationLevel
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  commentId: P:System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAuthenticated
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 229
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool IsAuthenticated { get; }
    content.vb: Public Overrides ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Net.Security.AuthenticatedStream.IsAuthenticated
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  commentId: P:System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEncrypted
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 259
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool IsEncrypted { get; }
    content.vb: Public Overrides ReadOnly Property IsEncrypted As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Net.Security.AuthenticatedStream.IsEncrypted
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  commentId: P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMutuallyAuthenticated
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 244
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    content.vb: Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.IsServer
  commentId: P:System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsServer
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 289
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool IsServer { get; }
    content.vb: Public Overrides ReadOnly Property IsServer As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Net.Security.AuthenticatedStream.IsServer
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.IsSigned
  commentId: P:System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSigned
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 274
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override bool IsSigned { get; }
    content.vb: Public Overrides ReadOnly Property IsSigned As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Net.Security.AuthenticatedStream.IsSigned
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.Length
  commentId: P:System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 399
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.Position
  commentId: P:System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 407
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  commentId: P:System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadTimeout
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 375
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override int ReadTimeout { get; set; }
    content.vb: Public Overrides Property ReadTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  commentId: P:System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoteIdentity
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 319
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual IIdentity RemoteIdentity { get; }
    content.vb: Public Overridable ReadOnly Property RemoteIdentity As IIdentity
    parameters: []
    return:
      type: IIdentity
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  commentId: P:System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTimeout
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 387
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override int WriteTimeout { get; set; }
    content.vb: Public Overrides Property WriteTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsClientAsync
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 175
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Task AuthenticateAsClientAsync()
    content.vb: Public Overridable Function AuthenticateAsClientAsync As Task
    return:
      type: Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String)
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsClientAsync(NetworkCredential, String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsClientAsync
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 180
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Task AuthenticateAsClientAsync(NetworkCredential credential, string targetName)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, targetName As String) As Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: targetName
      type: System.String
    return:
      type: Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsClientAsync
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 50
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync(NetworkCredential credential, ChannelBinding binding, string targetName)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
    - id: targetName
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsClientAsync
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 51
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel allowedImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: targetName
      type: System.String
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsClientAsync
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 52
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync(NetworkCredential credential, ChannelBinding binding, string targetName, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel allowedImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
    - id: targetName
      type: System.String
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsServerAsync
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 206
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Task AuthenticateAsServerAsync()
    content.vb: Public Overridable Function AuthenticateAsServerAsync As Task
    return:
      type: Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsServerAsync
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 211
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Task AuthenticateAsServerAsync(ExtendedProtectionPolicy policy)
    content.vb: Public Overridable Function AuthenticateAsServerAsync(policy As ExtendedProtectionPolicy) As Task
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
    return:
      type: Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsServerAsync
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 55
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsServerAsync(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel requiredImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsServerAsync(credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  commentId: M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticateAsServerAsync
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 56
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsServerAsync(NetworkCredential credential, ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel requiredImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsServerAsync(credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.Security.NegotiateStream.Flush
  commentId: M:System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 429
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.Net.Security.NegotiateStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 460
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.Security.NegotiateStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, IO.SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 59
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override long Seek(long offset, IO.SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As IO.SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
    - id: origin
      type: System.IO.SeekOrigin
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  commentId: M:System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 419
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.Net.Security.NegotiateStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 479
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.Security.NegotiateStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
references:
- uid: System.Net.Security
  isExternal: false
  name: System.Net.Security
  fullName: System.Net.Security
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.Security.AuthenticatedStream
  parent: System.Net.Security
  isExternal: false
  name: AuthenticatedStream
  fullName: System.Net.Security.AuthenticatedStream
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: LeaveInnerStreamOpen
  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
- uid: System.Net.Security.AuthenticatedStream.InnerStream
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: InnerStream
  fullName: System.Net.Security.AuthenticatedStream.InnerStream
- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Security.AuthenticatedStream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Security.AuthenticatedStream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: false
  name: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsEncrypted
  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsMutuallyAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsServer
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsServer
  fullName: System.Net.Security.AuthenticatedStream.IsServer
- uid: System.Net.Security.AuthenticatedStream.IsSigned
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsSigned
  fullName: System.Net.Security.AuthenticatedStream.IsSigned
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: NetworkCredential
  isExternal: true
  name: NetworkCredential
  fullName: NetworkCredential
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: System.Security.Authentication.ExtendedProtection
  fullName: System.Security.Authentication.ExtendedProtection
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
