items:
- uid: System.Collections.Specialized.IOrderedDictionary
  commentId: T:System.Collections.Specialized.IOrderedDictionary
  id: IOrderedDictionary
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
  type: Interface
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IOrderedDictionary
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
    startLine: 15
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Represents an indexed collection of key/value pairs.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> elements can be accessed either with the key or with the index.</p>\n<p>Each element is a key/value pair stored in a <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n<p>Each pair must have a unique key that is not <strong>null</strong>, but the value can be <strong>null</strong> and does not have to be unique. The <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>For Each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Because each element of the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref>, as the following example shows. </p>System.Collections.Specialized.IOrderedDictionary_Implementation#03<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</p>"
  example:
  - "\n<p>The following code example demonstrates the implementation of a simple <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> based on the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class. The implemented <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> stores first names as the keys and last names as the values, with the added requirement that each first name is unique.</p>System.Collections.Specialized.IOrderedDictionary_Implementation#00"
  syntax:
    content: 'public interface IOrderedDictionary : IDictionary, ICollection, IEnumerable'
    content.vb: >-
      Public Interface IOrderedDictionary
          Inherits IDictionary
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  inheritedMembers:
  - System.Collections.IDictionary.Contains(System.Object)
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  - System.Collections.IDictionary.Clear
  - System.Collections.IDictionary.Remove(System.Object)
  - System.Collections.IDictionary.Item(System.Object)
  - System.Collections.IDictionary.Keys
  - System.Collections.IDictionary.Values
  - System.Collections.IDictionary.IsReadOnly
  - System.Collections.IDictionary.IsFixedSize
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  - System.Collections.ICollection.Count
  - System.Collections.ICollection.SyncRoot
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  commentId: P:System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.Specialized.IOrderedDictionary.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
    startLine: 21
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>This property allows you to access a specific element in the collection by using the following syntax: </p>System.Collections.Specialized.IOrderedDictionary_Implementation#04"
  example:
  - "\n<p>The following code example demonstrates the implementation of a simple <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> based on the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class. The implemented <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.Specialized.IOrderedDictionary_Implementation#01"
  syntax:
    content: object this[int index] { get; set; }
    content.vb: Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.ICollection.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.ICollection.Count
    commentId: P:System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  commentId: M:System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
    startLine: 24
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of a simple <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> based on the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class. The implemented <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.Specialized.IOrderedDictionary_Implementation#01"
  syntax:
    content: IDictionaryEnumerator GetEnumerator()
    content.vb: Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  commentId: M:System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  id: Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object, Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
    startLine: 30
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Inserts a key/value pair into the collection at the specified index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>If the <em>index</em> parameter is equal to <xref href=\"System.Collections.ICollection.Count\" data-throw-if-not-resolved=\"false\"></xref>, the <em>value</em> parameter is added to the end of the <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of a simple <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> based on the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class. The implemented <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.Specialized.IOrderedDictionary_Implementation#01"
  syntax:
    content: void Insert(int index, object key, object value)
    content.vb: Sub Insert(index As Integer, key As Object, value As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.ICollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection has a fixed size.</p>\n"
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  commentId: M:System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/IOrderedDictionary.cs
    startLine: 35
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the element at the specified index.</p>\n"
  remarks: "\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped together, such as a hash table.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of a simple <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> based on the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class. The implemented <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Collections.Specialized.IOrderedDictionary_Implementation#01"
  syntax:
    content: void RemoveAt(int index)
    content.vb: Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.ICollection.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.Specialized.IOrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection has a fixed size. </p>\n"
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
