items:
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  id: DataTable
  parent: System.Data
  children: []
  langs:
  - csharp
  - vb
  name: DataTable
  fullName: System.Data.DataTable
  type: Class
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/DataTable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataTable
    path: src/System.Data.Common/src/System/Data/DataTable.cs
    startLine: 9
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Represents one table of in-memory data.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> is a central object in the ADO.NET library. Other objects that use the <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> include the <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Data.DataView\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When accessing <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> objects, note that they are conditionally case sensitive. For example, if one <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> is named \"mydatatable\" and another is named \"Mydatatable\", a string used to search for one of the tables is regarded as case sensitive. However, if \"mydatatable\" exists and \"Mydatatable\" does not, the search string is regarded as case insensitive. A <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> can contain two <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> objects that have the same <xref href=\"System.Data.DataTable.TableName\" data-throw-if-not-resolved=\"false\"></xref> property value but different <xref href=\"System.Data.DataTable.Namespace\" data-throw-if-not-resolved=\"false\"></xref> property values. For more information about working with <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> objects, see Creating a DataTable.</p>\n<p>If you are creating a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> programmatically, you must first define its schema by adding <xref href=\"System.Data.DataColumn\" data-throw-if-not-resolved=\"false\"></xref> objects to the <xref href=\"System.Data.DataColumnCollection\" data-throw-if-not-resolved=\"false\"></xref> (accessed through the <xref href=\"System.Data.DataTable.Columns\" data-throw-if-not-resolved=\"false\"></xref> property). For more information about adding <xref href=\"System.Data.DataColumn\" data-throw-if-not-resolved=\"false\"></xref> objects, see Adding Columns to a DataTable.</p>\n<p>To add rows to a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>, you must first use the <xref href=\"System.Data.DataTable.NewRow\" data-throw-if-not-resolved=\"false\"></xref> method to return a new <xref href=\"System.Data.DataRow\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Data.DataTable.NewRow\" data-throw-if-not-resolved=\"false\"></xref> method returns a row with the schema of the <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>, as it is defined by the table's <xref href=\"System.Data.DataColumnCollection\" data-throw-if-not-resolved=\"false\"></xref>. The maximum number of rows that a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> can store is 16,777,216. For more information, see Adding Data to a DataTable.</p>\n<p>The <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> also contains a collection of <xref href=\"System.Data.Constraint\" data-throw-if-not-resolved=\"false\"></xref> objects that can be used to ensure the integrity of the data. For more information, see DataTable Constraints.</p>\n<p>There are many <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> events that can be used to determine when changes are made to a table. These include <xref href=\"System.Data.DataTable.RowChanged\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.DataTable.RowChanging\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.DataTable.RowDeleting\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.DataTable.RowDeleted\" data-throw-if-not-resolved=\"false\"></xref>. For more information about the events that can be used with a <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref>, see Handling DataTable Events.</p>\n<p>When an instance of <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> is created, some of the read/write properties are set to initial values. For a list of these values, see the <xref href=\"System.Data.DataTable.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor topic.</p>\n<p>The <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> objects inherit from <xref href=\"System.ComponentModel.MarshalByValueComponent\" data-throw-if-not-resolved=\"false\"></xref>, and support the <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface for .NET Framework remoting. These are the only ADO.NET objects that you can use for .NET Framework remoting.</p>\n"
  example:
  - "\n<p>The following example creates two <xref href=\"System.Data.DataTable\" data-throw-if-not-resolved=\"false\"></xref> objects and one <xref href=\"System.Data.DataRelation\" data-throw-if-not-resolved=\"false\"></xref> object, and adds the new objects to a <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref>. The tables are then displayed in a <xref href=\"System.Windows.Forms.DataGridView\" data-throw-if-not-resolved=\"false\"></xref> control.</p>Classic WebData DataTable Example#1"
  - "\n<p>This sample demonstrates how to create a DataTable manually with specific schema definitions:</p>\n<ul><li>\n<p>Create multiple DataTables and define the initial columns.</p>\n</li><li>\n<p>Create the table constraints.</p>\n</li><li>\n<p>Insert the values and display the tables.</p>\n</li><li>\n<p>Create the expression columns and display the tables.</p>\n</li></ul>\n<p>C# and Visual Basic projects with this code sample can be found on <see href=\"http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914\">Developer Code Samples</see>.</p>Classic WebData DataTable Example2#1"
  syntax:
    content: public class DataTable
    content.vb: Public Class DataTable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
