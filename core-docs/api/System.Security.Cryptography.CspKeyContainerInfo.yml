items:
- uid: System.Security.Cryptography.CspKeyContainerInfo
  commentId: T:System.Security.Cryptography.CspKeyContainerInfo
  id: CspKeyContainerInfo
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.CspKeyContainerInfo.Accessible
  - System.Security.Cryptography.CspKeyContainerInfo.Exportable
  - System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice
  - System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName
  - System.Security.Cryptography.CspKeyContainerInfo.KeyNumber
  - System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore
  - System.Security.Cryptography.CspKeyContainerInfo.Protected
  - System.Security.Cryptography.CspKeyContainerInfo.ProviderName
  - System.Security.Cryptography.CspKeyContainerInfo.ProviderType
  - System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated
  - System.Security.Cryptography.CspKeyContainerInfo.Removable
  - System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName
  langs:
  - csharp
  - vb
  name: CspKeyContainerInfo
  fullName: System.Security.Cryptography.CspKeyContainerInfo
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CspKeyContainerInfo
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 10
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Provides additional information about a cryptographic key pair. This class cannot be inherited.</p>\n"
  remarks: "\n<p>Use this class to obtain additional information about a key pair, such as the key container name or the key number.</p>\n<p>In cases where a random key is generated by the <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>, a key container will not be created until you call a method that uses the key.  Some properties of the <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> class will throw a <xref href=\"System.Security.Cryptography.CryptographicException\" data-throw-if-not-resolved=\"false\"></xref> if a key container has not been created.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: 'public sealed class CspKeyContainerInfo : object'
    content.vb: >-
      Public NotInheritable Class CspKeyContainerInfo
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)
  commentId: M:System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: CspKeyContainerInfo(CspParameters)
  fullName: System.Security.Cryptography.CspKeyContainerInfo.CspKeyContainerInfo(System.Security.Cryptography.CspParameters)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 12
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> class using the specified parameters.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public CspKeyContainerInfo(CspParameters parameters)
    content.vb: Public Sub New(parameters As CspParameters)
    parameters:
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "\n<p>A <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> object that provides information about the key.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspKeyContainerInfo.Accessible
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Accessible
  id: Accessible
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: Accessible
  fullName: System.Security.Cryptography.CspKeyContainerInfo.Accessible
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Accessible
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 13
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether a key in a key container is accessible.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public bool Accessible { get; }
    content.vb: Public ReadOnly Property Accessible As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key is accessible; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The key type is not supported.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.Exportable
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Exportable
  id: Exportable
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: Exportable
  fullName: System.Security.Cryptography.CspKeyContainerInfo.Exportable
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exportable
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 14
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether a key can be exported from a key container.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public bool Exportable { get; }
    content.vb: Public ReadOnly Property Exportable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key can be exported; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The key type is not supported.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider cannot be found.</p>\n<p>-or-</p>\n<p>The key container was not found.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice
  id: HardwareDevice
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: HardwareDevice
  fullName: System.Security.Cryptography.CspKeyContainerInfo.HardwareDevice
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HardwareDevice
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 15
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether a key is a hardware key.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public bool HardwareDevice { get; }
    content.vb: Public ReadOnly Property HardwareDevice As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key is a hardware key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider cannot be found.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName
  id: KeyContainerName
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: KeyContainerName
  fullName: System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyContainerName
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a key container name.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public string KeyContainerName { get; }
    content.vb: Public ReadOnly Property KeyContainerName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The key container name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.KeyNumber
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber
  id: KeyNumber
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: KeyNumber
  fullName: System.Security.Cryptography.CspKeyContainerInfo.KeyNumber
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyNumber
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value that describes whether an asymmetric key was created as a signature key or an exchange key.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.Security.Cryptography.CspKeyContainerInfo.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> property is derived from the <xref href=\"System.Security.Cryptography.CspParameters.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> field of the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> object that was used to initialize the <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> object.  </p>\n<p>An exchange key is an asymmetric key pair used to encrypt session keys so that they can be safely stored and exchanged with other users.  The <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> value specifies an exchange key.  This value corresponds to the <em>AT_KEYEXCHANGE</em> value used in the unmanaged Microsoft Cryptographic API (CAPI).  </p>\n<p>A signature key is an asymmetric key pair used for authenticating (digitally signed) messages or files.  The <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> value specifies a signature key.  This value corresponds to the <em>AT_SIGNATURE</em> value used in CAPI.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public KeyNumber KeyNumber { get; }
    content.vb: Public ReadOnly Property KeyNumber As KeyNumber
    parameters: []
    return:
      type: System.Security.Cryptography.KeyNumber
      description: "\n<p>One of the <xref href=\"System.Security.Cryptography.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> values that describes whether an asymmetric key was created as a signature key or an exchange key.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore
  id: MachineKeyStore
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: MachineKeyStore
  fullName: System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MachineKeyStore
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 18
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether a key is from a machine key set.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public bool MachineKeyStore { get; }
    content.vb: Public ReadOnly Property MachineKeyStore As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key is from the machine key set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.Protected
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Protected
  id: Protected
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: Protected
  fullName: System.Security.Cryptography.CspKeyContainerInfo.Protected
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Protected
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 19
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether a key pair is protected.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public bool Protected { get; }
    content.vb: Public ReadOnly Property Protected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key pair is protected; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The key type is not supported.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider cannot be found.</p>\n<p>-or-</p>\n<p>The key container was not found.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.ProviderName
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.ProviderName
  id: ProviderName
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: ProviderName
  fullName: System.Security.Cryptography.CspKeyContainerInfo.ProviderName
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProviderName
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 20
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the provider name of a key.</p>\n"
  remarks: "\n<p>This property specifies the cryptographic service provider that created the key.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public string ProviderName { get; }
    content.vb: Public ReadOnly Property ProviderName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The provider name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.ProviderType
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.ProviderType
  id: ProviderType
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: ProviderType
  fullName: System.Security.Cryptography.CspKeyContainerInfo.ProviderType
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProviderType
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 21
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the provider type of a key.</p>\n"
  remarks: "\n<p>Valid values are determined by the cryptographic service provider used to create the key. Cryptographic service providers are generally organized into groups or families, each of which has its own set of data formats and processes. Two families that use the same algorithm, such as the RC2 block cipher, often use different padding schemes, different key lengths, and different default modes.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public int ProviderType { get; }
    content.vb: Public ReadOnly Property ProviderType As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The provider type. The default is 1.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated
  id: RandomlyGenerated
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: RandomlyGenerated
  fullName: System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RandomlyGenerated
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 22
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether a key container was randomly generated by a managed cryptography class.</p>\n"
  remarks: "\n<p>Usually, when a randomly generated key container is created, the key container is named \"CLR{<em>guid value</em>}.\"</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public bool RandomlyGenerated { get; }
    content.vb: Public ReadOnly Property RandomlyGenerated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key container was randomly generated; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.Removable
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.Removable
  id: Removable
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: Removable
  fullName: System.Security.Cryptography.CspKeyContainerInfo.Removable
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Removable
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 23
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether a key can be removed from a key container.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public bool Removable { get; }
    content.vb: Public ReadOnly Property Removable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key is removable; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider (CSP) was not found.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName
  commentId: P:System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName
  id: UniqueKeyContainerName
  parent: System.Security.Cryptography.CspKeyContainerInfo
  langs:
  - csharp
  - vb
  name: UniqueKeyContainerName
  fullName: System.Security.Cryptography.CspKeyContainerInfo.UniqueKeyContainerName
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UniqueKeyContainerName
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 24
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a unique key container name.</p>\n"
  example:
  - "\n<p>The following code example creates a key container and retrieves information about that container.</p>Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1"
  syntax:
    content: public string UniqueKeyContainerName { get; }
    content.vb: Public ReadOnly Property UniqueKeyContainerName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The unique key container name.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The key type is not supported.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The cryptographic service provider cannot be found.</p>\n<p>-or-</p>\n<p>The key container was not found.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.KeyNumber
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyNumber
  fullName: System.Security.Cryptography.KeyNumber
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
