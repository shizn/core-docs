items:
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  commentId: T:System.Security.AccessControl.EventWaitHandleAccessRule
  id: EventWaitHandleAccessRule
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  langs:
  - csharp
  - vb
  name: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
  type: Class
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventWaitHandleAccessRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 10
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system events. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Windows access control security is meaningful only for named system events. If an <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object represents a local event, access control is irrelevant.</p>\n<p>To get a list of the rules currently applied to a named event, use the <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and then use its <xref href=\"System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a collection of <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n<p>\n<xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all access rules for an event, the set contains the minimum number of rules currently required to express all the access control entries. </p>\n<p>The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you get the current list of rules, it might not look exactly like the list of all the rules you have added.</p>\n<p>Use <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects to specify the access rights to allow or deny to a user or group. An <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object always represents either allowed access or denied access, never both.</p>\n<p>To apply a rule to a named system event, use the <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. Modify the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object by using its methods to add the rule, and then use the <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to reattach the security object.</p>\n<p>Changes you make to an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object do not affect the access levels of the named event until you call the <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to assign the altered security object to the named event.</p>\n<p>\n<xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable. Security for an event is modified using the methods of the <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> class to add or remove rules; as you do this, the underlying access control entries are modified. </p>\n<p>Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the creation and use of <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects. The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref>rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1"
  syntax:
    content: 'public sealed class EventWaitHandleAccessRule : AccessRule'
    content.vb: >-
      Public NotInheritable Class EventWaitHandleAccessRule
          Inherits AccessRule
  seealso:
  - type: System.Security.AccessControl.EventWaitHandleSecurity
    commentId: T:System.Security.AccessControl.EventWaitHandleSecurity
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  - vb
  name: EventWaitHandleAccessRule(Principal.IdentityReference, EventWaitHandleRights, AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(System.Security.Principal.IdentityReference, System.Security.AccessControl.EventWaitHandleRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 13
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>To wait on an <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> (by calling the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see>, <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> method), a user must have <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> access. To signal an event by calling the <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method, or to reset it to the unsignaled state by calling the <xref href=\"System.Threading.EventWaitHandle.Reset\" data-throw-if-not-resolved=\"false\"></xref> method, a user must have <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Modify\" data-throw-if-not-resolved=\"false\"></xref> access. To signal an <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object and then wait on it by calling the <see cref=\"Overload:System.Threading.WaitHandle.SignalAndWait\"></see> method, a user must have <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Modify\" data-throw-if-not-resolved=\"false\"></xref> access.</p>\n"
  syntax:
    content: public EventWaitHandleAccessRule(Principal.IdentityReference identity, EventWaitHandleRights eventRights, AccessControlType type)
    content.vb: Public Sub New(identity As Principal.IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the rights allowed or denied.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>eventRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>eventRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  - vb
  name: EventWaitHandleAccessRule(String, EventWaitHandleRights, AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(System.String, System.Security.AccessControl.EventWaitHandleRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 14
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>To wait on an <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> (by calling the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see>, <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> method), a user must have <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> access. To signal an event by calling the <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method, or to reset it to the unsignaled state by calling the <xref href=\"System.Threading.EventWaitHandle.Reset\" data-throw-if-not-resolved=\"false\"></xref> method, a user must have <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Modify\" data-throw-if-not-resolved=\"false\"></xref> access. To signal an <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object and then wait on it by calling the <see cref=\"Overload:System.Threading.WaitHandle.SignalAndWait\"></see> method, a user must have <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.EventWaitHandleRights.Modify\" data-throw-if-not-resolved=\"false\"></xref> access.</p>\n<p>This constructor is equivalent to creating an <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object, by passing <em>identity</em> to the <xref href=\"System.Security.Principal.NTAccount.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and passing the newly created <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of this constructor to create <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects. The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref>rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1"
  syntax:
    content: public EventWaitHandleAccessRule(string identity, EventWaitHandleRights eventRights, AccessControlType type)
    content.vb: Public Sub New(identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)
    parameters:
    - id: identity
      type: System.String
      description: "\n<p>The name of the user or group the rule applies to.</p>\n"
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the rights allowed or denied.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>eventRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is a zero-length string.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is longer than 512 characters.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  commentId: P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  id: EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  - vb
  name: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  type: Property
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventWaitHandleRights
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 15
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the rights allowed or denied by the access rule.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref>, but you cannot modify an existing access rule.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights\" data-throw-if-not-resolved=\"false\"></xref> property to display the rights in the set of rules contained in an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. The example creates an <xref href=\"System.Security.AccessControl.EventWaitHandleSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref>rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.EventWaitHandle.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1"
  syntax:
    content: public EventWaitHandleRights EventWaitHandleRights { get; }
    content.vb: Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights
    parameters: []
    return:
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\" data-throw-if-not-resolved=\"false\"></xref> values indicating the rights allowed or denied by the access rule.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
