items:
- uid: System.Net.WebUtility
  commentId: T:System.Net.WebUtility
  id: WebUtility
  parent: System.Net
  children:
  - System.Net.WebUtility.HtmlDecode(System.String)
  - System.Net.WebUtility.HtmlEncode(System.String)
  - System.Net.WebUtility.UrlDecode(System.String)
  - System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)
  - System.Net.WebUtility.UrlEncode(System.String)
  - System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: WebUtility
  fullName: System.Net.WebUtility
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WebUtility
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 640
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Net
  summary: "\n<p>Provides methods for encoding and decoding URLs when processing Web requests. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Web.HttpUtility\" data-throw-if-not-resolved=\"false\"></xref> class contains encoding and decoding utility methods for use with HTML-encode strings. The <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> class also contains methods and properties that can be used for similar purposes.</p>\n"
  example:
  - 
  syntax:
    content: public class WebUtility
    content.vb: Public Class WebUtility
  seealso:
  - type: System.Uri
    commentId: T:System.Uri
  - type: System.Web.HttpUtility
    commentId: T:System.Web.HttpUtility
  - type: System.Web.HttpServerUtility
    commentId: T:System.Web.HttpServerUtility
  - type: System.Web.HttpContext.Server
    commentId: P:System.Web.HttpContext.Server
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.WebUtility.HtmlDecode(System.String)
  commentId: M:System.Net.WebUtility.HtmlDecode(System.String)
  id: HtmlDecode(System.String)
  parent: System.Net.WebUtility
  langs:
  - csharp
  - vb
  name: HtmlDecode(String)
  fullName: System.Net.WebUtility.HtmlDecode(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HtmlDecode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 642
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Net
  summary: "\n<p>Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.</p>\n"
  remarks: "\n<p>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end. HTML encoding converts characters that are not allowed in HTML into character-entity equivalents; HTML decoding reverses the encoding. For example, when embedded in a block of text, the characters < and > are encoded as &lt; and &gt; for HTTP transmission.</p>\n<p>If the <em>value</em> parameter is <strong>null</strong>, then the returned decoded string is <strong>null</strong>. If the <em>value</em> parameter is an empty string, then the returned decoded string is an empty string.</p>\n"
  example:
  - 
  syntax:
    content: public static string HtmlDecode(string value)
    content.vb: Public Shared Function HtmlDecode(value As String) As String
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to decode.</p>\n"
    return:
      type: System.String
      description: "\n<p>A decoded string.</p>\n"
  seealso:
  - type: System.Net.WebUtility.HtmlEncode(System.String)
    commentId: M:System.Net.WebUtility.HtmlEncode(System.String)
  - type: System.Web.HttpUtility.HtmlEncode(System.String)
    commentId: M:System.Web.HttpUtility.HtmlEncode(System.String)
  - type: System.Uri
    commentId: T:System.Uri
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebUtility.HtmlEncode(System.String)
  commentId: M:System.Net.WebUtility.HtmlEncode(System.String)
  id: HtmlEncode(System.String)
  parent: System.Net.WebUtility
  langs:
  - csharp
  - vb
  name: HtmlEncode(String)
  fullName: System.Net.WebUtility.HtmlEncode(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HtmlEncode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 643
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Net
  summary: "\n<p>Converts a string to an HTML-encoded string.</p>\n"
  remarks: "\n<p>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end. HTML encoding converts characters that are not allowed in HTML into character-entity equivalents; HTML decoding reverses the encoding. For example, when embedded in a block of text, the characters < and > are encoded as &lt; and &gt; for HTTP transmission.</p>\n<p>If the <em>value</em> parameter is <strong>null</strong>, then the returned encoded string is <strong>null</strong>. If the <em>value</em> parameter is an empty string, then the returned encoded string is an empty string.</p>\n"
  example:
  - 
  syntax:
    content: public static string HtmlEncode(string value)
    content.vb: Public Shared Function HtmlEncode(value As String) As String
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to encode.</p>\n"
    return:
      type: System.String
      description: "\n<p>An encoded string.</p>\n"
  seealso:
  - type: System.Net.WebUtility.HtmlDecode(System.String)
    commentId: M:System.Net.WebUtility.HtmlDecode(System.String)
  - type: System.Web.HttpUtility.HtmlDecode(System.String)
    commentId: M:System.Web.HttpUtility.HtmlDecode(System.String)
  - type: System.Uri
    commentId: T:System.Uri
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebUtility.UrlDecode(System.String)
  commentId: M:System.Net.WebUtility.UrlDecode(System.String)
  id: UrlDecode(System.String)
  parent: System.Net.WebUtility
  langs:
  - csharp
  - vb
  name: UrlDecode(String)
  fullName: System.Net.WebUtility.UrlDecode(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UrlDecode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 644
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Net
  summary: "\n<p>Converts a string that has been encoded for transmission in a URL into a decoded string.</p>\n"
  remarks: "\n<p>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters that are not allowed in a URL into equivalent hexadecimal escape sequences. The <xref href=\"System.Net.WebUtility.UrlEncode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method creates a URL-encoded string.</p>\n<p>URL decoding replaces hexadecimal escape sequences with corresponding ASCII character equivalents. For example, when embedded in a block of URL-encoded text, the escape sequences <code>%3c</code> and <code>%3e</code> are decoded into the characters <code><</code> and <code>></code>.</p>\n"
  syntax:
    content: public static string UrlDecode(string encodedValue)
    content.vb: Public Shared Function UrlDecode(encodedValue As String) As String
    parameters:
    - id: encodedValue
      type: System.String
      description: "\n<p>A URL-encoded string to decode.</p>\n"
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A decoded string.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)
  id: UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.WebUtility
  langs:
  - csharp
  - vb
  name: UrlDecodeToBytes(Byte[], Int32, Int32)
  fullName: System.Net.WebUtility.UrlDecodeToBytes(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UrlDecodeToBytes
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 645
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Net
  summary: "\n<p>Converts an encoded byte array that has been encoded for transmission in a URL into a decoded byte array.</p>\n"
  remarks: "\n<p>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end. URL encoding converts characters that are not allowed in a URL into equivalent hexadecimal escape sequences. The <xref href=\"System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method creates a URL-encoded byte array.</p>\n<p>URL decoding replaces hexadecimal escape sequences with corresponding ASCII character equivalents. For example, when embedded in a block of URL-encoded text, the escape sequences <code>%3c</code> and <code>%3e</code> are decoded into the characters <code><</code> and <code>></code>.</p>\n"
  syntax:
    content: public static byte[] UrlDecodeToBytes(byte[] encodedValue, int offset, int count)
    content.vb: Public Shared Function UrlDecodeToBytes(encodedValue As Byte(), offset As Integer, count As Integer) As Byte()
    parameters:
    - id: encodedValue
      type: System.Byte[]
      description: "\n<p>A URL-encoded <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array to decode.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset, in bytes, from the start of the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array to decode.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The count, in bytes, to decode from the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>Returns <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A decoded <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Net.WebUtility.UrlDecodeToBytes(System.Byte(), System.Int32, System.Int32)
  name.vb: UrlDecodeToBytes(Byte(), Int32, Int32)
- uid: System.Net.WebUtility.UrlEncode(System.String)
  commentId: M:System.Net.WebUtility.UrlEncode(System.String)
  id: UrlEncode(System.String)
  parent: System.Net.WebUtility
  langs:
  - csharp
  - vb
  name: UrlEncode(String)
  fullName: System.Net.WebUtility.UrlEncode(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UrlEncode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 646
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Net
  summary: "\n<p>Converts a text string into a URL-encoded string.</p>\n"
  remarks: "\n<p>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end. URL encoding replaces characters that are not allowed in a URL with character-entity equivalents consisting of hexadecimal escape sequences. The converted string is expected to conform to the UTF-8 format.</p>\n<p>URL encoding replaces all character codes except for letters, numbers, and the following punctuation characters: </p>\n<ul><li>\n<p>\n<code>-</code> (minus sign<code>)</code></p>\n</li><li>\n<p>\n<code>_</code> (underscore<code>)</code></p>\n</li><li>\n<p>\n<code>.</code> (period<code>)</code></p>\n</li><li>\n<p>\n<code>!</code> (exclamation point<code>)</code></p>\n</li><li>\n<p>* (asterisk)</p>\n</li><li>\n<p>\n<code>(</code> and <code>)</code> (opening and closing parentheses)</p>\n</li></ul>\n<p>For example, when embedded in a block of text to be transmitted in a URL, the characters <code><</code> and <code>></code> are encoded as <code>%3c</code> and <code>%3e</code>.</p>\n<p>The <xref href=\"System.Net.WebUtility.UrlDecode(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method reverses the encoding.</p>\n"
  syntax:
    content: public static string UrlEncode(string value)
    content.vb: Public Shared Function UrlEncode(value As String) As String
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The text to URL-encode.</p>\n"
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A URL-encoded string.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)
  id: UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.WebUtility
  langs:
  - csharp
  - vb
  name: UrlEncodeToBytes(Byte[], Int32, Int32)
  fullName: System.Net.WebUtility.UrlEncodeToBytes(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UrlEncodeToBytes
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 647
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Net
  summary: "\n<p>Converts a byte array into a URL-encoded byte array.</p>\n"
  remarks: "\n<p>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end. URL encoding replaces characters that are not allowed in a URL with character-entity equivalents consisting of hexadecimal escape sequences. The converted string is expected to conform to the UTF-8 format.</p>\n<p>URL encoding replaces all character codes except for letters, numbers, and the following punctuation characters: </p>\n<ul><li>\n<p>\n<code>-</code> (minus sign<code>)</code></p>\n</li><li>\n<p>\n<code>_</code> (underscore<code>)</code></p>\n</li><li>\n<p>\n<code>.</code> (period<code>)</code></p>\n</li><li>\n<p>\n<code>!</code> (exclamation point<code>)</code></p>\n</li><li>\n<p>* (asterisk)</p>\n</li><li>\n<p>\n<code>'</code>\n<code>(</code>single quotation mark)</p>\n</li><li>\n<p>\n<code>(</code> and <code>)</code> (opening and closing parentheses)</p>\n</li></ul>\n<p>For example, when embedded in a block of text to be transmitted in a URL, the characters <code><</code> and <code>></code> are encoded as <code>%3c</code> and <code>%3e</code>.</p>\n<p>The <xref href=\"System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method reverses the encoding.</p>\n"
  syntax:
    content: public static byte[] UrlEncodeToBytes(byte[] value, int offset, int count)
    content.vb: Public Shared Function UrlEncodeToBytes(value As Byte(), offset As Integer, count As Integer) As Byte()
    parameters:
    - id: value
      type: System.Byte[]
      description: "\n<p>The <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array to URL-encode.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset, in bytes, from the start of the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array to encode.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The count, in bytes, to encode from the <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>Returns <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An encoded <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Net.WebUtility.UrlEncodeToBytes(System.Byte(), System.Int32, System.Int32)
  name.vb: UrlEncodeToBytes(Byte(), Int32, Int32)
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
