items:
- uid: System.Security.AccessControl.RegistrySecurity
  commentId: T:System.Security.AccessControl.RegistrySecurity
  id: RegistrySecurity
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.RegistrySecurity.#ctor
  - System.Security.AccessControl.RegistrySecurity.AccessRightType
  - System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistrySecurity.AccessRuleType
  - System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.RegistrySecurity.AuditRuleType
  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  langs:
  - csharp
  - vb
  name: RegistrySecurity
  fullName: System.Security.AccessControl.RegistrySecurity
  type: Class
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegistrySecurity
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 86
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents the Windows access control security for a registry key. This class cannot be inherited.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object specifies access rights for a registry key, and also specifies how access attempts are audited. Access rights to the registry key are expressed as rules, with each access rule represented by a <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object. Each auditing rule is represented by a <xref href=\"System.Security.AccessControl.RegistryAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.AccessControl.RegistryAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object might represent more than one ACE.</p>\n<p>Windows access control security can only be applied to registry keys. It cannot be applied to individual key/value pairs stored in a key. </p>\n<p>The <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.AccessControl.RegistryAuditRule\" data-throw-if-not-resolved=\"false\"></xref> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:</p>\n<ul><li>\n<p>Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object always starts with an empty DACL, which denies all access for all users.</p>\n</li><li>\n<p>Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> objects maintain the correct order internally. </p>\n</li><li>\n<p>Manipulating security descriptor flags, which should be under resource manager control only. </p>\n</li><li>\n<p>Creating invalid combinations of ACE flags.</p>\n</li><li>\n<p>Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules. </p>\n</li><li>\n<p>Inserting meaningless ACEs into ACLs.</p>\n</li></ul>\n<p>The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:</p>\n<ul><li>\n<p>Low-level tasks that are normally performed by the resource manager.</p>\n</li><li>\n<p>Adding or removing access control entries in ways that do not maintain the canonical ordering. </p>\n</li></ul>\n<p>To modify Windows access control security for a registry key, use the <xref href=\"Microsoft.Win32.RegistryKey.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object. Modify the security object by adding and removing rules, and then use the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to reattach it. </p>\n<p>Changes you make to a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object do not affect the access levels of the registry key until you call the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to assign the altered security object to the registry key.</p>\n<p>To copy access control security from one registry key to another, use the <xref href=\"Microsoft.Win32.RegistryKey.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object representing the access and audit rules for the first registry key, and then use the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to assign those rules to the second registry key. You can also assign the rules to a second registry key with an <see cref=\"Overload:Microsoft.Win32.RegistryKey.OpenSubKey\"></see> or <see cref=\"Overload:Microsoft.Win32.RegistryKey.CreateSubKey\"></see> method that takes a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object parameter.</p>\n<p>Users with an investment in the security descriptor definition language (SDDL) can use the <xref href=\"System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to set access rules for a registry key, and the <xref href=\"System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.</p>\n"
  example:
  - "\n<p>This section contains two code examples. The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.</p>\n<p>Example 1</p>\n<p>The following code example shows how the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes rights from a compatible rule, and how the <xref href=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method merges rights with compatible rules.</p>\n<p>The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds a rule that allows the current user <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> rights. The example then creates a rule that grants the user <xref href=\"System.Security.AccessControl.RegistryRights.SetValue\" data-throw-if-not-resolved=\"false\"></xref>, with the same inheritance and propagation rights as the first rule, and uses the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove this new rule from the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object. <xref href=\"System.Security.AccessControl.RegistryRights.SetValue\" data-throw-if-not-resolved=\"false\"></xref> is a constituent of <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref>, so it is removed from the compatible rule. The rules in the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object are displayed, showing the remaining constituents of <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The example code then calls the <xref href=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to merge the <xref href=\"System.Security.AccessControl.RegistryRights.SetValue\" data-throw-if-not-resolved=\"false\"></xref> right back into the rule in the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This example does not attach the security object to a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object. The second example in this section attaches a security object, and so do the examples in <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetAccessControl\"></see> and <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1<p>Example 2</p><p>The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, then creates and adds two rules that have the <xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. The first rule has no propagation flags, while the second has <xref href=\"System.Security.AccessControl.PropagationFlags.NoPropagateInherit\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.PropagationFlags.InheritOnly\" data-throw-if-not-resolved=\"false\"></xref>. </p><p>The program displays the rules in the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and then uses the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object to create a subkey. The program creates a child subkey and a grandchild subkey, then displays the security for each subkey. Finally, the program deletes the test keys.</p>System.Security.AccessControl.RegistryAccessRule.ctor2#1"
  syntax:
    content: 'public sealed class RegistrySecurity : NativeObjectSecurity'
    content.vb: >-
      Public NotInheritable Class RegistrySecurity
          Inherits NativeObjectSecurity
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.RegistrySecurity.#ctor
  commentId: M:System.Security.AccessControl.RegistrySecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: RegistrySecurity()
  fullName: System.Security.AccessControl.RegistrySecurity.RegistrySecurity()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 88
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> class with default values.</p>\n"
  remarks: "\n<p>A new <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object always starts with an empty discretionary access list (DACL), which denies all access for all users.</p>\n"
  syntax:
    content: public RegistrySecurity()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.AccessRightType
  commentId: P:System.Security.AccessControl.RegistrySecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: AccessRightType
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRightType
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRightType
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 238
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the enumeration type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent access rights.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AccessRightType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</p>\n"
  syntax:
    content: public override Type AccessRightType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRightType As Type
    parameters: []
    return:
      type: Type
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleType
  commentId: P:System.Security.AccessControl.RegistrySecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: AccessRuleType
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRuleType
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleType
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 243
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent access rules.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AccessRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object.</p>\n"
  syntax:
    content: public override Type AccessRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRuleType As Type
    parameters: []
    return:
      type: Type
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleType
  commentId: P:System.Security.AccessControl.RegistrySecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: AuditRuleType
  fullName: System.Security.AccessControl.RegistrySecurity.AuditRuleType
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleType
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 248
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the type that the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> class uses to represent audit rules.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AuditRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object.</p>\n"
  syntax:
    content: public override Type AuditRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AuditRuleType As Type
    parameters: []
    return:
      type: Type
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: AccessRuleFactory(Principal.IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleFactory
    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
    startLine: 43
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Creates a new access control rule for the specified user, with the specified access rights, access control, and flags.</p>\n"
  remarks: "\n<p>The recommended way to create access control rules is to use the constructors of the <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Although you can specify the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. Finally, specifying the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</p>\n"
  syntax:
    content: public override AccessRule AccessRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public Overrides Function AccessRuleFactory(identityReference As Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType) As AccessRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> that identifies the user or group the rule applies to.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the access rights to allow or deny, cast to an integer.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>A Boolean value specifying whether the rule is inherited.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> values specifying how the rule is inherited by subkeys.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <em>inheritanceFlags</em> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
    return:
      type: System.Security.AccessControl.AccessRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object representing the specified rights for the specified user.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identityReference</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>accessMask</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identityReference</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: AddAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAccessRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 183
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for a matching access control with which the new rule can be merged. If none are found, adds the new rule.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method searches for rules with the same user or group and the same <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> as <em>rule</em>. If none are found, <em>rule</em> is added. If a matching rule is found, the rights in <em>rule</em> are merged with the existing rule.</p>\n<p>Rules cannot be merged if they have different inheritance flags. For example, if a user is allowed read access with no inheritance flags, and <xref href=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> is used to add a rule giving the user write access with inheritance for subkeys (<xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref>), the two rules cannot be merged. </p>\n<p>Rules with different <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values are never merged.</p>\n<p>Rules express rights in the most economical way. For example, if a user has <xref href=\"System.Security.AccessControl.RegistryRights.QueryValues\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.AccessControl.RegistryRights.Notify\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.RegistryRights.ReadPermissions\" data-throw-if-not-resolved=\"false\"></xref> rights, and you add a rule allowing <xref href=\"System.Security.AccessControl.RegistryRights.EnumerateSubKeys\" data-throw-if-not-resolved=\"false\"></xref> rights, the user has all the constituent parts of <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> rights. If you query the user's rights, you will see a rule containing <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> rights. Similarly, if you remove <xref href=\"System.Security.AccessControl.RegistryRights.EnumerateSubKeys\" data-throw-if-not-resolved=\"false\"></xref> rights, the other constituents of <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> rights will reappear.</p>\n"
  example:
  - "\n<p>The following code example creates registry access rules and adds them to a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</p>\n<p>This example does not attach the security object to a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetAccessControl\"></see> and <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A code example that demonstrates inheritance and propagation flags can be found in the <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.AccessControl.RegistrySecurity.AddAccessRule#1"
  syntax:
    content: public void AddAccessRule(RegistryAccessRule rule)
    content.vb: Public Sub AddAccessRule(rule As RegistryAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  id: AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: AddAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAuditRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 213
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method searches for rules with the same user or group as <em>rule</em>. If none are found, <em>rule</em> is added. If a matching rule is found, the flags in <em>rule</em> are merged into the existing rule.</p>\n<p>Rules cannot be merged if they have different inheritance flags. For example, if failed attempts to write to a key are audited for a particular user, with no inheritance flags, and <xref href=\"System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> is used to add a rule specifying that failed attempts to change permissions are to be audited for the same user, but with inheritance for subkeys (<xref href=\"System.Security.AccessControl.InheritanceFlags.ContainerInherit\" data-throw-if-not-resolved=\"false\"></xref>), the two rules cannot be merged. </p>\n"
  syntax:
    content: public void AddAuditRule(RegistryAuditRule rule)
    content.vb: Public Sub AddAuditRule(rule As RegistryAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  commentId: M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: AuditRuleFactory(Principal.IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)
  fullName: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleFactory
    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs
    startLine: 46
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, the inheritance and propagation of the rule, and the outcome that triggers the rule.</p>\n"
  remarks: "\n<p>The recommended way to create audit rules is to use the constructors of the <xref href=\"System.Security.AccessControl.RegistryAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Although you can specify the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag, there is no point in doing so. For the purposes of audit control, the name/value pairs in a subkey are not separate objects. The audit rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag. Finally, specifying the <xref href=\"System.Security.AccessControl.InheritanceFlags.ObjectInherit\" data-throw-if-not-resolved=\"false\"></xref> flag needlessly complicates the maintenance of rules, because it interferes with the normal combination of compatible rules.</p>\n"
  example:
  - 
  syntax:
    content: public override AuditRule AuditRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)
    content.vb: Public Overrides Function AuditRuleFactory(identityReference As Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags) As AuditRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> that identifies the user or group the rule applies to.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.RegistryRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the access rights to audit, cast to an integer.</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>A Boolean value specifying whether the rule is inherited.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> values specifying how the rule is inherited by subkeys.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> values that modify the way the rule is inherited by subkeys. Meaningless if the value of <em>inheritanceFlags</em> is <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.AuditFlags\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether to audit successful access, failed access, or both.</p>\n"
    return:
      type: System.Security.AccessControl.AuditRule
      description: "\n<p>A <xref href=\"System.Security.AccessControl.RegistryAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object representing the specified audit rule for the specified user, with the specified flags. The return type of the method is the base class, <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref>, but the return value can be cast safely to the derived class.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>flags</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identityReference</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>accessMask</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identityReference</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>, nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 198
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an access control rule with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> (allow or deny) as the specified access rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for a rule that has the same user and the same <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> value as <em>rule</em>. If no such rule is found, no action is taken, and the method returns <strong>false</strong>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <em>rule</em>. If no compatible rule is found, no action is taken, and the method returns <strong>false</strong>. If a rule with compatible flags is found, the rights specified in <em>rule</em> are removed from the compatible rule, and the method returns <strong>true</strong>. If <em>rule</em> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  example:
  - "\n<p>The following code example shows how the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes rights from a compatible rule, and how the <xref href=\"System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method merges rights with compatible rules.</p>\n<p>The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds a rule that allows the current user <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> rights. The example then creates a rule that grants the user <xref href=\"System.Security.AccessControl.RegistryRights.SetValue\" data-throw-if-not-resolved=\"false\"></xref>, with the same inheritance and propagation rights as the first rule, and uses the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove this new rule from the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object. <xref href=\"System.Security.AccessControl.RegistryRights.SetValue\" data-throw-if-not-resolved=\"false\"></xref> is a constituent of <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref>, so it is removed from the compatible rule. The rules in the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object are displayed, showing the remaining constituents of <xref href=\"System.Security.AccessControl.RegistryRights.ReadKey\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The example code then calls the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to merge the <xref href=\"System.Security.AccessControl.RegistryRights.SetValue\" data-throw-if-not-resolved=\"false\"></xref> right back into the rule in the <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This example does not attach the security object to a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object. The second example in this section attaches a security object, and so do the examples in <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetAccessControl\"></see><xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1"
  syntax:
    content: public bool RemoveAccessRule(RegistryAccessRule rule)
    content.vb: Public Function RemoveAccessRule(rule As RegistryAccessRule) As Boolean
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRuleAll(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRuleAll
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 203
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> (allow or deny) as the specified rule and, if found, removes them.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for rules that have the same user and the same <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> value as <em>rule</em>. Any rights, inheritance flags, or propagation flags specified by <em>rule</em> are ignored when performing this search. If no matching rules are found, no action is taken.</p>\n<p>For example, if a user has multiple rules that allow various rights with different inheritance and propagation flags, you can remove all those rules by creating a <xref href=\"System.Security.AccessControl.RegistryAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the user and <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref>, with any arbitrary rights and flags, and passing that rule to the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following code example shows that the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes all rules that match user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref>, ignoring rights and flags.</p>\n<p>The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user to take ownership, and passes that rule to the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove the two rules that allow access.</p>\n<p>This example does not attach the security object to a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object. See the <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetAccessControl\"></see> method and the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1"
  syntax:
    content: public void RemoveAccessRuleAll(RegistryAccessRule rule)
    content.vb: Public Sub RemoveAccessRuleAll(rule As RegistryAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRuleSpecific(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRuleSpecific
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 208
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an access control rule that exactly matches the specified rule and, if found, removes it.</p>\n"
  remarks: "\n<p>The rule is removed only if it exactly matches <em>rule</em> in all details, including flags. Other rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> are not affected.</p>\n<p>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method cannot remove it. </p>\n"
  example:
  - "\n<p>The following code example shows that the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes a rule only if it matches exactly.</p>\n<p>The example creates two rules that allow different rights. The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first. The example calls the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method, specifying the first rule, but because the rules are merged there is no rule that matches. The example then calls the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to the remove the second rule from the merged rule, and finally calls the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove the first rule.</p>\n<p>This example does not attach the security object to a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object. See the <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetAccessControl\"></see> method and the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1"
  syntax:
    content: public void RemoveAccessRuleSpecific(RegistryAccessRule rule)
    content.vb: Public Sub RemoveAccessRuleSpecific(rule As RegistryAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 223
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for an audit rule that has the same user as <em>rule</em>. If no such rule is found, no action is taken, and the method returns <strong>false</strong>. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in <em>rule</em>. If no compatible rule is found, no action is taken, and the method returns <strong>false</strong>. If a rule with compatible flags is found, the rights specified in <em>rule</em> are removed from the compatible rule, and the method returns <strong>true</strong>. If <em>rule</em> specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  syntax:
    content: public bool RemoveAuditRule(RegistryAuditRule rule)
    content.vb: Public Function RemoveAuditRule(rule As RegistryAuditRule) As Boolean
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleAll(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleAll
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 228
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for all audit rules with the same user as the specified rule and, if found, removes them.</p>\n"
  remarks: "\n<p>The current <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> is searched for audit rules that have the same user as <em>rule</em>. Any rights, inheritance flags, or propagation flags specified by <em>rule</em> are ignored when performing this search. If no matching rules are found, no action is taken. </p>\n"
  syntax:
    content: public void RemoveAuditRuleAll(RegistryAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleAll(rule As RegistryAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleSpecific(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleSpecific
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 233
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Searches for an audit rule that exactly matches the specified rule and, if found, removes it.</p>\n"
  remarks: "\n<p>The rule is removed only if it exactly matches <em>rule</em> in all details, including flags. Other audit rules for the same user are not affected.</p>\n<p>A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the <xref href=\"System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method cannot remove it. </p>\n"
  syntax:
    content: public void RemoveAuditRuleSpecific(RegistryAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleSpecific(rule As RegistryAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: ResetAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetAccessRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 193
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all access control rules with the same user as the specified rule, regardless of <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref>, and then adds the specified rule.</p>\n"
  remarks: "\n<p>If there are no access rules whose user matches the specified rule, <em>rule</em> is added.</p>\n"
  example:
  - "\n<p>The following code example shows how the <xref href=\"System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method replaces all rules for the matching user with the rule specified for the match.</p>\n<p>The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the <xref href=\"System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove the all rules for the user and replace them with the new rule.</p>\n<p>This example does not attach the security object to a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object. See the <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetAccessControl\"></see> method and the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1"
  syntax:
    content: public void ResetAccessRule(RegistryAccessRule rule)
    content.vb: Public Sub ResetAccessRule(rule As RegistryAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: SetAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAccessRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 188
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all access control rules with the same user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> (allow or deny) as the specified rule, and then adds the specified rule.</p>\n"
  remarks: "\n<p>If the specified rule has <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref>, the effect of this method is to remove all <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref>, all <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> rules for the specified user are replaced with the specified rule.</p>\n<p>If there are no rules whose user and <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> match the specified rule, <em>rule</em> is added.</p>\n"
  example:
  - "\n<p>The following code example shows that the <xref href=\"System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes all rules that match both the user and the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> of <em>rule</em>, ignoring rights and flags, and replaces them with <em>rule</em>.</p>\n<p>The example creates a <xref href=\"System.Security.AccessControl.RegistrySecurity\" data-throw-if-not-resolved=\"false\"></xref> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the <xref href=\"System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method to remove the two rules that allow access and to replace them with the new rule. The rule that denies access is not affected.</p>\n<p>This example does not attach the security object to a <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object. See the <see cref=\"Overload:Microsoft.Win32.RegistryKey.GetAccessControl\"></see> method and the <xref href=\"Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Security.AccessControl.RegistrySecurity.SetAccessRule#1"
  syntax:
    content: public void SetAccessRule(RegistryAccessRule rule)
    content.vb: Public Sub SetAccessRule(rule As RegistryAccessRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  commentId: M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  id: SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  - vb
  name: SetAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAuditRule
    path: src/Microsoft.Win32.Registry.AccessControl/src/System/Security/AccessControl/RegistrySecurity.cs
    startLine: 218
  assemblies:
  - Microsoft.Win32.Registry.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Removes all audit rules with the same user as the specified rule, regardless of the <xref href=\"System.Security.AccessControl.AuditFlags\" data-throw-if-not-resolved=\"false\"></xref> value, and then adds the specified rule.</p>\n"
  remarks: "\n<p>If there are no audit rules whose user matches the specified rule, <em>rule</em> is added.</p>\n"
  syntax:
    content: public void SetAuditRule(RegistryAuditRule rule)
    content.vb: Public Sub SetAuditRule(rule As RegistryAuditRule)
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>rule</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.RegistryAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
- uid: System.Security.AccessControl.RegistryAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryAuditRule
  fullName: System.Security.AccessControl.RegistryAuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
