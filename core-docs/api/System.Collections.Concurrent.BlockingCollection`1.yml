items:
- uid: System.Collections.Concurrent.BlockingCollection`1
  commentId: T:System.Collections.Concurrent.BlockingCollection`1
  id: BlockingCollection`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.BlockingCollection`1.#ctor
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  - System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  - System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Count
  - System.Collections.Concurrent.BlockingCollection`1.Dispose
  - System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  - System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  - System.Collections.Concurrent.BlockingCollection`1.Take
  - System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.ToArray
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  langs:
  - csharp
  - vb
  name: BlockingCollection<T>
  fullName: System.Collections.Concurrent.BlockingCollection<T>
  type: Class
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockingCollection
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 41
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: 'public class BlockingCollection<T> : IEnumerable<T>, ICollection, IDisposable, IReadOnlyCollection<T>'
    content.vb: >-
      Public Class BlockingCollection(Of T)
          Inherits IEnumerable(Of T)
          Implements ICollection, IDisposable, IReadOnlyCollection(Of T)
    typeParameters:
    - id: T
      description: Specifies the type of elements in the collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T)
  name.vb: BlockingCollection(Of T)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 144
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection()
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection(IProducerConsumerCollection<T>)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 200
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection(IProducerConsumerCollection<T> collection)
    content.vb: Public Sub New(collection As IProducerConsumerCollection(Of T))
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
      description: The collection to use as the underlying data store.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection(Of T))
  name.vb: BlockingCollection(IProducerConsumerCollection(Of T))
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection(IProducerConsumerCollection<T>, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 174
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection(IProducerConsumerCollection<T> collection, int boundedCapacity)
    content.vb: Public Sub New(collection As IProducerConsumerCollection(Of T), boundedCapacity As Integer)
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
      description: The collection to use as the underlying data store.
    - id: boundedCapacity
      type: System.Int32
      description: The bounded size of the collection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection(Of T), System.Int32)
  name.vb: BlockingCollection(IProducerConsumerCollection(Of T), Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection(Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 159
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection(int boundedCapacity)
    content.vb: Public Sub New(boundedCapacity As Integer)
    parameters:
    - id: boundedCapacity
      type: System.Int32
      description: The bounded size of the collection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  id: BoundedCapacity
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BoundedCapacity
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 62
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public int BoundedCapacity { get; }
    content.vb: Public ReadOnly Property BoundedCapacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: The bounded capacity of this collection, or int.MaxValue if no bound was supplied.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BoundedCapacity
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.Count
  id: Count
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 101
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of items contained in the <xref href="System.Collections.Concurrent.BlockingCollection{T}" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Count
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  id: IsAddingCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAddingCompleted
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 75
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool IsAddingCompleted { get; }
    content.vb: Public ReadOnly Property IsAddingCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Whether this collection has been marked as complete for adding.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).IsAddingCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  id: IsCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsCompleted
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 88
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool IsCompleted { get; }
    content.vb: Public ReadOnly Property IsCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Whether this collection has been marked as complete for adding and is empty.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).IsCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 253
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection. The value can be a null reference.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Add(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  id: Add(`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Add(T, Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 23
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Add(T item, Threading.CancellationToken cancellationToken)
    content.vb: Public Sub Add(item As T, cancellationToken As Threading.CancellationToken)
    parameters:
    - id: item
      type: '{T}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Add(T, System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: AddToAny(BlockingCollection<T>[], T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 793
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int AddToAny(BlockingCollection<T>[] collections, T item)
    content.vb: Public Shared Function AddToAny(collections As BlockingCollection(Of T)(), item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    return:
      type: System.Int32
      description: The index of the collection in the <em>collections</em> array to which the item was added.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).AddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T)
  name.vb: AddToAny(BlockingCollection(Of T)(), T)
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: AddToAny(BlockingCollection<T>[], T, Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddToAny
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 25
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int AddToAny(BlockingCollection<T>[] collections, T item, Threading.CancellationToken cancellationToken)
    content.vb: Public Shared Function AddToAny(collections As BlockingCollection(Of T)(), item As T, cancellationToken As Threading.CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
    - id: item
      type: '{T}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).AddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Threading.CancellationToken)
  name.vb: AddToAny(BlockingCollection(Of T)(), T, Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  id: CompleteAdding
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompleteAdding
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1473
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public void CompleteAdding()
    content.vb: Public Sub CompleteAdding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).CompleteAdding()
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1578
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "The one-dimensional array that is the destination of the elements copied from \nthe <xref href=\"System.Collections.Concurrent.BlockingCollection{T}\" data-throw-if-not-resolved=\"false\"></xref> instance. The array must have zero-based indexing."
    - id: index
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Dispose
  id: Dispose
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1527
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Dispose()
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1537
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: Whether being disposed explicitly (true) or due to a finalizer (false).
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Dispose(System.Boolean)
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  id: GetConsumingEnumerable
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConsumingEnumerable
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1639
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public IEnumerable<T> GetConsumingEnumerable()
    content.vb: Public Function GetConsumingEnumerable As IEnumerable(Of T)
    return:
      type: IEnumerable{{T}}
      description: An <xref href="System.Collections.Generics.IEnumerable{T}" data-throw-if-not-resolved="false"></xref> that removes and returns items from the collection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).GetConsumingEnumerable()
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  id: GetConsumingEnumerable(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: GetConsumingEnumerable(Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConsumingEnumerable
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 31
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public Generic.IEnumerable<T> GetConsumingEnumerable(Threading.CancellationToken cancellationToken)
    content.vb: Public Function GetConsumingEnumerable(cancellationToken As Threading.CancellationToken) As Generic.IEnumerable(Of T)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).GetConsumingEnumerable(System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Take
  id: Take
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 538
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public T Take()
    content.vb: Public Function Take As T
    return:
      type: '{T}'
      description: The item removed from the collection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Take()
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  id: Take(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Take(Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 36
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public T Take(Threading.CancellationToken cancellationToken)
    content.vb: Public Function Take(cancellationToken As Threading.CancellationToken) As T
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: '{T}'
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Take(System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TakeFromAny(BlockingCollection<T>[], out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1172
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item)
    content.vb: Public Shared Function TakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    return:
      type: System.Int32
      description: "The index of the collection in the <em>collections</em> array from which \nthe item was removed, or -1 if an item could not be removed."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T)
  name.vb: TakeFromAny(BlockingCollection(Of T)(), ByRef T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TakeFromAny(BlockingCollection<T>[], out T, Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeFromAny
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 38
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item, Threading.CancellationToken cancellationToken)
    content.vb: Public Shared Function TakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, cancellationToken As Threading.CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
    - id: item
      type: '{T}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Threading.CancellationToken)
  name.vb: TakeFromAny(BlockingCollection(Of T)(), ByRef T, Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1559
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: An array containing copies of the elements of the collection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).ToArray()
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 305
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd(T item)
    content.vb: Public Function TryAdd(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection.
    return:
      type: System.Boolean
      description: true if the <em>item</em> could be added; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  id: TryAdd(`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 350
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd(T item, int millisecondsTimeout)
    content.vb: Public Function TryAdd(item As T, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added to the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="!:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: "true if the <em>item</em> could be added to the collection within \nthe alloted time; otherwise, false."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  id: TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T, Int32, Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 42
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd(T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken)
    content.vb: Public Function TryAdd(item As T, millisecondsTimeout As Integer, cancellationToken As Threading.CancellationToken) As Boolean
    parameters:
    - id: item
      type: '{T}'
    - id: millisecondsTimeout
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.Int32, System.Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  id: TryAdd(`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 43
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd(T item, TimeSpan timeout)
    content.vb: Public Function TryAdd(item As T, timeout As TimeSpan) As Boolean
    parameters:
    - id: item
      type: '{T}'
    - id: timeout
      type: System.TimeSpan
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 868
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    return:
      type: System.Int32
      description: "The index of the collection in the <em>collections</em> \narray to which the item was added, or -1 if the item could not be added."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 924
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, millisecondsTimeout As Integer) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item to be added to one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="!:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: "The index of the collection in the <em>collections</em> \narray to which the item was added, or -1 if the item could not be added."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Int32)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T, Int32, Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 46
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, millisecondsTimeout As Integer, cancellationToken As Threading.CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
    - id: item
      type: '{T}'
    - id: millisecondsTimeout
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Int32, System.Threading.CancellationToken)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, Int32, Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 47
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, TimeSpan timeout)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, timeout As TimeSpan) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
    - id: item
      type: '{T}'
    - id: timeout
      type: System.TimeSpan
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.TimeSpan)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 584
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake(out T item)
    content.vb: Public Function TryTake(ByRef item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item removed from the collection.
    return:
      type: System.Boolean
      description: true if an item could be removed; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T)
  name.vb: TryTake(ByRef T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  id: TryTake(`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 627
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake(out T item, int millisecondsTimeout)
    content.vb: Public Function TryTake(ByRef item As T, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The item removed from the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="!:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: "true if an item could be removed from the collection within \nthe alloted time; otherwise, false."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.Int32)
  name.vb: TryTake(ByRef T, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T, Int32, Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 50
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake(out T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken)
    content.vb: Public Function TryTake(ByRef item As T, millisecondsTimeout As Integer, cancellationToken As Threading.CancellationToken) As Boolean
    parameters:
    - id: item
      type: '{T}'
    - id: millisecondsTimeout
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.Int32, System.Threading.CancellationToken)
  name.vb: TryTake(ByRef T, Int32, Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  id: TryTake(`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 51
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake(out T item, TimeSpan timeout)
    content.vb: Public Function TryTake(ByRef item As T, timeout As TimeSpan) As Boolean
    parameters:
    - id: item
      type: '{T}'
    - id: timeout
      type: System.TimeSpan
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.TimeSpan)
  name.vb: TryTake(ByRef T, TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1229
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    return:
      type: System.Int32
      description: "The index of the collection in the <em>collections</em> array from which \nthe item was removed, or -1 if an item could not be removed."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1290
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, millisecondsTimeout As Integer) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: The array of collections.
    - id: item
      type: '{T}'
      description: The item removed from one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="!:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: "The index of the collection in the <em>collections</em> array from which \nthe item was removed, or -1 if an item could not be removed."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Int32)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T, Int32, Threading.CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 54
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, millisecondsTimeout As Integer, cancellationToken As Threading.CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
    - id: item
      type: '{T}'
    - id: millisecondsTimeout
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Int32, System.Threading.CancellationToken)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32, Threading.CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 55
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, TimeSpan timeout)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, timeout As TimeSpan) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
    - id: item
      type: '{T}'
    - id: timeout
      type: System.TimeSpan
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.TimeSpan)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, TimeSpan)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1
  name: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Collections.Concurrent.BlockingCollection`1[]
  isExternal: false
  name: BlockingCollection<T>[]
  fullName: System.Collections.Concurrent.BlockingCollection<T>[]
  fullname.vb: System.Collections.Concurrent.BlockingCollection(Of T)()
  name.vb: BlockingCollection(Of T)()
  spec.csharp:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    fullName: System.Collections.Concurrent.BlockingCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    fullName: System.Collections.Concurrent.BlockingCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
