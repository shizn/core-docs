items:
- uid: System.FormatException
  commentId: T:System.FormatException
  id: FormatException
  parent: System
  children:
  - System.FormatException.#ctor
  - System.FormatException.#ctor(System.String)
  - System.FormatException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: FormatException
  fullName: System.FormatException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/FormatException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FormatException
    path: src/mscorlib/src/System/FormatException.cs
    startLine: 16
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed. </p>\n"
  remarks: "\n<p>A <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception can be thrown for one of the following reasons: </p>\n<ul><li>\n<p>In a call to a method that converts a string to some other data type, the string doesn't conform to the required pattern. This typically occurs when calling some methods of the <xref href=\"System.Convert\" data-throw-if-not-resolved=\"false\"></xref> class and the <strong>Parse</strong> and <strong>ParseExact</strong> methods of some types. </p>\n<p>In most cases, particularly if the string that you're converting is input by a user or read from a file, you should use a <strong>try/catch</strong> block and handle the <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception if the conversion is unsuccessful. You can also replace the call to the conversion method with a call to a <strong>TryParse</strong> or <strong>TryParseExact</strong> method, if one exists. However, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception that is thrown when you're trying to parse a predefined or hard-coded string indicates a program error. In this case, you should correct the error rather than handle the exception.</p>\n<p>The conversion of a string to the following types in the <xref href=\"System\" data-throw-if-not-resolved=\"false\"></xref> namespace can throw a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception: </p>\n<ul><li>\n<p>\n<xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Boolean.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Convert.ToBoolean(System.String)\" data-throw-if-not-resolved=\"false\"></xref> methods require the string to be converted to be \"True\", \"true\", \"False\", or \"false\". Any other value throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n</li><li>\n<p>\n<xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>. All date and time data is interpreted based on the formatting conventions of a particular culture: either the current thread culture (or, in some cases, the current application domain culture), the invariant culture, or a specified culture. When you call the <xref href=\"System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\" data-throw-if-not-resolved=\"false\"></xref> methods, date and time data must also conform <em>exactly</em> to a pattern specified by one or more standard format strings or custom format strings that are provided as arguments in the method call. If it doesn't conform to an expected culture-specific pattern, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown. This means that date and time data saved in a culture-specific format on one system might not parse successfully on another system. </p>\n<p>For more information about parsing dates and times, see Parsing Date and Time Strings in the .NET Framework and the documentation for the method that threw the exception. </p>\n</li><li>\n<p>GUIDs. The string representation of a GUID must consist of 32 hexadecimal digits (0-F), and must be in one of the five formats output by the <xref href=\"System.Guid.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information, see the <xref href=\"System.Guid.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li><li>\n<p>Numeric types, including all signed integers, unsigned integers, and floating-point types. The string to be parsed must consist of the Latin digits 0-9. A positive or negative sign, decimal separator, group separators, and currency symbol may also be permitted. Trying to parse a string that contains any other character always throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n<p>All numeric strings are interpreted based on the formatting conventions of a particular culture: either the current thread culture (or, in some cases, the current application domain culture), the invariant culture, or a specified culture. As a result, a numeric string that is parsed by using the conventions of one culture might fail when using the conventions of another. </p>\n<p>For more information about parsing numeric strings, see Parsing Numeric Strings in the .NET Framework and the documentation for the specific method that threw the exception. </p>\n</li><li>\n<p>Time intervals. The string to be parsed must be either in fixed culture-insensitive format or in a culture-sensitive format defined by the current thread culture (or, in some cases, the current application domain culture), the invariant culture, or a specified culture. If the string isn't in an appropriate format, or if, at the minimum, the days, hours, and minutes components of the time interval aren't present, the parsing method throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception. For more information, see the documentation for the <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> parsing method that threw the exception. </p>\n</li></ul>\n</li><li>\n<p>A type implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, which supports format strings that define how an object is converted to its string representation, and an invalid format string is used. This is most common in a formatting operation. In the following example, the \"Q\" standard format string is used in a composite format string to format a number. However, \"Q\" is not a valid standard format string. </p>System.FormatException#7<p>This exception results from a coding error. To correct the error, either remove the format string or substitute a valid one. The following example corrects the error by replacing the invalid format string with the \"C\" (currency) format string. </p>System.FormatException#8<p>A <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception can also be thrown by parsing methods, such as <xref href=\"System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Guid.ParseExact(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, that require the string to be parsed to conform exactly to the pattern specified by a format string. In the following example, the string representation of a GUID is expected to conform to the pattern specified by the \"G\" standard format string. However, the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure's implementation of <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> does not support the \"G\" format string. </p>System.FormatException#9<p>This exception also results from a coding error. To correct it, call a parsing method that doesnâ€™t require a precise format, such as <xref href=\"System.DateTime.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Guid.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, or substitute a valid format string. The following example corrects the error by calling the <xref href=\"System.Guid.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.FormatException#10</li><li>\n<p>One or more of the indexes of the format items in a composite format string is greater than the indexes of the items in the object list or parameter array. In the following example, the largest index of a format item in the format string is 3. Because the indexes of items in the object list are zero-based, this format string would require the object list to have four items. Instead, it has only three, <code>dat</code>, <code>temp</code>, and <code>scale</code>, so the code results in a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception at run time:.  </p>System.FormatException#1<p>In this case, the <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception is a result of developer error. It should be corrected rather than handled in a <strong>try/catch</strong> block by making sure that each item in the object list corresponds to the index of a format item. To correct this example, change the index of the second format item to refer to the <code>dat</code> variable, and decrement the index of each subsequent format item by one. </p>System.FormatException#2</li><li>\n<p>The composite format string isn't well-formed. When this happens, the <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception is always a result of developer error. It should be corrected rather than handled in a <strong>try/catch</strong> block. </p>\n<p>Trying to include literal braces in a string, as the following example does, will throw the exception.</p>System.String.Format#23<p>The recommended technique for including literal braces in a composite format string is to include them in the object list and use format items to insert them into the result string. For example, you can modify the previous composite format string as shown here. </p>System.String.Format#24<p>The exception is also thrown if your format string contains a typo. The following call to the <xref href=\"System.String.Format(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method omits a closing brace and pairs an opening brace with a closing bracket. </p>System.FormatException#3<p>To correct the error, ensure that all opening and closing braces correspond. </p>System.FormatException#4</li><li>\n<p>You've supplied the object list in a composite formatting method as a strongly typed parameter array, and the <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception indicates that the index of one or more format items exceeds the number of arguments in the object list. This occurs because no explicit conversion between array types exists, so instead the compiler treats the array as a single argument rather than as a parameter array. For example, the following call to the <xref href=\"System.Console.WriteLine(System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> exception, although the highest index of the format items is 3, and the parameter array of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> has four elements. </p>System.FormatException#5<p>Instead of handling this exception, you should eliminate its cause. Because neither Visual Basic nor C# can convert an integer array to an object array, you have to perform the conversion yourself before calling the composite formatting method. The following example provides one implementation. </p>System.FormatException#6</li></ul>\n<p>\n<xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT COR_E_FORMAT, which has the value 0x80131537.</p>\n<p>The <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> class derives from  <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> and adds no unique members. For a list of initial property values for an instance of <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.FormatException.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public class FormatException : SystemException, ISerializable, _Exception
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public Class FormatException
          Inherits SystemException
          Implements ISerializable, _Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.FormatException.#ctor
  commentId: M:System.FormatException.#ctor
  id: '#ctor'
  parent: System.FormatException
  langs:
  - csharp
  - vb
  name: FormatException()
  fullName: System.FormatException.FormatException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/FormatException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/FormatException.cs
    startLine: 19
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"Invalid format.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public FormatException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.FormatException.#ctor(System.String)
  commentId: M:System.FormatException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.FormatException
  langs:
  - csharp
  - vb
  name: FormatException(String)
  fullName: System.FormatException.FormatException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/FormatException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/FormatException.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new exception using the <em>message</em> parameter. The content of <em>message</em> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public FormatException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.FormatException.#ctor(System.String,System.Exception)
  commentId: M:System.FormatException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.FormatException
  langs:
  - csharp
  - vb
  name: FormatException(String, Exception)
  fullName: System.FormatException.FormatException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/FormatException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/FormatException.cs
    startLine: 29
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or a null reference (<strong>Nothing</strong> in Visual Basic) if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public FormatException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: System.Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
