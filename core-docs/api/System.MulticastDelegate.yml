items:
- uid: System.MulticastDelegate
  commentId: T:System.MulticastDelegate
  id: MulticastDelegate
  parent: System
  children:
  - System.MulticastDelegate.Equals(System.Object)
  - System.MulticastDelegate.GetHashCode
  - System.MulticastDelegate.GetInvocationList
  - System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)
  - System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)
  langs:
  - csharp
  - vb
  name: MulticastDelegate
  fullName: System.MulticastDelegate
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MulticastDelegate
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1261
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.MulticastDelegate\" data-throw-if-not-resolved=\"false\"></xref> is a special class. Compilers and other tools can derive from this class, but you cannot derive from it explicitly. The same is true of the <xref href=\"System.Delegate\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>In addition to the methods that delegate types inherit from <xref href=\"System.MulticastDelegate\" data-throw-if-not-resolved=\"false\"></xref>, the common language runtime provides two special methods: <strong>BeginInvoke</strong> and <strong>EndInvoke</strong>. For more information about these methods, see Calling Synchronous Methods Asynchronously.</p>\n<p>A <xref href=\"System.MulticastDelegate\" data-throw-if-not-resolved=\"false\"></xref> has a linked list of delegates, called an invocation list, consisting of one or more elements. When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear. If an error occurs during execution of the list then an exception is thrown.</p>\n"
  example:
  - "\n<p>The following example defines a class, <code>StringContainer</code>, which includes a collection of strings. One of its members is the <code>CheckAndDisplayDelegate</code> delegate, which is used to display strings stored in a <code>StringContainer</code> object that satisfy particular criteria. The delegate takes a single string as a parameter and returns <code>void</code> (or, in Visual Basic, it's a <strong>Sub</strong> procedure). It also includes a method, <code>DisplayAllQualified</code>, that has a single parameter, a <code>CheckAndDisplayDelegate</code> delegate. This allows the method to be called and to display a set of strings that are filtered based on the methods that the delegate contains. </p>\n<p>The example also defines a utility class, <code>StringExtensions</code>, that has two methods:</p>\n<ul><li>\n<p>\n<code>ConStart</code>, which displays strings that begin with a consonant. </p>\n</li><li>\n<p>\n<code>VowelStart</code>, which displays strings that begin with a vowel. </p>\n</li></ul>\n<p>Note that both methods include a single string parameter and return <strong>void</strong>. In other words, both methods can be assigned to the  <code>CheckAndDisplayDelegate</code> delegate. </p>\n<p>The <code>Test.Main</code> method is the application entry point. It instantiates a <code>StringContainer</code> object, populates it with strings, and creates two <code>CheckAndDisplayDelegate</code> delegates, <code>conStart</code> and <code>vowelStart</code>, that invoke a single method. It then calls the <xref href=\"System.Delegate.Combine(System.Delegate[])\" data-throw-if-not-resolved=\"false\"></xref> method to create the <code>multipleDelegates</code> delegate, which initially contains the <code>ConStart</code> and  <code>VowelStart</code> delegates. Note that when the <code>multipleDelegates</code> delegate is invoked, it displays all the strings in the collection in their original order. This is because each letter is passed separately to each delegate, and each letter meets the filtering criteria of only one of the two delegates. Finally, after calls to <xref href=\"System.Delegate.Remove(System.Delegate,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Delegate.Combine(System.Delegate[])\" data-throw-if-not-resolved=\"false\"></xref>, <code>multipleDelegates</code> contains two <code>conStart</code> delegates. When it is invoked, each string in the <code>StringContainer</code> object is displayed twice. </p>Multicast Delegate Introduction#1"
  syntax:
    content: 'public abstract class MulticastDelegate : Delegate'
    content.vb: >-
      Public MustInherit Class MulticastDelegate
          Inherits

           Delegate
  inheritance:
  - System.Object
  - System.Delegate
  inheritedMembers:
  - System.Delegate.Target
  - System.Delegate.Combine(System.Delegate,System.Delegate)
  - System.Delegate.Combine(System.Delegate[])
  - System.Delegate.DynamicInvoke(System.Object[])
  - System.Delegate.Remove(System.Delegate,System.Delegate)
  - System.Delegate.RemoveAll(System.Delegate,System.Delegate)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.MulticastDelegate.Equals(System.Object)
  commentId: M:System.MulticastDelegate.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.MulticastDelegate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.MulticastDelegate.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1264
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether this multicast delegate and the specified object are equal.</p>\n"
  remarks: "\n<p>Two delegates are equal if they are not <strong>null</strong> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</p>\n<p>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</p>\n"
  syntax:
    content: public override sealed bool Equals(object obj)
    content.vb: Public NotOverridable Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> and this instance have the same invocation lists; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Delegate.Equals(System.Object)
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.MulticastDelegate.GetHashCode
  commentId: M:System.MulticastDelegate.GetHashCode
  id: GetHashCode
  parent: System.MulticastDelegate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.MulticastDelegate.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1265
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override sealed int GetHashCode()
    content.vb: Public NotOverridable Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Delegate.GetHashCode
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.MulticastDelegate.GetInvocationList
  commentId: M:System.MulticastDelegate.GetInvocationList
  id: GetInvocationList
  parent: System.MulticastDelegate
  langs:
  - csharp
  - vb
  name: GetInvocationList()
  fullName: System.MulticastDelegate.GetInvocationList()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInvocationList
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1266
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the invocation list of this multicast delegate, in invocation order.</p>\n"
  remarks: "\n<p>The array contains a set of delegates, each with an invocation list of one entry. Invoking these delegates sequentially, in the order they appear in the array, produces the same results as invoking the current instance.</p>\n"
  syntax:
    content: public override sealed Delegate[] GetInvocationList()
    content.vb: 'Public NotOverridable Overrides Function GetInvocationList As '
    return:
      type: System.Delegate[]
      description: "\n<p>An array of delegates whose invocation lists collectively match the invocation list of this instance.</p>\n"
  overridden: System.Delegate.GetInvocationList
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)
  commentId: M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)
  id: op_Equality(System.MulticastDelegate,System.MulticastDelegate)
  parent: System.MulticastDelegate
  langs:
  - csharp
  - vb
  name: Equality(MulticastDelegate, MulticastDelegate)
  fullName: System.MulticastDelegate.Equality(System.MulticastDelegate, System.MulticastDelegate)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1267
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two <xref href=\"System.MulticastDelegate\" data-throw-if-not-resolved=\"false\"></xref> objects are equal.</p>\n"
  remarks: "\n<p>Two delegates are equal if they are not <strong>null</strong> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</p>\n<p>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</p>\n"
  syntax:
    content: public static bool operator ==(MulticastDelegate d1, MulticastDelegate d2)
    content.vb: Public Shared Operator =(d1 As MulticastDelegate, d2 As MulticastDelegate) As Boolean
    parameters:
    - id: d1
      type: System.MulticastDelegate
      description: "\n<p>The left operand. </p>\n"
    - id: d2
      type: System.MulticastDelegate
      description: "\n<p>The right operand. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>d1</em> and <em>d2</em> have the same invocation lists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)
  commentId: M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)
  id: op_Inequality(System.MulticastDelegate,System.MulticastDelegate)
  parent: System.MulticastDelegate
  langs:
  - csharp
  - vb
  name: Inequality(MulticastDelegate, MulticastDelegate)
  fullName: System.MulticastDelegate.Inequality(System.MulticastDelegate, System.MulticastDelegate)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1268
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two <xref href=\"System.MulticastDelegate\" data-throw-if-not-resolved=\"false\"></xref> objects are not equal.</p>\n"
  remarks: "\n<p>Two delegates are equal if they are not <strong>null</strong> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</p>\n<p>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</p>\n"
  syntax:
    content: public static bool operator !=(MulticastDelegate d1, MulticastDelegate d2)
    content.vb: Public Shared Operator <>(d1 As MulticastDelegate, d2 As MulticastDelegate) As Boolean
    parameters:
    - id: d1
      type: System.MulticastDelegate
      description: "\n<p>The left operand. </p>\n"
    - id: d2
      type: System.MulticastDelegate
      description: "\n<p>The right operand. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>d1</em> and <em>d2</em> do not have the same invocation lists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  fullName: System.Delegate
- uid: System.Delegate.Target
  parent: System.Delegate
  isExternal: false
  name: Target
  fullName: System.Delegate.Target
- uid: System.Delegate.Combine(System.Delegate,System.Delegate)
  parent: System.Delegate
  isExternal: false
  name: Combine(Delegate, Delegate)
  fullName: System.Delegate.Combine(System.Delegate, System.Delegate)
  spec.csharp:
  - uid: System.Delegate.Combine(System.Delegate,System.Delegate)
    name: Combine
    fullName: System.Delegate.Combine
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ', '
    fullName: ', '
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.Combine(System.Delegate,System.Delegate)
    name: Combine
    fullName: System.Delegate.Combine
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ', '
    fullName: ', '
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: )
    fullName: )
- uid: System.Delegate.Combine(System.Delegate[])
  parent: System.Delegate
  isExternal: false
  name: Combine(Delegate[])
  fullName: System.Delegate.Combine(System.Delegate[])
  fullname.vb: System.Delegate.Combine(System.Delegate())
  name.vb: Combine(Delegate())
  spec.csharp:
  - uid: System.Delegate.Combine(System.Delegate[])
    name: Combine
    fullName: System.Delegate.Combine
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.Combine(System.Delegate[])
    name: Combine
    fullName: System.Delegate.Combine
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Delegate.DynamicInvoke(System.Object[])
  parent: System.Delegate
  isExternal: false
  name: DynamicInvoke(Object[])
  fullName: System.Delegate.DynamicInvoke(System.Object[])
  fullname.vb: System.Delegate.DynamicInvoke(System.Object())
  name.vb: DynamicInvoke(Object())
  spec.csharp:
  - uid: System.Delegate.DynamicInvoke(System.Object[])
    name: DynamicInvoke
    fullName: System.Delegate.DynamicInvoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.DynamicInvoke(System.Object[])
    name: DynamicInvoke
    fullName: System.Delegate.DynamicInvoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Delegate.Remove(System.Delegate,System.Delegate)
  parent: System.Delegate
  isExternal: false
  name: Remove(Delegate, Delegate)
  fullName: System.Delegate.Remove(System.Delegate, System.Delegate)
  spec.csharp:
  - uid: System.Delegate.Remove(System.Delegate,System.Delegate)
    name: Remove
    fullName: System.Delegate.Remove
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ', '
    fullName: ', '
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.Remove(System.Delegate,System.Delegate)
    name: Remove
    fullName: System.Delegate.Remove
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ', '
    fullName: ', '
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: )
    fullName: )
- uid: System.Delegate.RemoveAll(System.Delegate,System.Delegate)
  parent: System.Delegate
  isExternal: false
  name: RemoveAll(Delegate, Delegate)
  fullName: System.Delegate.RemoveAll(System.Delegate, System.Delegate)
  spec.csharp:
  - uid: System.Delegate.RemoveAll(System.Delegate,System.Delegate)
    name: RemoveAll
    fullName: System.Delegate.RemoveAll
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ', '
    fullName: ', '
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.RemoveAll(System.Delegate,System.Delegate)
    name: RemoveAll
    fullName: System.Delegate.RemoveAll
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ', '
    fullName: ', '
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Delegate.Equals(System.Object)
  parent: System.Delegate
  isExternal: false
  name: Equals(Object)
  fullName: System.Delegate.Equals(System.Object)
  spec.csharp:
  - uid: System.Delegate.Equals(System.Object)
    name: Equals
    fullName: System.Delegate.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.Equals(System.Object)
    name: Equals
    fullName: System.Delegate.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Delegate.GetHashCode
  parent: System.Delegate
  isExternal: false
  name: GetHashCode()
  fullName: System.Delegate.GetHashCode()
  spec.csharp:
  - uid: System.Delegate.GetHashCode
    name: GetHashCode
    fullName: System.Delegate.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.GetHashCode
    name: GetHashCode
    fullName: System.Delegate.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Delegate.GetInvocationList
  parent: System.Delegate
  isExternal: false
  name: GetInvocationList()
  fullName: System.Delegate.GetInvocationList()
  spec.csharp:
  - uid: System.Delegate.GetInvocationList
    name: GetInvocationList
    fullName: System.Delegate.GetInvocationList
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Delegate.GetInvocationList
    name: GetInvocationList
    fullName: System.Delegate.GetInvocationList
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Delegate[]
  isExternal: false
  name: Delegate[]
  fullName: System.Delegate[]
  fullname.vb: System.Delegate()
  name.vb: Delegate()
  spec.csharp:
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
  - name: ()
    fullName: ()
- uid: System.MulticastDelegate
  parent: System
  isExternal: false
  name: MulticastDelegate
  fullName: System.MulticastDelegate
- uid: System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  fullName: System.MemberAccessException
