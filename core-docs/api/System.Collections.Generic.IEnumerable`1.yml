items:
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  id: IEnumerable`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.IEnumerable`1.GetEnumerator
  langs:
  - csharp
  - vb
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IEnumerable
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2386
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/ienumerable.cs#3acf01620172c7f0\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/ienumerable.cs#3acf01620172c7f0\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>\n<xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> is the base interface for collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace such as <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> and other generic collections such as <xref href=\"System.Collections.ObjectModel.ObservableCollection`1\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Concurrent.ConcurrentStack`1\" data-throw-if-not-resolved=\"false\"></xref>. Collections that implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> can be enumerated by using the <strong>foreach</strong> statement. For the non-generic version of this interface, see <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>For the non-generic version of this interface, see <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> contains a single method that you must implement when implementing this interface; <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref>, which returns an <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> object. The returned <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> provides the ability to iterate through the collection by exposing a <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and how to use that implementation to create a LINQ query. When you implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you must also implement <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> or, for C# only, you can use the yield (C# Reference) keyword. Implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> also requires <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> to be implemented, which you will see in this example.</p>System.Collections.Generic.IEnumerableEx#1<p>For another C# example that demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, see the <see href=\"http://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593\">Generics Sample</see>. This sample uses the <strong>yield</strong> keyword instead of implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  syntax:
    content: 'public interface IEnumerable<out T> : IEnumerable'
    content.vb: >-
      Public Interface IEnumerable(Of Out T)
          Inherits IEnumerable
    typeParameters:
    - id: T
      description: "\n<p>The type of objects to enumerate.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  - type: System.Collections
    commentId: N:System.Collections
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2388
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the collection.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> provides the ability to iterate through the collection by exposing a <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> property .You can use enumerators to read the data in a collection, but not to modify the collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called again as <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator does not have exclusive access to the collection so an enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is invalidated and you may get unexpected results. Also, enumerating a collection is not a thread-safe procedure. To guarantee thread-safety, you should lock the collection during enumerator or implement synchronization on the collection.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace aren't synchronized.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and uses that implementation to create a LINQ query. When you implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you must also implement <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> or, for C# only, you can use the yield (C# Reference) keyword. Implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> also requires <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> to be implemented, which you will see in this example.</p>System.Collections.Generic.IEnumerableEx#1<p>For another C# example that demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, see the <see href=\"http://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593\">Generics Sample</see>. This sample uses of the <strong>yield</strong> keyword instead of implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  syntax:
    content: IEnumerator<T> GetEnumerator()
    content.vb: Function GetEnumerator As IEnumerator(Of T)
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: "\n<p>An enumerator that can be used to iterate through the collection.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
