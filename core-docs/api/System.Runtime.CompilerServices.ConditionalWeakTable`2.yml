items:
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2
  commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2
  id: ConditionalWeakTable`2
  parent: System.Runtime.CompilerServices
  children:
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  langs:
  - csharp
  - vb
  name: ConditionalWeakTable<TKey, TValue>
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConditionalWeakTable
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2861
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Enables compilers to dynamically attach object fields to managed objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class enables language compilers to attach arbitrary properties to managed objects at run time. A <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value. The object's keys are the individual instances of the <em>TKey</em> class to which the property is attached, and its values are the property values that are assigned to the corresponding objects. </p>\n<p>Keys must be unique; in other words, the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class supports one attached value per managed object. Two keys are equal if passing them to the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong>. </p>\n<p>You cannot control equality comparisons by overriding <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> to explicitly set the hash code for a key. The <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class does not use the <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method to compute hash codes, and therefore does not invoke <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> overrides.</p>\n<p>Although the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class differs from a dictionary in several ways:</p>\n<ul><li>\n<p>It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.</p>\n</li><li>\n<p>It does not include all the methods (such as<strong> GetEnumerator</strong> or <strong>Contains</strong>) that a dictionary typically has.</p>\n</li><li>\n<p>It does not implement the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n</li></ul>\n<p>The <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration.</p>\n"
  example:
  - "\n<p>The following example illustrates that a key stored in the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> table does not persist after references to it outside the table are destroyed. The example defines two classes: <code>ManagedClass</code>, which represents the key in the table, and <code>ClassData</code>, which represents the key's value. The example instantiates three objects of each type. It also instantiates a <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object that represents the second <code>ManagedClass</code>, and then destroys the second <code>ManagedClass</code> instance. The attempt to retrieve the second <code>ManagedClass</code> object from the <xref href=\"System.WeakReference.Target\" data-throw-if-not-resolved=\"false\"></xref> property indicates that no references to the object remain.</p>System.Runtime.CompilerServices.ConditionalWeakTable.Class#1"
  syntax:
    content: >-
      public sealed class ConditionalWeakTable<TKey, TValue>
          where TKey : class where TValue : class
    content.vb: Public NotInheritable Class ConditionalWeakTable(Of TKey As Class, TValue As Class)
    typeParameters:
    - id: TKey
      description: "\n<p>The reference type to which the field is attached. </p>\n"
    - id: TValue
      description: "\n<p>The field's type. This must be a reference type.</p>\n"
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue)
  name.vb: ConditionalWeakTable(Of TKey, TValue)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  id: '#ctor'
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: ConditionalWeakTable()
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.ConditionalWeakTable()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2863
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor instantiates an empty <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Every key in a <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong>).</p>\n"
  syntax:
    content: public ConditionalWeakTable()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).ConditionalWeakTable()
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2864
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Adds a key to the table.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong>).</p>\n<p>If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.</p>\n"
  example:
  - "\n<p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. The example then calls the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add a <code>MainClass</code> object and its attached <code>MainInfo</code> object to a <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> table. The example also illustrates calls to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref> methods to add key/value pairs to the table, and to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the value of an existing key.</p>System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1"
  syntax:
    content: public void Add(TKey key, TValue value)
    content.vb: Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to add. <em>key</em> represents the object to which the property is attached.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>The key's property value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>key</em> already exists.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Add(TKey, TValue)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  id: Finalize
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Finalize()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2865
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  remarks: "\n<p>The garbage collector calls <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\" data-throw-if-not-resolved=\"false\"></xref> when the current object is ready to be finalized. </p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  seealso:
  - type: System.Object.Finalize
    commentId: M:System.Object.Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Finalize()
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  id: GetOrCreateValue(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: GetOrCreateValue(TKey)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.GetOrCreateValue(TKey)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOrCreateValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2866
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key. </p>\n"
  remarks: "\n<p>If <em>key</em> does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the <em>TValue</em> generic type parameter. If the <em>TValue</em> class has no default constructor, a <xref href=\"System.MissingMethodException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n<p>This is the recommended method of retrieving an existing value or adding a new value to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> table if the class of the table's value defines a default constructor. If it does not define a default constructor, you can instead call the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref> method, which relies on a callback-provided method to instantiate the object representing the table's value  </p>\n<p>To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. The example calls the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to add a <code>MainClass</code> object and its attached <code>MainInfo</code> object to a <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> table. The example also illustrates calls to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref> methods to add key/value pairs to the table, and to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the value of an existing key.</p>System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1"
  syntax:
    content: public TValue GetOrCreateValue(TKey key)
    content.vb: Public Function GetOrCreateValue(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to search for. <em>key</em> represents the object to which the property is attached.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The value that corresponds to <em>key</em>, if <em>key</em> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <em>TValue</em> generic type parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MissingMemberException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The class that represents the table's value does not define a default constructor.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).GetOrCreateValue(TKey)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  id: GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: GetValue(TKey, ConditionalWeakTable<TKey, TValue>.CreateValueCallback)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.GetValue(TKey, System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.CreateValueCallback)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2867
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</p>\n"
  remarks: "\n<p>If <em>key</em> does not exist in the table, <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref> invokes the method that is defined by the <em>createValueCallback</em> parameter and passes it the key. A new value is bound to the key in the table and returned as a result.</p>\n<p>Use this method only when the class that represents the table's value does not define a default constructor. If it does define a default constructor, use the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\" data-throw-if-not-resolved=\"false\"></xref> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>If multiple threads try to create the same key, <em>createValueCallback</em> may be invoked multiple times with the same key. Only one of these calls will succeed, and its returned value will be added to the table. Which thread succeeds in creating the value is indeterminate. This rule permits the table to invoke <em>createValueCallback</em> outside the internal table lock to prevent deadlocks.</p>\n"
  example:
  - "\n<p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. It also defines a static (<strong>Shared</strong> in Visual Basic) <code>CreateAttachedValue</code> method that can be assigned to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate and passed to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref> method. The example calls the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref> method to add a <code>MainClass</code> object and its attached <code>MainInfo</code> object to a <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> table. The example also illustrates calls to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\" data-throw-if-not-resolved=\"false\"></xref> methods to add key/value pairs to the table, and to the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the value of an existing key.</p>System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1"
  syntax:
    content: public TValue GetValue(TKey key, ConditionalWeakTable<TKey, TValue>.CreateValueCallback createValueCallback)
    content.vb: Public Function GetValue(key As TKey, createValueCallback As ConditionalWeakTable(Of TKey, TValue).CreateValueCallback) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to search for. <em>key</em> represents the object to which the property is attached.</p>\n"
    - id: createValueCallback
      type: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
      description: "\n<p>A delegate to a method that can create a value for the given <em>key</em>. It has a single parameter of type <em>TKey</em>, and returns a value of type <em>TValue</em>.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The value attached to <em>key</em>, if <em>key</em> already exists in the table; otherwise, the new value returned by the <em>createValueCallback</em> delegate.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> or <em>createValueCallback</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
    commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).GetValue(TKey, System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)
  name.vb: GetValue(TKey, ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  id: Remove(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2868
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Removes a key and its value from the table.</p>\n"
  remarks: "\n<p>If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.</p>\n"
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to remove. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key is found and removed; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Remove(TKey)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2869
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Gets the value of the specified key.</p>\n"
  remarks: "\n<p>If the key is garbage-collected during this operation, the method may return <strong>false</strong> and set <em>value</em> to the default value (as if the key were not present).</p>\n"
  example:
  - "\n<p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. The example calls the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\" data-throw-if-not-resolved=\"false\"></xref> methods to add key/value pairs to a <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> table. In each case, the example calls the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method to confirm that the key/value pair has been added to the table.</p>System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1"
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key that represents an object with an attached property.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>When this method returns, contains the attached property value. If <em>key</em> is not found, <em>value</em> contains the default value.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>key</em> is found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: ConditionalWeakTable.CreateValueCallback<>
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<>
  fullname.vb: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback(Of )
  name.vb: ConditionalWeakTable.CreateValueCallback(Of )
  spec.csharp:
  - uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
    name: ConditionalWeakTable.CreateValueCallback
    fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
    name: ConditionalWeakTable.CreateValueCallback
    fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.MissingMethodException
  isExternal: false
  name: MissingMethodException
  fullName: System.MissingMethodException
