items:
- uid: System.Collections.Specialized.ListDictionary
  commentId: T:System.Collections.Specialized.ListDictionary
  id: ListDictionary
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.ListDictionary.#ctor
  - System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  - System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.ListDictionary.Clear
  - System.Collections.Specialized.ListDictionary.Contains(System.Object)
  - System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.ListDictionary.Count
  - System.Collections.Specialized.ListDictionary.GetEnumerator
  - System.Collections.Specialized.ListDictionary.IsFixedSize
  - System.Collections.Specialized.ListDictionary.IsReadOnly
  - System.Collections.Specialized.ListDictionary.IsSynchronized
  - System.Collections.Specialized.ListDictionary.Item(System.Object)
  - System.Collections.Specialized.ListDictionary.Keys
  - System.Collections.Specialized.ListDictionary.Remove(System.Object)
  - System.Collections.Specialized.ListDictionary.SyncRoot
  - System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.ListDictionary.Values
  langs:
  - csharp
  - vb
  name: ListDictionary
  fullName: System.Collections.Specialized.ListDictionary
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListDictionary
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 13
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Implements <strong>IDictionary</strong> using a singly linked list. Recommended for collections that typically include fewer than 10 items.</p>\n"
  remarks: "\n<p>This is a simple implementation of <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> using a singly linked list. It is smaller and faster than a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> if the number of elements is 10 or less. This should not be used if performance is important for large numbers of elements.</p>\n<p>Items in a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> are not in any guaranteed order; code should not depend on the current order. The <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product. </p>\n<p>Members, such as <xref href=\"System.Collections.Specialized.ListDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.ListDictionary.Remove(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.Specialized.ListDictionary.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> are O(<em>n</em>) operations, where <em>n</em> is <xref href=\"System.Collections.Specialized.ListDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A key cannot be <strong>null</strong>, but a value can.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref>. For example: </p>System.Collections.Specialized.ListDictionary2#3<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</p>"
  example:
  - "\n<p>The following code example demonstrates several of the properties and methods of <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary2#1"
  syntax:
    content: 'public class ListDictionary : IDictionary, ICollection, IEnumerable'
    content.vb: >-
      Public Class ListDictionary
          Implements IDictionary, ICollection, IEnumerable
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Specialized.ListDictionary.#ctor
  commentId: M:System.Collections.Specialized.ListDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: ListDictionary()
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 21
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> using the default comparer.</p>\n"
  remarks: "\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several of the properties and methods of <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary2#1"
  syntax:
    content: public ListDictionary()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  commentId: M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: ListDictionary(IComparer)
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary(System.Collections.IComparer)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 25
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates an empty <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> using the specified comparer.</p>\n"
  remarks: "\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public ListDictionary(IComparer comparer)
    content.vb: Public Sub New(comparer As IComparer)
    parameters:
    - id: comparer
      type: System.Collections.IComparer
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.Count
  commentId: P:System.Collections.Specialized.ListDictionary.Count
  id: Count
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Specialized.ListDictionary.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 105
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example enumerates the elements of a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_Enumerator#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize
  commentId: P:System.Collections.Specialized.ListDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: IsFixedSize
  fullName: System.Collections.Specialized.ListDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFixedSize
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 129
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Specialized.ListDictionary.IsFixedSize\" data-throw-if-not-resolved=\"false\"></xref> property because it is required by the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public bool IsFixedSize { get; }
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly
  commentId: P:System.Collections.Specialized.ListDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.Specialized.ListDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 121
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Specialized.ListDictionary.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property because it is required by the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized
  commentId: P:System.Collections.Specialized.ListDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.Specialized.ListDictionary.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 137
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Specialized.ListDictionary.IsSynchronized\" data-throw-if-not-resolved=\"false\"></xref> property because it is required by the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>Derived classes can provide a synchronized version of the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.Specialized.ListDictionary.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Specialized.ListDictionary.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>System.Collections.Specialized.ListDictionary2#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: public bool IsSynchronized { get; }
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.Specialized.ListDictionary.SyncRoot
    commentId: P:System.Collections.Specialized.ListDictionary.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)
  commentId: P:System.Collections.Specialized.ListDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Item[Object]
  fullName: System.Collections.Specialized.ListDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 30
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.</p>\n<p>You can also use the <xref href=\"System.Collections.Specialized.ListDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Specialized.ListDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>A key cannot be <strong>null</strong>, but a value can. To distinguish between <strong>null</strong> that is returned because the specified key is not found and <strong>null</strong> that is returned because the value of the specified key is <strong>null</strong>, use the <xref href=\"System.Collections.Specialized.ListDictionary.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine if the key exists in the list.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.ListDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.ListDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.ListDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example enumerates the elements of a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_Enumerator#1"
  syntax:
    content: public object this[object key] { get; set; }
    content.vb: Public Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.ListDictionary.Item(System.Object)
  name.vb: Item(Object)
- uid: System.Collections.Specialized.ListDictionary.Keys
  commentId: P:System.Collections.Specialized.ListDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Specialized.ListDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 113
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Specialized.ListDictionary.Values\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example enumerates the elements of a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_Enumerator#1"
  syntax:
    content: public ICollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Specialized.ListDictionary.Values
    commentId: P:System.Collections.Specialized.ListDictionary.Values
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.ListDictionary.SyncRoot
  commentId: P:System.Collections.Specialized.ListDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.Specialized.ListDictionary.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 145
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Derived classes can provide their own synchronized version of the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.Specialized.ListDictionary.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.Specialized.ListDictionary.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Specialized.ListDictionary.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>System.Collections.Specialized.ListDictionary2#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: public object SyncRoot { get; }
    content.vb: Public ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.Specialized.ListDictionary.IsSynchronized
    commentId: P:System.Collections.Specialized.ListDictionary.IsSynchronized
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.ListDictionary.Values
  commentId: P:System.Collections.Specialized.ListDictionary.Values
  id: Values
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Specialized.ListDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 157
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Specialized.ListDictionary.Keys\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example enumerates the elements of a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_Enumerator#1"
  syntax:
    content: public ICollection Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Specialized.ListDictionary.Keys
    commentId: P:System.Collections.Specialized.ListDictionary.Keys
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  fullName: System.Collections.Specialized.ListDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 165
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.</p>\n<p>You can also use the <xref href=\"System.Collections.Specialized.ListDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Specialized.ListDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.ListDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example adds to and removes elements from a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_AddRemove#1"
  syntax:
    content: public void Add(object key, object value)
    content.vb: Public Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An entry with the same key already exists in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.ListDictionary.Remove(System.Object)
    commentId: M:System.Collections.Specialized.ListDictionary.Remove(System.Object)
  - type: System.Collections.Specialized.ListDictionary.Item(System.Object)
    commentId: P:System.Collections.Specialized.ListDictionary.Item(System.Object)
  - type: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.Clear
  commentId: M:System.Collections.Specialized.ListDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Specialized.ListDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 198
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes all entries from the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.ListDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example adds to and removes elements from a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_AddRemove#1"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  seealso:
  - type: System.Collections.IDictionary.Clear
    commentId: M:System.Collections.IDictionary.Clear
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  commentId: M:System.Collections.Specialized.ListDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 205
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.ListDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>key</em> to determine whether <em>item</em> exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example searches for an element in a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_Contains#1"
  syntax:
    content: public bool Contains(object key)
    content.vb: Public Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.Specialized.ListDictionary.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 222
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> entries to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> instance at the specified index.</p>\n"
  remarks: "\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To copy only the keys in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>, use <code>ListDictionary.Keys.CopyTo</code>.</p>\n<p>To copy only the values in the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>, use <code>ListDictionary.Values.CopyTo</code>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.ListDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example copies the elements of a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> to an array.</p>System.Collections.Specialized.ListDictionary_CopyTo#1"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - type: System.Collections.Specialized.ListDictionary.GetEnumerator
    commentId: M:System.Collections.Specialized.ListDictionary.GetEnumerator
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator
  commentId: M:System.Collections.Specialized.ListDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 243
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example enumerates the elements of a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_Enumerator#1"
  syntax:
    content: public IDictionaryEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  commentId: M:System.Collections.Specialized.ListDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 253
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> does not contain an element with the specified key, the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.ListDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example adds to and removes elements from a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_AddRemove#1"
  syntax:
    content: public void Remove(object key)
    content.vb: Public Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  - type: System.Collections.IDictionary.Remove(System.Object)
    commentId: M:System.Collections.IDictionary.Remove(System.Object)
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/ListDictionary.cs
    startLine: 248
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. At this position, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example enumerates the elements of a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.ListDictionary_Enumerator#1"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
