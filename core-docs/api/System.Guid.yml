items:
- uid: System.Guid
  commentId: T:System.Guid
  id: Guid
  parent: System
  children:
  - System.Guid.#ctor(System.Byte[])
  - System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
  - System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])
  - System.Guid.#ctor(System.String)
  - System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
  - System.Guid.CompareTo(System.Guid)
  - System.Guid.Empty
  - System.Guid.Equals(System.Guid)
  - System.Guid.Equals(System.Object)
  - System.Guid.GetHashCode
  - System.Guid.NewGuid
  - System.Guid.op_Equality(System.Guid,System.Guid)
  - System.Guid.op_Inequality(System.Guid,System.Guid)
  - System.Guid.Parse(System.String)
  - System.Guid.ParseExact(System.String,System.String)
  - System.Guid.System#IComparable#CompareTo(System.Object)
  - System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Guid.ToByteArray
  - System.Guid.ToString
  - System.Guid.ToString(System.String)
  - System.Guid.TryParse(System.String,System.Guid@)
  - System.Guid.TryParseExact(System.String,System.String,System.Guid@)
  langs:
  - csharp
  - vb
  name: Guid
  fullName: System.Guid
  type: Struct
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Guid
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 922
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a globally unique identifier (GUID).</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/guid.cs#b622ef5f6b76c10a\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/guid.cs#b622ef5f6b76c10a\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>A GUID is a 128-bit integer (16 bytes) that can be used across all computers and networks wherever a unique identifier is required. Such an identifier has a very low probability of being duplicated.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Runtime.InteropServices.GuidAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to assign a GUID to an interface and to a user-defined class. It retrieves the value of the GUID by calling the <xref href=\"System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method, and compares it with two other GUIDs to determine whether they are equal.</p>Guid#1<p>Note that the <xref href=\"System.Runtime.InteropServices.GuidAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute is typically used in an application to expose a type to COM. If you compile this example, you can run the Assembly Registration tool (Regasm.exe) on the generated assembly to create registry (.reg) and type library (.tlb) files. The .reg file can be used to register the coclass in the registry, and the .tlb file can provide metadata for COM interop. </p>"
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct Guid : IComparable, IComparable<Guid>, IEquatable<Guid>, IFormattable
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure Guid
          Implements IComparable, IComparable(Of Guid), IEquatable(Of Guid), IFormattable
  implements:
  - System.IComparable
  - System.IComparable{System.Guid}
  - System.IEquatable{System.Guid}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
  id: Empty
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Empty
  fullName: System.Guid.Empty
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 925
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>A read-only instance of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure whose value is all zeros.</p>\n"
  remarks: "\n<p>You can compare a GUID with the value of the <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> field to determine whether a GUID is non-zero. The following example uses the <xref href=\"System.Guid.op_Equality(System.Guid,System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> operator to compare two GUID values with <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> to determine whether they consist exclusively of zeros.</p>System.Guid.Empty#1"
  syntax:
    content: public static readonly Guid Empty
    content.vb: Public Shared ReadOnly Empty As Guid
    return:
      type: System.Guid
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Guid.#ctor(System.Byte[])
  commentId: M:System.Guid.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Guid(Byte[])
  fullName: System.Guid.Guid(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 926
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure by using the specified array of bytes.</p>\n"
  syntax:
    content: public Guid(byte[] b)
    content.vb: Public Sub New(b As Byte())
    parameters:
    - id: b
      type: System.Byte[]
      description: "\n<p>A 16-element byte array containing values with which to initialize the GUID. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>b</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>b</em> is not 16 bytes long. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Guid.Guid(System.Byte())
  name.vb: Guid(Byte())
- uid: System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
  commentId: M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
  id: '#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)'
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Guid(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)
  fullName: System.Guid.Guid(System.Int32, System.Int16, System.Int16, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 927
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure by using the specified integers and bytes.</p>\n"
  remarks: "\n<p>Specifying individual bytes in this manner can be used to circumvent byte order restrictions (big-endian or little-endian byte order) on particular types of computers.</p>\n"
  example:
  - "\n<p>The following example creates a GUID whose string representation is \"0000000a-000b-000c-0001-020304050607\".</p>System.Guid.Ctor#2"
  syntax:
    content: public Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k)
    content.vb: Public Sub New(a As Integer, b As Short, c As Short, d As Byte, e As Byte, f As Byte, g As Byte, h As Byte, i As Byte, j As Byte, k As Byte)
    parameters:
    - id: a
      type: System.Int32
      description: "\n<p>The first 4 bytes of the GUID. </p>\n"
    - id: b
      type: System.Int16
      description: "\n<p>The next 2 bytes of the GUID. </p>\n"
    - id: c
      type: System.Int16
      description: "\n<p>The next 2 bytes of the GUID. </p>\n"
    - id: d
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: e
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: f
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: g
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: h
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: i
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: j
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: k
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])
  commentId: M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])
  id: '#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])'
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Guid(Int32, Int16, Int16, Byte[])
  fullName: System.Guid.Guid(System.Int32, System.Int16, System.Int16, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 928
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure by using the specified integers and byte array.</p>\n"
  example:
  - "\n<p>\n<code>Guid(1,2,3,new byte[]{0,1,2,3,4,5,6,7})</code> creates a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> that corresponds to \"00000001-0002-0003-0001-020304050607\".</p>\n"
  syntax:
    content: public Guid(int a, short b, short c, byte[] d)
    content.vb: Public Sub New(a As Integer, b As Short, c As Short, d As Byte())
    parameters:
    - id: a
      type: System.Int32
      description: "\n<p>The first 4 bytes of the GUID. </p>\n"
    - id: b
      type: System.Int16
      description: "\n<p>The next 2 bytes of the GUID. </p>\n"
    - id: c
      type: System.Int16
      description: "\n<p>The next 2 bytes of the GUID. </p>\n"
    - id: d
      type: System.Byte[]
      description: "\n<p>The remaining 8 bytes of the GUID. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>d</em> is not 8 bytes long. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Guid.Guid(System.Int32, System.Int16, System.Int16, System.Byte())
  name.vb: Guid(Int32, Int16, Int16, Byte())
- uid: System.Guid.#ctor(System.String)
  commentId: M:System.Guid.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Guid(String)
  fullName: System.Guid.Guid(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 929
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure by using the value represented by the specified string.</p>\n"
  remarks: "\n<p>The alphabetic hexadecimal digits in the <em>g</em> parameter can be uppercase or lowercase. For example, the following strings represent the same GUID:</p>\n<p>\"ca761232ed4211cebacd00aa0057b223\" </p>\n<p>\"CA761232-ED42-11CE-BACD-00AA0057B223\" </p>\n<p>\"{CA761232-ED42-11CE-BACD-00AA0057B223}\" </p>\n<p>\"(CA761232-ED42-11CE-BACD-00AA0057B223)\" </p>\n<p>\"{0xCA761232, 0xED42, 0x11CE, {0xBA, 0xCD, 0x00, 0xAA, 0x00, 0x57, 0xB2, 0x23}}\" </p>\n"
  example:
  - "\n<p>The following example passes each string listed in the Remarks section to the <xref href=\"System.Guid.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>System.Guid.ctor#1"
  syntax:
    content: public Guid(string g)
    content.vb: Public Sub New(g As String)
    parameters:
    - id: g
      type: System.String
      description: "\n<p>A string that contains a GUID in one of the following formats (\"d\" represents a hexadecimal digit whose case is ignored): </p>\n<p>32 contiguous digits: </p>\n<p>dddddddddddddddddddddddddddddddd </p>\n<p>-or- </p>\n<p>Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses: </p>\n<p>dddddddd-dddd-dddd-dddd-dddddddddddd </p>\n<p>-or- </p>\n<p>{dddddddd-dddd-dddd-dddd-dddddddddddd} </p>\n<p>-or- </p>\n<p>(dddddddd-dddd-dddd-dddd-dddddddddddd) </p>\n<p>-or- </p>\n<p>Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by \"0x\" or \"0X\", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces: </p>\n<p>{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} </p>\n<p>All braces, commas, and \"0x\" prefixes are required. All embedded spaces are ignored. All leading zeros in a group are ignored.</p>\n<p>The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low-order digits of the group. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>g</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format of <em>g</em> is invalid. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The format of <em>g</em> is invalid. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
  commentId: M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)
  id: '#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)'
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Guid(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte)
  fullName: System.Guid.Guid(System.UInt32, System.UInt16, System.UInt16, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 930
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure by using the specified unsigned integers and bytes.</p>\n"
  remarks: "\n<p>Specifying the bytes in this manner avoids endianness issues.</p>\n"
  example:
  - "\n<p>Guid(0xa,0xb,0xc,0,1,2,3,4,5,6,7) creates a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> that corresponds to \"0000000a-000b-000c-0001-020304050607\".</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(a As UInteger, b As UShort, c As UShort, d As Byte, e As Byte, f As Byte, g As Byte, h As Byte, i As Byte, j As Byte, k As Byte)
    parameters:
    - id: a
      type: System.UInt32
      description: "\n<p>The first 4 bytes of the GUID. </p>\n"
    - id: b
      type: System.UInt16
      description: "\n<p>The next 2 bytes of the GUID. </p>\n"
    - id: c
      type: System.UInt16
      description: "\n<p>The next 2 bytes of the GUID. </p>\n"
    - id: d
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: e
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: f
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: g
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: h
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: i
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: j
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
    - id: k
      type: System.Byte
      description: "\n<p>The next byte of the GUID. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Guid.CompareTo(System.Guid)
  commentId: M:System.Guid.CompareTo(System.Guid)
  id: CompareTo(System.Guid)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: CompareTo(Guid)
  fullName: System.Guid.CompareTo(System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 932
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance to a specified <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> object and returns an indication of their relative values.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Guid.CompareTo(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method compares the GUIDs as if they were values provided to the <xref href=\"System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> constructor, as follows: </p>\n<ul><li>\n<p>It compares the <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values, and returns a result if they are unequal. If they are equal, it performs the next comparison. </p>\n</li><li>\n<p>It compares the first <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values, and returns a result if they are unequal. If they are equal, it performs the next comparison. </p>\n</li><li>\n<p>It compares the second <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values, and returns a result if they are unequal. If they are equal, it performs the next comparison. </p>\n</li><li>\n<p>If performs a byte-by-byte comparison of the next eight <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values. When it encounters the first unequal pair, it returns the result. Otherwise, it returns 0 to indicate that the two <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> values are equal. </p>\n</li></ul>\n<p>Note that the final eight bytes appear in the string representation of a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> in reverse order, from low byte to high byte. For example, in the string representation of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value \"01e75c83-c6f5-4192-b57e-7427cec5560d\", the final eight bytes are \"b57e-7427cec5560d.\" In other words, the final eight bytes are compared on a byte-by-byte basis from left to right starting with 0xb5.</p>\n<p>If two GUIDs have equal values for a component, the method compares the next component. When it finds a component whose values are unequal, it returns the result.</p>\n<p>This method implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and performs slightly better than the <xref href=\"System.Guid.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to convert the <em>value</em> parameter to a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Guid.CompareTo(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method to compare a GUID value with two similar GUID values. </p>System.Guid.CompareTo#1"
  syntax:
    content: public int CompareTo(Guid value)
    content.vb: Public Function CompareTo(value As Guid) As Integer
    parameters:
    - id: value
      type: System.Guid
      description: "\n<p>An object to compare to this instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\n<p>Return value </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>A negative integer </p>\n</td><td>\n<p>This instance is less than <em>value</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance is equal to <em>value</em>. </p>\n</td></tr><tr><td>\n<p>A positive integer </p>\n</td><td>\n<p>This instance is greater than <em>value</em>. </p>\n</td></tr></tbody></table>\n"
  implements:
  - System.IComparable{System.Guid}.CompareTo(System.Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Guid.Equals(System.Guid)
  commentId: M:System.Guid.Equals(System.Guid)
  id: Equals(System.Guid)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Equals(Guid)
  fullName: System.Guid.Equals(System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 933
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance and a specified <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> object represent the same value.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> objects are equal if they have identical byte values. </p>\n<p>This method performs slightly better than the <xref href=\"System.Guid.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to box the <em>g</em> parameter.</p>\n"
  example:
  - 
  syntax:
    content: public bool Equals(Guid g)
    content.vb: Public Function Equals(g As Guid) As Boolean
    parameters:
    - id: g
      type: System.Guid
      description: "\n<p>An object to compare to this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>g</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Guid.Equals(System.Object)
    commentId: M:System.Guid.Equals(System.Object)
  implements:
  - System.IEquatable{System.Guid}.Equals(System.Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Guid.Equals(System.Object)
  commentId: M:System.Guid.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Guid.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 934
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> objects are equal if they have identical byte values. </p>\n"
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The object to compare with this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>o</em> is a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> that has the same value as this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Guid.GetHashCode
  commentId: M:System.Guid.GetHashCode
  id: GetHashCode
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Guid.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 935
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code for this instance.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Guid.NewGuid
  commentId: M:System.Guid.NewGuid
  id: NewGuid
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: NewGuid()
  fullName: System.Guid.NewGuid()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewGuid
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 936
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  remarks: "\n<p>This is a convenient <strong>static</strong> method that you can call to get a new <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>. The method wraps a call to the Windows <see href=\"http://msdn.microsoft.com/library/windows/desktop/ms688568.aspx\">CoCreateGuid</see> function. The returned <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> is guaranteed to not equal <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example creates and displays the values of two <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>system.guid.newguid#1"
  syntax:
    content: public static Guid NewGuid()
    content.vb: Public Shared Function NewGuid As Guid
    return:
      type: System.Guid
      description: "\n<p>A new GUID object.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Guid.op_Equality(System.Guid,System.Guid)
  commentId: M:System.Guid.op_Equality(System.Guid,System.Guid)
  id: op_Equality(System.Guid,System.Guid)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Equality(Guid, Guid)
  fullName: System.Guid.Equality(System.Guid, System.Guid)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 937
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the values of two specified <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> objects are equal.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Guid.op_Equality(System.Guid,System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> operator to compare two GUID values with <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> to determine whether they consist exclusively of zeros.</p>System.Guid.Empty#1"
  syntax:
    content: public static bool operator ==(Guid a, Guid b)
    content.vb: Public Shared Operator =(a As Guid, b As Guid) As Boolean
    parameters:
    - id: a
      type: System.Guid
      description: "\n<p>The first object to compare. </p>\n"
    - id: b
      type: System.Guid
      description: "\n<p>The second object to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>a</em> and <em>b</em> are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Guid.op_Inequality(System.Guid,System.Guid)
  commentId: M:System.Guid.op_Inequality(System.Guid,System.Guid)
  id: op_Inequality(System.Guid,System.Guid)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Inequality(Guid, Guid)
  fullName: System.Guid.Inequality(System.Guid, System.Guid)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 938
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the values of two specified <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> objects are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(Guid a, Guid b)
    content.vb: Public Shared Operator <>(a As Guid, b As Guid) As Boolean
    parameters:
    - id: a
      type: System.Guid
      description: "\n<p>The first object to compare. </p>\n"
    - id: b
      type: System.Guid
      description: "\n<p>The second object to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>a</em> and <em>b</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Guid.Parse(System.String)
  commentId: M:System.Guid.Parse(System.String)
  id: Parse(System.String)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Guid.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 939
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a GUID to the equivalent <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Guid.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method trims any leading or trailing white space from <em>input</em> and converts the string representation of a GUID to a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value. This method can convert strings in any of the five formats produced by the <xref href=\"System.Guid.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Guid.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> methods, as shown in the following table. </p>\n<p>Specifier </p>\n<p>Description</p>\n<p>Format</p>\n<p>The method throws a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> if it is unable to successfully parse the string. Here are some of the reasons why this might occur include: </p>\n<ul><li>\n<p>\n<em>input</em> contains characters that are not part of the hexadecimal character set. </p>\n</li><li>\n<p>\n<em>input</em> has too many or too few numeric characters. </p>\n</li><li>\n<p>\n<em>input</em> has too many or too few of the non-numeric characters appropriate for a particular format. </p>\n</li><li>\n<p>\n<em>input</em> is not in one of the formats recognized by the <xref href=\"System.Guid.ToString\" data-throw-if-not-resolved=\"false\"></xref> method and listed in the previous table. </p>\n</li></ul>\n<p>Use the <xref href=\"System.Guid.TryParse(System.String,System.Guid@)\" data-throw-if-not-resolved=\"false\"></xref> method to catch any unsuccessful parse operations without having to handle an exception. </p>\n"
  example:
  - "\n<p>The following example creates a new GUID, converts it to three separate string representations by calling the <xref href=\"System.Guid.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the \"B\", \"D\", and \"X\" format specifiers, and then calls the <xref href=\"System.Guid.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the strings back to <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> values. </p>System.Guid.Parse#3"
  syntax:
    content: public static Guid Parse(string input)
    content.vb: Public Shared Function Parse(input As String) As Guid
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to convert.</p>\n"
    return:
      type: System.Guid
      description: "\n<p>A structure that contains the value that was parsed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>input</em> is not in a recognized format.</p>\n"
  seealso:
  - type: System.Guid.TryParse(System.String,System.Guid@)
    commentId: M:System.Guid.TryParse(System.String,System.Guid@)
  - type: System.Guid.ToString
    commentId: M:System.Guid.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Guid.ParseExact(System.String,System.String)
  commentId: M:System.Guid.ParseExact(System.String,System.String)
  id: ParseExact(System.String,System.String)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: ParseExact(String, String)
  fullName: System.Guid.ParseExact(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParseExact
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 940
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a GUID to the equivalent <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure, provided that the string is in the specified format.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Guid.ParseExact(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method requires the string to convert to be exactly in the format specified by the <em>format</em> parameter, after leading and trailing white-space characters are removed. The following table shows the accepted format specifiers for the <em>format</em> parameter. \"0\" represents a digit; hyphens (\"-\"), braces (\"{\", \"}\"), and parentheses (\"(\", \")\") appear as shown.</p>\n<p>Specifier </p>\n<p>Format of the <em>input</em> parameter </p>\n<table><tbody><tr><td>\n<p>N </p>\n</td><td>\n<p>32 digits: </p>\n<p>00000000000000000000000000000000 </p>\n</td></tr><tr><td>\n<p>D </p>\n</td><td>\n<p>32 digits separated by hyphens: </p>\n<p>00000000-0000-0000-0000-000000000000 </p>\n</td></tr><tr><td>\n<p>B </p>\n</td><td>\n<p>32 digits separated by hyphens, enclosed in braces: </p>\n<p>{00000000-0000-0000-0000-000000000000} </p>\n</td></tr><tr><td>\n<p>P </p>\n</td><td>\n<p>32 digits separated by hyphens, enclosed in parentheses: </p>\n<p>(00000000-0000-0000-0000-000000000000) </p>\n</td></tr><tr><td>\n<p>X</p>\n</td><td>\n<p>Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces:</p>\n<p>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Guid.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with each of the supported format specifiers to generate an array of strings that represent a single GUID. These are then passed to the <xref href=\"System.Guid.ParseExact(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, which successfully parses only the string that conforms to the \"B\" format specifier.</p>System.Guid.Parse#4"
  syntax:
    content: public static Guid ParseExact(string input, string format)
    content.vb: Public Shared Function ParseExact(input As String, format As String) As Guid
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The GUID to convert.</p>\n"
    - id: format
      type: System.String
      description: "\n<p>One of the following specifiers that indicates the exact format to use when interpreting <em>input</em>: \"N\", \"D\", \"B\", \"P\", or \"X\".</p>\n"
    return:
      type: System.Guid
      description: "\n<p>A structure that contains the value that was parsed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> or <em>format</em> is <strong>null</strong>.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>input</em> is not in the format specified by <em>format</em>.</p>\n"
  seealso:
  - type: System.Guid.TryParseExact(System.String,System.String,System.Guid@)
    commentId: M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Guid.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Guid.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Guid.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 941
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object value)
    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)
  commentId: M:System.Guid.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: IFormattable.ToString(String, IFormatProvider)
  fullName: System.Guid.System.IFormattable.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IFormattable.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 942
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: string IFormattable.ToString(string format, IFormatProvider provider)
    content.vb: Function System.IFormattable.ToString(format As String, provider As IFormatProvider) As String Implements IFormattable.ToString
    parameters:
    - id: format
      type: System.String
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  name.vb: System.IFormattable.ToString(String, IFormatProvider)
- uid: System.Guid.ToByteArray
  commentId: M:System.Guid.ToByteArray
  id: ToByteArray
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: ToByteArray()
  fullName: System.Guid.ToByteArray()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByteArray
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 943
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a 16-element byte array that contains the value of this instance.</p>\n"
  remarks: "\n<p>You can use the byte array returned by this method to round-trip a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value by calling the <xref href=\"System.Guid.#ctor(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n<p>Note that the order of bytes in the returned byte array is different from the string representation of a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value. The order of the beginning four-byte group and the next two two-byte groups is reversed, whereas the order of the last two-byte group and the closing six-byte group is the same. The example provides an illustration. </p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Guid.NewGuid\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value, and then calls the <xref href=\"System.Guid.ToByteArray\" data-throw-if-not-resolved=\"false\"></xref> method to represent the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value as a byte array. It then displays both values to the console. Finally, it instantiates a new <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value from the byte array and calls its <xref href=\"System.Guid.Equals(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method to show that the two <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> values are identical. </p>System.Guid.ToByteArray#1"
  syntax:
    content: public byte[] ToByteArray()
    content.vb: Public Function ToByteArray As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A 16-element byte array.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Guid.ToString
  commentId: M:System.Guid.ToString
  id: ToString
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Guid.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 944
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a string representation of the value of this instance in registry format.</p>\n"
  remarks: "\n<p>This method provides a default GUID format that is sufficient for typical use; however, other versions of this method that take a <em>format</em> parameter provide a few common format variations.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The value of this <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>, formatted by using the \"D\" format specifier as follows: </p>\n<p>\n<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx </code>\n</p>\n<p>where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is \"382c74c3-721d-4f34-80e5-57657b6cbc27\". To convert the hexadecimal digits from a through f to uppercase, call the <xref href=\"System.String.ToUpper\" data-throw-if-not-resolved=\"false\"></xref>  method on the returned string.</p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Guid.ToString(System.String)
  commentId: M:System.Guid.ToString(System.String)
  id: ToString(System.String)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Guid.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 945
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a string representation of the value of this <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> instance, according to the provided format specifier.</p>\n"
  remarks: "\n<p>The following table shows the accepted format specifiers for the <em>format</em> parameter. \"0\" represents a digit; hyphens (\"-\"), braces (\"{\", \"}\"), and parentheses (\"(\", \")\") appear as shown.</p>\n<p>Specifier </p>\n<p>Format of return value </p>\n<table><tbody><tr><td>\n<p>\n<strong>N</strong>\n</p>\n</td><td>\n<p>32 digits: </p>\n<p>00000000000000000000000000000000 </p>\n</td></tr><tr><td>\n<p>\n<strong>D</strong>\n</p>\n</td><td>\n<p>32 digits separated by hyphens: </p>\n<p>00000000-0000-0000-0000-000000000000 </p>\n</td></tr><tr><td>\n<p>\n<strong>B</strong>\n</p>\n</td><td>\n<p>32 digits separated by hyphens, enclosed in braces: </p>\n<p>{00000000-0000-0000-0000-000000000000} </p>\n</td></tr><tr><td>\n<p>\n<strong>P</strong>\n</p>\n</td><td>\n<p>32 digits separated by hyphens, enclosed in parentheses: </p>\n<p>(00000000-0000-0000-0000-000000000000) </p>\n</td></tr><tr><td>\n<p>\n<strong>X</strong>\n</p>\n</td><td>\n<p>Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces:</p>\n<p>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</p>\n</td></tr></tbody></table>\n<p>The hexadecimal digits a through f are lowercase in the returned string. To convert them to uppercase, call the <xref href=\"System.String.ToUpper\" data-throw-if-not-resolved=\"false\"></xref> method on the returned string. </p>\n"
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A single format specifier that indicates how to format the value of this <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>. The <em>format</em> parameter can be \"N\", \"D\", \"B\", \"P\", or \"X\". If <em>format</em> is <strong>null</strong> or an empty string (\"\"), \"D\" is used. </p>\n"
    return:
      type: System.String
      description: "\n<p>The value of this <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>, represented as a series of lowercase hexadecimal digits in the specified format. </p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of <em>format</em> is not <strong>null</strong>, an empty string (\"\"), \"N\", \"D\", \"B\", \"P\", or \"X\". </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Guid.TryParse(System.String,System.Guid@)
  commentId: M:System.Guid.TryParse(System.String,System.Guid@)
  id: TryParse(System.String,System.Guid@)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: TryParse(String, out Guid)
  fullName: System.Guid.TryParse(System.String, out System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 946
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a GUID to the equivalent <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
  remarks: "\n<p>This method is like the <xref href=\"System.Guid.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, except that instead of returning the parsed GUID, it returns <strong>false</strong> if <em>input</em> is <strong>null</strong> or not in a recognized format, and doesn't throw an exception. It trims any leading or trailing white space from <em>input</em> and converts strings in any of the five formats recognized by the <xref href=\"System.Guid.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Guid.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>methods, as shown in the following table. </p>\n<p>Specifier </p>\n<p>Description</p>\n<p>Format</p>\n"
  example:
  - "\n<p>The following example creates a new GUID, converts it to three separate string representations by calling the <xref href=\"System.Guid.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with the \"B\", \"D\", and \"X\" format specifiers, and then calls the <xref href=\"System.Guid.TryParse(System.String,System.Guid@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the strings back to <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> values. </p>System.Guid.Parse#2"
  syntax:
    content: public static bool TryParse(string input, out Guid result)
    content.vb: Public Shared Function TryParse(input As String, ByRef result As Guid) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The GUID to convert.</p>\n"
    - id: result
      type: System.Guid
      description: "\n<p>The structure that will contain the parsed value. If the method returns <strong>true</strong>, <em>result</em> contains a valid <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>. If the method returns <strong>false</strong>, <em>result</em> equals <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the parse operation was successful; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Guid.Parse(System.String)
    commentId: M:System.Guid.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Guid.TryParse(System.String, ByRef System.Guid)
  name.vb: TryParse(String, ByRef Guid)
- uid: System.Guid.TryParseExact(System.String,System.String,System.Guid@)
  commentId: M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)
  id: TryParseExact(System.String,System.String,System.Guid@)
  parent: System.Guid
  langs:
  - csharp
  - vb
  name: TryParseExact(String, String, out Guid)
  fullName: System.Guid.TryParseExact(System.String, System.String, out System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParseExact
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 947
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a GUID to the equivalent <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> structure, provided that the string is in the specified format.</p>\n"
  remarks: "\n<p>This method requires the string to convert to be exactly in the format specified by the <em>format</em> parameter, after leading and trailing white-space characters are removed. It returns <strong>false</strong> if <em>input</em> is <strong>null</strong> or is not in the format specified by <em>format</em>, and doesn't throw an exception.</p>\n<p>The following table shows the accepted format specifiers for the <em>format</em> parameter. \"0\" represents a digit; hyphens (\"-\"), braces (\"{\", \"}\"), and parentheses (\"(\", \")\") appear as shown.</p>\n<p>Specifier </p>\n<p>Format of the <em>input</em> parameter </p>\n<table><tbody><tr><td>\n<p>N </p>\n</td><td>\n<p>32 digits: </p>\n<p>00000000000000000000000000000000 </p>\n</td></tr><tr><td>\n<p>D </p>\n</td><td>\n<p>32 digits separated by hyphens: </p>\n<p>00000000-0000-0000-0000-000000000000 </p>\n</td></tr><tr><td>\n<p>B </p>\n</td><td>\n<p>32 digits separated by hyphens, enclosed in braces: </p>\n<p>{00000000-0000-0000-0000-000000000000} </p>\n</td></tr><tr><td>\n<p>P </p>\n</td><td>\n<p>32 digits separated by hyphens, enclosed in parentheses: </p>\n<p>(00000000-0000-0000-0000-000000000000) </p>\n</td></tr><tr><td>\n<p>X</p>\n</td><td>\n<p>Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces:</p>\n<p>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Guid.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method with each of the supported format specifiers to generate an array of strings that represent a single GUID. These are then passed to the <xref href=\"System.Guid.TryParseExact(System.String,System.String,System.Guid@)\" data-throw-if-not-resolved=\"false\"></xref> method, which successfully parses the string that conforms to the \"B\" format specifier.</p>System.Guid.Parse#5"
  syntax:
    content: public static bool TryParseExact(string input, string format, out Guid result)
    content.vb: Public Shared Function TryParseExact(input As String, format As String, ByRef result As Guid) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The GUID to convert.</p>\n"
    - id: format
      type: System.String
      description: "\n<p>One of the following specifiers that indicates the exact format to use when interpreting <em>input</em>: \"N\", \"D\", \"B\", \"P\", or \"X\".</p>\n"
    - id: result
      type: System.Guid
      description: "\n<p>The structure that will contain the parsed value. If the method returns <strong>true</strong>, <em>result</em> contains a valid <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>. If the method returns <strong>false</strong>, <em>result</em> equals <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the parse operation was successful; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Guid.ParseExact(System.String,System.String)
    commentId: M:System.Guid.ParseExact(System.String,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Guid.TryParseExact(System.String, System.String, ByRef System.Guid)
  name.vb: TryParseExact(String, String, ByRef Guid)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Guid}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Guid>
  fullName: System.IComparable<System.Guid>
  fullname.vb: System.IComparable(Of System.Guid)
  name.vb: IComparable(Of Guid)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: )
    fullName: )
- uid: System.IEquatable{System.Guid}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Guid>
  fullName: System.IEquatable<System.Guid>
  fullname.vb: System.IEquatable(Of System.Guid)
  name.vb: IEquatable(Of Guid)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: )
    fullName: )
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.IComparable{System.Guid}.CompareTo(System.Guid)
  parent: System.IComparable{System.Guid}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Guid)
  fullName: System.IComparable<System.Guid>.CompareTo(System.Guid)
  fullname.vb: System.IComparable(Of System.Guid).CompareTo(System.Guid)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.Guid>.CompareTo
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.Guid).CompareTo
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable{System.Guid}.Equals(System.Guid)
  parent: System.IEquatable{System.Guid}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Guid)
  fullName: System.IEquatable<System.Guid>.Equals(System.Guid)
  fullname.vb: System.IEquatable(Of System.Guid).Equals(System.Guid)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Guid>.Equals
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Guid).Equals
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: false
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: false
  name: ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
