items:
- uid: System.Runtime.InteropServices.FieldOffsetAttribute
  commentId: T:System.Runtime.InteropServices.FieldOffsetAttribute
  id: FieldOffsetAttribute
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)
  - System.Runtime.InteropServices.FieldOffsetAttribute.Value
  langs:
  - csharp
  - vb
  name: FieldOffsetAttribute
  fullName: System.Runtime.InteropServices.FieldOffsetAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldOffsetAttribute
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3029
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates the physical position of fields within the unmanaged representation of a class or structure.</p>\n"
  remarks: "\n<p>You can apply this attribute to fields.</p>\n<p>This attribute is used when <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\" data-throw-if-not-resolved=\"false\"></xref>, with <xref href=\"System.Runtime.InteropServices.LayoutKind.Explicit\" data-throw-if-not-resolved=\"false\"></xref> passed to its constructor, is applied to a class or structure to specify the offset of each non- <strong>static</strong> or constant member within the unmanaged representation of that class or structure. </p>\n"
  example:
  - "\n<p>The following example demonstrates how to apply the <xref href=\"System.Runtime.InteropServices.FieldOffsetAttribute\" data-throw-if-not-resolved=\"false\"></xref> to members of a class with an explicit layout.</p>Classic FieldOffsetAttribute Example#1<p>For a larger example, see the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Field, Inherited = false)]

      public sealed class FieldOffsetAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Field, Inherited:=False)>

      Public NotInheritable Class FieldOffsetAttribute
          Inherits Attribute
  seealso:
  - type: System.Runtime.InteropServices.LayoutKind
    commentId: T:System.Runtime.InteropServices.LayoutKind
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 256
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)
  commentId: M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.InteropServices.FieldOffsetAttribute
  langs:
  - csharp
  - vb
  name: FieldOffsetAttribute(Int32)
  fullName: System.Runtime.InteropServices.FieldOffsetAttribute.FieldOffsetAttribute(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3032
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.FieldOffsetAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the offset in the structure to the beginning of the field.</p>\n"
  syntax:
    content: public FieldOffsetAttribute(int offset)
    content.vb: Public Sub New(offset As Integer)
    parameters:
    - id: offset
      type: System.Int32
      description: "\n<p>The offset in bytes from the beginning of the structure to the beginning of the field. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.FieldOffsetAttribute.Value
  commentId: P:System.Runtime.InteropServices.FieldOffsetAttribute.Value
  id: Value
  parent: System.Runtime.InteropServices.FieldOffsetAttribute
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Runtime.InteropServices.FieldOffsetAttribute.Value
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3033
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the offset from the beginning of the structure to the beginning of the field.</p>\n"
  syntax:
    content: public int Value { get; }
    content.vb: Public ReadOnly Property Value As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The offset from the beginning of the structure to the beginning of the field.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: false
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
