items:
- uid: System.Net.SocketAddress
  commentId: T:System.Net.SocketAddress
  id: SocketAddress
  parent: System.Net
  children:
  - System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)
  - System.Net.SocketAddress.Equals(System.Object)
  - System.Net.SocketAddress.Family
  - System.Net.SocketAddress.GetHashCode
  - System.Net.SocketAddress.Item(System.Int32)
  - System.Net.SocketAddress.Size
  - System.Net.SocketAddress.ToString
  langs:
  - csharp
  - vb
  name: SocketAddress
  fullName: System.Net.SocketAddress
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketAddress
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 240
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Stores serialized information from <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> derived classes.</p>\n"
  remarks: "\n<p>The first 2 bytes of the underlying buffer are reserved for the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> enumerated value. When the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> is used to store a serialized <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>, the third and fourth bytes are used to store port number information. The next bytes are used to store the IP address. You can access any information within this underlying byte buffer by referring to its index position; the byte buffer uses zero-based indexing. You can also use the <xref href=\"System.Net.SocketAddress.Family\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.SocketAddress.Size\" data-throw-if-not-resolved=\"false\"></xref> properties to get the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value and the buffer size, respectively. To view any of this information as a string, use the <xref href=\"System.Net.SocketAddress.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> to serialize an instance of the <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> class. After serialization, the underlying byte buffer of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> contains all of the <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> state information.</p>Classic SocketAddressExample#1"
  syntax:
    content: public class SocketAddress
    content.vb: Public Class SocketAddress
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)
  commentId: M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: SocketAddress(AddressFamily)
  fullName: System.Net.SocketAddress.SocketAddress(System.Net.Sockets.AddressFamily)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 242
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> class for the given address family.</p>\n"
  remarks: "\n<p>This overload sets the underlying buffer size to 32 bytes.</p>\n"
  syntax:
    content: public SocketAddress(AddressFamily family)
    content.vb: Public Sub New(family As AddressFamily)
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>An <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> enumerated value. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)
  commentId: M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)
  id: '#ctor(System.Net.Sockets.AddressFamily,System.Int32)'
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: SocketAddress(AddressFamily, Int32)
  fullName: System.Net.SocketAddress.SocketAddress(System.Net.Sockets.AddressFamily, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 243
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> class using the specified address family and buffer size.</p>\n"
  remarks: "\n<p>Use this overload to create a new instance of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> class with a particular underlying buffer size.</p>\n"
  syntax:
    content: public SocketAddress(AddressFamily family, int size)
    content.vb: Public Sub New(family As AddressFamily, size As Integer)
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>An <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> enumerated value. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to allocate for the underlying buffer. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>size</em> is less than 2. These 2 bytes are needed to store <em>family</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.SocketAddress.Family
  commentId: P:System.Net.SocketAddress.Family
  id: Family
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: Family
  fullName: System.Net.SocketAddress.Family
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Family
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 244
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> enumerated value of the current <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method gets the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> enumerated value that represents the addressing scheme of the current <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref>. If you want to view the corresponding string representation of <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Net.SocketAddress.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public AddressFamily Family { get; }
    content.vb: Public ReadOnly Property Family As AddressFamily
    parameters: []
    return:
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> enumerated values.</p>\n"
  seealso:
  - type: System.Net.Sockets.AddressFamily
    commentId: T:System.Net.Sockets.AddressFamily
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.SocketAddress.Item(System.Int32)
  commentId: P:System.Net.SocketAddress.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Net.SocketAddress.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 245
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the specified index element in the underlying buffer.</p>\n"
  remarks: "\n<p>This property gets or sets the specified byte position in the underlying buffer.</p>\n<p>Be sure to call <xref href=\"System.Net.SocketAddress.Size\" data-throw-if-not-resolved=\"false\"></xref> before referring to elements in the underlying buffer. Referring to an index that does not exist will cause the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> to throw an <xref href=\"System.IndexOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public byte this[int offset] { get; set; }
    content.vb: Public Property Item(offset As Integer) As Byte
    parameters:
    - id: offset
      type: System.Int32
      description: "\n<p>The array index element of the desired information. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>The value of the specified index element in the underlying buffer.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The specified index does not exist in the buffer. </p>\n"
  seealso:
  - type: System.Net.SocketAddress.Size
    commentId: P:System.Net.SocketAddress.Size
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Net.SocketAddress.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Net.SocketAddress.Size
  commentId: P:System.Net.SocketAddress.Size
  id: Size
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: Size
  fullName: System.Net.SocketAddress.Size
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Size
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 246
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the underlying buffer size of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property gets the underlying buffer size of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> in bytes.</p>\n"
  syntax:
    content: public int Size { get; }
    content.vb: Public ReadOnly Property Size As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The underlying buffer size of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.SocketAddress.Equals(System.Object)
  commentId: M:System.Net.SocketAddress.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Net.SocketAddress.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 247
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Determines whether the specified <strong>Object</strong> is equal to the current <strong>Object</strong>.</p>\n"
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to compare with the current <strong>Object</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified <strong>Object</strong> is equal to the current <strong>Object</strong>; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.SocketAddress.GetHashCode
  commentId: M:System.Net.SocketAddress.GetHashCode
  id: GetHashCode
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Net.SocketAddress.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 248
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.GetHashCode
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.SocketAddress.ToString
  commentId: M:System.Net.SocketAddress.ToString
  id: ToString
  parent: System.Net.SocketAddress
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Net.SocketAddress.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 249
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns information about the socket address.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.SocketAddress.ToString\" data-throw-if-not-resolved=\"false\"></xref> method returns a string that contains the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> enumerated value, the size of the underlying buffer of the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref> structure, and the remaining contents of the buffer.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that contains information about the <xref href=\"System.Net.SocketAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
