items:
- uid: System.IO.FileSystemWatcher
  commentId: T:System.IO.FileSystemWatcher
  id: FileSystemWatcher
  parent: System.IO
  children:
  - System.IO.FileSystemWatcher.#ctor
  - System.IO.FileSystemWatcher.#ctor(System.String)
  - System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  - System.IO.FileSystemWatcher.Changed
  - System.IO.FileSystemWatcher.Created
  - System.IO.FileSystemWatcher.Deleted
  - System.IO.FileSystemWatcher.Dispose
  - System.IO.FileSystemWatcher.Dispose(System.Boolean)
  - System.IO.FileSystemWatcher.EnableRaisingEvents
  - System.IO.FileSystemWatcher.Error
  - System.IO.FileSystemWatcher.Filter
  - System.IO.FileSystemWatcher.IncludeSubdirectories
  - System.IO.FileSystemWatcher.InternalBufferSize
  - System.IO.FileSystemWatcher.NotifyFilter
  - System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - System.IO.FileSystemWatcher.Path
  - System.IO.FileSystemWatcher.Renamed
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  langs:
  - csharp
  - vb
  name: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
  type: Class
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileSystemWatcher
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
    startLine: 10
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>Use <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> to watch for changes in a specified directory. You can watch for changes in files and subdirectories of the specified directory. You can create a component to watch files on a local computer, a network drive, or a remote computer.</p>\n<p>To watch for changes in all files, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to an empty string (\"\") or use wildcards (\"*.*\"). To watch a specific file, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to the file name. For example, to watch for changes in the file MyDoc.txt, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in text files, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to \"*.txt\".</p>\n<p>There are several types of changes you can watch for in a directory or file. For example, you can watch for changes in <strong>Attributes</strong>, the <strong>LastWrite</strong> date and time, or the <strong>Size</strong> of files or directories. This is done by setting the <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref> property to one of the <xref href=\"System.IO.NotifyFilters\" data-throw-if-not-resolved=\"false\"></xref> values. For more information on the type of changes you can watch, see <xref href=\"System.IO.NotifyFilters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You can watch for renaming, deletion, or creation of files or directories. For example, to watch for renaming of text files, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to \"*.txt\" and call the <xref href=\"System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)\" data-throw-if-not-resolved=\"false\"></xref> method with a <xref href=\"System.IO.WatcherChangeTypes.Renamed\" data-throw-if-not-resolved=\"false\"></xref> specified for its parameter.</p>\n<p>The Windows operating system notifies your component of file changes in a buffer created by the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer with the <xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref>  property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events. To avoid a buffer overflow, use the <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> properties so you can filter out unwanted change notifications. </p>\n<p>For a list of initial property values for an instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.IO.FileSystemWatcher.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>Please note the following when using the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<ul><li>\n<p>Hidden files are not ignored.</p>\n</li><li>\n<p>In some systems, <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFil~.Lon\".</p>\n</li><li>\n<p>This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref href=\"System.Security.SecurityException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see Link Demands.</p>\n</li><li>\n<p>The maximum size you can set for the <xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref> property for monitoring a directory over the network is 64 KB.</p>\n</li></ul>\n<p> Running <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> on Windows 98 is not supported.</p>\n"
  example:
  - >-
    <p>The following example creates a <xref href="System.IO.FileSystemWatcher" data-throw-if-not-resolved="false"></xref> to watch the directory specified at run time. The component is set to watch for changes in <strong>LastWrite</strong> and <strong>LastAccess</strong> time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.</p>

    <p>Use the <xref href="System.Diagnostics" data-throw-if-not-resolved="false"></xref> and <xref href="System.IO" data-throw-if-not-resolved="false"></xref> namespaces for this example.</p>Classic NotifyFilters Example#1
  syntax:
    content: 'public class FileSystemWatcher : IDisposable'
    content.vb: >-
      Public Class FileSystemWatcher
          Implements IDisposable
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.FileSystemWatcher.#ctor
  commentId: M:System.IO.FileSystemWatcher.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 26
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</p>\n<p>The following table shows initial property values for an instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Initial Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>bitwise OR combination of <strong>LastWrite</strong>, <strong>FileName</strong>, and <strong>DirectoryName</strong></p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\"*.*\" (Watch all files.) </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>false</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>8192 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>empty string (\"\") </p>\n</td></tr></tbody></table>\n<p>The component will not watch the specified directory until the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is set, and <xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> object to watch the directory specified at run time. The <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> object watches for changes in <strong>LastWrite</strong> and <strong>LastAccess</strong> times, and for the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file displays to the console. When a file is renamed, the old and new paths display to the console.</p>\n<p>This example uses the <xref href=\"System.Diagnostics\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO\" data-throw-if-not-resolved=\"false\"></xref> namespaces.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public FileSystemWatcher()
    content.vb: Public Sub New
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  commentId: M:System.IO.FileSystemWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 27
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> class, given the specified directory to monitor.</p>\n"
  remarks: "\n<p>The component will not watch the specified directory until the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is set, and <xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n<p>The component can watch files on your personal computer, a network drive, or a remote computer.</p>\n<p>You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer. The <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property is set by default to watch all files.</p>\n"
  syntax:
    content: public FileSystemWatcher(string path)
    content.vb: Public Sub New(path As String)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The directory to monitor, in standard or Universal Naming Convention (UNC) notation. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> parameter is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The path specified through the <em>path</em> parameter does not exist. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> is too long.</p>\n"
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  commentId: M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: FileSystemWatcher(String, String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 28
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> class, given the specified directory and type of files to monitor.</p>\n"
  remarks: "\n<p>The component will not watch the specified directory until the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is set, and <xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n<p>The component can watch files on your personal computer, a network drive, or a remote computer.</p>\n<p>You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.</p>\n"
  syntax:
    content: public FileSystemWatcher(string path, string filter)
    content.vb: Public Sub New(path As String, filter As String)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The directory to monitor, in standard or Universal Naming Convention (UNC) notation. </p>\n"
    - id: filter
      type: System.String
      description: "\n<p>The type of files to watch. For example, \"*.txt\" watches for changes to all text files. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> parameter is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>The <em>filter</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> parameter is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The path specified through the <em>path</em> parameter does not exist. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> is too long.</p>\n"
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  commentId: P:System.IO.FileSystemWatcher.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableRaisingEvents
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 29
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets a value indicating whether the component is enabled.</p>\n"
  remarks: "\n<p>The component will not raise events unless you set <xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>.</p>\n<p>The component will not watch the specified directory until the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> property has been set and <xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n<p>The <xref href=\"System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method allows event handlers to be invoked to respond to file changes even if this property is set to <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> to watch the directory specified at run time. The component is set to watch for changes in <strong>LastWrite</strong> and <strong>LastAccess</strong> time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.</p>\n<p>Use the <xref href=\"System.Diagnostics\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO\" data-throw-if-not-resolved=\"false\"></xref> namespaces for this example.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    content.vb: Public Property EnableRaisingEvents As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the component is enabled; otherwise, <strong>false</strong>. The default is <strong>false</strong>. If you are using the component on a designer in Visual Studio 2005, the default is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> object has been disposed.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Microsoft Windows NT or later.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The directory specified in <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> could not be found.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> has not been set or is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Filter
  commentId: P:System.IO.FileSystemWatcher.Filter
  id: Filter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Filter
  fullName: System.IO.FileSystemWatcher.Filter
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Filter
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 30
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the filter string used to determine what files are monitored in a directory.</p>\n"
  remarks: "\n<p>To watch changes in all files, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to an empty string (\"\"). To watch a specific file, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to the file name. For example, to watch for changes in the file MyDoc.txt, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in any text files, set the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to \"*.txt\". Use of multiple filters such as \"*.txt|*.doc\" is not supported.</p>\n<p>The <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property can be changed after the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> object has started receiving events.</p>\n<p>For more information about filtering out unwanted notifications, see the <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n<p>\n<xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> accepts wildcards for matching files, as shown in the following examples.</p>\n<p>Filter string</p>\n<p>Watches the following files</p>\n<table><tbody><tr><td>\n<p>*.*</p>\n</td><td>\n<p>All files (default). An empty string (\"\") also watches all files.</p>\n</td></tr><tr><td>\n<p>*.txt</p>\n</td><td>\n<p>All files with a \"txt\" extension.</p>\n</td></tr><tr><td>\n<p>*recipe.doc</p>\n</td><td>\n<p>All files ending in \"recipe\" with a \"doc\" extension.</p>\n</td></tr><tr><td>\n<p>win*.xml</p>\n</td><td>\n<p>All files beginning with \"win\" with an \"xml\" extension.</p>\n</td></tr><tr><td>\n<p>Sales*200?.xls </p>\n</td><td>\n<p>Matches the following:</p>\n<p>Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls</p>\n<p>but does not match:</p>\n<p>Sales Nov 1999.xls</p>\n</td></tr><tr><td>\n<p>MyReport.Doc</p>\n</td><td>\n<p>Watches only MyReport.doc</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> to watch the directory specified at run time. The component is set to watch for changes in <strong>LastWrite</strong> and <strong>LastAccess</strong> time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.</p>\n<p>Use the <xref href=\"System.Diagnostics\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO\" data-throw-if-not-resolved=\"false\"></xref> namespaces for this example.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public string Filter { get; set; }
    content.vb: Public Property Filter As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The filter string. The default is \"*.*\" (Watches all files.) </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.FileSystemWatcher.InternalBufferSize
    commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  id: IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IncludeSubdirectories
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 31
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</p>\n"
  remarks: "\n<p>Set <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> when you want to watch for change notifications for files and directories contained within the directory specified through the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> property, and its subdirectories. Setting the <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong> helps reduce the number of notifications sent to the internal buffer. For more information on filtering out unwanted notifications, see the <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n<p>When <strong>true</strong>, <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> is recursive through the entire sub tree, not just the immediate child directories. The relative path to a file or directory within the sub tree returns in the <xref href=\"System.IO.FileSystemEventArgs.Name\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.IO.RenamedEventArgs.OldName\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.IO.RenamedEventArgs\" data-throw-if-not-resolved=\"false\"></xref>, depending on changes you are watching for. You can get the fully qualified path from the <xref href=\"System.IO.FileSystemEventArgs.FullPath\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.IO.RenamedEventArgs.OldFullPath\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.IO.RenamedEventArgs\" data-throw-if-not-resolved=\"false\"></xref>, depending on the changes you are watching for.</p>\n<p>If a directory is created in the sub tree of the directory you are watching, and <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, that directory will automatically be watched.</p>\n"
  syntax:
    content: public bool IncludeSubdirectories { get; set; }
    content.vb: Public Property IncludeSubdirectories As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if you want to monitor subdirectories; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemEventArgs.FullPath
    commentId: P:System.IO.FileSystemEventArgs.FullPath
  - type: System.IO.RenamedEventArgs.OldFullPath
    commentId: P:System.IO.RenamedEventArgs.OldFullPath
  - type: System.IO.FileSystemWatcher.InternalBufferSize
    commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  - type: System.IO.FileSystemEventArgs.Name
    commentId: P:System.IO.FileSystemEventArgs.Name
  - type: System.IO.RenamedEventArgs.OldName
    commentId: P:System.IO.RenamedEventArgs.OldName
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  id: InternalBufferSize
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalBufferSize
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 32
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the size (in bytes) of the internal buffer.</p>\n"
  remarks: "\n<p>You can set the buffer to 4 KB or larger, but it must not exceed 64 KB. If you try to set the <xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref> property to less than 4096 bytes, your value is discarded and the <xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref> property is set to 4096 bytes. For best performance, use a multiple of 4 KB on Intel-based computers.</p>\n<p>The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs. Each event can use up to 16 bytes of memory, not including the file name. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer can prevent missing file system change events. However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible. To avoid a buffer overflow, use the <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> properties to filter out unwanted change notifications.</p>\n"
  syntax:
    content: public int InternalBufferSize { get; set; }
    content.vb: Public Property InternalBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The internal buffer size in bytes. The default is 8192 (8 KB).</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.NotifyFilter
  commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  id: NotifyFilter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotifyFilter
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 33
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the type of changes to watch for.</p>\n"
  remarks: "\n<p>You can combine the members of the <xref href=\"System.IO.NotifyFilters\" data-throw-if-not-resolved=\"false\"></xref> enumeration to watch for more than one type of change at a time. For example, you can watch for changes in size of a file, and for changes in the <strong>LastWrite</strong> time. This raises an event anytime there is a change in file or folder size, or a change in the <strong>LastWrite</strong> time of the file or folder.</p>\n<p>This is one way to filter out unwanted notifications. For more information on filtering out unwanted notifications, see the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.FileSystemWatcher.InternalBufferSize\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> to watch the directory specified at run time. The component is set to watch for changes in <strong>LastWrite</strong> and <strong>LastAccess</strong> time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.</p>\n<p>Use the <xref href=\"System.Diagnostics\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO\" data-throw-if-not-resolved=\"false\"></xref> namespaces for this example.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public NotifyFilters NotifyFilter { get; set; }
    content.vb: Public Property NotifyFilter As NotifyFilters
    parameters: []
    return:
      type: System.IO.NotifyFilters
      description: "\n<p>One of the <xref href=\"System.IO.NotifyFilters\" data-throw-if-not-resolved=\"false\"></xref> values. The default is the bitwise OR combination of <strong>LastWrite</strong>, <strong>FileName</strong>, and <strong>DirectoryName</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value is not a valid bitwise OR combination of the <xref href=\"System.IO.NotifyFilters\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "\n<p>The value that is being set is not valid.</p>\n"
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.FileSystemWatcher.InternalBufferSize
    commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Path
  commentId: P:System.IO.FileSystemWatcher.Path
  id: Path
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Path
  fullName: System.IO.FileSystemWatcher.Path
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Path
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 34
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the path of the directory to watch.</p>\n"
  remarks: "\n<p>This is a fully qualified path to a directory. If the <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, this directory is the root at which the system watches for changes; otherwise it is the only directory watched. To watch a specific file, set the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> property to the fully qualified, correct directory, and the <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref> property to the file name.</p>\n<p>The <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> property supports Universal Naming Convention (UNC) paths.</p>\n<p>This property must be set before the component can watch for changes.</p>\n<p>When a directory is renamed, the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> automatically reattaches itself to the newly renamed item. For example, if you set the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> property to \"C:\\My Documents\" and then manually rename the directory to \"C:\\Your Documents\", the component continues listening for change notifications on the newly renamed directory. However, when you ask for the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> property, it contains the old path. This happens because the component determines what directory watches based on the handle, rather than the name of the directory. Renaming does not affect the handle. So, if you destroy the component, and then recreate it without updating the <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> property, your application will fail because the directory no longer exists.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> to watch the directory specified at run time. The component is set to watch for changes in <strong>LastWrite</strong> and <strong>LastAccess</strong> time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.</p>\n<p>Use the <xref href=\"System.Diagnostics\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO\" data-throw-if-not-resolved=\"false\"></xref> namespaces for this example.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public string Path { get; set; }
    content.vb: Public Property Path As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The path to monitor. The default is an empty string (\"\").</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified path does not exist or could not be found.</p>\n<p>-or- </p>\n<p>The specified path contains wildcard characters.</p>\n<p>-or- </p>\n<p>The specified path contains invalid path characters.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Changed
  commentId: E:System.IO.FileSystemWatcher.Changed
  id: Changed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Changed
  fullName: System.IO.FileSystemWatcher.Changed
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Changed
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 35
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is changed.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref> event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</p>\n<p>Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and some <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref> to restrict the number of notifications raised when this event is handled.</p>\n<p>The <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref> event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed. To watch for renaming, use the <xref href=\"System.IO.FileSystemWatcher.Renamed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>The order in which the <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref> event is raised in relation to the other <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> events may change when the <xref href=\"System.IO.FileSystemWatcher.SynchronizingObject\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref> event to display the file path to the console whenever the watched file is changed.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public event FileSystemEventHandler Changed
    content.vb: Public Event Changed As FileSystemEventHandler
    return:
      type: System.IO.FileSystemEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Created
  commentId: E:System.IO.FileSystemWatcher.Created
  id: Created
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Created
  fullName: System.IO.FileSystemWatcher.Created
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Created
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 36
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is created.</p>\n"
  remarks: "\n<p>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>, no event would be raised. For example, you create two instances of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event would be raised by FileSystemWatcher2 and a <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event would be raised by FileSystemWatcher1.</p>\n<p>Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and some <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The order in which the <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event is raised in relation to the other <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> events may change when the <xref href=\"System.IO.FileSystemWatcher.SynchronizingObject\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong>.</p>\n<p>The <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> event will be raised immediately, followed by one or more <xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event to display the file path to the console whenever the watched file is created.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public event FileSystemEventHandler Created
    content.vb: Public Event Created As FileSystemEventHandler
    return:
      type: System.IO.FileSystemEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.Deleted
    commentId: E:System.IO.FileSystemWatcher.Deleted
  - type: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Deleted
  commentId: E:System.IO.FileSystemWatcher.Deleted
  id: Deleted
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Deleted
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 37
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is deleted.</p>\n"
  remarks: "\n<p>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>, no event would be raised. For example, you create two instances of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event would be raised by FileSystemWatcher2 and a <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event would be raised by FileSystemWatcher1.</p>\n<p>Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and some <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The order in which the <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event is raised in relation to the other <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> events may change when the <xref href=\"System.IO.FileSystemWatcher.SynchronizingObject\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event to display the file path to the console whenever the watched file is deleted.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public event FileSystemEventHandler Deleted
    content.vb: Public Event Deleted As FileSystemEventHandler
    return:
      type: System.IO.FileSystemEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.Created
    commentId: E:System.IO.FileSystemWatcher.Created
  - type: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Error
  commentId: E:System.IO.FileSystemWatcher.Error
  id: Error
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Error
  fullName: System.IO.FileSystemWatcher.Error
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Error
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 38
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when the instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> is unable to continue monitoring changes or when the internal buffer overflows.</p>\n"
  remarks: "\n<p>This event is raised whenever something prevents the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> object from monitoring changes. For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the <xref href=\"System.IO.FileSystemWatcher.Error\" data-throw-if-not-resolved=\"false\"></xref> event is raised.</p>\n<p>The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible. To avoid a buffer overflow, use the <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileSystemWatcher.Filter\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.IO.FileSystemWatcher.IncludeSubdirectories\" data-throw-if-not-resolved=\"false\"></xref> properties to filter out unwanted change notifications.</p>\n<p>Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and some <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public event ErrorEventHandler Error
    content.vb: Public Event Error As ErrorEventHandler
    return:
      type: System.IO.ErrorEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.ErrorEventArgs
    commentId: T:System.IO.ErrorEventArgs
  - type: System.IO.ErrorEventHandler
    commentId: T:System.IO.ErrorEventHandler
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Renamed
  commentId: E:System.IO.FileSystemWatcher.Renamed
  id: Renamed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Renamed
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 39
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is renamed.</p>\n"
  remarks: "\n<p>Renaming the directory you are watching will not raise a notification. Notifications are only raised for entries inside the directory you are watching.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.IO.FileSystemWatcher.Renamed\" data-throw-if-not-resolved=\"false\"></xref> event to display the file path to the console whenever the watched file is renamed.</p>Classic NotifyFilters Example#1"
  syntax:
    content: public event RenamedEventHandler Renamed
    content.vb: Public Event Renamed As RenamedEventHandler
    return:
      type: System.IO.RenamedEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  id: OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnChanged
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 40
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.</p>\n<p>Use the <xref href=\"System.IO.FileSystemWatcher.NotifyFilter\" data-throw-if-not-resolved=\"false\"></xref> property to restrict the number of events raised when the <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref> event is handled.</p>\n<p>The <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> event will be raised immediately, followed by one or more <xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n<p>Raising an event invokes the event handler through a delegate. For more information, see Handling and Raising Events.</p>\n"
  syntax:
    content: protected void OnChanged(FileSystemEventArgs e)
    content.vb: Protected Sub OnChanged(e As FileSystemEventArgs)
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "\n<p>A <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Changed
    commentId: E:System.IO.FileSystemWatcher.Changed
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  id: OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnCreated
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 41
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> is called when a file or directory is created in the directory being monitored.</p>\n<p>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>, no event would be raised. For example, you create two instances of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" and paste it into \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event would be raised in FileSystemWatcher2 and a <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event would be raised in FileSystemWatcher1.</p>\n<p>The <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref href=\"System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> event will be raised immediately, followed by one or more <xref href=\"System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n<p>Raising an event invokes the event handler through a delegate. For more information, see Handling and Raising Events.</p>\n"
  syntax:
    content: protected void OnCreated(FileSystemEventArgs e)
    content.vb: Protected Sub OnCreated(e As FileSystemEventArgs)
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "\n<p>A <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Created
    commentId: E:System.IO.FileSystemWatcher.Created
  - type: System.IO.FileSystemWatcher.Deleted
    commentId: E:System.IO.FileSystemWatcher.Deleted
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  id: OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnDeleted
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 42
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> is called when a file or directory, within the directory being monitored, is deleted.</p>\n<p>Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>, no event would be raised. For example, you create two instances of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event would be raised by FileSystemWatcher2 and a <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event would be raised by FileSystemWatcher1.</p>\n<p>Raising an event invokes the event handler through a delegate. For more information, see Handling and Raising Events.</p>\n"
  syntax:
    content: protected void OnDeleted(FileSystemEventArgs e)
    content.vb: Protected Sub OnDeleted(e As FileSystemEventArgs)
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "\n<p>A <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Created
    commentId: E:System.IO.FileSystemWatcher.Created
  - type: System.IO.FileSystemWatcher.Deleted
    commentId: E:System.IO.FileSystemWatcher.Deleted
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  id: OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnError
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 43
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Error\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> is called when an error occurs.</p>\n<p>Raising an event invokes the event handler through a delegate. For more information, see Handling and Raising Events.</p>\n"
  syntax:
    content: protected void OnError(ErrorEventArgs e)
    content.vb: Protected Sub OnError(e As ErrorEventArgs)
    parameters:
    - id: e
      type: System.IO.ErrorEventArgs
      description: "\n<p>An <xref href=\"System.IO.ErrorEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Error
    commentId: E:System.IO.FileSystemWatcher.Error
  - type: System.IO.ErrorEventArgs
    commentId: T:System.IO.ErrorEventArgs
  - type: System.IO.ErrorEventHandler
    commentId: T:System.IO.ErrorEventHandler
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  id: OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRenamed
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 44
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Renamed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> is called when a file or directory within the directory being monitored is renamed.</p>\n<p>Raising an event invokes the event handler through a delegate. For more information, see Handling and Raising Events.</p>\n"
  syntax:
    content: protected void OnRenamed(RenamedEventArgs e)
    content.vb: Protected Sub OnRenamed(e As RenamedEventArgs)
    parameters:
    - id: e
      type: System.IO.RenamedEventArgs
      description: "\n<p>A <xref href=\"System.IO.RenamedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Renamed
    commentId: E:System.IO.FileSystemWatcher.Renamed
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  commentId: M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  id: WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitForChanged
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 45
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</p>\n"
  remarks: "\n<p>This method waits indefinitely until the first change occurs and then returns. This is the same as using <xref href=\"System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)\" data-throw-if-not-resolved=\"false\"></xref> with the <em>timeout</em> parameter set to -1.</p>\n<p>This method allows an event handler to be invoked to respond to file changes even if the <xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>false</strong>.</p>\n<p>In some systems, <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFi~.Lon\".</p>\n"
  syntax:
    content: public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType)
    content.vb: Public Function WaitForChanged(changeType As WatcherChangeTypes) As WaitForChangedResult
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "\n<p>The <xref href=\"System.IO.WatcherChangeTypes\" data-throw-if-not-resolved=\"false\"></xref> to watch for. </p>\n"
    return:
      type: System.IO.WaitForChangedResult
      description: "\n<p>A <xref href=\"System.IO.WaitForChangedResult\" data-throw-if-not-resolved=\"false\"></xref> that contains specific information on the change that occurred.</p>\n"
  seealso:
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  commentId: M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  id: WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: WaitForChanged(WatcherChangeTypes, Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitForChanged
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 46
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</p>\n"
  remarks: "\n<p>This method waits until a change occurs or it has timed out. A value of -1 for the <em>timeout</em> parameter means wait indefinitely.</p>\n<p>This method allows an event handler to be invoked to respond to file changes even if the <xref href=\"System.IO.FileSystemWatcher.EnableRaisingEvents\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>false</strong>.</p>\n<p>In some systems, <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFi~.Lon\".</p>\n"
  syntax:
    content: public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, int timeout)
    content.vb: Public Function WaitForChanged(changeType As WatcherChangeTypes, timeout As Integer) As WaitForChangedResult
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "\n<p>The <xref href=\"System.IO.WatcherChangeTypes\" data-throw-if-not-resolved=\"false\"></xref> to watch for. </p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The time (in milliseconds) to wait before timing out. </p>\n"
    return:
      type: System.IO.WaitForChangedResult
      description: "\n<p>A <xref href=\"System.IO.WaitForChangedResult\" data-throw-if-not-resolved=\"false\"></xref> that contains specific information on the change that occurred.</p>\n"
  seealso:
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  commentId: M:System.IO.FileSystemWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
    startLine: 12
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.FileSystemWatcher.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.FileSystemWatcher.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.Compression.DeflateStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.FileSystemWatcher.Dispose
  commentId: M:System.IO.FileSystemWatcher.Dispose
  id: Dispose
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.FileSystemWatcher.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
    startLine: 13
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.NotifyFilters
  parent: System.IO
  isExternal: false
  name: NotifyFilters
  fullName: System.IO.NotifyFilters
- uid: System.IO.FileSystemEventHandler
  parent: System.IO
  isExternal: false
  name: FileSystemEventHandler
  fullName: System.IO.FileSystemEventHandler
- uid: System.IO.ErrorEventHandler
  parent: System.IO
  isExternal: false
  name: ErrorEventHandler
  fullName: System.IO.ErrorEventHandler
- uid: System.IO.RenamedEventHandler
  parent: System.IO
  isExternal: false
  name: RenamedEventHandler
  fullName: System.IO.RenamedEventHandler
- uid: System.IO.FileSystemEventArgs
  parent: System.IO
  isExternal: false
  name: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
- uid: System.IO.ErrorEventArgs
  parent: System.IO
  isExternal: false
  name: ErrorEventArgs
  fullName: System.IO.ErrorEventArgs
- uid: System.IO.RenamedEventArgs
  parent: System.IO
  isExternal: false
  name: RenamedEventArgs
  fullName: System.IO.RenamedEventArgs
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
- uid: System.IO.WaitForChangedResult
  parent: System.IO
  isExternal: false
  name: WaitForChangedResult
  fullName: System.IO.WaitForChangedResult
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.ComponentModel.InvalidEnumArgumentException
