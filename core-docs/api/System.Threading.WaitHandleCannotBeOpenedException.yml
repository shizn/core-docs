items:
- uid: System.Threading.WaitHandleCannotBeOpenedException
  commentId: T:System.Threading.WaitHandleCannotBeOpenedException
  id: WaitHandleCannotBeOpenedException
  parent: System.Threading
  children:
  - System.Threading.WaitHandleCannotBeOpenedException.#ctor
  - System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)
  - System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: WaitHandleCannotBeOpenedException
  fullName: System.Threading.WaitHandleCannotBeOpenedException
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitHandleCannotBeOpenedException
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 382
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>The exception that is thrown when an attempt is made to open a system mutex, semaphore, or event wait handle that does not exist.</p>\n"
  remarks: "\n<p>Instances of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Semaphore\" data-throw-if-not-resolved=\"false\"></xref>, and  <xref href=\"System.Threading.EventWaitHandle\" data-throw-if-not-resolved=\"false\"></xref> classes can represent named system synchronization objects. When you use the <xref href=\"System.Threading.Mutex.OpenExisting(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Threading.Semaphore.OpenExisting(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, or the  <xref href=\"System.Threading.EventWaitHandle.OpenExisting(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to open a named system object that does not exist, a <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown.</p>\n"
  example:
  - 
  syntax:
    content: 'public class WaitHandleCannotBeOpenedException : Exception'
    content.vb: >-
      Public Class WaitHandleCannotBeOpenedException
          Inherits Exception
  seealso:
  - type: System.Threading.Mutex.OpenExisting(System.String)
    commentId: M:System.Threading.Mutex.OpenExisting(System.String)
  - type: System.Threading.Semaphore.OpenExisting(System.String)
    commentId: M:System.Threading.Semaphore.OpenExisting(System.String)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor
  commentId: M:System.Threading.WaitHandleCannotBeOpenedException.#ctor
  id: '#ctor'
  parent: System.Threading.WaitHandleCannotBeOpenedException
  langs:
  - csharp
  - vb
  name: WaitHandleCannotBeOpenedException()
  fullName: System.Threading.WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException()
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 384
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\" data-throw-if-not-resolved=\"false\"></xref> class with default values.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"No handle of the given name exists.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The system-supplied error message string. </p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public WaitHandleCannotBeOpenedException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)
  commentId: M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Threading.WaitHandleCannotBeOpenedException
  langs:
  - csharp
  - vb
  name: WaitHandleCannotBeOpenedException(String)
  fullName: System.Threading.WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 385
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The content of <em>message</em> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\" data-throw-if-not-resolved=\"false\"></xref> initialized with this constructor.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>message</em>. </p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public WaitHandleCannotBeOpenedException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)
  commentId: M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Threading.WaitHandleCannotBeOpenedException
  langs:
  - csharp
  - vb
  name: WaitHandleCannotBeOpenedException(String, Exception)
  fullName: System.Threading.WaitHandleCannotBeOpenedException.WaitHandleCannotBeOpenedException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 386
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.WaitHandleCannotBeOpenedException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n"
  example:
  - 
  syntax:
    content: public WaitHandleCannotBeOpenedException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception.</p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>innerException</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
