items:
- uid: System.IO.StringWriter
  commentId: T:System.IO.StringWriter
  id: StringWriter
  parent: System.IO
  children:
  - System.IO.StringWriter.#ctor
  - System.IO.StringWriter.#ctor(System.IFormatProvider)
  - System.IO.StringWriter.#ctor(System.Text.StringBuilder)
  - System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)
  - System.IO.StringWriter.Dispose(System.Boolean)
  - System.IO.StringWriter.Encoding
  - System.IO.StringWriter.FlushAsync
  - System.IO.StringWriter.GetStringBuilder
  - System.IO.StringWriter.ToString
  - System.IO.StringWriter.Write(System.Char)
  - System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)
  - System.IO.StringWriter.Write(System.String)
  - System.IO.StringWriter.WriteAsync(System.Char)
  - System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StringWriter.WriteAsync(System.String)
  - System.IO.StringWriter.WriteLineAsync(System.Char)
  - System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StringWriter.WriteLineAsync(System.String)
  langs:
  - csharp
  - vb
  name: StringWriter
  fullName: System.IO.StringWriter
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringWriter
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 27
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Implements a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> for writing information to a string. The information is stored in an underlying <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> enables you to write to a string synchronously or asynchronously. You can write a character at a time with the <xref href=\"System.IO.StringWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.IO.StringWriter.WriteAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, a string at a time using the <xref href=\"System.IO.StringWriter.Write(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.IO.StringWriter.WriteAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. In addition, you can write a character, an array of characters or a string followed by the line terminator asynchronously with one of the <xref href=\"System.IO.StringWriter.WriteLineAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong> /<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example demonstrates the creation of a continuous paragraph from a group of double-spaced sentences, and then the conversion of the paragraph back to the original text.</p>System.IO.StringReaderWriter#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class StringWriter : TextWriter, IDisposable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class StringWriter
          Inherits TextWriter
          Implements IDisposable
  seealso:
  - type: System.Text.StringBuilder
    commentId: T:System.Text.StringBuilder
  - type: System.IO.StringReader
    commentId: T:System.IO.StringReader
  inheritance:
  - System.Object
  - System.IO.TextWriter
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.IO.TextWriter.CoreNewLine
  - System.IO.TextWriter.Null
  - System.IO.TextWriter.FormatProvider
  - System.IO.TextWriter.NewLine
  - System.IO.TextWriter.Dispose
  - System.IO.TextWriter.Flush
  - System.IO.TextWriter.Write(System.Boolean)
  - System.IO.TextWriter.Write(System.Char[])
  - System.IO.TextWriter.Write(System.Decimal)
  - System.IO.TextWriter.Write(System.Double)
  - System.IO.TextWriter.Write(System.Int32)
  - System.IO.TextWriter.Write(System.Int64)
  - System.IO.TextWriter.Write(System.Object)
  - System.IO.TextWriter.Write(System.Single)
  - System.IO.TextWriter.Write(System.String,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object[])
  - System.IO.TextWriter.Write(System.UInt32)
  - System.IO.TextWriter.Write(System.UInt64)
  - System.IO.TextWriter.WriteAsync(System.Char[])
  - System.IO.TextWriter.WriteLine
  - System.IO.TextWriter.WriteLine(System.Boolean)
  - System.IO.TextWriter.WriteLine(System.Char)
  - System.IO.TextWriter.WriteLine(System.Char[])
  - System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.IO.TextWriter.WriteLine(System.Decimal)
  - System.IO.TextWriter.WriteLine(System.Double)
  - System.IO.TextWriter.WriteLine(System.Int32)
  - System.IO.TextWriter.WriteLine(System.Int64)
  - System.IO.TextWriter.WriteLine(System.Object)
  - System.IO.TextWriter.WriteLine(System.Single)
  - System.IO.TextWriter.WriteLine(System.String)
  - System.IO.TextWriter.WriteLine(System.String,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object[])
  - System.IO.TextWriter.WriteLine(System.UInt32)
  - System.IO.TextWriter.WriteLine(System.UInt64)
  - System.IO.TextWriter.WriteLineAsync
  - System.IO.TextWriter.WriteLineAsync(System.Char[])
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.StringWriter.#ctor
  commentId: M:System.IO.StringWriter.#ctor
  id: '#ctor'
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: StringWriter()
  fullName: System.IO.StringWriter.StringWriter()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 38
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>A new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is automatically created and associated with the new instance of the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> class. Since a format control is not specified for this constructor, the new instance will be initialized with <xref href=\"System.Globalization.CultureInfo.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example demonstrates how to construct a string using the <strong>StringWriter</strong> class.</p>System.IO.StringWriter1#1"
  syntax:
    content: public StringWriter()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StringWriter.#ctor(System.IFormatProvider)
  commentId: M:System.IO.StringWriter.#ctor(System.IFormatProvider)
  id: '#ctor(System.IFormatProvider)'
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: StringWriter(IFormatProvider)
  fullName: System.IO.StringWriter.StringWriter(System.IFormatProvider)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 43
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> class with the specified format control.</p>\n"
  remarks: "\n<p>A new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is automatically created and associated with the new instance of the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example demonstrates how to construct a string in a specific culture.</p>System.IO.StringWriter2#1"
  syntax:
    content: public StringWriter(IFormatProvider formatProvider)
    content.vb: Public Sub New(formatProvider As IFormatProvider)
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StringWriter.#ctor(System.Text.StringBuilder)
  commentId: M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)
  id: '#ctor(System.Text.StringBuilder)'
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: StringWriter(StringBuilder)
  fullName: System.IO.StringWriter.StringWriter(System.Text.StringBuilder)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 49
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Since a format control is not specified for this constructor, the new instance will be initialized with <xref href=\"System.Globalization.CultureInfo.CurrentCulture\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example demonstrates using the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class to modify the underlying string in a closed <strong>StringWriter</strong>.</p>System.IO.StringWriter3#1"
  syntax:
    content: public StringWriter(StringBuilder sb)
    content.vb: Public Sub New(sb As StringBuilder)
    parameters:
    - id: sb
      type: System.Text.StringBuilder
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sb</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)
  commentId: M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)
  id: '#ctor(System.Text.StringBuilder,System.IFormatProvider)'
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: StringWriter(StringBuilder, IFormatProvider)
  fullName: System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 52
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> class that writes to the specified <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> and has the specified format provider.</p>\n"
  remarks: "\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public StringWriter(StringBuilder sb, IFormatProvider formatProvider)
    content.vb: Public Sub New(sb As StringBuilder, formatProvider As IFormatProvider)
    parameters:
    - id: sb
      type: System.Text.StringBuilder
    - id: formatProvider
      type: System.IFormatProvider
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sb</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StringWriter.Encoding
  commentId: P:System.IO.StringWriter.Encoding
  id: Encoding
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: Encoding
  fullName: System.IO.StringWriter.Encoding
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Encoding
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 74
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> in which the output is written.</p>\n"
  remarks: "\n<p>This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <strong>StringWriter</strong>. This allows the XML code to consume an arbitrary <strong>StringWriter</strong> and generate the correct XML header.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.StringWriter.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StringWriter1#4"
  syntax:
    content: public override Encoding Encoding { get; }
    content.vb: Public Overrides ReadOnly Property Encoding As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
  overridden: System.IO.TextWriter.Encoding
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.StringWriter.Dispose(System.Boolean)
  commentId: M:System.IO.StringWriter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.StringWriter.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 65
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overridden: System.IO.TextWriter.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.StringWriter.FlushAsync
  commentId: M:System.IO.StringWriter.FlushAsync
  id: FlushAsync
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: FlushAsync()
  fullName: System.IO.StringWriter.FlushAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FlushAsync
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 180
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device. </p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task FlushAsync()
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function FlushAsync As Task
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.FlushAsync
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StringWriter.GetStringBuilder
  commentId: M:System.IO.StringWriter.GetStringBuilder
  id: GetStringBuilder
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: GetStringBuilder()
  fullName: System.IO.StringWriter.GetStringBuilder()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetStringBuilder
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 87
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Returns the underlying <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This is either the <strong>StringBuilder</strong> that was passed to the constructor, or the <strong>StringBuilder</strong> that was automatically created.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.StringWriter.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StringWriter1#3"
  syntax:
    content: public virtual StringBuilder GetStringBuilder()
    content.vb: Public Overridable Function GetStringBuilder As StringBuilder
    return:
      type: System.Text.StringBuilder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.StringWriter.ToString
  commentId: M:System.IO.StringWriter.ToString
  id: ToString
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.IO.StringWriter.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 191
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Returns a string containing the characters written to the current <strong>StringWriter</strong> so far.</p>\n"
  remarks: "\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.StringWriter.#ctor(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StringWriter2#2"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StringWriter.Write(System.Char)
  commentId: M:System.IO.StringWriter.Write(System.Char)
  id: Write(System.Char)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: Write(Char)
  fullName: System.IO.StringWriter.Write(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 93
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character to the string.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.StringWriter.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StringWriter1#2"
  syntax:
    content: public override void Write(char value)
    content.vb: Public Overrides Sub Write(value As Char)
    parameters:
    - id: value
      type: System.Char
  overridden: System.IO.TextWriter.Write(System.Char)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The writer is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: Write(Char[], Int32, Int32)
  fullName: System.IO.StringWriter.Write(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 104
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters to the string.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method writes <em>count</em> characters of data to this <strong>StringWriter</strong> from <em>buffer</em>, starting at position <em>index</em>.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.StringWriter.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StringWriter1#2"
  syntax:
    content: public override void Write(char[] buffer, int index, int count)
    content.vb: Public Overrides Sub Write(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
  overridden: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>(<em>index</em> + <em>count</em>)> <em>buffer</em>. <strong>Length</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The writer is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StringWriter.Write(System.Char(), System.Int32, System.Int32)
  name.vb: Write(Char(), Int32, Int32)
- uid: System.IO.StringWriter.Write(System.String)
  commentId: M:System.IO.StringWriter.Write(System.String)
  id: Write(System.String)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: Write(String)
  fullName: System.IO.StringWriter.Write(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 124
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string to the current string.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the specified string is <strong>null</strong>, nothing is written.</p>\n<p>The following table lists examples of other typical or related I/O tasks.</p>\n<p>To do this... </p>\n<p>See the example in this topic... </p>\n<table><tbody><tr><td>\n<p>Create a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Write to a text file. </p>\n</td><td>\n<p>How to: Write Text to a File</p>\n</td></tr><tr><td>\n<p>Read from a text file. </p>\n</td><td>\n<p>How to: Read Text from a File</p>\n</td></tr><tr><td>\n<p>Append text to a file. </p>\n</td><td>\n<p>How to: Open and Append to a Log File</p>\n<p>\n<xref href=\"System.IO.File.AppendText(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n<xref href=\"System.IO.FileInfo.AppendText\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the size of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Get the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.GetAttributes(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Set the attributes of a file. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Determine if a file exists. </p>\n</td><td>\n<p>\n<xref href=\"System.IO.File.Exists(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td></tr><tr><td>\n<p>Read from a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr><tr><td>\n<p>Write to a binary file. </p>\n</td><td>\n<p>How to: Read and Write to a Newly Created Data File</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.StringWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.StringReaderWriter#3"
  syntax:
    content: public override void Write(string value)
    content.vb: Public Overrides Sub Write(value As String)
    parameters:
    - id: value
      type: System.String
  overridden: System.IO.TextWriter.Write(System.String)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The writer is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StringWriter.WriteAsync(System.Char)
  commentId: M:System.IO.StringWriter.WriteAsync(System.Char)
  id: WriteAsync(System.Char)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(Char)
  fullName: System.IO.StringWriter.WriteAsync(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 132
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character to the string asynchronously.</p>\n"
  example:
  - "\n<p>The following example shows how to write characters by using the <xref href=\"System.IO.StringWriter.WriteAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StringWriter#5"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteAsync(char value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteAsync(value As Char) As Task
    parameters:
    - id: value
      type: System.Char
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteAsync(System.Char)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The string writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The string writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  id: WriteAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(Char[], Int32, Int32)
  fullName: System.IO.StringWriter.WriteAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 148
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters to the string asynchronously.</p>\n"
  example:
  - "\n<p>The following example shows how to write characters by using the <xref href=\"System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StringWriter#6"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteAsync(char[] buffer, int index, int count)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteAsync(buffer As Char(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The string writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The string writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StringWriter.WriteAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteAsync(Char(), Int32, Int32)
- uid: System.IO.StringWriter.WriteAsync(System.String)
  commentId: M:System.IO.StringWriter.WriteAsync(System.String)
  id: WriteAsync(System.String)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(String)
  fullName: System.IO.StringWriter.WriteAsync(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 140
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string to the current string asynchronously.</p>\n"
  example:
  - "\n<p>The following example shows how to write a string by using the <xref href=\"System.IO.StringWriter.WriteAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StringWriter#4"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteAsync(string value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteAsync(value As String) As Task
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteAsync(System.String)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The string writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The string writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StringWriter.WriteLineAsync(System.Char)
  commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char)
  id: WriteLineAsync(System.Char)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(Char)
  fullName: System.IO.StringWriter.WriteLineAsync(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteLineAsync
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 156
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character followed by a line terminator asynchronously to the string.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example shows how to write characters by using the <xref href=\"System.IO.StringWriter.WriteLineAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StringWriter#2"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteLineAsync(char value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteLineAsync(value As Char) As Task
    parameters:
    - id: value
      type: System.Char
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteLineAsync(System.Char)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The string writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The string writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  id: WriteLineAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(Char[], Int32, Int32)
  fullName: System.IO.StringWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteLineAsync
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 172
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters followed by a line terminator asynchronously to the string.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example shows how to write characters by using the <xref href=\"System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StringWriter#3"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteLineAsync(char[] buffer, int index, int count)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteLineAsync(buffer As Char(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The string writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The string writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StringWriter.WriteLineAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLineAsync(Char(), Int32, Int32)
- uid: System.IO.StringWriter.WriteLineAsync(System.String)
  commentId: M:System.IO.StringWriter.WriteLineAsync(System.String)
  id: WriteLineAsync(System.String)
  parent: System.IO.StringWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(String)
  fullName: System.IO.StringWriter.WriteLineAsync(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StringWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteLineAsync
    path: src/mscorlib/src/System/IO/StringWriter.cs
    startLine: 164
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string followed by a line terminator asynchronously to the current string.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example shows how to write a string by using the <xref href=\"System.IO.StringWriter.WriteLineAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StringWriter#1"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteLineAsync(string value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteLineAsync(value As String) As Task
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteLineAsync(System.String)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The string writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The string writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  fullName: System.IO.TextWriter
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.IO.TextWriter.CoreNewLine
  parent: System.IO.TextWriter
  isExternal: false
  name: CoreNewLine
  fullName: System.IO.TextWriter.CoreNewLine
- uid: System.IO.TextWriter.Null
  parent: System.IO.TextWriter
  isExternal: false
  fullName: System.IO.TextWriter.Null
- uid: System.IO.TextWriter.FormatProvider
  parent: System.IO.TextWriter
  isExternal: false
  name: FormatProvider
  fullName: System.IO.TextWriter.FormatProvider
- uid: System.IO.TextWriter.NewLine
  parent: System.IO.TextWriter
  isExternal: false
  name: NewLine
  fullName: System.IO.TextWriter.NewLine
- uid: System.IO.TextWriter.Dispose
  parent: System.IO.TextWriter
  isExternal: false
  name: Dispose()
  fullName: System.IO.TextWriter.Dispose()
  spec.csharp:
  - uid: System.IO.TextWriter.Dispose
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Dispose
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Flush
  parent: System.IO.TextWriter
  isExternal: false
  name: Flush()
  fullName: System.IO.TextWriter.Flush()
  spec.csharp:
  - uid: System.IO.TextWriter.Flush
    name: Flush
    fullName: System.IO.TextWriter.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Flush
    name: Flush
    fullName: System.IO.TextWriter.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Boolean)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Boolean)
  fullName: System.IO.TextWriter.Write(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Boolean)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Boolean)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Char[])
  fullName: System.IO.TextWriter.Write(System.Char[])
  fullname.vb: System.IO.TextWriter.Write(System.Char())
  name.vb: Write(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Char[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Char[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Decimal)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Decimal)
  fullName: System.IO.TextWriter.Write(System.Decimal)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Decimal)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Decimal)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Double)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Double)
  fullName: System.IO.TextWriter.Write(System.Double)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Double)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Double)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Int32)
  fullName: System.IO.TextWriter.Write(System.Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Int64)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Int64)
  fullName: System.IO.TextWriter.Write(System.Int64)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Int64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Int64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Object)
  fullName: System.IO.TextWriter.Write(System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Single)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Single)
  fullName: System.IO.TextWriter.Write(System.Single)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Single)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Single)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object, Object, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object[])
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object[])
  fullName: System.IO.TextWriter.Write(System.String, System.Object[])
  fullname.vb: System.IO.TextWriter.Write(System.String, System.Object())
  name.vb: Write(String, Object())
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.UInt32)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(UInt32)
  fullName: System.IO.TextWriter.Write(System.UInt32)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.UInt32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.UInt32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.UInt64)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(UInt64)
  fullName: System.IO.TextWriter.Write(System.UInt64)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.UInt64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.UInt64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteAsync(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(Char[])
  fullName: System.IO.TextWriter.WriteAsync(System.Char[])
  fullname.vb: System.IO.TextWriter.WriteAsync(System.Char())
  name.vb: WriteAsync(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[])
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[])
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine
  parent: System.IO.TextWriter
  isExternal: false
  name: WriteLine()
  fullName: System.IO.TextWriter.WriteLine()
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Boolean)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Boolean)
  fullName: System.IO.TextWriter.WriteLine(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Boolean)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Boolean)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Char)
  fullName: System.IO.TextWriter.WriteLine(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Char)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Char)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Char[])
  fullName: System.IO.TextWriter.WriteLine(System.Char[])
  fullname.vb: System.IO.TextWriter.WriteLine(System.Char())
  name.vb: WriteLine(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Char[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Char[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteLine(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.WriteLine(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLine(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Decimal)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Decimal)
  fullName: System.IO.TextWriter.WriteLine(System.Decimal)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Decimal)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Decimal)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Double)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Double)
  fullName: System.IO.TextWriter.WriteLine(System.Double)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Double)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Double)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Int32)
  fullName: System.IO.TextWriter.WriteLine(System.Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Int64)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Int64)
  fullName: System.IO.TextWriter.WriteLine(System.Int64)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Int64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Int64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Object)
  fullName: System.IO.TextWriter.WriteLine(System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Single)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Single)
  fullName: System.IO.TextWriter.WriteLine(System.Single)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Single)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Single)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String)
  fullName: System.IO.TextWriter.WriteLine(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object, Object, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object[])
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object[])
  fullname.vb: System.IO.TextWriter.WriteLine(System.String, System.Object())
  name.vb: WriteLine(String, Object())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.UInt32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(UInt32)
  fullName: System.IO.TextWriter.WriteLine(System.UInt32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.UInt32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.UInt32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.UInt64)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(UInt64)
  fullName: System.IO.TextWriter.WriteLine(System.UInt64)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.UInt64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.UInt64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync
  parent: System.IO.TextWriter
  isExternal: false
  name: WriteLineAsync()
  fullName: System.IO.TextWriter.WriteLineAsync()
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(Char[])
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[])
  fullname.vb: System.IO.TextWriter.WriteLineAsync(System.Char())
  name.vb: WriteLineAsync(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[])
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[])
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.IO.TextWriter.Encoding
  parent: System.IO.TextWriter
  isExternal: false
  name: Encoding
  fullName: System.IO.TextWriter.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.IO.TextWriter.Dispose(System.Boolean)
  parent: System.IO.TextWriter
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.IO.TextWriter.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextWriter.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.TextWriter.FlushAsync
  parent: System.IO.TextWriter
  isExternal: false
  name: FlushAsync()
  fullName: System.IO.TextWriter.FlushAsync()
  spec.csharp:
  - uid: System.IO.TextWriter.FlushAsync
    name: FlushAsync
    fullName: System.IO.TextWriter.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.FlushAsync
    name: FlushAsync
    fullName: System.IO.TextWriter.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.TextWriter.Write(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Char)
  fullName: System.IO.TextWriter.Write(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Char)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Char)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.Write(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.Write(System.Char(), System.Int32, System.Int32)
  name.vb: Write(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.TextWriter.Write(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String)
  fullName: System.IO.TextWriter.Write(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteAsync(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(Char)
  fullName: System.IO.TextWriter.WriteAsync(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.Char)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.Char)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.WriteAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteAsync(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(String)
  fullName: System.IO.TextWriter.WriteAsync(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.String)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.String)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(Char)
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.WriteLineAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLineAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(String)
  fullName: System.IO.TextWriter.WriteLineAsync(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.String)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.String)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
