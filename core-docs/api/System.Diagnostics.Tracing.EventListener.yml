items:
- uid: System.Diagnostics.Tracing.EventListener
  commentId: T:System.Diagnostics.Tracing.EventListener
  id: EventListener
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventListener.#ctor
  - System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.Dispose
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  langs:
  - csharp
  - vb
  name: EventListener
  fullName: System.Diagnostics.Tracing.EventListener
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventListener
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 115
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Provides methods for enabling and disabling events from event sources.</p>\n"
  remarks: "\n<p>An event listener represents the target for all events generated by event source (<xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> object) implementations in the current application domain. When a new event listener is created, it is logically attached to all event sources in that application domain.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you must dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>An event listener can enable or disable on a per-current event source basis by using event levels (<xref href=\"System.Diagnostics.Tracing.EventLevel\" data-throw-if-not-resolved=\"false\"></xref>) and event keywords (<xref href=\"System.Diagnostics.Tracing.EventKeywords\" data-throw-if-not-resolved=\"false\"></xref>) to further restrict the set of events to be sent to the listener. The listener can also send arbitrary commands to a specific current event source by using the <xref href=\"System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\" data-throw-if-not-resolved=\"false\"></xref> method. The meanings of the commands are specific to the implementation of the event source. </p>\n<p>If the <xref href=\"System.Diagnostics.Tracing.EventSource.Guid\" data-throw-if-not-resolved=\"false\"></xref> property in the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> object that is used to enable or disable events is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>, all event sources in the application domain are affected. </p>\n<p>Multiple event listeners can be defined in a single application domain. Each listener is logically independent of the other listeners so that events that are enabled or disabled by one listener affect only that listener. It is possible for commands sent with the <xref href=\"System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\" data-throw-if-not-resolved=\"false\"></xref> method to do a semantic operation (such as a garbage collection or flushing data) that affects the other listeners, but this is the exception rather than the rule.</p>\n<p>Each event source   keeps a list of event listeners that it sends events to. A set of filtering criteria is associated with each event source-listener pair. These criteria determine the events that listener will receive for the current event source. Listeners receive the events on their <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method. Therefore, subclasses of <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> must override this method to do something useful with the data.</p>\n<p>When a new event source is created, the <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\" data-throw-if-not-resolved=\"false\"></xref> method is called. Every current event listener gets exactly one <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\" data-throw-if-not-resolved=\"false\"></xref> call for every current event source that can send it log messages. When an event listener is created, a series of <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\" data-throw-if-not-resolved=\"false\"></xref> calls are made to notify the new listener of all the event sources that existed before the listener was created.</p>\n"
  syntax:
    content: 'public abstract class EventListener : IDisposable'
    content.vb: >-
      Public MustInherit Class EventListener
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Diagnostics.Tracing.EventListener.#ctor
  commentId: M:System.Diagnostics.Tracing.EventListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: EventListener()
  fullName: System.Diagnostics.Tracing.EventListener.EventListener()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 117
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>All events are disabled when a new instance is created. Use the <see cref=\"Overload:System.Diagnostics.Tracing.EventListener.EnableEvents\"></see> methods to enable events.</p>\n"
  syntax:
    content: protected EventListener()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  commentId: M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  id: DisableEvents(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: DisableEvents(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DisableEvents
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 118
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Disables all events for the specified event source.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Diagnostics.Tracing.EventSource.Guid\" data-throw-if-not-resolved=\"false\"></xref> property for <em>eventSource</em> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>, events for all event sources in the application domain are disabled for this event listener. </p>\n<p></p>\n"
  syntax:
    content: public void DisableEvents(EventSource eventSource)
    content.vb: Public Sub DisableEvents(eventSource As EventSource)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to disable events for.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventListener.Dispose
  commentId: M:System.Diagnostics.Tracing.EventListener.Dispose
  id: Dispose
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Diagnostics.Tracing.EventListener.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 119
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n"
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: EnableEvents(EventSource, EventLevel)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableEvents
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 120
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Enables events for the specified event source that has the specified verbosity level or lower.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Diagnostics.Tracing.EventSource.Guid\" data-throw-if-not-resolved=\"false\"></xref> property in the specified <em>eventSource</em> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>, all event sources in the application domain are affected.</p>\n"
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to enable events for.</p>\n"
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of events to enable.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: EnableEvents(EventSource, EventLevel, EventKeywords)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableEvents
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 121
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Diagnostics.Tracing.EventSource.Guid\" data-throw-if-not-resolved=\"false\"></xref> property in the specified <em>eventSource</em> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>, all event sources in the application domain are affected.</p>\n"
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to enable events for.</p>\n"
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of events to enable.</p>\n"
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The keyword flags necessary to enable the events.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: EnableEvents(EventSource, EventLevel, EventKeywords, Collections.Generic.IDictionary<String, String>)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableEvents
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 122
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Diagnostics.Tracing.EventSource.Guid\" data-throw-if-not-resolved=\"false\"></xref> property in the specified <em>eventSource</em> is <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>, all event sources in the application domain are affected.</p>\n"
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, Collections.Generic.IDictionary<string, string> arguments)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords, arguments As Collections.Generic.IDictionary(Of String, String))
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to enable events for.</p>\n"
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of events to enable.</p>\n"
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The keyword flags necessary to enable the events.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>The arguments to be matched to enable the events.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: EnableEvents(EventSource, EventLevel, EventKeywords, Collections.Generic.IDictionary(Of String, String))
- uid: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  commentId: M:System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  id: EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: EventSourceIndex(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventSourceIndex
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 123
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets a small non-negative number that represents the specified event source.</p>\n"
  remarks: "\n<p>The value returned by <xref href=\"System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)\" data-throw-if-not-resolved=\"false\"></xref> identifies an event source that is suitable for indexing an array. This integer is unique within the application domain. An event listener might find it useful to store additional information about each event source that is connected to it. The value returned by <xref href=\"System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)\" data-throw-if-not-resolved=\"false\"></xref> allows this extra information to be efficiently stored in a  expandable array such as <strong>List<T></strong>.</p>\n"
  syntax:
    content: protected static int EventSourceIndex(EventSource eventSource)
    content.vb: Protected Shared Function EventSourceIndex(eventSource As EventSource) As Integer
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to find the index for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A small non-negative number that represents the specified event source.</p>\n"
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  commentId: M:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  id: OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: OnEventSourceCreated(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnEventSourceCreated
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 124
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Called for all existing event sources when the event listener is created and when a new event source is attached to the listener.</p>\n"
  remarks: "\n<p>Event source implementations should be aware that these callbacks are issued for existing event sources when the event listener is instantiated.</p>\n<p>In a multithreaded environment, it is possible for <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> callbacks  to occur before the <xref href=\"System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\" data-throw-if-not-resolved=\"false\"></xref> callback.</p>\n"
  syntax:
    content: protected virtual void OnEventSourceCreated(EventSource eventSource)
    content.vb: Protected Overridable Sub OnEventSourceCreated(eventSource As EventSource)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  commentId: M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  id: OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: OnEventWritten(EventWrittenEventArgs)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnEventWritten
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 125
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Called whenever an event has been written by an event source for which the event listener has enabled events.</p>\n"
  syntax:
    content: protected abstract void OnEventWritten(EventWrittenEventArgs eventData)
    content.vb: Protected MustOverride Sub OnEventWritten(eventData As EventWrittenEventArgs)
    parameters:
    - id: eventData
      type: System.Diagnostics.Tracing.EventWrittenEventArgs
      description: "\n<p>The event arguments that describe the event.</p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2
  name: Collections.Generic.IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: Collections.Generic.IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventWrittenEventArgs
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs
