items:
- uid: System.Threading.Tasks.TaskContinuationOptions
  commentId: T:System.Threading.Tasks.TaskContinuationOptions
  id: TaskContinuationOptions
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  - System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  - System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  - System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  - System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  - System.Threading.Tasks.TaskContinuationOptions.LongRunning
  - System.Threading.Tasks.TaskContinuationOptions.None
  - System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  - System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  - System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  - System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  - System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  langs:
  - csharp
  - vb
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
  type: Enum
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TaskContinuationOptions
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 360
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies the behavior for a task that is created by using the <xref href=\"System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: 'public enum TaskContinuationOptions : int'
    content.vb: Public Enum TaskContinuationOptions As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  id: AttachedToParent
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: AttachedToParent
  fullName: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AttachedToParent
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 363
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy. The continuation can be a child task only if its antecedent is also a child task. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the <xref href=\"System.Threading.Tasks.TaskContinuationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> option so that the parent and child tasks are synchronized. </p>\n<p>Note that if a parent task is configured with the <xref href=\"System.Threading.Tasks.TaskCreationOptions.DenyChildAttach\" data-throw-if-not-resolved=\"false\"></xref> option, the <xref href=\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> option in the child task has no effect, and the child task will execute as a detached child task. </p>\n<p>For more information, see Attached and Detached Child Tasks. </p>\n"
  syntax:
    content: AttachedToParent = null
    content.vb: AttachedToParent = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  id: DenyChildAttach
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: DenyChildAttach
  fullName: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DenyChildAttach
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 364
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <xref href=\"System.Threading.Tasks.TaskCreationOptions.AttachedToParent\" data-throw-if-not-resolved=\"false\"></xref> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see Attached and Detached Child Tasks. </p>\n"
  syntax:
    content: DenyChildAttach = null
    content.vb: DenyChildAttach = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  id: ExecuteSynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: ExecuteSynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteSynchronously
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 365
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation task should be executed synchronously. With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation. If the antecedent's <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> is disposed in a <strong>finally</strong> block (<strong>Finally</strong> in Visual Basic), a continuation with this option will run in that <strong>finally</strong> block. Only very short-running continuations should be executed synchronously. </p>\n<p>Because the task executes synchronously, there is no need to call a method such as <xref href=\"System.Threading.Tasks.Task.Wait\" data-throw-if-not-resolved=\"false\"></xref> to ensure that the calling thread waits for the task to complete. </p>\n"
  syntax:
    content: ExecuteSynchronously = null
    content.vb: ExecuteSynchronously = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  id: HideScheduler
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: HideScheduler
  fullName: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HideScheduler
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 366
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that tasks created by the continuation by calling methods such as <xref href=\"System.Threading.Tasks.Task.Run(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\" data-throw-if-not-resolved=\"false\"></xref> see the default scheduler (<xref href=\"System.Threading.Tasks.TaskScheduler.Default\" data-throw-if-not-resolved=\"false\"></xref>) rather than the scheduler on which this continuation is running as the current scheduler.  </p>\n"
  syntax:
    content: HideScheduler = null
    content.vb: HideScheduler = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  id: LazyCancellation
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: LazyCancellation
  fullName: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LazyCancellation
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 367
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</p>\n"
  syntax:
    content: LazyCancellation = null
    content.vb: LazyCancellation = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.LongRunning
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.LongRunning
  id: LongRunning
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: LongRunning
  fullName: System.Threading.Tasks.TaskContinuationOptions.LongRunning
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongRunning
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 368
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that a continuation will be a long-running, course-grained operation. It provides a hint to the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that oversubscription may be warranted. </p>\n"
  syntax:
    content: LongRunning = null
    content.vb: LongRunning = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.None
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.None
  id: None
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Threading.Tasks.TaskContinuationOptions.None
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: None
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 369
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>When no continuation options are specified, specifies that default behavior should be used when executing a continuation. The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property value. It the continuation is a child task, it is created as a detached nested task.  </p>\n"
  syntax:
    content: None = null
    content.vb: None = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  id: NotOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: NotOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotOnCanceled
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 370
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation task should not be scheduled if its antecedent was canceled. An antecedent is canceled if its <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property upon completion is <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>. This option is not valid for multi-task continuations.</p>\n"
  syntax:
    content: NotOnCanceled = null
    content.vb: NotOnCanceled = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  id: NotOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: NotOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotOnFaulted
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 371
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property upon completion is <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>. This option is not valid for multi-task continuations. </p>\n"
  syntax:
    content: NotOnFaulted = null
    content.vb: NotOnFaulted = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  id: NotOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: NotOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotOnRanToCompletion
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 372
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation task should not be scheduled if its antecedent ran to completion. An antecedent runs to completion if its <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property upon completion is <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>. This option is not valid for multi-task continuations. </p>\n"
  syntax:
    content: NotOnRanToCompletion = null
    content.vb: NotOnRanToCompletion = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  id: OnlyOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: OnlyOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnlyOnCanceled
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 373
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation should be scheduled only if its antecedent was canceled.  An antecedent is canceled if its <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property upon completion is <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>. This option is not valid for multi-task continuations.</p>\n"
  syntax:
    content: OnlyOnCanceled = null
    content.vb: OnlyOnCanceled = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  id: OnlyOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: OnlyOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnlyOnFaulted
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 374
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property upon completion is <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted\" data-throw-if-not-resolved=\"false\"></xref>  option guarantees that the <xref href=\"System.Threading.Tasks.Task.Exception\" data-throw-if-not-resolved=\"false\"></xref> property in the antecedent is not <strong>null</strong>. You can use that property to catch the exception and see which exception caused the task to fault. If you do not access the <xref href=\"System.Threading.Tasks.Task.Exception\" data-throw-if-not-resolved=\"false\"></xref> property, the exception is unhandled. Also, if you attempt to access the <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> property of a task that has been canceled or has faulted, a new exception is thrown. </p>\n<p>This option is not valid for multi-task continuations. </p>\n"
  syntax:
    content: OnlyOnFaulted = null
    content.vb: OnlyOnFaulted = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  id: OnlyOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: OnlyOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnlyOnRanToCompletion
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 375
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation should be scheduled only if its antecedent ran to completion. An antecedent runs to completion if its <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property upon completion is <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>. This option is not valid for multi-task continuations.</p>\n"
  syntax:
    content: OnlyOnRanToCompletion = null
    content.vb: OnlyOnRanToCompletion = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  id: PreferFairness
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: PreferFairness
  fullName: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreferFairness
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 376
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>A hint to a <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later. </p>\n"
  syntax:
    content: PreferFairness = null
    content.vb: PreferFairness = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  commentId: F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  id: RunContinuationsAsynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  - vb
  name: RunContinuationsAsynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  type: Field
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunContinuationsAsynchronously
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 377
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Specifies that the continuation task should be run asynchronously.  This option has precedence over <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: RunContinuationsAsynchronously = null
    content.vb: RunContinuationsAsynchronously = Nothing
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
