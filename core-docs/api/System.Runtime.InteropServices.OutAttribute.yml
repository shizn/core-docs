items:
- uid: System.Runtime.InteropServices.OutAttribute
  commentId: T:System.Runtime.InteropServices.OutAttribute
  id: OutAttribute
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.OutAttribute.#ctor
  langs:
  - csharp
  - vb
  name: OutAttribute
  fullName: System.Runtime.InteropServices.OutAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutAttribute
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3041
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates that data should be marshaled from callee back to caller.</p>\n"
  remarks: "\n<p>You can apply this attribute to parameters.</p>\n<p>The <xref href=\"System.Runtime.InteropServices.OutAttribute\" data-throw-if-not-resolved=\"false\"></xref> is optional. The attribute is supported for COM interop and platform invoke only. In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable. For example, the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.</p>\n<p>Out-only behavior is never a default marshaling behavior for parameters. You can apply the <xref href=\"System.Runtime.InteropServices.OutAttribute\" data-throw-if-not-resolved=\"false\"></xref> to value and reference types passed by reference to change In/Out behavior to Out-only behavior, which is equivalent to using the <strong>out</strong> keyword in C#. For example, arrays passed by value, marshaled as In-only parameters by default, can be changed to Out-only. However, the behavior does not always provide expected semantics when the types include all-blittable elements or fields because the interop marshaler uses pinning. If you do not care about passing data into the callee, Out-only marshaling can provide better performance for non-blittable types.</p>\n<p>Combining the <xref href=\"System.Runtime.InteropServices.InAttribute\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.OutAttribute\" data-throw-if-not-resolved=\"false\"></xref> is particularly useful when applied to arrays and formatted, non-blittable types. Callers see the changes a callee makes to these types only when you apply both attributes. Since these types require copying during marshaling, you can use <xref href=\"System.Runtime.InteropServices.InAttribute\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.OutAttribute\" data-throw-if-not-resolved=\"false\"></xref> to reduce unnecessary copies.</p>\n<p>For more information on the effect of <xref href=\"System.Runtime.InteropServices.OutAttribute\" data-throw-if-not-resolved=\"false\"></xref> on marshaling behavior, see Directional Attributes.</p>\n"
  example:
  - "\n<p>The following example shows how to apply the <xref href=\"System.Runtime.InteropServices.InAttribute\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.OutAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a platform invoke prototype that passes an array as a parameter. The combination of directional attributes allows the caller to see the changes made by the callee.</p>Interop InOutParameters#1"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]

      public sealed class OutAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Parameter, Inherited:=False)>

      Public NotInheritable Class OutAttribute
          Inherits Attribute
  seealso:
  - type: System.Runtime.InteropServices.InAttribute
    commentId: T:System.Runtime.InteropServices.InAttribute
  - type: System.Text.StringBuilder
    commentId: T:System.Text.StringBuilder
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 2048
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.OutAttribute.#ctor
  commentId: M:System.Runtime.InteropServices.OutAttribute.#ctor
  id: '#ctor'
  parent: System.Runtime.InteropServices.OutAttribute
  langs:
  - csharp
  - vb
  name: OutAttribute()
  fullName: System.Runtime.InteropServices.OutAttribute.OutAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 3044
  assemblies:
  - System.Runtime
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.OutAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public OutAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: false
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
