items:
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  id: INotifyPropertyChanged
  parent: System.ComponentModel
  children:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  langs:
  - csharp
  - vb
  name: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
  type: Interface
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: INotifyPropertyChanged
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 175
  assemblies:
  - System.ObjectModel
  namespace: System.ComponentModel
  summary: "\n<p>Notifies clients that a property value has changed.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface is used to notify clients, typically binding clients, that a property value has changed.</p>\n<p>For example, consider a <code>Person</code> object with a property called <code>FirstName</code>. To provide generic property-change notification, the <code>Person</code> type implements the <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface and raises a <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event when <code>FirstName</code> is changed.</p>\n<p>For change notification to occur in a binding between a bound client and a data source, your bound type should either:</p>\n<ul><li>\n<p>Implement the <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface (preferred).</p>\n</li><li>\n<p>Provide a change event for each property of the bound type.</p>\n</li></ul>\n<p>Do not do both.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the how to implement the <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface. When you run this example, you will notice the bound <xref href=\"System.Windows.Forms.DataGridView\" data-throw-if-not-resolved=\"false\"></xref> control reflects the change in the data source without requiring the binding to be reset.</p>\n<p>If you use the CallerMemberName attribute, calls to the <code>NotifyPropertyChanged</code> method don't have to specify the property name as a string argument. For more information, see Caller Information (C# and Visual Basic).</p>\n<p>Replace the code in your Form1 with the following code and then change the namespace to the name of your project. As an alternative, you can name your project with the namespace name below when you create it.</p>\n<pre><code class=\"c#\">using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Runtime.CompilerServices;\nusing System.Windows.Forms;\n\n// Either change the following namespace to the name of your project, \n// or name your project with the following name when you create it.\nnamespace TestNotifyPropertyChangedCS\n{\n// This form demonstrates using a BindingSource to bind\n// a list to a DataGridView control. The list does not\n// raise change notifications. However the DemoCustomer type \n// in the list does.\npublic partial class Form1 : Form\n{\n// This button causes the value of a list element to be changed.\nprivate Button changeItemBtn = new Button();\n\n// This DataGridView control displays the contents of the list.\nprivate DataGridView customersDataGridView = new DataGridView();\n\n// This BindingSource binds the list to the DataGridView control.\nprivate BindingSource customersBindingSource = new BindingSource();\n\npublic Form1()\n{\n    InitializeComponent();\n\n    // Set up the \"Change Item\" button.\n    this.changeItemBtn.Text = \"Change Item\";\n    this.changeItemBtn.Dock = DockStyle.Bottom;\n    this.changeItemBtn.Click +=\n        new EventHandler(changeItemBtn_Click);\n    this.Controls.Add(this.changeItemBtn);\n\n    // Set up the DataGridView.\n    customersDataGridView.Dock = DockStyle.Top;\n    this.Controls.Add(customersDataGridView);\n\n    this.Size = new Size(400, 200);\n}\n\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    // Create and populate the list of DemoCustomer objects\n    // which will supply data to the DataGridView.\n    BindingList<DemoCustomer> customerList = new BindingList<DemoCustomer>();\n    customerList.Add(DemoCustomer.CreateNewCustomer());\n    customerList.Add(DemoCustomer.CreateNewCustomer());\n    customerList.Add(DemoCustomer.CreateNewCustomer());\n\n    // Bind the list to the BindingSource.\n    this.customersBindingSource.DataSource = customerList;\n\n    // Attach the BindingSource to the DataGridView.\n    this.customersDataGridView.DataSource =\n        this.customersBindingSource;\n\n}\n\n// Change the value of the CompanyName property for the first \n// item in the list when the \"Change Item\" button is clicked.\nvoid changeItemBtn_Click(object sender, EventArgs e)\n{\n    // Get a reference to the list from the BindingSource.\n    BindingList<DemoCustomer> customerList =\n        this.customersBindingSource.DataSource as BindingList<DemoCustomer>;\n\n    // Change the value of the CompanyName property for the \n    // first item in the list.\n    customerList[0].CustomerName = \"Tailspin Toys\";\n    customerList[0].PhoneNumber = \"(708)555-0150\";\n}\n\n}\n\n// This is a simple customer class that \n// implements the IPropertyChange interface.\npublic class DemoCustomer : INotifyPropertyChanged\n{\n// These fields hold the values for the public properties.\nprivate Guid idValue = Guid.NewGuid();\nprivate string customerNameValue = String.Empty;\nprivate string phoneNumberValue = String.Empty;\n\npublic event PropertyChangedEventHandler PropertyChanged;\n\n// This method is called by the Set accessor of each property.\n// The CallerMemberName attribute that is applied to the optional propertyName\n// parameter causes the property name of the caller to be substituted as an argument.\nprivate void NotifyPropertyChanged([CallerMemberName] String propertyName = \"\")\n{\n    if (PropertyChanged != null)\n    {\n        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n\n// The constructor is private to enforce the factory pattern.\nprivate DemoCustomer()\n{\n    customerNameValue = \"Customer\";\n    phoneNumberValue = \"(312)555-0100\";\n}\n\n// This is the public factory method.\npublic static DemoCustomer CreateNewCustomer()\n{\n    return new DemoCustomer();\n}\n\n// This property represents an ID, suitable\n// for use as a primary key in a database.\npublic Guid ID\n{\n    get\n    {\n        return this.idValue;\n    }\n}\n\npublic string CustomerName\n{\n    get\n    {\n        return this.customerNameValue;\n    }\n\n    set\n    {\n        if (value != this.customerNameValue)\n        {\n            this.customerNameValue = value;\n            NotifyPropertyChanged();\n        }\n    }\n}\n\npublic string PhoneNumber\n{\n    get\n    {\n        return this.phoneNumberValue;\n    }\n\n    set\n    {\n        if (value != this.phoneNumberValue)\n        {\n            this.phoneNumberValue = value;\n            NotifyPropertyChanged();\n        }\n    }\n}\n}\n}</code></pre>\n<pre><code class=\"vb\">Imports System\nImports System.Collections.Generic\nImports System.ComponentModel\nImports System.Drawing\nImports System.Runtime.CompilerServices\nImports System.Windows.Forms\n\n' This form demonstrates using a BindingSource to bind\n' a list to a DataGridView control. The list does not\n' raise change notifications. However the DemoCustomer type \n' in the list does.\n\nPublic Class Form1\nInherits System.Windows.Forms.Form\n' This button causes the value of a list element to be changed.\nPrivate changeItemBtn As New Button()\n\n' This DataGridView control displays the contents of the list.\nPrivate customersDataGridView As New DataGridView()\n\n' This BindingSource binds the list to the DataGridView control.\nPrivate customersBindingSource As New BindingSource()\n\nPublic Sub New()\nInitializeComponent()\n\n' Set up the \"Change Item\" button.\nMe.changeItemBtn.Text = \"Change Item\"\nMe.changeItemBtn.Dock = DockStyle.Bottom\nAddHandler Me.changeItemBtn.Click, AddressOf changeItemBtn_Click\nMe.Controls.Add(Me.changeItemBtn)\n\n' Set up the DataGridView.\ncustomersDataGridView.Dock = DockStyle.Top\nMe.Controls.Add(customersDataGridView)\n\nMe.Size = New Size(400, 200)\nEnd Sub\n\nPrivate Sub Form1_Load(ByVal sender As System.Object, _\nByVal e As System.EventArgs) Handles Me.Load\n\n' Create and populate the list of DemoCustomer objects\n' which will supply data to the DataGridView.\nDim customerList As New BindingList(Of DemoCustomer)\n\ncustomerList.Add(DemoCustomer.CreateNewCustomer())\ncustomerList.Add(DemoCustomer.CreateNewCustomer())\ncustomerList.Add(DemoCustomer.CreateNewCustomer())\n\n' Bind the list to the BindingSource.\nMe.customersBindingSource.DataSource = customerList\n\n' Attach the BindingSource to the DataGridView.\nMe.customersDataGridView.DataSource = Me.customersBindingSource\nEnd Sub\n\n' This event handler changes the value of the CompanyName\n' property for the first item in the list.\nPrivate Sub changeItemBtn_Click(ByVal sender As Object, ByVal e As EventArgs)\n' Get a reference to the list from the BindingSource.\nDim customerList As BindingList(Of DemoCustomer) = _\n    CType(customersBindingSource.DataSource, BindingList(Of DemoCustomer))\n\n' Change the value of the CompanyName property for the \n' first item in the list.\ncustomerList(0).CustomerName = \"Tailspin Toys\"\ncustomerList(0).PhoneNumber = \"(708)555-0150\"\nEnd Sub\nEnd Class\n\n' This class implements a simple customer type \n' that implements the IPropertyChange interface.\n\nPublic Class DemoCustomer\nImplements INotifyPropertyChanged\n\n' These fields hold the values for the public properties.\nPrivate idValue As Guid = Guid.NewGuid()\nPrivate customerNameValue As String = String.Empty\nPrivate phoneNumberValue As String = String.Empty\n\nPublic Event PropertyChanged As PropertyChangedEventHandler _\nImplements INotifyPropertyChanged.PropertyChanged\n\n' This method is called by the Set accessor of each property.\n' The CallerMemberName attribute that is applied to the optional propertyName\n' parameter causes the property name of the caller to be substituted as an argument.\nPrivate Sub NotifyPropertyChanged(<CallerMemberName()> Optional ByVal propertyName As String = Nothing)\nRaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))\nEnd Sub\n\n' The constructor is private to enforce the factory pattern.\nPrivate Sub New()\ncustomerNameValue = \"Customer\"\nphoneNumberValue = \"(312)555-0100\"\nEnd Sub\n\n' This is the public factory method.\nPublic Shared Function CreateNewCustomer() As DemoCustomer\nReturn New DemoCustomer()\nEnd Function\n\n' This property represents an ID, suitable\n' for use as a primary key in a database.\nPublic ReadOnly Property ID() As Guid\nGet\n    Return Me.idValue\nEnd Get\nEnd Property\n\n\nPublic Property CustomerName() As String\nGet\n    Return Me.customerNameValue\nEnd Get\n\nSet(ByVal value As String)\n    If Not (value = customerNameValue) Then\n        Me.customerNameValue = value\n        NotifyPropertyChanged()\n    End If\nEnd Set\nEnd Property\n\n\nPublic Property PhoneNumber() As String\nGet\n    Return Me.phoneNumberValue\nEnd Get\n\nSet(ByVal value As String)\n    If Not (value = phoneNumberValue) Then\n        Me.phoneNumberValue = value\n        NotifyPropertyChanged()\n    End If\nEnd Set\nEnd Property\nEnd Class</code></pre>\n"
  syntax:
    content: public interface INotifyPropertyChanged
    content.vb: Public Interface INotifyPropertyChanged
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  id: PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  langs:
  - csharp
  - vb
  name: PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  type: Event
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyChanged
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 177
  assemblies:
  - System.ObjectModel
  namespace: System.ComponentModel
  summary: "\n<p>Occurs when a property value changes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event can indicate all properties on the object have changed by using either <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> as the property name in the <xref href=\"System.ComponentModel.PropertyChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event of the <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.ComponentModel.IPropertyChangeExample#9"
  syntax:
    content: event PropertyChangedEventHandler PropertyChanged
    content.vb: Event PropertyChanged As PropertyChangedEventHandler
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
  seealso:
  - type: System.ComponentModel.PropertyChangedEventArgs
    commentId: T:System.ComponentModel.PropertyChangedEventArgs
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
