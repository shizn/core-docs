items:
- uid: System.Reflection.AssemblyInformationalVersionAttribute
  commentId: T:System.Reflection.AssemblyInformationalVersionAttribute
  id: AssemblyInformationalVersionAttribute
  parent: System.Reflection
  children:
  - System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)
  - System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion
  langs:
  - csharp
  - vb
  name: AssemblyInformationalVersionAttribute
  fullName: System.Reflection.AssemblyInformationalVersionAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyInformationalVersionAttribute
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2722
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Defines additional version information for an assembly manifest.</p>\n"
  remarks: "\n<p>The attribute defined by this class attaches additional version information to an assembly. If this attribute is applied to an assembly, the string it specifies can be obtained at run time by using the <xref href=\"System.Windows.Forms.Application.ProductVersion\" data-throw-if-not-resolved=\"false\"></xref> property. The string is also used in the path and registry key provided by the <xref href=\"System.Windows.Forms.Application.UserAppDataPath\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Windows.Forms.Application.UserAppDataRegistry\" data-throw-if-not-resolved=\"false\"></xref> property. If the <xref href=\"System.Reflection.AssemblyInformationalVersionAttribute\" data-throw-if-not-resolved=\"false\"></xref> is not applied to an assembly, the version number specified by the <xref href=\"System.Reflection.AssemblyVersionAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute is used instead.</p>\n<p>Although you can specify any text, a warning message appears on compilation if the string is not in the format used by the assembly version number, or if it is in that format but contains wildcard characters. This warning is harmless.</p>\n"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]

      public sealed class AssemblyInformationalVersionAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False)>

      Public NotInheritable Class AssemblyInformationalVersionAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 1
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)
  commentId: M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Reflection.AssemblyInformationalVersionAttribute
  langs:
  - csharp
  - vb
  name: AssemblyInformationalVersionAttribute(String)
  fullName: System.Reflection.AssemblyInformationalVersionAttribute.AssemblyInformationalVersionAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2725
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.AssemblyInformationalVersionAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The informational version provides additional version information for an assembly, in string format. It is for informational purposes only and is not used at run time. Although you can specify any text, a warning message appears on compilation if the string is not in the format used by the assembly version number, or if it is in that format but contains wildcard characters. This warning is harmless.</p>\n"
  syntax:
    content: public AssemblyInformationalVersionAttribute(string informationalVersion)
    content.vb: Public Sub New(informationalVersion As String)
    parameters:
    - id: informationalVersion
      type: System.String
      description: "\n<p>The assembly version information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion
  commentId: P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion
  id: InformationalVersion
  parent: System.Reflection.AssemblyInformationalVersionAttribute
  langs:
  - csharp
  - vb
  name: InformationalVersion
  fullName: System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InformationalVersion
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2726
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Gets version information.</p>\n"
  syntax:
    content: public string InformationalVersion { get; }
    content.vb: Public ReadOnly Property InformationalVersion As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string containing the version information.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: false
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
