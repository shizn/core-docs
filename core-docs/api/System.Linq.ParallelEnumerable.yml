items:
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  id: ParallelEnumerable
  parent: System.Linq
  children:
  - System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  - System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.Empty``1
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  - System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  - System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  - System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  - System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  langs:
  - csharp
  - vb
  name: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
  type: Class
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParallelEnumerable
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 55
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: 'public class ParallelEnumerable : object'
    content.vb: >-
      Public Class ParallelEnumerable
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TSource, TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 17
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource Aggregate<TSource>(this ParallelQuery<TSource> source, Func<TSource, TSource, TSource> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource)(source As ParallelQuery(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TSource, TSource))
  name.vb: Aggregate(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, TSource, TSource))
- uid: System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  id: Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 18
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    return:
      type: '{TAccumulate}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Aggregate(Of TSource, TAccumulate)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 19
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: seed
      type: '{TAccumulate}'
    - id: updateAccumulatorFunc
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
    - id: combineAccumulatorsFunc
      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    - id: TResult
    return:
      type: '{TResult}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 20
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: seed
      type: '{TAccumulate}'
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    - id: TResult
    return:
      type: '{TResult}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TAccumulate>, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 21
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, Func<TAccumulate> seedFactory, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seedFactory As Func(Of TAccumulate), updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: seedFactory
      type: System.Func{{TAccumulate}}
    - id: updateAccumulatorFunc
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
    - id: combineAccumulatorsFunc
      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
    typeParameters:
    - id: TSource
    - id: TAccumulate
    - id: TResult
    return:
      type: '{TResult}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TAccumulate), System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), Func(Of TAccumulate), Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.All<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: All
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 22
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool All<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.All(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: All(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  id: Any``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3994
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool Any<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The IEnumerable to check for emptiness.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if the source sequence contains any elements; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Any(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 24
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool Any<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Any(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  id: AsEnumerable``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsEnumerable<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsEnumerable<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsEnumerable
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4810
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static IEnumerable<TSource> AsEnumerable<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEnumerable(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to type as <see cref="!:System.Collections.Generic.IEnumerable<T>"></see>.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: IEnumerable{{TSource}}
      description: The input sequence types as <see cref="!:System.Collections.Generic.IEnumerable<T>"></see>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsEnumerable(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsEnumerable(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  commentId: M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  id: AsOrdered(System.Linq.ParallelQuery)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsOrdered(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsOrdered
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 189
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery AsOrdered(this ParallelQuery source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsOrdered(source As ParallelQuery) As ParallelQuery
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: The input sequence.
    return:
      type: System.Linq.ParallelQuery
      description: The source sequence which will maintain ordering in the query.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  id: AsOrdered``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsOrdered<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsOrdered<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsOrdered
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 145
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> AsOrdered<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsOrdered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The input sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: The source sequence which will maintain ordering in the query.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsOrdered(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsOrdered(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  id: AsParallel(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsParallel(Collections.IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsParallel
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 28
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery AsParallel(this Collections.IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsParallel(source As Collections.IEnumerable) As ParallelQuery
    parameters:
    - id: source
      type: System.Collections.IEnumerable
    return:
      type: System.Linq.ParallelQuery
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  id: AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsParallel<TSource>(Collections.Concurrent.Partitioner<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Concurrent.Partitioner<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsParallel
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 29
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> AsParallel<TSource>(this Collections.Concurrent.Partitioner<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsParallel(Of TSource)(source As Collections.Concurrent.Partitioner(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource))
  name.vb: AsParallel(Of TSource)(Collections.Concurrent.Partitioner(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  id: AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsParallel<TSource>(Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsParallel
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 30
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> AsParallel<TSource>(this Collections.Generic.IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsParallel(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: AsParallel(Of TSource)(Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  id: AsSequential``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsSequential<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsSequential<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsSequential
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 267
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static IEnumerable<TSource> AsSequential<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsSequential(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A <xref href="System.Linq.ParallelQuery`1" data-throw-if-not-resolved="false"></xref> to convert to an <see cref="!:System.Collections.Generic.IEnumerable<T>"></see>.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: IEnumerable{{TSource}}
      description: >-
        The source as an <see cref="!:System.Collections.Generic.IEnumerable<T>"></see>

        to bind to sequential extension methods.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsSequential(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsSequential(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  id: AsUnordered``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsUnordered<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsUnordered<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsUnordered
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 218
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> AsUnordered<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsUnordered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The input sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: The source sequence with arbitrary order.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsUnordered(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsUnordered(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  id: Average(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3680
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Average(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Average(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  id: Average(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3637
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Average(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Double
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Average(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  id: Average(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3502
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Average(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Double
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Average(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  id: Average(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3549
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Average(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Long)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Double
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Average(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3700
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal ? Average(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3657
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double ? Average(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3524
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double ? Average(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Integer?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3571
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double ? Average(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Long?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3614
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float ? Average(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  id: Average(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3594
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Average(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values that are used to calculate an average.
    return:
      type: System.Single
      description: The average of the sequence of values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Average(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 43
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 44
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 45
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 46
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 47
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 48
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 49
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 50
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 51
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 52
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  commentId: M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  id: Cast``1(System.Linq.ParallelQuery)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Cast<TResult>(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.Cast<TResult>(System.Linq.ParallelQuery)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cast
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5345
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Cast<TResult>(this ParallelQuery source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: The sequence that contains the weakly typed elements to be converted.
    typeParameters:
    - id: TResult
      description: The stronger type to convert the elements of <em>source</em> to.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\nA sequence that contains each weakly-type element of the source sequence converted to the specified stronger type.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Cast(Of TResult)(System.Linq.ParallelQuery)
  name.vb: Cast(Of TResult)(ParallelQuery)
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 54
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Concat<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4275
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Concat<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: The first sequence to concatenate.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to concatenate to the first sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the concatenated elements of the two input sequences.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  commentId: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  id: Contains``1(System.Linq.ParallelQuery{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(ParallelQuery<TSource>, TSource)
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4054
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool Contains<TSource>(this ParallelQuery<TSource> source, TSource value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence in which to locate a value.
    - id: value
      type: '{TSource}'
      description: The value to locate in the sequence.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Boolean
      description: "\ntrue if the source sequence contains an element that has the specified value; otherwise, false.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)
  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource)
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(ParallelQuery<TSource>, TSource, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 58
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool Contains<TSource>(this ParallelQuery<TSource> source, TSource value, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource, comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: value
      type: '{TSource}'
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource, Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  id: Count``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1893
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Count<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The number of elements in the input sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Count(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 60
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Count<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Count(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5892
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return a default value for if it is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\nA sequence that contains default(<B>TSource</B>) if <em>source</em> is empty; otherwise, <em>source</em>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  commentId: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5910
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(this ParallelQuery<TSource> source, TSource defaultValue)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource), defaultValue As TSource) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the specified value for if it is empty.
    - id: defaultValue
      type: '{TSource}'
      description: The value to return if the sequence is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\nA sequence that contains <B>defaultValue</B> if <em>source</em> is empty; otherwise, <em>source</em>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource), TSource)
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  id: Distinct``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4490
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Distinct<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to remove duplicate elements from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains distinct elements from the source sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(ParallelQuery<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 64
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Distinct<TSource>(this ParallelQuery<TSource> source, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ElementAt<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.ElementAt<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAt
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5941
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource ElementAt<TSource>(this ParallelQuery<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAt(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The element at the specified position in the source sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ElementAt(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.ElementAtOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAtOrDefault
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5980
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(this ParallelQuery<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAtOrDefault(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: "\ndefault(<B>TSource</B>) if the index is outside the bounds of the source sequence; \notherwise, the element at the specified position in the source sequence.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ElementAtOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.Empty``1
  commentId: M:System.Linq.ParallelEnumerable.Empty``1
  id: Empty``1
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Empty<TResult>()
  fullName: System.Linq.ParallelEnumerable.Empty<TResult>()
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 486
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Empty<TResult>()
    content.vb: Public Shared Function Empty(Of TResult) As ParallelQuery(Of TResult)
    typeParameters:
    - id: TResult
      description: "The type to assign to the type parameter of the returned \ngeneric sequence."
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: An empty sequence whose type argument is <em>TResult</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Empty(Of TResult)()
  name.vb: Empty(Of TResult)()
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 68
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 70
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4716
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\nA sequence whose elements that are not also in <em>second</em> will be returned.\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\nA sequence whose elements that also occur in the first sequence will cause those \nelements to be removed from the returned sequence.\n"
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the set difference of the elements of two sequences.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 73
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  id: First``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5431
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource First<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The first element in the specified sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: First(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 75
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource First<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: First(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5513
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: "\ndefault(<B>TSource</B>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 77
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  commentId: M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  id: ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)
  fullName: System.Linq.ParallelEnumerable.ForAll<TSource>(System.Linq.ParallelQuery<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForAll
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 78
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static void ForAll<TSource>(this ParallelQuery<TSource> source, Action<TSource> action)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ForAll(Of TSource)(source As ParallelQuery(Of TSource), action As Action(Of TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: action
      type: System.Action{{TSource}}
    typeParameters:
    - id: TSource
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ForAll(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Action(Of TSource))
  name.vb: ForAll(Of TSource)(ParallelQuery(Of TSource), Action(Of TSource))
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 79
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 80
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 81
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ParallelQuery(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 82
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 83
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 84
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 85
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult))
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 86
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 87
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 89
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 91
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 92
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 93
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 95
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4619
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: >
        A sequence whose distinct elements that also appear in <em>second</em> will be returned.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\nA sequence whose distinct elements that also appear in the first sequence will be returned.\n"
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the elements that form the set intersection of two sequences.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 98
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 99
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, Collections.Generic.IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 101
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 103
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 104
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TOuter
    - id: TInner
    - id: TKey
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  id: Last``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5607
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource Last<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the last element from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The value at the last position in the source sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Last(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 106
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource Last<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Last(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  id: LastOrDefault``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5691
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource LastOrDefault<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return an element from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: "\ndefault(<em>TSource</em>) if the source sequence is empty; otherwise, the last element in the sequence.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 108
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource LastOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  id: LongCount``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 1966
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long LongCount<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The number of elements in the input sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 110
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long LongCount<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  id: Max(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3169
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Max(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Decimal
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Max(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  id: Max(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3126
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Max(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Double
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Max(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  id: Max(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2997
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Max(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Int32
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Max(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  id: Max(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3040
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long Max(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Int64
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Max(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3189
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal ? Max(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Decimal}
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3146
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double ? Max(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Double}
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3017
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int ? Max(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Int32}
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3060
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long ? Max(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Int64}
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3103
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float ? Max(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Nullable{System.Single}
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  id: Max(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3083
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Max(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to determine the maximum value of.
    return:
      type: System.Single
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Max(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  id: Max``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 3212
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource Max<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the maximum value of.
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
      description: The maximum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 122
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 123
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 124
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 125
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 126
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 127
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 128
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 129
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 130
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 131
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 132
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TResult Max<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: '{TResult}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  id: Min(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2665
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Min(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Decimal
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Min(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  id: Min(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2622
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Min(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Double
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Min(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  id: Min(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2493
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Min(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Int32
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Min(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  id: Min(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2536
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long Min(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Int64
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Min(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2685
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal ? Min(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Decimal}
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2642
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double ? Min(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Double}
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2513
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int ? Min(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Int32}
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2556
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long ? Min(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Int64}
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2599
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float ? Min(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Nullable{System.Single}
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  id: Min(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2579
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Min(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to determine the minimum value of.
    return:
      type: System.Single
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Min(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  id: Min``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2709
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource Min<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to determine the minimum value of.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The minimum value in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 144
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 145
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 146
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 147
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 148
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 149
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 150
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 151
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 152
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 153
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 154
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TResult Min<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: '{TResult}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Min(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  commentId: M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  id: OfType``1(System.Linq.ParallelQuery)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OfType<TResult>(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.OfType<TResult>(System.Linq.ParallelQuery)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OfType
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5327
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> OfType<TResult>(this ParallelQuery source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: The sequence whose elements to filter.
    typeParameters:
    - id: TResult
      description: The type to filter the elements of the sequence on.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: A sequence that contains elements from the input sequence of type <em>TResult</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OfType(Of TResult)(System.Linq.ParallelQuery)
  name.vb: OfType(Of TResult)(ParallelQuery)
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 156
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 157
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 158
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 159
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Range(Int32, Int32)
  fullName: System.Linq.ParallelEnumerable.Range(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Range
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 449
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<int> Range(int start, int count)
    content.vb: Public Shared Function Range(start As Integer, count As Integer) As ParallelQuery(Of Integer)
    parameters:
    - id: start
      type: System.Int32
      description: The value of the first integer in the sequence.
    - id: count
      type: System.Int32
      description: The number of sequential integers to generate.
    return:
      type: System.Linq.ParallelQuery{System.Int32}
      description: "An <strong>IEnumerable<Int32></strong> in C# or <B>IEnumerable(Of Int32)</B> in \nVisual Basic that contains a range of sequential integral numbers."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  id: Repeat``1(``0,System.Int32)
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Repeat<TResult>(TResult, Int32)
  fullName: System.Linq.ParallelEnumerable.Repeat<TResult>(TResult, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Repeat
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 469
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Repeat<TResult>(TResult element, int count)
    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As ParallelQuery(Of TResult)
    parameters:
    - id: element
      type: '{TResult}'
      description: The value to be repeated.
    - id: count
      type: System.Int32
      description: The number of times to repeat the value in the generated sequence.
    typeParameters:
    - id: TResult
      description: The type of the value to be repeated in the result sequence.
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: A sequence that contains a repeated value.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Repeat(Of TResult)(TResult, System.Int32)
  name.vb: Repeat(Of TResult)(TResult, Int32)
- uid: System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  id: Reverse``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Reverse<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Reverse<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5306
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Reverse<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence of values to reverse.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose elements correspond to those of the input sequence in reverse order.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Reverse(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Reverse(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 163
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Select<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  commentId: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 164
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Select<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32,{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, TResult))
  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, TResult))
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Collections.Generic.IEnumerable<TResult>>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 165
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TResult)))
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 166
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TResult))) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult)))
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 167
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this ParallelQuery<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
    typeParameters:
    - id: TSource
    - id: TCollection
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 168
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: collectionSelector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
    typeParameters:
    - id: TSource
    - id: TCollection
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 169
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 171
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4327
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to compare to <strong>second</strong>.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to compare to the first input sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: "\ntrue if the two source sequences are of equal length and their corresponding elements \nare equal according to the default equality comparer for their type; otherwise, false.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 174
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  id: Single``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5781
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource Single<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Single(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 176
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource Single<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Single(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 5837
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: "\nThe single element of the input sequence, or default(<em>TSource</em>) if the \nsequence contains no elements.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 178
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Skip<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.Skip<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4190
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Skip<TSource>(this ParallelQuery<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skip(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to skip before returning the remaining elements.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\nA sequence that contains the elements that occur after the specified index in the input sequence.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Skip(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 180
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> SkipWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 181
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> SkipWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  id: Sum(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2203
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Sum(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Decimal
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Sum(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  id: Sum(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2161
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Sum(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Double
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Sum(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  id: Sum(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2035
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Sum(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Int32
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Sum(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  id: Sum(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2079
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long Sum(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Int64
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Sum(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2225
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal ? Sum(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2181
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double ? Sum(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2057
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int ? Sum(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2101
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long ? Sum(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2141
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float ? Sum(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  id: Sum(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 2121
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Sum(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: A sequence of values to calculate the sum of.
    return:
      type: System.Single
      description: The sum of the values in the sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Sum(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 192
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static decimal Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Decimal}
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 193
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static double Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Double}
    typeParameters:
    - id: TSource
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 194
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static int Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int32}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 195
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static long Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Int64}
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 196
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<decimal> Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 197
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<double> Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 198
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<int> Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 199
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<long> Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 200
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Nullable<float> Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, Nullable<float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 201
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static float Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: selector
      type: System.Func{{TSource},System.Single}
    typeParameters:
    - id: TSource
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Take<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.Take<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4108
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Take<TSource>(this ParallelQuery<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Take(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: The sequence to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to return.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\nA sequence that contains the specified number of elements from the start of the input sequence.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Take(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 203
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> TakeWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 204
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> TakeWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 205
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 206
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 207
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 208
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  id: ToArray``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToArray<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.ToArray<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4835
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static TSource[] ToArray<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArray(Of TSource)(source As ParallelQuery(Of TSource)) As TSource()
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create an array from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}[]'
      description: An array that contains the elements from the input sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToArray(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: ToArray(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 210
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As Collections.Generic.Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 211
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 212
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Collections.Generic.Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 213
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As Collections.Generic.Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  id: ToList``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToList<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.ToList<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToList
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4869
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static List<TSource> ToList<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToList(Of TSource)(source As ParallelQuery(Of TSource)) As List(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence to create a List<(Of <(T>)>) from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: List{{TSource}}
      description: A List<(Of <(T>)>) that contains elements from the input sequence.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToList(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: ToList(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 215
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 216
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 217
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 218
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    - id: TElement
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 219
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 221
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 4529
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements form the first set for the union.
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence whose distinct elements form the second set for the union.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: A sequence that contains the elements from both input sequences, excluding duplicates.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 224
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 225
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Where<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 226
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> Where<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  commentId: M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  id: WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithCancellation<TSource>(ParallelQuery<TSource>, Threading.CancellationToken)
  fullName: System.Linq.ParallelEnumerable.WithCancellation<TSource>(System.Linq.ParallelQuery<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithCancellation
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 227
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> WithCancellation<TSource>(this ParallelQuery<TSource> source, Threading.CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithCancellation(Of TSource)(source As ParallelQuery(Of TSource), cancellationToken As Threading.CancellationToken) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TSource
    return:
      type: System.Linq.ParallelQuery{{TSource}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithCancellation(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Threading.CancellationToken)
  name.vb: WithCancellation(Of TSource)(ParallelQuery(Of TSource), Threading.CancellationToken)
- uid: System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.WithDegreeOfParallelism<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithDegreeOfParallelism
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 326
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(this ParallelQuery<TSource> source, int degreeOfParallelism)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithDegreeOfParallelism(Of TSource)(source As ParallelQuery(Of TSource), degreeOfParallelism As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A ParallelQuery on which to set the limit on the degrees of parallelism.
    - id: degreeOfParallelism
      type: System.Int32
      description: The degree of parallelism for the query.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithDegreeOfParallelism(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: WithDegreeOfParallelism(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  commentId: M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  id: WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)
  fullName: System.Linq.ParallelEnumerable.WithExecutionMode<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelExecutionMode)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithExecutionMode
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 383
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> WithExecutionMode<TSource>(this ParallelQuery<TSource> source, ParallelExecutionMode executionMode)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithExecutionMode(Of TSource)(source As ParallelQuery(Of TSource), executionMode As ParallelExecutionMode) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A ParallelQuery on which to set the option.
    - id: executionMode
      type: System.Linq.ParallelExecutionMode
      description: The mode in which to execute the query.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "ParallelQuery representing the same query as source, but with the \n<xref href=\"System.Linq.ParallelExecutionMode\" data-throw-if-not-resolved=\"false\"></xref> registered."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithExecutionMode(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelExecutionMode)
  name.vb: WithExecutionMode(Of TSource)(ParallelQuery(Of TSource), ParallelExecutionMode)
- uid: System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  commentId: M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  id: WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)
  fullName: System.Linq.ParallelEnumerable.WithMergeOptions<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelMergeOptions)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithMergeOptions
    path: src/System.Linq.Parallel/src/System/Linq/ParallelEnumerable.cs
    startLine: 415
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TSource> WithMergeOptions<TSource>(this ParallelQuery<TSource> source, ParallelMergeOptions mergeOptions)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithMergeOptions(Of TSource)(source As ParallelQuery(Of TSource), mergeOptions As ParallelMergeOptions) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: A ParallelQuery on which to set the option.
    - id: mergeOptions
      type: System.Linq.ParallelMergeOptions
      description: The merge options to set for this query.
    typeParameters:
    - id: TSource
      description: The type of elements of <em>source</em>.
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "ParallelQuery representing the same query as source, but with the \n<xref href=\"System.Linq.ParallelMergeOptions\" data-throw-if-not-resolved=\"false\"></xref> registered."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithMergeOptions(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelMergeOptions)
  name.vb: WithMergeOptions(Of TSource)(ParallelQuery(Of TSource), ParallelMergeOptions)
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, Collections.Generic.IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 231
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this ParallelQuery<TFirst> first, Collections.Generic.IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As Collections.Generic.IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TFirst}}
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSecond}}
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
    typeParameters:
    - id: TFirst
    - id: TSecond
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), Collections.Generic.IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Linq.ParallelQuery<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 233
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  syntax:
    content: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this ParallelQuery<TFirst> first, ParallelQuery<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As ParallelQuery(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TFirst}}
    - id: second
      type: System.Linq.ParallelQuery{{TSecond}}
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
    typeParameters:
    - id: TFirst
    - id: TSecond
    - id: TResult
    return:
      type: System.Linq.ParallelQuery{{TResult}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Linq.ParallelQuery(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), ParallelQuery(Of TSecond), Func(Of TFirst, TSecond, TResult))
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Linq.ParallelQuery{{TSource}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TSource>
  fullName: System.Linq.ParallelQuery<TSource>
  fullname.vb: System.Linq.ParallelQuery(Of TSource)
  name.vb: ParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TSource},{TSource}}
  definition: System.Func`3
  name: Func<TSource, TSource, TSource>
  fullName: System.Func<TSource, TSource, TSource>
  fullname.vb: System.Func(Of TSource, TSource, TSource)
  name.vb: Func(Of TSource, TSource, TSource)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: '{TSource}'
  isExternal: false
  name: TSource
  fullName: TSource
- uid: System.Linq.ParallelQuery`1
  parent: System.Linq
  isExternal: false
  name: ParallelQuery<TSource>
  fullName: System.Linq.ParallelQuery<TSource>
  fullname.vb: System.Linq.ParallelQuery(Of TSource)
  name.vb: ParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<, , >
  fullName: System.Func<, , >
  fullname.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}
  definition: System.Func`3
  name: Func<TAccumulate, TSource, TAccumulate>
  fullName: System.Func<TAccumulate, TSource, TAccumulate>
  fullname.vb: System.Func(Of TAccumulate, TSource, TAccumulate)
  name.vb: Func(Of TAccumulate, TSource, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
  definition: System.Func`3
  name: Func<TAccumulate, TAccumulate, TAccumulate>
  fullName: System.Func<TAccumulate, TAccumulate, TAccumulate>
  fullname.vb: System.Func(Of TAccumulate, TAccumulate, TAccumulate)
  name.vb: Func(Of TAccumulate, TAccumulate, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate},{TResult}}
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  fullName: System.Func<TAccumulate, TResult>
  fullname.vb: System.Func(Of TAccumulate, TResult)
  name.vb: Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  fullName: System.Func<, >
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TAccumulate}}
  definition: System.Func`1
  name: Func<TAccumulate>
  fullName: System.Func<TAccumulate>
  fullname.vb: System.Func(Of TAccumulate)
  name.vb: Func(Of TAccumulate)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<>
  fullName: System.Func<>
  fullname.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Boolean}
  definition: System.Func`2
  name: Func<TSource, Boolean>
  fullName: System.Func<TSource, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.ParallelQuery
  parent: System.Linq
  isExternal: false
  name: ParallelQuery
  fullName: System.Linq.ParallelQuery
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: Collections.Concurrent.Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Collections.Concurrent.Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Collections.Concurrent.Partitioner<>
  fullName: System.Collections.Concurrent.Partitioner<>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of )
  name.vb: Collections.Concurrent.Partitioner(Of )
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Linq.ParallelQuery{System.Decimal}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Decimal>
  fullName: System.Linq.ParallelQuery<System.Decimal>
  fullname.vb: System.Linq.ParallelQuery(Of System.Decimal)
  name.vb: ParallelQuery(Of Decimal)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Linq.ParallelQuery{System.Double}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Double>
  fullName: System.Linq.ParallelQuery<System.Double>
  fullname.vb: System.Linq.ParallelQuery(Of System.Double)
  name.vb: ParallelQuery(Of Double)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Linq.ParallelQuery{System.Int32}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Int32>
  fullName: System.Linq.ParallelQuery<System.Int32>
  fullname.vb: System.Linq.ParallelQuery(Of System.Int32)
  name.vb: ParallelQuery(Of Int32)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Int64}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Int64>
  fullName: System.Linq.ParallelQuery<System.Int64>
  fullname.vb: System.Linq.ParallelQuery(Of System.Int64)
  name.vb: ParallelQuery(Of Int64)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Decimal>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Decimal>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal))
  name.vb: ParallelQuery(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  definition: System.Nullable`1
  name: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  fullName: System.Nullable<>
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Nullable{System.Double}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Double>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Double>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Double))
  name.vb: ParallelQuery(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Int32>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int32>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32))
  name.vb: ParallelQuery(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Int64>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int64>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64))
  name.vb: ParallelQuery(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Nullable{System.Single}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Single>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Single>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Single))
  name.vb: ParallelQuery(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Single}
  definition: System.Nullable`1
  name: Nullable<Single>
  fullName: System.Nullable<System.Single>
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Single}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Single>
  fullName: System.Linq.ParallelQuery<System.Single>
  fullname.vb: System.Linq.ParallelQuery(Of System.Single)
  name.vb: ParallelQuery(Of Single)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Func{{TSource},System.Decimal}
  definition: System.Func`2
  name: Func<TSource, Decimal>
  fullName: System.Func<TSource, System.Decimal>
  fullname.vb: System.Func(Of TSource, System.Decimal)
  name.vb: Func(Of TSource, Decimal)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Double}
  definition: System.Func`2
  name: Func<TSource, Double>
  fullName: System.Func<TSource, System.Double>
  fullname.vb: System.Func(Of TSource, System.Double)
  name.vb: Func(Of TSource, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32}
  definition: System.Func`2
  name: Func<TSource, Int32>
  fullName: System.Func<TSource, System.Int32>
  fullname.vb: System.Func(Of TSource, System.Int32)
  name.vb: Func(Of TSource, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int64}
  definition: System.Func`2
  name: Func<TSource, Int64>
  fullName: System.Func<TSource, System.Int64>
  fullname.vb: System.Func(Of TSource, System.Int64)
  name.vb: Func(Of TSource, Int64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Decimal}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Decimal>>
  fullName: System.Func<TSource, System.Nullable<System.Decimal>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))
  name.vb: Func(Of TSource, Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Double}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Double>>
  fullName: System.Func<TSource, System.Nullable<System.Double>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Double))
  name.vb: Func(Of TSource, Nullable(Of Double))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int32}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Int32>>
  fullName: System.Func<TSource, System.Nullable<System.Int32>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))
  name.vb: Func(Of TSource, Nullable(Of Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Int64}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Int64>>
  fullName: System.Func<TSource, System.Nullable<System.Int64>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))
  name.vb: Func(Of TSource, Nullable(Of Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Nullable{System.Single}}
  definition: System.Func`2
  name: Func<TSource, Nullable<Single>>
  fullName: System.Func<TSource, System.Nullable<System.Single>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Single))
  name.vb: Func(Of TSource, Nullable(Of Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Single}
  definition: System.Func`2
  name: Func<TSource, Single>
  fullName: System.Func<TSource, System.Single>
  fullname.vb: System.Func(Of TSource, System.Single)
  name.vb: Func(Of TSource, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TResult}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TResult>
  fullName: System.Linq.ParallelQuery<TResult>
  fullname.vb: System.Linq.ParallelQuery(Of TResult)
  name.vb: ParallelQuery(Of TResult)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: Collections.Generic.IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: Collections.Generic.IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: Collections.Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Action{{TSource}}
  definition: System.Action`1
  name: Action<TSource>
  fullName: System.Action<TSource>
  fullname.vb: System.Action(Of TSource)
  name.vb: Action(Of TSource)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TKey}}
  definition: System.Func`2
  name: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  fullname.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<IGrouping<TKey, TSource>>
  fullName: System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TSource>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Linq.IGrouping(Of TKey, TSource))
  name.vb: ParallelQuery(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TElement}}
  definition: System.Func`2
  name: Func<TSource, TElement>
  fullName: System.Func<TSource, TElement>
  fullname.vb: System.Func(Of TSource, TElement)
  name.vb: Func(Of TSource, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<IGrouping<TKey, TElement>>
  fullName: System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: ParallelQuery(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
  definition: System.Func`3
  name: Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)
  name.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  definition: System.Func`3
  name: Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  name.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TOuter}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TOuter>
  fullName: System.Linq.ParallelQuery<TOuter>
  fullname.vb: System.Linq.ParallelQuery(Of TOuter)
  name.vb: ParallelQuery(Of TOuter)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: Collections.Generic.IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TKey}}
  definition: System.Func`2
  name: Func<TOuter, TKey>
  fullName: System.Func<TOuter, TKey>
  fullname.vb: System.Func(Of TOuter, TKey)
  name.vb: Func(Of TOuter, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TInner},{TKey}}
  definition: System.Func`2
  name: Func<TInner, TKey>
  fullName: System.Func<TInner, TKey>
  fullname.vb: System.Func(Of TInner, TKey)
  name.vb: Func(Of TInner, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
  definition: System.Func`3
  name: Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>
  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>
  fullname.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)
  name.vb: Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TInner}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TInner>
  fullName: System.Linq.ParallelQuery<TInner>
  fullname.vb: System.Linq.ParallelQuery(Of TInner)
  name.vb: ParallelQuery(Of TInner)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Func{{TOuter},{TInner},{TResult}}
  definition: System.Func`3
  name: Func<TOuter, TInner, TResult>
  fullName: System.Func<TOuter, TInner, TResult>
  fullname.vb: System.Func(Of TOuter, TInner, TResult)
  name.vb: Func(Of TOuter, TInner, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int32}
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{System.Int64}
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TResult}}
  definition: System.Func`2
  name: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  fullname.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.OrderedParallelQuery{{TSource}}
  parent: System.Linq
  definition: System.Linq.OrderedParallelQuery`1
  name: OrderedParallelQuery<TSource>
  fullName: System.Linq.OrderedParallelQuery<TSource>
  fullname.vb: System.Linq.OrderedParallelQuery(Of TSource)
  name.vb: OrderedParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.OrderedParallelQuery`1
  parent: System.Linq
  isExternal: false
  name: OrderedParallelQuery<TSource>
  fullName: System.Linq.OrderedParallelQuery<TSource>
  fullname.vb: System.Linq.OrderedParallelQuery(Of TSource)
  name.vb: OrderedParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,{TResult}}
  definition: System.Func`3
  name: Func<TSource, Int32, TResult>
  fullName: System.Func<TSource, System.Int32, TResult>
  fullname.vb: System.Func(Of TSource, System.Int32, TResult)
  name.vb: Func(Of TSource, Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
  definition: System.Func`2
  name: Func<TSource, Collections.Generic.IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
  definition: System.Func`3
  name: Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  definition: System.Func`2
  name: Func<TSource, Collections.Generic.IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},{TCollection},{TResult}}
  definition: System.Func`3
  name: Func<TSource, TCollection, TResult>
  fullName: System.Func<TSource, TCollection, TResult>
  fullname.vb: System.Func(Of TSource, TCollection, TResult)
  name.vb: Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
  definition: System.Func`3
  name: Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Int32,System.Boolean}
  definition: System.Func`3
  name: Func<TSource, Int32, Boolean>
  fullName: System.Func<TSource, System.Int32, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Boolean)
  name.vb: Func(Of TSource, Int32, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: '{TSource}[]'
  isExternal: false
  name: TSource[]
  fullName: TSource[]
  fullname.vb: TSource()
  name.vb: TSource()
  spec.csharp:
  - name: TSource
    fullName: TSource
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSource
    fullName: TSource
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  definition: System.Collections.Generic.Dictionary`2
  name: Collections.Generic.Dictionary<TKey, TSource>
  fullName: System.Collections.Generic.Dictionary<TKey, TSource>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)
  name.vb: Collections.Generic.Dictionary(Of TKey, TSource)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  fullname.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  definition: System.Collections.Generic.Dictionary`2
  name: Collections.Generic.Dictionary<TKey, TElement>
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  name.vb: Collections.Generic.Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.List{{TSource}}
  definition: System.Collections.Generic.List`1
  name: Collections.Generic.List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  fullname.vb: System.Collections.Generic.List(Of TSource)
  name.vb: Collections.Generic.List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.List<>
  fullName: System.Collections.Generic.List<>
  fullname.vb: System.Collections.Generic.List(Of )
  name.vb: Collections.Generic.List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TSource}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TSource>
  fullName: System.Linq.ILookup<TKey, TSource>
  fullname.vb: System.Linq.ILookup(Of TKey, TSource)
  name.vb: ILookup(Of TKey, TSource)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.ILookup`2
  parent: System.Linq
  isExternal: false
  name: ILookup<, >
  fullName: System.Linq.ILookup<, >
  fullname.vb: System.Linq.ILookup(Of , )
  name.vb: ILookup(Of , )
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TElement}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Linq.ParallelExecutionMode
  parent: System.Linq
  isExternal: false
  name: ParallelExecutionMode
  fullName: System.Linq.ParallelExecutionMode
- uid: System.Linq.ParallelMergeOptions
  parent: System.Linq
  isExternal: false
  name: ParallelMergeOptions
  fullName: System.Linq.ParallelMergeOptions
- uid: System.Linq.ParallelQuery{{TFirst}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TFirst>
  fullName: System.Linq.ParallelQuery<TFirst>
  fullname.vb: System.Linq.ParallelQuery(Of TFirst)
  name.vb: ParallelQuery(Of TFirst)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  name.vb: Collections.Generic.IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: System.Func{{TFirst},{TSecond},{TResult}}
  definition: System.Func`3
  name: Func<TFirst, TSecond, TResult>
  fullName: System.Func<TFirst, TSecond, TResult>
  fullname.vb: System.Func(Of TFirst, TSecond, TResult)
  name.vb: Func(Of TFirst, TSecond, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.ParallelQuery{{TSecond}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TSecond>
  fullName: System.Linq.ParallelQuery<TSecond>
  fullname.vb: System.Linq.ParallelQuery(Of TSecond)
  name.vb: ParallelQuery(Of TSecond)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
