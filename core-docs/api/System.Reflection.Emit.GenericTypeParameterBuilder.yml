items:
- uid: System.Reflection.Emit.GenericTypeParameterBuilder
  commentId: T:System.Reflection.Emit.GenericTypeParameterBuilder
  id: GenericTypeParameterBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  - System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  - System.Reflection.Emit.GenericTypeParameterBuilder.Attributes
  - System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  - System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  - System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  - System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  - System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
  - System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode
  - System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(Type)
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  - System.Reflection.Emit.GenericTypeParameterBuilder.Module
  - System.Reflection.Emit.GenericTypeParameterBuilder.Name
  - System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.ToString
  langs:
  - csharp
  - vb
  name: GenericTypeParameterBuilder
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericTypeParameterBuilder
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 75
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited. </p>\n"
  remarks: "\n<p>You can get an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects by using the <xref href=\"System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method to add type parameters to a dynamic method. Use the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects to add constraints to the type parameters. Constraints are of three kinds:</p>\n<ul><li>\n<p>The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type. Set this constraint by using the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li><li>\n<p>An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface. Set the interface constraints by using the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li><li>\n<p>Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. Set the special constraints for a type parameter by using the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li></ul>\n<p>Interface constraints and special constraints cannot be retrieved using methods of the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> class. Once you have created the generic type that contains the type parameters, you can use its <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object to reflect the constraints. Use the <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method to get the type parameters, and for each type parameter use the <xref href=\"System.Type.GetGenericParameterConstraints\" data-throw-if-not-resolved=\"false\"></xref> method to get the base type constraint and interface constraints, and the <xref href=\"System.Type.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> property to get the special constraints. </p>\n"
  example:
  - "\n<p>The following code example creates a generic type with two type parameters, and saves them in the assembly GenericEmitExample1.dll. You can use the Ildasm.exe (IL Disassembler) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see How to: Define a Generic Type with Reflection Emit.</p>EmitGenericType#1"
  syntax:
    content: 'public sealed class GenericTypeParameterBuilder : TypeInfo, TypeInfo'
    content.vb: >-
      Public NotInheritable Class GenericTypeParameterBuilder
          Inherits TypeInfo
          Implements TypeInfo
  seealso:
  - type: System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])
    commentId: M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])
  inheritance:
  - System.Object
  implements:
  - System.Reflection.TypeInfo
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: AssemblyQualifiedName
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyQualifiedName
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 94
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets <strong>null</strong> in all cases.</p>\n"
  remarks: "\n<p>There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.</p>\n"
  example:
  - 
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    content.vb: Public Overrides ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 95
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets <strong>null</strong> in all cases.</p>\n"
  remarks: "\n<p>A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.</p>\n"
  example:
  - 
  syntax:
    content: public override string FullName { get; }
    content.vb: Public Overrides ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  id: IsGenericParameter
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: IsGenericParameter
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericParameter
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 96
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets <strong>true</strong> in all cases.</p>\n"
  example:
  - 
  syntax:
    content: public override bool IsGenericParameter { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Name
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Name
  id: Name
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Name
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 97
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the name of the generic type parameter.</p>\n"
  example:
  - 
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the generic type parameter.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 98
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Tests whether the given object is an instance of <strong>EventToken</strong> and is equal to the current instance.</p>\n"
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The object to be compared with the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if <em>o</em> is an instance of <strong>EventToken</strong> and equals the current instance; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GetGenericTypeDefinition()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericTypeDefinition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 99
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Not valid for generic type parameters.</p>\n"
  remarks: "\n<p>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic. </p>\n"
  example:
  - 
  syntax:
    content: public override Type GetGenericTypeDefinition()
    content.vb: Public Overrides Function GetGenericTypeDefinition As Type
    return:
      type: System.Type
      description: "\n<p>Not valid for generic type parameters.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>In all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 100
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a 32-bit integer hash code for the current instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit integer hash code.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAssignableFrom
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 101
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> exception in all cases.</p>\n"
  remarks: "\n<p>This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n"
  syntax:
    content: public override bool IsAssignableFrom(TypeInfo typeInfo)
    content.vb: Public Overrides Function IsAssignableFrom(typeInfo As TypeInfo) As Boolean
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: "\n<p>The object to test.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> exception in all cases.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>In all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: MakeArrayType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 102
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the type of a one-dimensional array whose element type is the generic type parameter.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Type.MakeArrayType\" data-throw-if-not-resolved=\"false\"></xref> method provides a way to generate array types for parameter lists. </p>\n"
  example:
  - "\n<p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</p>MakeXxxGenericTypeParameterBuilder#1"
  syntax:
    content: public override Type MakeArrayType()
    content.vb: Public Overrides Function MakeArrayType As Type
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the type of a one-dimensional array whose element type is the generic type parameter.</p>\n"
  seealso:
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: MakeArrayType(Int32)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 103
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Type.MakeArrayType\" data-throw-if-not-resolved=\"false\"></xref> method provides a way to generate array types for parameter lists.</p>\n"
  example:
  - "\n<p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</p>MakeXxxGenericTypeParameterBuilder#1"
  syntax:
    content: public override Type MakeArrayType(int rank)
    content.vb: Public Overrides Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
      description: "\n<p>The number of dimensions for the array.</p>\n"
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>rank</em> is not a valid number of dimensions. For example, its value is less than 1.</p>\n"
  seealso:
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: MakeByRefType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeByRefType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 104
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current generic type parameter when passed as a reference parameter.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType\" data-throw-if-not-resolved=\"false\"></xref> method provides a way to generate <strong>ref</strong> types (<strong>ByRef</strong> in Visual Basic) for parameter lists.</p>\n"
  example:
  - "\n<p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</p>MakeXxxGenericTypeParameterBuilder#1"
  syntax:
    content: public override Type MakeByRefType()
    content.vb: Public Overrides Function MakeByRefType As Type
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current generic type parameter when passed as a reference parameter.</p>\n"
  seealso:
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: MakeGenericType(Type[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGenericType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 105
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Not valid for incomplete generic type parameters.</p>\n"
  syntax:
    content: public override Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public Overrides Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: "\n<p>An array of type arguments.</p>\n"
    return:
      type: System.Type
      description: "\n<p>This method is invalid for incomplete generic type parameters.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>In all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type())
  name.vb: MakeGenericType(Type())
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  id: MakePointerType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: MakePointerType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakePointerType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 106
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a pointer to the current generic type parameter.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType\" data-throw-if-not-resolved=\"false\"></xref> method provides a way to generate pointer types for parameter lists.</p>\n"
  example:
  - "\n<p>The following code example creates a dynamic module, an abstract generic type named <code>Sample</code> with one type parameter, <code>T</code>, and an abstract method named <code>TestMethod</code>. <code>TestMethod</code> takes a <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic) of type <code>T</code>, a pointer to type <code>T</code>, and an array of <code>T</code>. This method returns a two-dimensional array of <code>T</code>. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).</p>MakeXxxGenericTypeParameterBuilder#1"
  syntax:
    content: public override Type MakePointerType()
    content.vb: Public Overrides Function MakePointerType As Type
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a pointer to the current generic type parameter.</p>\n"
  seealso:
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  - type: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
    commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
  id: SetBaseTypeConstraint(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: SetBaseTypeConstraint(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetBaseTypeConstraint
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 107
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the base type that a type must inherit in order to be substituted for the type parameter.</p>\n"
  remarks: "\n<p>To retrieve the base type constraint use the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.BaseType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Once you have created the generic type that contains the type parameter, you can use its <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object to reflect the type parameter and their constraints. To get the type parameters of a completed generic type, use the <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method. For each type parameter, get the base type constraint and interface constraints by using the <xref href=\"System.Type.GetGenericParameterConstraints\" data-throw-if-not-resolved=\"false\"></xref> method, and get the special constraints by using the <xref href=\"System.Type.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following code example creates a generic type with two type parameters, the second of which has a base type constraint, and saves them in the assembly GenericEmitExample1.dll. You can use the Ildasm.exe (IL Disassembler) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see How to: Define a Generic Type with Reflection Emit.</p>EmitGenericType#1"
  syntax:
    content: public void SetBaseTypeConstraint(Type baseTypeConstraint)
    content.vb: Public Sub SetBaseTypeConstraint(baseTypeConstraint As Type)
    parameters:
    - id: baseTypeConstraint
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that must be inherited by any type that is to be substituted for the type parameter.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 108
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets a custom attribute using a specified custom attribute blob.</p>\n"
  remarks: "\n<p>For details on how to format <em>binaryAttribute</em>, see the documentation for Partition II: Metadata Definition and Semantics. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute.</p>\n"
    - id: binaryAttribute
      type: System.Byte[]
      description: "\n<p>A byte blob representing the attribute.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>binaryAttribute</em> is a null reference.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 109
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Set a custom attribute using a custom attribute builder.</p>\n"
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: "\n<p>An instance of a helper class that defines the custom attribute.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>customBuilder</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  id: SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: SetGenericParameterAttributes(GenericParameterAttributes)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetGenericParameterAttributes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 110
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.</p>\n"
  remarks: "\n<p>Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. </p>\n<p>Special constraints cannot be retrieved using methods of the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> class. Once you have created the generic type that contains the type parameter, you can use its <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method. To get the special constraints for each type parameter, use the <xref href=\"System.Type.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>The <xref href=\"System.Reflection.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL). Visual Basic and C# currently do not support covariance and contravariance.</p>\n"
  example:
  - "\n<p>The following code example creates a generic type with two type parameters, the first of which is constrained to have a default constructor and to be a reference type, and saves them in the assembly GenericEmitExample1.dll. You can use the Ildasm.exe (IL Disassembler) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see How to: Define a Generic Type with Reflection Emit.</p>EmitGenericType#1"
  syntax:
    content: public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes)
    content.vb: Public Sub SetGenericParameterAttributes(genericParameterAttributes As GenericParameterAttributes)
    parameters:
    - id: genericParameterAttributes
      type: System.Reflection.GenericParameterAttributes
      description: "\n<p>A bitwise combination of <xref href=\"System.Reflection.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> values that represent the variance characteristics and special constraints of the generic type parameter.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
  id: SetInterfaceConstraints(System.Type[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: SetInterfaceConstraints(Type[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetInterfaceConstraints
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 111
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the interfaces a type must implement in order to be substituted for the type parameter. </p>\n"
  remarks: "\n<p>Interface constraints cannot be retrieved using methods of the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> class. Once you have created the generic type that contains the type parameter, you can use its <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method. For each type parameter, get the base type constraint and interface constraints by using the <xref href=\"System.Type.GetGenericParameterConstraints\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following code example creates a generic type with two type parameters, the second of which has two interface constraints, and saves them in the assembly GenericEmitExample1.dll. You can use the Ildasm.exe (IL Disassembler) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see How to: Define a Generic Type with Reflection Emit.</p>EmitGenericType#1"
  syntax:
    content: public void SetInterfaceConstraints(params Type[] interfaceConstraints)
    content.vb: Public Sub SetInterfaceConstraints(ParamArray interfaceConstraints As Type())
    parameters:
    - id: interfaceConstraints
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type())
  name.vb: SetInterfaceConstraints(Type())
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ToString
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString
  id: ToString
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 112
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a string representation of the current generic type parameter.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that contains the name of the generic type parameter.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(Type)
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(Type)
  id: IsSubclassOf(Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: IsSubclassOf(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSubclassOf
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 78
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsSubclassOf(Type c)
    content.vb: Public Overrides Function IsSubclassOf(c As Type) As Boolean
    parameters:
    - id: c
      type: Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Attributes
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 80
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override TypeAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As TypeAttributes
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assembly
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 81
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets an <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</p>\n"
  example:
  - 
  syntax:
    content: public override Assembly Assembly { get; }
    content.vb: Public Overrides ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: Assembly
      description: "\n<p>An <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  id: BaseType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: BaseType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 82
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the base type constraint of the current generic type parameter.</p>\n"
  remarks: "\n<p>To set the base type constraint, use the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public override Type BaseType { get; }
    content.vb: Public Overrides ReadOnly Property BaseType As Type
    parameters: []
    return:
      type: Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the base type constraint of the generic type parameter, or <strong>null</strong> if the type parameter has no base type constraint.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  id: DeclaringMethod
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: DeclaringMethod
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 83
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> represents a type parameter of a generic method.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong>, then the declaring method is a generic method definition and <code>DeclaringMethod.IsGenericMethodDefinition</code> is <strong>true</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public override MethodBase DeclaringMethod { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringMethod As MethodBase
    parameters: []
    return:
      type: MethodBase
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the declaring method, if the current <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> represents a type parameter of a generic method; otherwise, <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GenericParameterAttributes
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterAttributes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 84
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a combination of <xref href=\"System.Reflection.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> flags that describe the covariance and special constraints of the current generic type parameter. </p>\n"
  syntax:
    content: public override GenericParameterAttributes GenericParameterAttributes { get; }
    content.vb: Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes
    parameters: []
    return:
      type: GenericParameterAttributes
      description: "\n<p>A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Module
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Module
  id: Module
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: Module
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Module
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Module
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 85
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the dynamic module that contains the generic type parameter.</p>\n"
  example:
  - 
  syntax:
    content: public override Module Module { get; }
    content.vb: 'Public Overrides ReadOnly Property Module As '
    parameters: []
    return:
      type: Module
      description: "\n<p>A <xref href=\"System.Reflection.Module\" data-throw-if-not-resolved=\"false\"></xref> object that represents the dynamic module that contains the generic type parameter.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank
  id: GetArrayRank
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GetArrayRank()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetArrayRank()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetArrayRank
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 87
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override int GetArrayRank()
    content.vb: Public Overrides Function GetArrayRank As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
  id: GetElementType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GetElementType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 88
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> in all cases. </p>\n"
  remarks: "\n<p>A generic type parameter is a placeholder for a type. Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be. Any return value would be misleading, so the method throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Type GetElementType()
    content.vb: Public Overrides Function GetElementType As Type
    return:
      type: Type
      description: "\n<p>The type referred to by the current array type, pointer type, or <strong>ByRef</strong> type; or <strong>null</strong> if the current type is not an array type, is not a pointer type, and is not passed by reference.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>In all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints
  commentId: M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GetGenericParameterConstraints()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericParameterConstraints()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericParameterConstraints
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 89
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GetGenericParameterConstraints()
    content.vb: Public Overrides Function GetGenericParameterConstraints As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GenericTypeArguments
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeArguments
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericTypeArguments
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 90
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override Type[] GenericTypeArguments { get; }
    content.vb: Public Overrides ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: ContainsGenericParameters
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsGenericParameters
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 91
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets <strong>true</strong> in all cases.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> object always represents a generic type parameter. The value of the <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter. </p>\n"
  example:
  - 
  syntax:
    content: public override bool ContainsGenericParameters { get; }
    content.vb: Public Overrides ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GenericParameterPosition
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterPosition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 92
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</p>\n"
  example:
  - 
  syntax:
    content: public override int GenericParameterPosition { get; }
    content.vb: Public Overrides ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  id: GUID
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: GUID
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GUID
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 93
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Not supported for incomplete generic type parameters.</p>\n"
  remarks: "\n<p>This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.</p>\n"
  example:
  - 
  syntax:
    content: public override Guid GUID { get; }
    content.vb: Public Overrides ReadOnly Property GUID As Guid
    parameters: []
    return:
      type: Guid
      description: "\n<p>Not supported for incomplete generic type parameters.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>In all cases. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum
  id: IsEnum
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: IsEnum
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsEnum
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnum
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 94
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsEnum { get; }
    content.vb: Public Overrides ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  id: IsGenericType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: IsGenericType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 95
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns <strong>false</strong> in all cases.</p>\n"
  remarks: "\n<p>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic. </p>\n"
  example:
  - 
  syntax:
    content: public override bool IsGenericType { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>false</strong> in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: IsGenericTypeDefinition
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericTypeDefinition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 96
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets <strong>false</strong> in all cases.</p>\n"
  remarks: "\n<p>In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic. </p>\n"
  example:
  - 
  syntax:
    content: public override bool IsGenericTypeDefinition { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>false</strong> in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable
  id: IsSerializable
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: IsSerializable
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsSerializable
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSerializable
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 97
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override bool IsSerializable { get; }
    content.vb: Public Overrides ReadOnly Property IsSerializable As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  id: Namespace
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 98
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets <strong>null</strong> in all cases.</p>\n"
  example:
  - 
  syntax:
    content: public override string Namespace { get; }
    content.vb: Public Overrides ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  commentId: P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 100
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the generic type definition or generic method definition to which the generic type parameter belongs.</p>\n"
  remarks: "\n<p>The declaring type is not necessarily a generic type. If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.</p>\n"
  example:
  - 
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: Type
      description: "\n<p>If the type parameter belongs to a generic type, a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing that generic type; if the type parameter belongs to a generic method, a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing that type that declared that generic method.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.GenericParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
- uid: Type
  isExternal: true
  name: Type
  fullName: Type
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: Assembly
  isExternal: true
  name: Assembly
  fullName: Assembly
- uid: MethodBase
  isExternal: true
  name: MethodBase
  fullName: MethodBase
- uid: GenericParameterAttributes
  isExternal: true
  name: GenericParameterAttributes
  fullName: GenericParameterAttributes
- uid: Module
  isExternal: true
  name: Module
  fullName: Module
- uid: Guid
  isExternal: true
  name: Guid
  fullName: Guid
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
