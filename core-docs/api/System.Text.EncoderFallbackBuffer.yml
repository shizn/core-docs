items:
- uid: System.Text.EncoderFallbackBuffer
  commentId: T:System.Text.EncoderFallbackBuffer
  id: EncoderFallbackBuffer
  parent: System.Text
  children:
  - System.Text.EncoderFallbackBuffer.#ctor
  - System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)
  - System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)
  - System.Text.EncoderFallbackBuffer.GetNextChar
  - System.Text.EncoderFallbackBuffer.MovePrevious
  - System.Text.EncoderFallbackBuffer.Remaining
  - System.Text.EncoderFallbackBuffer.Reset
  langs:
  - csharp
  - vb
  name: EncoderFallbackBuffer
  fullName: System.Text.EncoderFallbackBuffer
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Text/EncoderFallback.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EncoderFallbackBuffer
    path: src/mscorlib/src/System/Text/EncoderFallback.cs
    startLine: 80
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character. </p>\n"
  remarks: "\n<p>An encoding defines a mapping between a Unicode character and an encoded sequence of bytes. An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character. </p>\n<p>The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed. All encoder fallback handlers must implement the following: </p>\n<ul><li>\n<p>An encoder fallback, which is represented by a class derived from the <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li><li>\n<p>An encoder fallback buffer, which is represented by a type derived from the <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> class that can return a string to the conversion operation.</p>\n</li></ul>\n<p>Fallbacks can use three strategies to handle conversion failures: </p>\n<ul><li>\n<p>Best-fit mapping. The encoder fallback buffer can return a string that represents a close approximation to the input character. The .NET Framework does not provide a public best-fit <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n</li><li>\n<p>Replacement. The encoder fallback buffer can return a string, such as a question mark (\"?\"), that indicates that a character could not be encoded. In the .NET Framework, the <xref href=\"System.Text.EncoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.EncoderReplacementFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> classes provide a public replacement fallback buffer implementation. The constructor of the <xref href=\"System.Text.EncoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref> class enables you to define the replacement string.</p>\n</li><li>\n<p>Exception. The <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation. In this case, the fallback handler must provide an <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> implementation, although it does not return a string to the encoder. In the .NET Framework, the <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.EncoderExceptionFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> classes provide a public exception fallback implementation that throws an <xref href=\"System.Text.EncoderFallbackException\" data-throw-if-not-resolved=\"false\"></xref> when a character cannot be encoded.</p>\n</li></ul>\n<p>The buffer in an <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> implementation represents the entire string to be returned to the encoder in response to an encoder fallback. Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned. Because <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> is an abstract class, it requires derived classes to implement the following members at a minimum:</p>\n<ul><li>\n<p>The overloaded <xref href=\"System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, which is called by the encoder when it cannot encode a character. The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input. In an encoder fallback exception handler, the exception is thrown in this method. Otherwise, the method returns <strong>true</strong> if it provides a fallback, or <strong>false</strong> if it does not.</p>\n</li><li>\n<p>The <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\" data-throw-if-not-resolved=\"false\"></xref> method, which is called repeatedly by the encoder if the <xref href=\"System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong>. In successive calls, the handler should return each character in its buffer. When it has returned all characters, it should return U+0000. An exception handler always returns U+0000.</p>\n</li><li>\n<p>The <xref href=\"System.Text.EncoderFallbackBuffer.MovePrevious\" data-throw-if-not-resolved=\"false\"></xref> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful. An exception handler always returns <strong>false</strong>.</p>\n</li><li>\n<p>The <xref href=\"System.Text.EncoderFallbackBuffer.Remaining\" data-throw-if-not-resolved=\"false\"></xref> property, which indicates the number of remaining characters to be returned to the encoder. An exception fallback handler always returns zero.</p>\n</li></ul>\n"
  syntax:
    content: public abstract class EncoderFallbackBuffer
    content.vb: Public MustInherit Class EncoderFallbackBuffer
  seealso:
  - type: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Text.EncoderFallbackBuffer.#ctor
  commentId: M:System.Text.EncoderFallbackBuffer.#ctor
  id: '#ctor'
  parent: System.Text.EncoderFallbackBuffer
  langs:
  - csharp
  - vb
  name: EncoderFallbackBuffer()
  fullName: System.Text.EncoderFallbackBuffer.EncoderFallbackBuffer()
  type: Constructor
  source:
    remote:
      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs
    startLine: 94
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected EncoderFallbackBuffer()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.EncoderFallbackBuffer.Remaining
  commentId: P:System.Text.EncoderFallbackBuffer.Remaining
  id: Remaining
  parent: System.Text.EncoderFallbackBuffer
  langs:
  - csharp
  - vb
  name: Remaining
  fullName: System.Text.EncoderFallbackBuffer.Remaining
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/EncoderFallback.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remaining
    path: src/mscorlib/src/System/Text/EncoderFallback.cs
    startLine: 101
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, gets the number of characters in the current <xref href=\"System.Text.EncoderFallbackBuffer\" data-throw-if-not-resolved=\"false\"></xref> object that remain to be processed.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.EncoderFallbackBuffer.Fallback\"></see> method returns <strong>true</strong> if <xref href=\"System.Text.EncoderFallbackBuffer.Remaining\" data-throw-if-not-resolved=\"false\"></xref> is a nonzero value.</p>\n<p>For an exception fallback handler, the <xref href=\"System.Text.DecoderFallbackBuffer.Remaining\" data-throw-if-not-resolved=\"false\"></xref> method should return zero.</p>\n"
  example:
  - 
  syntax:
    content: public abstract int Remaining { get; }
    content.vb: Public MustOverride ReadOnly Property Remaining As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)
  commentId: M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)
  id: Fallback(System.Char,System.Char,System.Int32)
  parent: System.Text.EncoderFallbackBuffer
  langs:
  - csharp
  - vb
  name: Fallback(Char, Char, Int32)
  fullName: System.Text.EncoderFallbackBuffer.Fallback(System.Char, System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/EncoderFallback.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Fallback
    path: src/mscorlib/src/System/Text/EncoderFallback.cs
    startLine: 89
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.Encoding.GetBytes\"></see> and <see cref=\"Overload:System.Text.Encoder.Convert\"></see> methods call <xref href=\"System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> if they encounter a surrogate pair in their input. A return value of <strong>true</strong> indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\" data-throw-if-not-resolved=\"false\"></xref> method to obtain each character of the fallback buffer.  Because it does not process individual characters, the <xref href=\"System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method in an exception fallback handler throws an exception.</p>\n"
  example:
  - 
  syntax:
    content: public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index)
    content.vb: Public MustOverride Function Fallback(charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean
    parameters:
    - id: charUnknownHigh
      type: System.Char
    - id: charUnknownLow
      type: System.Char
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)
  commentId: M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)
  id: Fallback(System.Char,System.Int32)
  parent: System.Text.EncoderFallbackBuffer
  langs:
  - csharp
  - vb
  name: Fallback(Char, Int32)
  fullName: System.Text.EncoderFallbackBuffer.Fallback(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/EncoderFallback.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Fallback
    path: src/mscorlib/src/System/Text/EncoderFallback.cs
    startLine: 87
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, prepares the fallback buffer to handle the specified input character. </p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Text.Encoding.GetBytes\"></see> and <see cref=\"Overload:System.Text.Encoder.Convert\"></see> methods call <xref href=\"System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> if they encounter an unknown input character that cannot be encoded. A return value of <strong>true</strong> indicates that the fallback buffer can process the input character, which causes the calling method to call the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\" data-throw-if-not-resolved=\"false\"></xref> method to obtain each character of the fallback buffer. Because it does not process individual characters, the <xref href=\"System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method in an exception fallback handler throws an exception.</p>\n"
  example:
  - 
  syntax:
    content: public abstract bool Fallback(char charUnknown, int index)
    content.vb: Public MustOverride Function Fallback(charUnknown As Char, index As Integer) As Boolean
    parameters:
    - id: charUnknown
      type: System.Char
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.EncoderFallbackBuffer.GetNextChar
  commentId: M:System.Text.EncoderFallbackBuffer.GetNextChar
  id: GetNextChar
  parent: System.Text.EncoderFallbackBuffer
  langs:
  - csharp
  - vb
  name: GetNextChar()
  fullName: System.Text.EncoderFallbackBuffer.GetNextChar()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/EncoderFallback.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNextChar
    path: src/mscorlib/src/System/Text/EncoderFallback.cs
    startLine: 93
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, retrieves the next character in the fallback buffer.</p>\n"
  remarks: "\n<p>An encoding operation calls the <see cref=\"Overload:System.Text.EncoderFallbackBuffer.Fallback\"></see> method if the operation encounters an unknown character or surrogate pair in the input. For example, in the case of a replacement fallback, if the <see cref=\"Overload:System.Text.EncoderFallbackBuffer.Fallback\"></see> method returns <strong>true</strong>, a substitute string exists that can be encoded instead of the unknown input. The encoding operation calls the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\" data-throw-if-not-resolved=\"false\"></xref> method repeatedly and obtains the substitute string one character at a time. When all characters in the fallback buffer have been returned to the encoder, the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\" data-throw-if-not-resolved=\"false\"></xref> method should return U+0000.</p>\n<p>For an exception fallback handler, the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\" data-throw-if-not-resolved=\"false\"></xref> method should return U+0000.</p>\n"
  syntax:
    content: public abstract char GetNextChar()
    content.vb: Public MustOverride Function GetNextChar As Char
    return:
      type: System.Char
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.EncoderFallbackBuffer.MovePrevious
  commentId: M:System.Text.EncoderFallbackBuffer.MovePrevious
  id: MovePrevious
  parent: System.Text.EncoderFallbackBuffer
  langs:
  - csharp
  - vb
  name: MovePrevious()
  fullName: System.Text.EncoderFallbackBuffer.MovePrevious()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/EncoderFallback.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MovePrevious
    path: src/mscorlib/src/System/Text/EncoderFallback.cs
    startLine: 97
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, causes the next call to the <xref href=\"System.Text.EncoderFallbackBuffer.GetNextChar\" data-throw-if-not-resolved=\"false\"></xref> method to access the data buffer character position that is prior to the current character position. </p>\n"
  remarks: "\n<p>An exception fallback handler should return <strong>false</strong>.</p>\n"
  syntax:
    content: public abstract bool MovePrevious()
    content.vb: Public MustOverride Function MovePrevious As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.EncoderFallbackBuffer.Reset
  commentId: M:System.Text.EncoderFallbackBuffer.Reset
  id: Reset
  parent: System.Text.EncoderFallbackBuffer
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Text.EncoderFallbackBuffer.Reset()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/EncoderFallback.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reset
    path: src/mscorlib/src/System/Text/EncoderFallback.cs
    startLine: 106
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes all data and state information pertaining to this fallback buffer.</p>\n"
  syntax:
    content: public virtual void Reset()
    content.vb: Public Overridable Sub Reset
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
