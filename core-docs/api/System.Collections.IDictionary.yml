items:
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  id: IDictionary
  parent: System.Collections
  children:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  - System.Collections.IDictionary.Clear
  - System.Collections.IDictionary.Contains(System.Object)
  - System.Collections.IDictionary.GetEnumerator
  - System.Collections.IDictionary.IsFixedSize
  - System.Collections.IDictionary.IsReadOnly
  - System.Collections.IDictionary.Item(System.Object)
  - System.Collections.IDictionary.Keys
  - System.Collections.IDictionary.Remove(System.Object)
  - System.Collections.IDictionary.Values
  langs:
  - csharp
  - vb
  name: IDictionary
  fullName: System.Collections.IDictionary
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IDictionary
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2303
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Represents a nongeneric collection of key/value pairs.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Each element is a key/value pair stored in a <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</p>\n<p>\n<xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> implementations fall into three categories: read-only, fixed-size, variable-size. A read-only <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object cannot be modified. A fixed-size <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object allows the addition, removal, and modification of elements.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>For Each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref>. For example: </p>Dictionary#14<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.</p>"
  example:
  - "\n<p>The following code example demonstrates how to define a simple dictionary class that implements the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>Dictionary#1"
  syntax:
    content: 'public interface IDictionary : ICollection, IEnumerable'
    content.vb: >-
      Public Interface IDictionary
          Inherits ICollection, IEnumerable
  seealso:
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  inheritedMembers:
  - System.Collections.ICollection.Count
  - System.Collections.ICollection.IsSynchronized
  - System.Collections.ICollection.SyncRoot
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.IDictionary.IsFixedSize
  commentId: P:System.Collections.IDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFixedSize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2305
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size.</p>\n"
  remarks: "\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.IsFixedSize\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#6"
  syntax:
    content: bool IsFixedSize { get; }
    content.vb: ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IDictionary.IsReadOnly
  commentId: P:System.Collections.IDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2306
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#4"
  syntax:
    content: bool IsReadOnly { get; }
    content.vb: ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object is read-only; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IDictionary.Item(System.Object)
  commentId: P:System.Collections.IDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2307
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets or sets the element with the specified key.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.</p>\n<p>You can also use the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>). However, if the specified key already exists in the dictionary, setting the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.IDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>Implementations can vary in whether they allow the key to be <strong>null</strong>.</p>\n<p>The C# language uses the <strong>this</strong>this (C# Reference) keyword to define the indexers instead of implementing the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#13"
  syntax:
    content: object this[object key] { get; set; }
    content.vb: Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to get or set. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The element with the specified key, or <strong>null</strong> if the key does not exist.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
- uid: System.Collections.IDictionary.Keys
  commentId: P:System.Collections.IDictionary.Keys
  id: Keys
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.IDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2308
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The order of the keys in the returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.IDictionary.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.Keys\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#10"
  syntax:
    content: ICollection Keys { get; }
    content.vb: ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IDictionary.Values
  commentId: P:System.Collections.IDictionary.Values
  id: Values
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.IDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2309
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The order of the values in the returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.IDictionary.Keys\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.Values\" data-throw-if-not-resolved=\"false\"></xref> property. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#11"
  syntax:
    content: ICollection Values { get; }
    content.vb: ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2310
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>You can also use the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>). However, if the specified key already exists in the dictionary, setting the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.IDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>Implementations can vary in whether they allow the key to be <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#9"
  syntax:
    content: void Add(object key, object value)
    content.vb: Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to use as the key of the element to add. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to use as the value of the element to add. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.IDictionary.Item(System.Object)
    commentId: P:System.Collections.IDictionary.Item(System.Object)
- uid: System.Collections.IDictionary.Clear
  commentId: M:System.Collections.IDictionary.Clear
  id: Clear
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.IDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2311
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.Clear\" data-throw-if-not-resolved=\"false\"></xref> method. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#8"
  syntax:
    content: void Clear()
    content.vb: Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object is read-only. </p>\n"
- uid: System.Collections.IDictionary.Contains(System.Object)
  commentId: M:System.Collections.IDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2312
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object contains an element with the specified key.</p>\n"
  remarks: "\n<p>Implementations can vary in whether they allow the key to be <strong>null</strong>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether <em>item</em> exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#5"
  syntax:
    content: bool Contains(object key)
    content.vb: Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
- uid: System.Collections.IDictionary.GetEnumerator
  commentId: M:System.Collections.IDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2313
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n"
  syntax:
    content: IDictionaryEnumerator GetEnumerator()
    content.vb: Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
- uid: System.Collections.IDictionary.Remove(System.Object)
  commentId: M:System.Collections.IDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2314
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object does not contain an element with the specified key, the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement the <xref href=\"System.Collections.IDictionary.Remove(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This code example is part of a larger example provided for the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Dictionary#7"
  syntax:
    content: void Remove(object key)
    content.vb: Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to remove. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: false
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
