items:
- uid: System.Diagnostics.Contracts.ContractAbbreviatorAttribute
  commentId: T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute
  id: ContractAbbreviatorAttribute
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor
  langs:
  - csharp
  - vb
  name: ContractAbbreviatorAttribute
  fullName: System.Diagnostics.Contracts.ContractAbbreviatorAttribute
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContractAbbreviatorAttribute
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 53
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Defines abbreviations that you can use in place of the full contract syntax.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create abbreviated names for code contracts that are repeated in several methods.</p>\n<pre><code class=\"c#\">using System.Diagnostics.Contracts;\n\npublic class MyClass \n{\npublic int State { get; }\npublic int Data { get; }\n\n[ ContractAbbreviator ]\nprivate void DataAndStateUnchanged() \n{\nContract.Ensures( this .State == Contract.OldValue(this.State));\nContract.Ensures( this .Data == Contract.OldValue(this.Data));\n}\n\n[ ContractAbbreviator ]\nprivate void InStateZeroAndUnchanged() \n{\nContract.Requires( this.State == 0);\nDataAndStateUnchanged();\n}\n\npublic void Method1(...) \n{\nInStateZeroAndUnchanged();\n...\n}\n\npublic void Method2(...) \n{\nInStateZeroAndUnchanged();\n...\n}\n\npublic void Method3(...)\n{\nContract.Requires(this .State == 1);\nDataAndStateUnchanged();\n}\n}</code></pre>\n"
  syntax:
    content: 'public sealed class ContractAbbreviatorAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class ContractAbbreviatorAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor
  commentId: M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Contracts.ContractAbbreviatorAttribute
  langs:
  - csharp
  - vb
  name: ContractAbbreviatorAttribute()
  fullName: System.Diagnostics.Contracts.ContractAbbreviatorAttribute.ContractAbbreviatorAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 57
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Contracts.ContractAbbreviatorAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public ContractAbbreviatorAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics.Contracts
  isExternal: false
  name: System.Diagnostics.Contracts
  fullName: System.Diagnostics.Contracts
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
