items:
- uid: System.Reflection.CustomAttributeExtensions
  commentId: T:System.Reflection.CustomAttributeExtensions
  id: CustomAttributeExtensions
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  langs:
  - csharp
  - vb
  name: CustomAttributeExtensions
  fullName: System.Reflection.CustomAttributeExtensions
  type: Class
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAttributeExtensions
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 10
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Contains static methods for retrieving custom attributes.</p>\n"
  syntax:
    content: 'public class CustomAttributeExtensions : object'
    content.vb: >-
      Public Class CustomAttributeExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  id: GetCustomAttribute(System.Reflection.Assembly,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute(Assembly, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 12
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified assembly.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: public static Attribute GetCustomAttribute(this Assembly element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(element As Assembly, attributeType As Type) As Attribute
    parameters:
    - id: element
      type: System.Reflection.Assembly
      description: "\n<p>The assembly to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: System.Attribute
      description: "\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  id: GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute(MemberInfo, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 13
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: public static Attribute GetCustomAttribute(this MemberInfo element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(element As MemberInfo, attributeType As Type) As Attribute
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: System.Attribute
      description: "\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  id: GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute(MemberInfo, Type, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 14
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member, and optionally inspects the ancestors of that member.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: public static Attribute GetCustomAttribute(this MemberInfo element, Type attributeType, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(element As MemberInfo, attributeType As Type, inherit As Boolean) As Attribute
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.Attribute
      description: "\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  id: GetCustomAttribute(System.Reflection.Module,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute(Module, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 15
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified module.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: public static Attribute GetCustomAttribute(this Module element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(element As  Module, attributeType As Type) As Attribute
    parameters:
    - id: element
      type: System.Reflection.Module
      description: "\n<p>The module to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: System.Attribute
      description: "\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  id: GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute(ParameterInfo, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 16
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: public static Attribute GetCustomAttribute(this ParameterInfo element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(element As ParameterInfo, attributeType As Type) As Attribute
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: System.Attribute
      description: "\n<p>A custom attribute that matches <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  id: GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute(ParameterInfo, Type, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 17
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: public static Attribute GetCustomAttribute(this ParameterInfo element, Type attributeType, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(element As ParameterInfo, attributeType As Type, inherit As Boolean) As Attribute
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.Attribute
      description: "\n<p>A custom attribute matching <em>attributeType</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  id: GetCustomAttribute``1(System.Reflection.Assembly)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute<T>(Assembly)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 18
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified assembly.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: 'public static T GetCustomAttribute<T>(this Assembly element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As Assembly) As T
    parameters:
    - id: element
      type: System.Reflection.Assembly
      description: "\n<p>The assembly to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.Assembly)
  name.vb: GetCustomAttribute(Of T)(Assembly)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)
  id: GetCustomAttribute``1(System.Reflection.MemberInfo)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute<T>(MemberInfo)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 19
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: 'public static T GetCustomAttribute<T>(this MemberInfo element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As MemberInfo) As T
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.MemberInfo)
  name.vb: GetCustomAttribute(Of T)(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  id: GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute<T>(MemberInfo, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.MemberInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 20
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified member, and optionally inspects the ancestors of that member.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: 'public static T GetCustomAttribute<T>(this MemberInfo element, bool inherit)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As MemberInfo, inherit As Boolean) As T
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.MemberInfo, System.Boolean)
  name.vb: GetCustomAttribute(Of T)(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  id: GetCustomAttribute``1(System.Reflection.Module)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute<T>(Module)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 21
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified module.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: 'public static T GetCustomAttribute<T>(this Module element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As  Module) As T
    parameters:
    - id: element
      type: System.Reflection.Module
      description: "\n<p>The module to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.Module)
  name.vb: GetCustomAttribute(Of T)(Module)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)
  id: GetCustomAttribute``1(System.Reflection.ParameterInfo)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute<T>(ParameterInfo)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.ParameterInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 22
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: 'public static T GetCustomAttribute<T>(this ParameterInfo element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As ParameterInfo) As T
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.ParameterInfo)
  name.vb: GetCustomAttribute(Of T)(ParameterInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)
  id: GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttribute<T>(ParameterInfo, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.ParameterInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttribute
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 23
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a custom attribute of a specified type that is applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method if you expect more than one value to be returned, or <xref href=\"System.Reflection.AmbiguousMatchException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown. </p>\n"
  syntax:
    content: 'public static T GetCustomAttribute<T>(this ParameterInfo element, bool inherit)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttribute(Of T As Attribute)(element As ParameterInfo, inherit As Boolean) As T
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>A custom attribute that matches <em>T</em>, or <strong>null</strong> if no such attribute is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>More than one of the requested attributes was found. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.ParameterInfo, System.Boolean)
  name.vb: GetCustomAttribute(Of T)(ParameterInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  id: GetCustomAttributes(System.Reflection.Assembly)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Assembly)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 24
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes that are applied to a specified assembly.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Assembly element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As Assembly) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.Assembly
      description: "\n<p>The assembly to inspect.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  id: GetCustomAttributes(System.Reflection.Assembly,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Assembly, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 25
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Assembly element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As Assembly, attributeType As Type) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.Assembly
      description: "\n<p>The assembly to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  id: GetCustomAttributes(System.Reflection.MemberInfo)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(MemberInfo)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 26
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes that are applied to a specified member.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As MemberInfo) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(MemberInfo, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 27
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the ancestors of that member.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As MemberInfo, inherit As Boolean) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> that match the specified criteria, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(MemberInfo, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 28
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As MemberInfo, attributeType As Type) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(MemberInfo, Type, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 29
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member, and optionally inspects the ancestors of that member.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, Type attributeType, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As MemberInfo, attributeType As Type, inherit As Boolean) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  id: GetCustomAttributes(System.Reflection.Module)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Module)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 30
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes that are applied to a specified module.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Module element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As  Module) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.Module
      description: "\n<p>The module to inspect.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  id: GetCustomAttributes(System.Reflection.Module,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Module, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 31
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified module.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Module element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As  Module, attributeType As Type) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.Module
      description: "\n<p>The module to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)
  id: GetCustomAttributes(System.Reflection.ParameterInfo)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(ParameterInfo)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 32
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes that are applied to a specified parameter.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As ParameterInfo) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(ParameterInfo, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 33
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As ParameterInfo, inherit As Boolean) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(ParameterInfo, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 34
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As ParameterInfo, attributeType As Type) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(ParameterInfo, Type, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 35
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, Type attributeType, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(element As ParameterInfo, attributeType As Type, inherit As Boolean) As Collections.Generic.IEnumerable(Of Attribute)
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>attributeType</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  id: GetCustomAttributes``1(System.Reflection.Assembly)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes<T>(Assembly)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 36
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly. </p>\n"
  syntax:
    content: 'public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this Assembly element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As Assembly) As Collections.Generic.IEnumerable(Of T)
    parameters:
    - id: element
      type: System.Reflection.Assembly
      description: "\n<p>The assembly to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.Assembly)
  name.vb: GetCustomAttributes(Of T)(Assembly)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)
  id: GetCustomAttributes``1(System.Reflection.MemberInfo)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes<T>(MemberInfo)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 37
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member.</p>\n"
  syntax:
    content: 'public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this MemberInfo element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As MemberInfo) As Collections.Generic.IEnumerable(Of T)
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.MemberInfo)
  name.vb: GetCustomAttributes(Of T)(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  id: GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes<T>(MemberInfo, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.MemberInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 38
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified member, and optionally inspects the ancestors of that member.</p>\n"
  syntax:
    content: 'public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this MemberInfo element, bool inherit)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As MemberInfo, inherit As Boolean) As Collections.Generic.IEnumerable(Of T)
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.MemberInfo, System.Boolean)
  name.vb: GetCustomAttributes(Of T)(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  id: GetCustomAttributes``1(System.Reflection.Module)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes<T>(Module)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 39
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified module.</p>\n"
  syntax:
    content: 'public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this Module element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As  Module) As Collections.Generic.IEnumerable(Of T)
    parameters:
    - id: element
      type: System.Reflection.Module
      description: "\n<p>The module to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.Module)
  name.vb: GetCustomAttributes(Of T)(Module)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)
  id: GetCustomAttributes``1(System.Reflection.ParameterInfo)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes<T>(ParameterInfo)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.ParameterInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 40
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.</p>\n"
  syntax:
    content: 'public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this ParameterInfo element)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As ParameterInfo) As Collections.Generic.IEnumerable(Of T)
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.ParameterInfo)
  name.vb: GetCustomAttributes(Of T)(ParameterInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)
  id: GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: GetCustomAttributes<T>(ParameterInfo, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.ParameterInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 41
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter, and optionally inspects the ancestors of that parameter.</p>\n"
  syntax:
    content: 'public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this ParameterInfo element, bool inherit)where T : Attribute'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCustomAttributes(Of T As Attribute)(element As ParameterInfo, inherit As Boolean) As Collections.Generic.IEnumerable(Of T)
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection of the custom attributes that are applied to <em>element</em> and that match <em>T</em>, or an empty collection if no such attributes exist. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>A custom attribute type cannot be loaded. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.ParameterInfo, System.Boolean)
  name.vb: GetCustomAttributes(Of T)(ParameterInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  id: IsDefined(System.Reflection.Assembly,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: IsDefined(Assembly, Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefined
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 42
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Indicates whether custom attributes of a specified type are applied to a specified assembly.</p>\n"
  syntax:
    content: public static bool IsDefined(this Assembly element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDefined(element As Assembly, attributeType As Type) As Boolean
    parameters:
    - id: element
      type: System.Reflection.Assembly
      description: "\n<p>The assembly to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of the attribute to search for.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)
  id: IsDefined(System.Reflection.MemberInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: IsDefined(MemberInfo, Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefined
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 43
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Indicates whether custom attributes of a specified type are applied to a specified member.</p>\n"
  syntax:
    content: public static bool IsDefined(this MemberInfo element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDefined(element As MemberInfo, attributeType As Type) As Boolean
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  id: IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: IsDefined(MemberInfo, Type, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefined
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 44
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally, applied to its ancestors.</p>\n"
  syntax:
    content: public static bool IsDefined(this MemberInfo element, Type attributeType, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDefined(element As MemberInfo, attributeType As Type, inherit As Boolean) As Boolean
    parameters:
    - id: element
      type: System.Reflection.MemberInfo
      description: "\n<p>The member to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of the attribute to search for.</p>\n<p></p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>element</em> is not a constructor, method, property, event, type, or field. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  id: IsDefined(System.Reflection.Module,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: IsDefined(Module, Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefined
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 45
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Indicates whether custom attributes of a specified type are applied to a specified module.</p>\n"
  syntax:
    content: public static bool IsDefined(this Module element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDefined(element As  Module, attributeType As Type) As Boolean
    parameters:
    - id: element
      type: System.Reflection.Module
      description: "\n<p>The module to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)
  id: IsDefined(System.Reflection.ParameterInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: IsDefined(ParameterInfo, Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefined
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 46
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Indicates whether custom attributes of a specified type are applied to a specified parameter.</p>\n"
  syntax:
    content: public static bool IsDefined(this ParameterInfo element, Type attributeType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDefined(element As ParameterInfo, attributeType As Type) As Boolean
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  id: IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: System.Reflection.CustomAttributeExtensions
  langs:
  - csharp
  - vb
  name: IsDefined(ParameterInfo, Type, Boolean)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefined
    path: src/System.Reflection.Extensions/ref/System.Reflection.Extensions.cs
    startLine: 47
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Indicates whether custom attributes of a specified type are applied to a specified parameter, and, optionally, applied to its ancestors.</p>\n"
  syntax:
    content: public static bool IsDefined(this ParameterInfo element, Type attributeType, bool inherit)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDefined(element As ParameterInfo, attributeType As Type, inherit As Boolean) As Boolean
    parameters:
    - id: element
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter to inspect.</p>\n"
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of attribute to search for.</p>\n<p></p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to inspect the ancestors of <em>element</em>; otherwise, <strong>false</strong>. </p>\n<p></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute of the specified type is applied to <em>element</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>element</em> or <em>attributeType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>attributeType</em> is not derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{System.Attribute}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Attribute>
  fullName: System.Collections.Generic.IEnumerable<System.Attribute>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Attribute)
  name.vb: Collections.Generic.IEnumerable(Of Attribute)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.AmbiguousMatchException
  isExternal: false
  name: AmbiguousMatchException
  fullName: System.Reflection.AmbiguousMatchException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  fullName: System.TypeLoadException
