items:
- uid: System.Reflection.GenericParameterAttributes
  commentId: T:System.Reflection.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection
  children:
  - System.Reflection.GenericParameterAttributes.Contravariant
  - System.Reflection.GenericParameterAttributes.Covariant
  - System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint
  - System.Reflection.GenericParameterAttributes.None
  - System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint
  - System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint
  - System.Reflection.GenericParameterAttributes.SpecialConstraintMask
  - System.Reflection.GenericParameterAttributes.VarianceMask
  langs:
  - csharp
  - vb
  name: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenericParameterAttributes
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 8
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Describes the constraints on a generic type parameter of a generic type or method.</p>\n"
  remarks: "\n<p>The members of the <xref href=\"System.Reflection.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> enumeration are divided into two groups, the variance group and the special constraints group. To test a <xref href=\"System.Reflection.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> value for variance flags, first perform a bitwise AND operation with <xref href=\"System.Reflection.GenericParameterAttributes.VarianceMask\" data-throw-if-not-resolved=\"false\"></xref>. If the result is <xref href=\"System.Reflection.GenericParameterAttributes.None\" data-throw-if-not-resolved=\"false\"></xref>, there are no variance flags. Similarly, use <xref href=\"System.Reflection.GenericParameterAttributes.SpecialConstraintMask\" data-throw-if-not-resolved=\"false\"></xref> to test for constraint flags. </p>\n"
  example:
  - "\n<p>The following code example defines a generic type <code>Test</code> with two type parameters. The second type parameter has a base class constraint and a reference type constraint. When the program executes, the constraints are examined using the <xref href=\"System.Type.GenericParameterAttributes\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Type.GetGenericParameterConstraints\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Type.GetGenericParameterConstraints#1"
  syntax:
    content: >-
      [Flags]

      public enum GenericParameterAttributes
    content.vb: >-
      <Flags>

      Public Enum GenericParameterAttributes
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Reflection.GenericParameterAttributes.Contravariant
  commentId: F:System.Reflection.GenericParameterAttributes.Contravariant
  id: Contravariant
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: Contravariant
  fullName: System.Reflection.GenericParameterAttributes.Contravariant
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contravariant
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 14
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures. </p>\n"
  syntax:
    content: Contravariant = 2
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.GenericParameterAttributes.Covariant
  commentId: F:System.Reflection.GenericParameterAttributes.Covariant
  id: Covariant
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: Covariant
  fullName: System.Reflection.GenericParameterAttributes.Covariant
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Covariant
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 13
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</p>\n"
  syntax:
    content: Covariant = 1
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint
  commentId: F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint
  id: DefaultConstructorConstraint
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: DefaultConstructorConstraint
  fullName: System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefaultConstructorConstraint
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 18
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</p>\n"
  syntax:
    content: DefaultConstructorConstraint = 16
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.GenericParameterAttributes.None
  commentId: F:System.Reflection.GenericParameterAttributes.None
  id: None
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Reflection.GenericParameterAttributes.None
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: None
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 11
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>There are no special flags.</p>\n"
  syntax:
    content: None = 0
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint
  commentId: F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint
  id: NotNullableValueTypeConstraint
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: NotNullableValueTypeConstraint
  fullName: System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NotNullableValueTypeConstraint
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 17
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</p>\n"
  syntax:
    content: NotNullableValueTypeConstraint = 8
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint
  commentId: F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint
  id: ReferenceTypeConstraint
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: ReferenceTypeConstraint
  fullName: System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReferenceTypeConstraint
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 16
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>A type can be substituted for the generic type parameter only if it is a reference type.</p>\n"
  syntax:
    content: ReferenceTypeConstraint = 4
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.GenericParameterAttributes.SpecialConstraintMask
  commentId: F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask
  id: SpecialConstraintMask
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: SpecialConstraintMask
  fullName: System.Reflection.GenericParameterAttributes.SpecialConstraintMask
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpecialConstraintMask
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 15
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Selects the combination of all special constraint flags. This value is the result of using logical OR to combine the following flags: <xref href=\"System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: SpecialConstraintMask = 28
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.GenericParameterAttributes.VarianceMask
  commentId: F:System.Reflection.GenericParameterAttributes.VarianceMask
  id: VarianceMask
  parent: System.Reflection.GenericParameterAttributes
  langs:
  - csharp
  - vb
  name: VarianceMask
  fullName: System.Reflection.GenericParameterAttributes.VarianceMask
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: VarianceMask
    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs
    startLine: 12
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Selects the combination of all variance flags. This value is the result of using logical OR to combine the following flags: <xref href=\"System.Reflection.GenericParameterAttributes.Contravariant\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.GenericParameterAttributes.Covariant\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: VarianceMask = 3
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.GenericParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
