items:
- uid: System.Globalization.TextElementEnumerator
  commentId: T:System.Globalization.TextElementEnumerator
  id: TextElementEnumerator
  parent: System.Globalization
  children:
  - System.Globalization.TextElementEnumerator.Current
  - System.Globalization.TextElementEnumerator.ElementIndex
  - System.Globalization.TextElementEnumerator.GetTextElement
  - System.Globalization.TextElementEnumerator.MoveNext
  - System.Globalization.TextElementEnumerator.Reset
  langs:
  - csharp
  - vb
  name: TextElementEnumerator
  fullName: System.Globalization.TextElementEnumerator
  type: Class
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TextElementEnumerator
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 267
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Enumerates the text elements of a string. </p>\n"
  remarks: "\n<p>The .NET Framework defines a text element as a unit of text that is displayed as a single character, that is, a grapheme. A text element can be any of the following: </p>\n<ul><li>\n<p>A base character, which is represented as a single <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value. For example, LATIN CAPITAL LETTER A (U+0041) and LATIN SMALL LETTER AE (U+00E6) are base characters. </p>\n</li><li>\n<p>A combining character sequence, which consists of a base character and one or more combining characters. For example, example, LATIN CAPITAL LETTER A (U+0041) followed by COMBINING MACRON (U+0304) is a combining character sequence. </p>\n</li><li>\n<p>Surrogate pairs, which the <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode Standard</see> defines as a coded character representation for a single abstract character that consists of a sequence of two code units: a high surrogate, and a low surrogate. Surrogate pairs are used to represent characters outside of the Unicode Basic Multilingual Plane as UTF-8 encoded characters. For example, GOTHIC LETTER SAUIL (U+10343) is represented in UTF-8 encoding as a high surrogate whose value is 0xD800 and a low surrogate whose value is 0xDF43. A surrogate pair can represent a base character or a combining character. </p>\n<p></p>\n</li></ul>\n<p>The <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class allows you to work with the text elements in a string rather than with single <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>You instantiate a <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that represents a particular string by passing the string to the <xref href=\"System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. This returns an enumerator that is positioned before the first text element in the string. Calling the <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method also brings the enumerator back to this position. Because this represents an invalid state, you must call <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first text element of the string before reading the value of the <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property to return the current text element.</p>\n<p>When working with a <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object, you are responsible for positioning the enumerator. The <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same text element until you call either <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref>. The enumerator is in an invalid state if it is positioned before the first text element or after the last text element in the string. When the enumerator is in an invalid state, attempting to retrieve the value of the <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property throws an exception. You can determine whether the enumerator is in an invalid state by testing whether the return value of the <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n<p>The <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object represents a snapshot of the current state of a string variable or string literal at the moment that the <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object is instantiated. Note that: </p>\n<ul><li>\n<p>Text element enumerators can only be used to read data in a string. They cannot modify the underlying string. </p>\n</li><li>\n<p>An enumerator does not have exclusive access to the string that it represents. A string variable can be modified after the enumerator is created. </p>\n</li><li>\n<p>A <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object enumerates the text elements present in the string at the time that the <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object was instantiated. It does not reflect any subsequent changes to the string variable if that variable is modified afterward. </p>\n</li><li>\n<p>Because the <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class does not override <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, two <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the same string will be considered unequal. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Globalization.TextElementEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class to enumerate the text elements of a string. </p>System.Globalization.TextElementEnumerator.Summary#1"
  syntax:
    content: 'public class TextElementEnumerator : Collections.IEnumerator'
    content.vb: >-
      Public Class TextElementEnumerator
          Inherits Collections.IEnumerator
  seealso:
  - type: System.Globalization.StringInfo
    commentId: T:System.Globalization.StringInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.TextElementEnumerator.Current
  commentId: P:System.Globalization.TextElementEnumerator.Current
  id: Current
  parent: System.Globalization.TextElementEnumerator
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Globalization.TextElementEnumerator.Current
  type: Property
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 270
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the current text element in the string.</p>\n"
  remarks: "\n<p>After an enumerator is created or after a <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called, <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first text element of the string before reading the value of <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined.</p>\n<p>\n<xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> also throws an exception if the last call to <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the string.</p>\n<p>\n<xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator, and consecutive calls to <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> return the same object until either <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  syntax:
    content: public object Current { get; }
    content.vb: Public ReadOnly Property Current As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object containing the current text element in the string.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The enumerator is positioned before the first text element of the string or after the last text element. </p>\n"
  seealso:
  - type: System.Globalization.TextElementEnumerator.GetTextElement
    commentId: M:System.Globalization.TextElementEnumerator.GetTextElement
  - type: System.Globalization.TextElementEnumerator.ElementIndex
    commentId: P:System.Globalization.TextElementEnumerator.ElementIndex
  - type: System.Globalization.TextElementEnumerator.MoveNext
    commentId: M:System.Globalization.TextElementEnumerator.MoveNext
  - type: System.Globalization.TextElementEnumerator.Reset
    commentId: M:System.Globalization.TextElementEnumerator.Reset
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextElementEnumerator.ElementIndex
  commentId: P:System.Globalization.TextElementEnumerator.ElementIndex
  id: ElementIndex
  parent: System.Globalization.TextElementEnumerator
  langs:
  - csharp
  - vb
  name: ElementIndex
  fullName: System.Globalization.TextElementEnumerator.ElementIndex
  type: Property
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementIndex
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 271
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the index of the text element that the enumerator is currently positioned over.</p>\n"
  syntax:
    content: public int ElementIndex { get; }
    content.vb: Public ReadOnly Property ElementIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The index of the text element that the enumerator is currently positioned over.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The enumerator is positioned before the first text element of the string or after the last text element. </p>\n"
  seealso:
  - type: System.Globalization.TextElementEnumerator.Current
    commentId: P:System.Globalization.TextElementEnumerator.Current
  - type: System.Globalization.TextElementEnumerator.GetTextElement
    commentId: M:System.Globalization.TextElementEnumerator.GetTextElement
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextElementEnumerator.GetTextElement
  commentId: M:System.Globalization.TextElementEnumerator.GetTextElement
  id: GetTextElement
  parent: System.Globalization.TextElementEnumerator
  langs:
  - csharp
  - vb
  name: GetTextElement()
  fullName: System.Globalization.TextElementEnumerator.GetTextElement()
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTextElement
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 272
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the current text element in the string.</p>\n"
  remarks: "\n<p>This method returns the same text element as the <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public string GetTextElement()
    content.vb: Public Function GetTextElement As String
    return:
      type: System.String
      description: "\n<p>A new string containing the current text element in the string being read.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The enumerator is positioned before the first text element of the string or after the last text element. </p>\n"
  seealso:
  - type: System.Globalization.TextElementEnumerator.Current
    commentId: P:System.Globalization.TextElementEnumerator.Current
  - type: System.Globalization.TextElementEnumerator.ElementIndex
    commentId: P:System.Globalization.TextElementEnumerator.ElementIndex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.TextElementEnumerator.MoveNext
  commentId: M:System.Globalization.TextElementEnumerator.MoveNext
  id: MoveNext
  parent: System.Globalization.TextElementEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  fullName: System.Globalization.TextElementEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveNext
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 273
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Advances the enumerator to the next text element of the string.</p>\n"
  remarks: "\n<p>After an enumerator is created or after a <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called, the enumerator is positioned before the first text element of the string, and the first call to <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> moves the enumerator over the first text element of the string.</p>\n<p>If the string is modified after this enumerator was created, <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> throws an exception.</p>\n<p>After the end of the string is passed, subsequent calls to <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> return <strong>false</strong> until <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the enumerator was successfully advanced to the next text element; <strong>false</strong> if the enumerator has passed the end of the string.</p>\n"
  seealso:
  - type: System.Globalization.TextElementEnumerator.Current
    commentId: P:System.Globalization.TextElementEnumerator.Current
  - type: System.Globalization.TextElementEnumerator.Reset
    commentId: M:System.Globalization.TextElementEnumerator.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.TextElementEnumerator.Reset
  commentId: M:System.Globalization.TextElementEnumerator.Reset
  id: Reset
  parent: System.Globalization.TextElementEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Globalization.TextElementEnumerator.Reset()
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 274
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Sets the enumerator to its initial position, which is before the first text element in the string.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method moves the enumerator to the beginning of the string, before the first text element. After calling <xref href=\"System.Globalization.TextElementEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref>, you must call <xref href=\"System.Globalization.TextElementEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first text element of the string before calling <xref href=\"System.Globalization.TextElementEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to read the value of the first text element.</p>\n"
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  seealso:
  - type: System.Globalization.TextElementEnumerator.MoveNext
    commentId: M:System.Globalization.TextElementEnumerator.MoveNext
  - type: System.Globalization.TextElementEnumerator.Current
    commentId: P:System.Globalization.TextElementEnumerator.Current
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
