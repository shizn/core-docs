items:
- uid: System.Net.Http.HttpClientHandler
  commentId: T:System.Net.Http.HttpClientHandler
  id: HttpClientHandler
  parent: System.Net.Http
  children:
  - System.Net.Http.HttpClientHandler.#ctor
  - System.Net.Http.HttpClientHandler.AllowAutoRedirect
  - System.Net.Http.HttpClientHandler.AutomaticDecompression
  - System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  - System.Net.Http.HttpClientHandler.ClientCertificateOptions
  - System.Net.Http.HttpClientHandler.ClientCertificates
  - System.Net.Http.HttpClientHandler.CookieContainer
  - System.Net.Http.HttpClientHandler.Credentials
  - System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  - System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  - System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  - System.Net.Http.HttpClientHandler.PreAuthenticate
  - System.Net.Http.HttpClientHandler.Properties
  - System.Net.Http.HttpClientHandler.Proxy
  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  - System.Net.Http.HttpClientHandler.SslProtocols
  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  - System.Net.Http.HttpClientHandler.SupportsProxy
  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  - System.Net.Http.HttpClientHandler.UseCookies
  - System.Net.Http.HttpClientHandler.UseDefaultCredentials
  - System.Net.Http.HttpClientHandler.UseProxy
  langs:
  - csharp
  - vb
  name: HttpClientHandler
  fullName: System.Net.Http.HttpClientHandler
  type: Class
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HttpClientHandler
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 77
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>The default message handler used by <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref>.  </p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> class and classes derived from it enable developers to configure a variety of options ranging from proxies to authentication.</p>\n"
  example:
  - System.Net.Http.HttpClientHandler#1
  syntax:
    content: 'public class HttpClientHandler : HttpMessageHandler, IDisposable'
    content.vb: >-
      Public Class HttpClientHandler
          Inherits HttpMessageHandler
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Http.HttpClientHandler.#ctor
  commentId: M:System.Net.Http.HttpClientHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: HttpClientHandler()
  fullName: System.Net.Http.HttpClientHandler.HttpClientHandler()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 79
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Creates an instance of a <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public HttpClientHandler()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.AllowAutoRedirect
  commentId: P:System.Net.Http.HttpClientHandler.AllowAutoRedirect
  id: AllowAutoRedirect
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: AllowAutoRedirect
  fullName: System.Net.Http.HttpClientHandler.AllowAutoRedirect
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AllowAutoRedirect
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 80
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler should follow redirection responses.</p>\n"
  remarks: "\n<p>Set <xref href=\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> if you want the handler to automatically follow HTTP redirection headers to the new location of the resource. The maximum number of redirections to follow is set by the <xref href=\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If <xref href=\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>false</strong>, all HTTP responses with an HTTP status code from 300 to 399 are  returned to the application.</p>\n<p>The Authorization header is cleared on auto-redirects and the handler automatically tries to re-authenticate to the redirected location. In practice, this means that an application can't put custom authentication information into the Authorization header if it is possible to encounter redirection. Instead, the application must implement and register a custom authentication module.</p>\n"
  syntax:
    content: public bool AllowAutoRedirect { get; set; }
    content.vb: Public Property AllowAutoRedirect As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler should follow redirection responses; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.AutomaticDecompression
  commentId: P:System.Net.Http.HttpClientHandler.AutomaticDecompression
  id: AutomaticDecompression
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: AutomaticDecompression
  fullName: System.Net.Http.HttpClientHandler.AutomaticDecompression
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AutomaticDecompression
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 81
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the type of decompression method used by the handler for automatic decompression of the HTTP content response.</p>\n"
  syntax:
    content: public DecompressionMethods AutomaticDecompression { get; set; }
    content.vb: Public Property AutomaticDecompression As DecompressionMethods
    parameters: []
    return:
      type: System.Net.DecompressionMethods
      description: "\n<p>Returns <xref href=\"System.Net.DecompressionMethods\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The automatic decompression method used by the handler. The default value is <xref href=\"System.Net.DecompressionMethods.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  commentId: P:System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: CheckCertificateRevocationList
  fullName: System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CheckCertificateRevocationList
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 82
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public bool CheckCertificateRevocationList { get; set; }
    content.vb: Public Property CheckCertificateRevocationList As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.ClientCertificateOptions
  commentId: P:System.Net.Http.HttpClientHandler.ClientCertificateOptions
  id: ClientCertificateOptions
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: ClientCertificateOptions
  fullName: System.Net.Http.HttpClientHandler.ClientCertificateOptions
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClientCertificateOptions
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 83
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates if the certificate is automatically picked from the certificate store or if the caller is allowed to pass in a specific client certificate.</p>\n"
  syntax:
    content: public ClientCertificateOption ClientCertificateOptions { get; set; }
    content.vb: Public Property ClientCertificateOptions As ClientCertificateOption
    parameters: []
    return:
      type: System.Net.Http.ClientCertificateOption
      description: "\n<p>Returns <xref href=\"System.Net.Http.ClientCertificateOption\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The collection of security certificates associated with this handler.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.ClientCertificates
  commentId: P:System.Net.Http.HttpClientHandler.ClientCertificates
  id: ClientCertificates
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: ClientCertificates
  fullName: System.Net.Http.HttpClientHandler.ClientCertificates
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClientCertificates
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 84
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public X509CertificateCollection ClientCertificates { get; }
    content.vb: Public ReadOnly Property ClientCertificates As X509CertificateCollection
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.CookieContainer
  commentId: P:System.Net.Http.HttpClientHandler.CookieContainer
  id: CookieContainer
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: CookieContainer
  fullName: System.Net.Http.HttpClientHandler.CookieContainer
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CookieContainer
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 85
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the cookie container used to store server cookies by the handler.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property provides an instance of the <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref>  class that contains the cookies associated with this handler.</p>\n<p>If the <xref href=\"System.Net.Http.HttpClientHandler.UseCookies\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, the <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property represents the cookie container used to store the server cookies. The user can set custom cookies before sending requests using this property. If the  <xref href=\"System.Net.Http.HttpClientHandler.UseCookies\" data-throw-if-not-resolved=\"false\"></xref> property is false and the user adds cookies to <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref>, cookies are ignored and not sent to the server. Setting the <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> to <strong>null</strong> will throw an exception. </p>\n"
  syntax:
    content: public CookieContainer CookieContainer { get; set; }
    content.vb: Public Property CookieContainer As CookieContainer
    parameters: []
    return:
      type: System.Net.CookieContainer
      description: "\n<p>Returns <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The cookie container used to store server cookies by the handler.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.Credentials
  commentId: P:System.Net.Http.HttpClientHandler.Credentials
  id: Credentials
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Credentials
  fullName: System.Net.Http.HttpClientHandler.Credentials
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Credentials
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 86
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets authentication information used by this handler.</p>\n"
  syntax:
    content: public ICredentials Credentials { get; set; }
    content.vb: Public Property Credentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
      description: "\n<p>Returns <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The authentication credentials associated with the handler. The default is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  commentId: P:System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  id: DefaultProxyCredentials
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: DefaultProxyCredentials
  fullName: System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultProxyCredentials
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 87
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public ICredentials DefaultProxyCredentials { get; set; }
    content.vb: Public Property DefaultProxyCredentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  commentId: P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  id: MaxAutomaticRedirections
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxAutomaticRedirections
  fullName: System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxAutomaticRedirections
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 88
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the maximum number of redirects that the handler follows.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\" data-throw-if-not-resolved=\"false\"></xref> property sets the maximum number of redirections for the request to follow if the <xref href=\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>.</p>\n"
  syntax:
    content: public int MaxAutomaticRedirections { get; set; }
    content.vb: Public Property MaxAutomaticRedirections As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The maximum number of redirection responses that the handler follows. The default value is 50.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  commentId: P:System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  id: MaxConnectionsPerServer
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxConnectionsPerServer
  fullName: System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxConnectionsPerServer
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 89
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public int MaxConnectionsPerServer { get; set; }
    content.vb: Public Property MaxConnectionsPerServer As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  commentId: P:System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  id: MaxRequestContentBufferSize
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxRequestContentBufferSize
  fullName: System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxRequestContentBufferSize
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 90
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the maximum request content buffer size used by the handler.</p>\n"
  remarks: "\n<p>An app can set the <xref href=\"System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\" data-throw-if-not-resolved=\"false\"></xref> property to a lower value to limit the size of the request buffer. If the size of the request content is greater than the <xref href=\"System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\" data-throw-if-not-resolved=\"false\"></xref> property, an exception is thrown.</p>\n"
  syntax:
    content: public long MaxRequestContentBufferSize { get; set; }
    content.vb: Public Property MaxRequestContentBufferSize As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The maximum request content buffer size in bytes. The default value is 2 gigabytes.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  commentId: P:System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  id: MaxResponseHeadersLength
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxResponseHeadersLength
  fullName: System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxResponseHeadersLength
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 91
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public int MaxResponseHeadersLength { get; set; }
    content.vb: Public Property MaxResponseHeadersLength As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.PreAuthenticate
  commentId: P:System.Net.Http.HttpClientHandler.PreAuthenticate
  id: PreAuthenticate
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: PreAuthenticate
  fullName: System.Net.Http.HttpClientHandler.PreAuthenticate
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreAuthenticate
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 92
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler sends an Authorization header with the request.</p>\n"
  remarks: "\n<p>After a client request to a specific <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> is successfully authenticated, if the <xref href=\"System.Net.Http.HttpClientHandler.PreAuthenticate\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> and credentials are supplied, <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> matches against the credential list supplied in the  <xref href=\"System.Net.Http.HttpClientHandler.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property. The Authorization header is sent with each request to any <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that matches the specific <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> up to the last forward slash. </p>\n<p>If the client request to a specific <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> is not successfully authenticated, the request uses standard authentication procedures. </p>\n<p>With the exception of the first request, the <xref href=\"System.Net.Http.HttpClientHandler.PreAuthenticate\" data-throw-if-not-resolved=\"false\"></xref> property indicates whether to send authentication information with subsequent requests to a <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that matches the specific <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> up to the last forward slash without waiting to be challenged by the server.</p>\n"
  syntax:
    content: public bool PreAuthenticate { get; set; }
    content.vb: Public Property PreAuthenticate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> for the handler to send an HTTP Authorization header with requests after authentication has taken place; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.Properties
  commentId: P:System.Net.Http.HttpClientHandler.Properties
  id: Properties
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Properties
  fullName: System.Net.Http.HttpClientHandler.Properties
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Properties
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 93
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public IDictionary<string, object> Properties { get; }
    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.Proxy
  commentId: P:System.Net.Http.HttpClientHandler.Proxy
  id: Proxy
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Proxy
  fullName: System.Net.Http.HttpClientHandler.Proxy
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Proxy
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 94
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets proxy information used by the handler.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Http.HttpClientHandler.Proxy\" data-throw-if-not-resolved=\"false\"></xref>  property identifies the <xref href=\"System.Net.WebProxy\" data-throw-if-not-resolved=\"false\"></xref> object to use to process requests to Internet resources. To specify that no proxy should be used, set the <xref href=\"System.Net.Http.HttpClientHandler.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property to the proxy instance returned by the <xref href=\"System.Net.GlobalProxySelection.GetEmptyWebProxy\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The local computer or application config file may specify that a default proxy be used. If the <xref href=\"System.Net.Http.HttpClientHandler.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property is specified, then the proxy settings from the <xref href=\"System.Net.Http.HttpClientHandler.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property override the local computer or application config file and the handler will use the proxy settings specified. If no proxy is specified in a config file and the <xref href=\"System.Net.Http.HttpClientHandler.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property is unspecified, the handler uses the proxy settings inherited from Internet Explorer on the local computer. If there are no proxy settings in Internet Explorer, the request is sent directly to the server.</p>\n<p>The <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> class parses a proxy bypass list with wildcard characters inherited from Internet Explorer the same as the bypass list is parsed directly by Internet Explorer. For example, the <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> class will parse a bypass list of \"nt*\" from Internet Explorer as a regular expression of \"nt.*\". So a URL of \" http://nt.com\" would bypass the proxy using the <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref>  class and using Internet Explorer.</p>\n<p>The <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> class supports local proxy bypass. The class considers a destination to be local if any of the following conditions are met:</p>\n<ol><li>\n<p>The destination contains a flat name (no dots in the URL).</p>\n</li><li>\n<p>The destination contains a loopback address (<xref href=\"System.Net.IPAddress.Loopback\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.IPAddress.IPv6Loopback\" data-throw-if-not-resolved=\"false\"></xref>) or the destination contains an <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> assigned to the local computer.</p>\n</li><li>\n<p>The domain suffix of the destination matches the local computer's domain suffix (<xref href=\"System.Net.NetworkInformation.IPGlobalProperties.DomainName\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n</li></ol>\n"
  syntax:
    content: public IWebProxy Proxy { get; set; }
    content.vb: Public Property Proxy As IWebProxy
    parameters: []
    return:
      type: System.Net.IWebProxy
      description: "\n<p>Returns <xref href=\"System.Net.IWebProxy\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The proxy information used by the handler. The default value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  commentId: P:System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  id: ServerCertificateCustomValidationCallback
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: ServerCertificateCustomValidationCallback
  fullName: System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ServerCertificateCustomValidationCallback
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 95
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; set; }
    content.vb: Public Property ServerCertificateCustomValidationCallback As Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)
    parameters: []
    return:
      type: System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.SslProtocols
  commentId: P:System.Net.Http.HttpClientHandler.SslProtocols
  id: SslProtocols
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SslProtocols
  fullName: System.Net.Http.HttpClientHandler.SslProtocols
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SslProtocols
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 96
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public Authentication.SslProtocols SslProtocols { get; set; }
    content.vb: Public Property SslProtocols As Authentication.SslProtocols
    parameters: []
    return:
      type: System.Security.Authentication.SslProtocols
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  commentId: P:System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  id: SupportsAutomaticDecompression
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SupportsAutomaticDecompression
  fullName: System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsAutomaticDecompression
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 97
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets a value that indicates whether the handler supports automatic response content decompression.</p>\n"
  syntax:
    content: public virtual bool SupportsAutomaticDecompression { get; }
    content.vb: Public Overridable ReadOnly Property SupportsAutomaticDecompression As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports automatic response content decompression; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.SupportsProxy
  commentId: P:System.Net.Http.HttpClientHandler.SupportsProxy
  id: SupportsProxy
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SupportsProxy
  fullName: System.Net.Http.HttpClientHandler.SupportsProxy
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsProxy
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 98
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets a value that indicates whether the handler supports proxy settings.</p>\n"
  syntax:
    content: public virtual bool SupportsProxy { get; }
    content.vb: Public Overridable ReadOnly Property SupportsProxy As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports proxy settings; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  commentId: P:System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  id: SupportsRedirectConfiguration
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SupportsRedirectConfiguration
  fullName: System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsRedirectConfiguration
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 99
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets a value that indicates whether the handler supports configuration settings for the <xref href=\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  syntax:
    content: public virtual bool SupportsRedirectConfiguration { get; }
    content.vb: Public Overridable ReadOnly Property SupportsRedirectConfiguration As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports configuration settings for the <xref href=\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\" data-throw-if-not-resolved=\"false\"></xref> properties; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.UseCookies
  commentId: P:System.Net.Http.HttpClientHandler.UseCookies
  id: UseCookies
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: UseCookies
  fullName: System.Net.Http.HttpClientHandler.UseCookies
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseCookies
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 100
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler uses the  <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property  to store server cookies and uses these cookies when sending requests.</p>\n"
  syntax:
    content: public bool UseCookies { get; set; }
    content.vb: Public Property UseCookies As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports uses the  <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property  to store server cookies and uses these cookies when sending requests; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.UseDefaultCredentials
  commentId: P:System.Net.Http.HttpClientHandler.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: UseDefaultCredentials
  fullName: System.Net.Http.HttpClientHandler.UseDefaultCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseDefaultCredentials
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 101
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that controls whether default credentials are sent with requests by the handler.</p>\n"
  remarks: "\n<p>Set this property to <strong>true</strong> when requests made by the <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> object should, if requested by the server, be authenticated using the credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle-tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref href=\"System.Net.Http.HttpClientHandler.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property to the credentials of the client on whose behalf the request is made.</p>\n"
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    content.vb: Public Property UseDefaultCredentials As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the default credentials are used; otherwise <strong>false</strong>. The default value is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.UseProxy
  commentId: P:System.Net.Http.HttpClientHandler.UseProxy
  id: UseProxy
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: UseProxy
  fullName: System.Net.Http.HttpClientHandler.UseProxy
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseProxy
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 102
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler uses a proxy for requests. </p>\n"
  syntax:
    content: public bool UseProxy { get; set; }
    content.vb: Public Property UseProxy As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the handler should use a proxy for requests; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  commentId: M:System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 103
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> and optionally disposes of the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\n"
  overridden: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 104
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Creates an instance of  <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> based on the information provided in the <xref href=\"System.Net.Http.HttpRequestMessage\" data-throw-if-not-resolved=\"false\"></xref> as an operation that will not block.</p>\n"
  remarks: "\n<p>This operation is does not block. It returns an instance of <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> to represent the asynchronous operation. When the operation completes, <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> contains the response message.</p>\n"
  syntax:
    content: protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    content.vb: Protected Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "\n<p>The HTTP request message.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to cancel the operation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  overridden: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>request</em> was <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Net.Http
  isExternal: false
  name: System.Net.Http
  fullName: System.Net.Http
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  spec.csharp:
  - uid: System.Net.Http.HttpMessageHandler.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageHandler.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.DecompressionMethods
  parent: System.Net
  isExternal: false
  name: DecompressionMethods
  fullName: System.Net.DecompressionMethods
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Net.Http.ClientCertificateOption
  parent: System.Net.Http
  isExternal: false
  name: ClientCertificateOption
  fullName: System.Net.Http.ClientCertificateOption
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Net.CookieContainer
  isExternal: false
  name: CookieContainer
  fullName: System.Net.CookieContainer
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Net.IWebProxy
  isExternal: false
  name: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}
  parent: System
  definition: System.Func`5
  name: Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean>
  fullName: System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, System.Boolean>
  fullname.vb: System.Func(Of System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, System.Boolean)
  name.vb: Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Chain
    name: X509Chain
    fullName: System.Security.Cryptography.X509Certificates.X509Chain
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Net.Security.SslPolicyErrors
    name: Security.SslPolicyErrors
    fullName: System.Net.Security.SslPolicyErrors
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Chain
    name: X509Chain
    fullName: System.Security.Cryptography.X509Certificates.X509Chain
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Net.Security.SslPolicyErrors
    name: Security.SslPolicyErrors
    fullName: System.Net.Security.SslPolicyErrors
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`5
  parent: System
  isExternal: false
  name: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Security.Authentication.SslProtocols
  parent: System.Security.Authentication
  isExternal: false
  name: SslProtocols
  fullName: System.Security.Authentication.SslProtocols
- uid: System.Security.Authentication
  isExternal: false
  name: System.Security.Authentication
  fullName: System.Security.Authentication
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: true
  name: SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.HttpMessageHandler.SendAsync
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.HttpMessageHandler.SendAsync
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: )
    fullName: )
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
