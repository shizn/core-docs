items:
- uid: System.Runtime.ExceptionServices.ExceptionDispatchInfo
  commentId: T:System.Runtime.ExceptionServices.ExceptionDispatchInfo
  id: ExceptionDispatchInfo
  parent: System.Runtime.ExceptionServices
  children:
  - System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)
  - System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException
  - System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw
  langs:
  - csharp
  - vb
  name: ExceptionDispatchInfo
  fullName: System.Runtime.ExceptionServices.ExceptionDispatchInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ExceptionDispatchInfo
    path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
    startLine: 28
  assemblies:
  - System.Runtime
  namespace: System.Runtime.ExceptionServices
  summary: "\n<p>Represents an exception whose state is captured at a certain point in code. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo\" data-throw-if-not-resolved=\"false\"></xref> object stores the stack trace information and Watson information that the exception contains at the point where it is captured. The exception can be thrown at another time and possibly on another thread by calling the <xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\" data-throw-if-not-resolved=\"false\"></xref> method. The exception is thrown as if it had flowed from the point where it was captured to the point where the <xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n<p>\n<xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo\" data-throw-if-not-resolved=\"false\"></xref> cannot be serialized and is not intended to cross application domain boundaries. </p>\n"
  syntax:
    content: public sealed class ExceptionDispatchInfo
    content.vb: Public NotInheritable Class ExceptionDispatchInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException
  commentId: P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException
  id: SourceException
  parent: System.Runtime.ExceptionServices.ExceptionDispatchInfo
  langs:
  - csharp
  - vb
  name: SourceException
  fullName: System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SourceException
    path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
    startLine: 110
  assemblies:
  - System.Runtime
  namespace: System.Runtime.ExceptionServices
  summary: "\n<p>Gets the exception that is represented by the current instance. </p>\n"
  remarks: "\n<p>This property is used by the Task Parallel Library, for example, to combine multiple exceptions in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> object. It is not intended to be used by application code. Use the <xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\" data-throw-if-not-resolved=\"false\"></xref> method to restore the state of the captured exception and throw it. </p>\n"
  syntax:
    content: public Exception SourceException { get; }
    content.vb: Public ReadOnly Property SourceException As Exception
    parameters: []
    return:
      type: System.Exception
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)
  commentId: M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)
  id: Capture(System.Exception)
  parent: System.Runtime.ExceptionServices.ExceptionDispatchInfo
  langs:
  - csharp
  - vb
  name: Capture(Exception)
  fullName: System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capture
    path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
    startLine: 99
  assemblies:
  - System.Runtime
  namespace: System.Runtime.ExceptionServices
  summary: "\n<p>Creates an <xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the specified exception at the current point in code. </p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is returned by this method at another time and possibly on another thread to rethrow the specified exception, as if the exception had flowed from this point where it was captured to the point where it is rethrown. </p>\n<p>If the exception is active when it is captured, the current stack trace information and Watson information that is contained in the exception is stored.  If it is inactive, that is, if it has not been thrown, it will not have any stack trace information or Watson information. </p>\n"
  syntax:
    content: public static ExceptionDispatchInfo Capture(Exception source)
    content.vb: Public Shared Function Capture(source As Exception) As ExceptionDispatchInfo
    parameters:
    - id: source
      type: System.Exception
    return:
      type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw
  commentId: M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw
  id: Throw
  parent: System.Runtime.ExceptionServices.ExceptionDispatchInfo
  langs:
  - csharp
  - vb
  name: Throw()
  fullName: System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Throw
    path: src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs
    startLine: 126
  assemblies:
  - System.Runtime
  namespace: System.Runtime.ExceptionServices
  summary: "\n<p>Throws the exception that is represented by the current <xref href=\"System.Runtime.ExceptionServices.ExceptionDispatchInfo\" data-throw-if-not-resolved=\"false\"></xref> object, after restoring the state that was saved when the exception was captured. </p>\n"
  remarks: "\n<p>When the exception is restored, the following string is inserted in the stack trace to indicate the restore point: \"End of stack trace from the previous location where the exception was thrown\". This is similar to the way inner exceptions or marshaled exceptions are indicated in stack traces.</p>\n"
  syntax:
    content: public void Throw()
    content.vb: Public Sub Throw
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.ExceptionServices
  isExternal: false
  name: System.Runtime.ExceptionServices
  fullName: System.Runtime.ExceptionServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Runtime.ExceptionServices.ExceptionDispatchInfo
  parent: System.Runtime.ExceptionServices
  isExternal: false
  name: ExceptionDispatchInfo
  fullName: System.Runtime.ExceptionServices.ExceptionDispatchInfo
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
