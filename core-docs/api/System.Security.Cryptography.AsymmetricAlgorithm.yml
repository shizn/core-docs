items:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm
  id: AsymmetricAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  langs:
  - csharp
  - vb
  name: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsymmetricAlgorithm
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 9
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.</p>\n"
  remarks: "\n<p>Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key. Both keys are unique to the entity. The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver. The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver's public key. The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> class is an implementation of a public-key algorithm. For an in-depth discussion of public-key encryption and algorithms, see the \"Public-Key Encryption\" section in Cryptographic Services. For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see How to: Create a Public/Private Key Pair. </p>\n<p>You can use public-key systems to form digital signatures. Digital signatures are used to help to protect the integrity of data. For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that anyone can verify a signature, because the sender's public key is common knowledge. This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted. </p>\n<p>The .NET Framework provides the following classes that implement digital signature algorithms: <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.ECDsa\" data-throw-if-not-resolved=\"false\"></xref> (base class), and <xref href=\"System.Security.Cryptography.ECDsaCng\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <xref href=\"System.Security.Cryptography\" data-throw-if-not-resolved=\"false\"></xref> namespace provides concrete classes for <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Cryptography.DSA\" data-throw-if-not-resolved=\"false\"></xref> only. </p>\n<p>To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:</p>\n<ul><li>\n<p>How to: Encrypt XML Elements with Asymmetric Keys</p>\n</li><li>\n<p>How to: Decrypt XML Elements with Asymmetric Keys</p>\n</li><li>\n<p>How to: Sign XML Documents with Digital Signatures</p>\n</li><li>\n<p>How to: Verify the Digital Signatures of XML Documents</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates how to implement a custom asymmetric algorithm inherited from the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.  An additional class is provided to demonstrate how to use the custom class.</p>System.Security.Cryptography.AsymmetricAlgorithm#2<p>Here's an additional class that demonstrates how to use the custom class.</p>System.Security.Cryptography.AsymmetricAlgorithm#3"
  syntax:
    content: 'public abstract class AsymmetricAlgorithm : IDisposable'
    content.vb: >-
      Public MustInherit Class AsymmetricAlgorithm
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 14
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class. The <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> classes are the only currently supported implementations.</p>\n"
  syntax:
    content: protected AsymmetricAlgorithm()
    content.vb: Protected Sub New
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The implementation of the derived class is not valid. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySize
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 18
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n"
  remarks: "\n<p>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to override the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm.KeySize\" data-throw-if-not-resolved=\"false\"></xref> property to verify that it falls within the range identified in the local <code>keySizes</code> member variable. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Cryptography.AsymmetricAlgorithm#9"
  syntax:
    content: public virtual int KeySize { get; set; }
    content.vb: Public Overridable Property KeySize As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The key modulus size is invalid. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizes
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 34
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the key sizes that are supported by the asymmetric algorithm.</p>\n"
  remarks: "\n<p>The asymmetric algorithm supports only key sizes that match an entry in this array.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to call the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property to retrieve the <xref href=\"System.Security.Cryptography.KeySizes.MinSize\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.KeySizes.MaxSize\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.KeySizes.SkipSize\" data-throw-if-not-resolved=\"false\"></xref> properties. This code example is part of a larger example provided for the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.Cryptography.AsymmetricAlgorithm#10"
  syntax:
    content: public virtual KeySizes[] LegalKeySizes { get; }
    content.vb: Public Overridable ReadOnly Property LegalKeySizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 43
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 49
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <strong>Finalize</strong> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <strong>Finalize</strong> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySizeValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 11
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n"
  remarks: "\n<p>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm.KeySize\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected int KeySizeValue
    content.vb: Protected KeySizeValue As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizesValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/AsymmetricAlgorithm.cs
    startLine: 12
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies the key sizes that are supported by the asymmetric algorithm.</p>\n"
  remarks: "\n<p>The asymmetric algorithm supports only key sizes that match an entry in this array.</p>\n<p>This field is accessed through the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected KeySizes[] LegalKeySizesValue
    content.vb: Protected LegalKeySizesValue As KeySizes()
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.KeySizes[]
  isExternal: false
  name: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  fullname.vb: System.Security.Cryptography.KeySizes()
  name.vb: KeySizes()
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: ()
    fullName: ()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
