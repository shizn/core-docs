items:
- uid: System.Security.Cryptography.X509Certificates.X509Chain
  commentId: T:System.Security.Cryptography.X509Certificates.X509Chain
  id: X509Chain
  parent: System.Security.Cryptography.X509Certificates
  children:
  - System.Security.Cryptography.X509Certificates.X509Chain.#ctor
  - System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)
  - System.Security.Cryptography.X509Certificates.X509Chain.ChainElements
  - System.Security.Cryptography.X509Certificates.X509Chain.ChainPolicy
  - System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus
  - System.Security.Cryptography.X509Certificates.X509Chain.Dispose
  - System.Security.Cryptography.X509Certificates.X509Chain.Dispose(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Chain.SafeHandle
  langs:
  - csharp
  - vb
  name: X509Chain
  fullName: System.Security.Cryptography.X509Certificates.X509Chain
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: X509Chain
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 217
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Represents a chain-building engine for <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificates.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> object has a global error status called <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus\" data-throw-if-not-resolved=\"false\"></xref> that should be used for certificate validation. The rules governing certificate validation are complex, and it is easy to oversimplify the validation logic by ignoring the error status of one or more of the elements involved. The global error status takes into consideration the status of each element in the chain.</p>\n<p>Starting with the .NET Framework 4.6, this type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>For apps that target the .NET Framework 4.5.2 and earlier versions, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> class does not implement the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface and therefore does not have a <strong>Dispose</strong> method. </p>\n"
  example:
  - "\n<p>The following code example opens the current user's personal certificate store, allows you to select a certificate, then writes certificate and certificate chain information to the console. The output depends on the certificate you select.</p>x509chaintest#1"
  syntax:
    content: 'public class X509Chain : IDisposable'
    content.vb: >-
      Public Class X509Chain
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Cryptography.X509Certificates.X509Chain.#ctor
  commentId: M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: X509Chain()
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.X509Chain()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 219
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example opens the current user's personal certificate store, allows you to select a certificate, then writes certificate and certificate chain information to the console. The output depends on the certificate you select.</p>x509chaintest#3"
  syntax:
    content: public X509Chain()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Chain.ChainElements
  commentId: P:System.Security.Cryptography.X509Certificates.X509Chain.ChainElements
  id: ChainElements
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: ChainElements
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.ChainElements
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChainElements
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 220
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets a collection of <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainElement\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>Each <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainElement\" data-throw-if-not-resolved=\"false\"></xref> object is a representation of an element in the chain that was built during a call to the <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>A chain element consists of an <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object, an <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainStatus\" data-throw-if-not-resolved=\"false\"></xref> structure, and an extra information string (available only on Windows XP platforms).</p>\n"
  example:
  - "\n<p>The following code example opens the current user's personal certificate store, allows you to select a certificate, then writes certificate and certificate chain information to the console. The output depends on the certificate you select.</p>x509chaintest#4"
  syntax:
    content: public X509ChainElementCollection ChainElements { get; }
    content.vb: Public ReadOnly Property ChainElements As X509ChainElementCollection
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509ChainElementCollection
      description: "\n<p>An <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainElementCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Chain.ChainPolicy
  commentId: P:System.Security.Cryptography.X509Certificates.X509Chain.ChainPolicy
  id: ChainPolicy
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: ChainPolicy
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.ChainPolicy
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChainPolicy
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 221
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets or sets the <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainPolicy\" data-throw-if-not-resolved=\"false\"></xref> to use when building an X.509 certificate chain.</p>\n"
  remarks: "\n<p>Use this property to set chain policy. For example, you can specify the Enhanced Key Usage (EKU) for which the chain should be validated, or specify revocation checking.</p>\n"
  example:
  - "\n<p>The following code example opens the current user's personal certificate store, allows you to select a certificate, then writes certificate and certificate chain information to the console. The output depends on the certificate you select.</p>x509chaintest#3"
  syntax:
    content: public X509ChainPolicy ChainPolicy { get; set; }
    content.vb: Public Property ChainPolicy As X509ChainPolicy
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509ChainPolicy
      description: "\n<p>The <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainPolicy\" data-throw-if-not-resolved=\"false\"></xref> object associated with this X.509 chain.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value being set for this property is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus
  commentId: P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus
  id: ChainStatus
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: ChainStatus
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChainStatus
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 222
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the status of each element in an <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Use this property to get detailed error information for the status of the chain.</p>\n"
  syntax:
    content: public X509ChainStatus[] ChainStatus { get; }
    content.vb: Public ReadOnly Property ChainStatus As X509ChainStatus()
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509ChainStatus[]
      description: "\n<p>An array of <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainStatus\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Chain.SafeHandle
  commentId: P:System.Security.Cryptography.X509Certificates.X509Chain.SafeHandle
  id: SafeHandle
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: SafeHandle
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.SafeHandle
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeHandle
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 223
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets a safe handle for this <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> instance. </p>\n"
  syntax:
    content: public SafeX509ChainHandle SafeHandle { get; }
    content.vb: Public ReadOnly Property SafeHandle As SafeX509ChainHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeX509ChainHandle
      description: "\n<p>Returns the <xref href=\"Microsoft.Win32.SafeHandles.SafeX509ChainHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: Build(System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: Build(X509Certificate2)
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Build
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 224
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Builds an X.509 chain using the policy specified in <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainPolicy\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Note that a valid X.509 certificate from a trusted issuer is valid only for the use specified in the <xref href=\"System.Security.Cryptography.X509Certificates.X509ChainPolicy\" data-throw-if-not-resolved=\"false\"></xref> object. Certificates that meet these chain policy rules might still be invalid for specific uses with such features as Security/MIME (SMIME), Authenticode, or Secure Sockets Layer (SSL). If further processing is required to determine whether the certificate is valid for a specific policy, derive a class from <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> and override the <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)\" data-throw-if-not-resolved=\"false\"></xref> method so that it calls the base class <strong>Build</strong> method first, and then does the additional processing.</p>\n"
  example:
  - "\n<p>The following code example opens the current user's personal certificate store, allows you to select a certificate, then writes certificate and certificate chain information to the console. The output depends on the certificate you select.</p>x509chaintest#3"
  syntax:
    content: public bool Build(X509Certificate2 certificate)
    content.vb: Public Function Build(certificate As X509Certificate2) As Boolean
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\n<p>An <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the X.509 certificate is valid; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>certificate</em> is not a valid certificate or is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The <em>certificate</em> is unreadable. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Chain.Dispose
  commentId: M:System.Security.Cryptography.X509Certificates.X509Chain.Dispose
  id: Dispose
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 225
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Releases all of the resources used by this <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> class does not implement this interface, and therefore the <strong>Dispose</strong> method does not exist. </p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Chain.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Chain.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Chain
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Chain.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 226
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Releases the unmanaged resources used by this <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref>, and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Chain\" data-throw-if-not-resolved=\"false\"></xref> class does not implement this interface, and therefore the <strong>Dispose</strong> method does not exist. </p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Cryptography.X509Certificates.X509ChainElementCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ChainElementCollection
  fullName: System.Security.Cryptography.X509Certificates.X509ChainElementCollection
- uid: System.Security.Cryptography.X509Certificates.X509ChainPolicy
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ChainPolicy
  fullName: System.Security.Cryptography.X509Certificates.X509ChainPolicy
- uid: System.Security.Cryptography.X509Certificates.X509ChainStatus[]
  isExternal: false
  name: X509ChainStatus[]
  fullName: System.Security.Cryptography.X509Certificates.X509ChainStatus[]
  fullname.vb: System.Security.Cryptography.X509Certificates.X509ChainStatus()
  name.vb: X509ChainStatus()
  spec.csharp:
  - uid: System.Security.Cryptography.X509Certificates.X509ChainStatus
    name: X509ChainStatus
    fullName: System.Security.Cryptography.X509Certificates.X509ChainStatus
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.X509Certificates.X509ChainStatus
    name: X509ChainStatus
    fullName: System.Security.Cryptography.X509Certificates.X509ChainStatus
  - name: ()
    fullName: ()
- uid: Microsoft.Win32.SafeHandles.SafeX509ChainHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeX509ChainHandle
  fullName: Microsoft.Win32.SafeHandles.SafeX509ChainHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
