items:
- uid: System.Security.AccessControl.AceEnumerator
  commentId: T:System.Security.AccessControl.AceEnumerator
  id: AceEnumerator
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.AceEnumerator.Current
  - System.Security.AccessControl.AceEnumerator.MoveNext
  - System.Security.AccessControl.AceEnumerator.Reset
  langs:
  - csharp
  - vb
  name: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AceEnumerator
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 54
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL). </p>\n"
  syntax:
    content: 'public sealed class AceEnumerator : Collections.IEnumerator'
    content.vb: >-
      Public NotInheritable Class AceEnumerator
          Inherits Collections.IEnumerator
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.AceEnumerator.Current
  commentId: P:System.Security.AccessControl.AceEnumerator.Current
  id: Current
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 57
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the current element in the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> collection. This property gets the type-friendly version of the object. </p>\n"
  syntax:
    content: public GenericAce Current { get; }
    content.vb: Public ReadOnly Property Current As GenericAce
    parameters: []
    return:
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The current element in the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  commentId: M:System.Security.AccessControl.AceEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveNext
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 59
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Advances the enumerator to the next element of the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>After an enumerator is created or after a call to the <xref href=\"System.Security.AccessControl.AceEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method, an enumerator is positioned before the first element of the collection, and the first call to the <xref href=\"System.Security.AccessControl.AceEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method moves the enumerator over the first element of the collection.</p>\n<p>After the end of the collection is passed, subsequent calls to <xref href=\"System.Security.AccessControl.AceEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> return <strong>false</strong> until <xref href=\"System.Security.AccessControl.AceEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Security.AccessControl.AceEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.AccessControl.AceEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.AceEnumerator.Reset
  commentId: M:System.Security.AccessControl.AceEnumerator.Reset
  id: Reset
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 60
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the enumerator to its initial position, which is before the first element in the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>An enumerator remains valid as long as the collection remains unchanged. If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref href=\"System.Security.AccessControl.AceEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Security.AccessControl.AceEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
