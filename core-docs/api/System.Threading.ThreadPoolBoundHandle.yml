items:
- uid: System.Threading.ThreadPoolBoundHandle
  commentId: T:System.Threading.ThreadPoolBoundHandle
  id: ThreadPoolBoundHandle
  parent: System.Threading
  children:
  - System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
  - System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  - System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)
  - System.Threading.ThreadPoolBoundHandle.Dispose
  - System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  - System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  - System.Threading.ThreadPoolBoundHandle.Handle
  langs:
  - csharp
  - vb
  name: ThreadPoolBoundHandle
  fullName: System.Threading.ThreadPoolBoundHandle
  type: Class
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThreadPoolBoundHandle
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 28
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: 'public sealed class ThreadPoolBoundHandle : IDisposable'
    content.vb: >-
      Public NotInheritable Class ThreadPoolBoundHandle
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.ThreadPoolBoundHandle.Handle
  commentId: P:System.Threading.ThreadPoolBoundHandle.Handle
  id: Handle
  parent: System.Threading.ThreadPoolBoundHandle
  langs:
  - csharp
  - vb
  name: Handle
  fullName: System.Threading.ThreadPoolBoundHandle.Handle
  type: Property
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Handle
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 31
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: public SafeHandle Handle { get; }
    content.vb: Public ReadOnly Property Handle As SafeHandle
    parameters: []
    return:
      type: System.Runtime.InteropServices.SafeHandle
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
  commentId: M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
  id: AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)
  parent: System.Threading.ThreadPoolBoundHandle
  langs:
  - csharp
  - vb
  name: AllocateNativeOverlapped(IOCompletionCallback, Object, Object)
  fullName: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AllocateNativeOverlapped
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 32
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: >-
      [CLSCompliant(false)]

      public NativeOverlapped*AllocateNativeOverlapped(IOCompletionCallback callback, object state, object pinData)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function AllocateNativeOverlapped(callback As IOCompletionCallback, state As Object, pinData As Object) As NativeOverlapped
    parameters:
    - id: callback
      type: System.Threading.IOCompletionCallback
    - id: state
      type: System.Object
    - id: pinData
      type: System.Object
    return:
      type: System.Threading.NativeOverlapped*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  commentId: M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  id: AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  parent: System.Threading.ThreadPoolBoundHandle
  langs:
  - csharp
  - vb
  name: AllocateNativeOverlapped(PreAllocatedOverlapped)
  fullName: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)
  type: Method
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AllocateNativeOverlapped
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 34
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: >-
      [CLSCompliant(false)]

      public NativeOverlapped*AllocateNativeOverlapped(PreAllocatedOverlapped preAllocated)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function AllocateNativeOverlapped(preAllocated As PreAllocatedOverlapped) As NativeOverlapped
    parameters:
    - id: preAllocated
      type: System.Threading.PreAllocatedOverlapped
    return:
      type: System.Threading.NativeOverlapped*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)
  commentId: M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)
  id: BindHandle(System.Runtime.InteropServices.SafeHandle)
  parent: System.Threading.ThreadPoolBoundHandle
  langs:
  - csharp
  - vb
  name: BindHandle(SafeHandle)
  fullName: System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)
  type: Method
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BindHandle
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 36
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: public static ThreadPoolBoundHandle BindHandle(SafeHandle handle)
    content.vb: Public Shared Function BindHandle(handle As SafeHandle) As ThreadPoolBoundHandle
    parameters:
    - id: handle
      type: System.Runtime.InteropServices.SafeHandle
    return:
      type: System.Threading.ThreadPoolBoundHandle
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.ThreadPoolBoundHandle.Dispose
  commentId: M:System.Threading.ThreadPoolBoundHandle.Dispose
  id: Dispose
  parent: System.Threading.ThreadPoolBoundHandle
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Threading.ThreadPoolBoundHandle.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 37
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  commentId: M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  id: FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  parent: System.Threading.ThreadPoolBoundHandle
  langs:
  - csharp
  - vb
  name: FreeNativeOverlapped(NativeOverlapped*)
  fullName: System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)
  type: Method
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FreeNativeOverlapped
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 38
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void FreeNativeOverlapped(NativeOverlapped*overlapped)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub FreeNativeOverlapped(overlapped As NativeOverlapped *)
    parameters:
    - id: overlapped
      type: System.Threading.NativeOverlapped*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  commentId: M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  id: GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  parent: System.Threading.ThreadPoolBoundHandle
  langs:
  - csharp
  - vb
  name: GetNativeOverlappedState(NativeOverlapped*)
  fullName: System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)
  type: Method
  source:
    remote:
      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNativeOverlappedState
    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs
    startLine: 40
  assemblies:
  - System.Threading.Overlapped
  namespace: System.Threading
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static object GetNativeOverlappedState(NativeOverlapped*overlapped)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function GetNativeOverlappedState(overlapped As NativeOverlapped *) As Object
    parameters:
    - id: overlapped
      type: System.Threading.NativeOverlapped*
    return:
      type: System.Object
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Threading.IOCompletionCallback
  parent: System.Threading
  isExternal: false
  name: IOCompletionCallback
  fullName: System.Threading.IOCompletionCallback
- uid: System.Threading.NativeOverlapped*
  isExternal: false
  name: NativeOverlapped*
  fullName: System.Threading.NativeOverlapped*
  spec.csharp:
  - uid: System.Threading.NativeOverlapped
    name: NativeOverlapped
    fullName: System.Threading.NativeOverlapped
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Threading.NativeOverlapped
    name: NativeOverlapped
    fullName: System.Threading.NativeOverlapped
  - name: '*'
    fullName: '*'
- uid: System.Threading.PreAllocatedOverlapped
  parent: System.Threading
  isExternal: false
  name: PreAllocatedOverlapped
  fullName: System.Threading.PreAllocatedOverlapped
- uid: System.Threading.ThreadPoolBoundHandle
  parent: System.Threading
  isExternal: false
  name: ThreadPoolBoundHandle
  fullName: System.Threading.ThreadPoolBoundHandle
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
