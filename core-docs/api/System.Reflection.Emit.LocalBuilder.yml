items:
- uid: System.Reflection.Emit.LocalBuilder
  commentId: T:System.Reflection.Emit.LocalBuilder
  id: LocalBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.LocalBuilder.IsPinned
  - System.Reflection.Emit.LocalBuilder.LocalIndex
  - System.Reflection.Emit.LocalBuilder.LocalType
  langs:
  - csharp
  - vb
  name: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalBuilder
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 75
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Represents a local variable within a method or constructor.</p>\n"
  remarks: "\n<p>A <strong>LocalBuilder</strong> object can be defined using the <xref href=\"System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example creates a <strong>static</strong> method (<strong>Shared</strong> in Visual Basic) named <code>Function1</code> that returns a string and has a parameter of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. In the body of the method, the code example creates <xref href=\"System.Reflection.Emit.LocalBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects representing two local variables, and sets symbol information for the local variables. The method does not do anything significant, but the method body demonstrates storing a parameter to a local variable, storing a literal string to a local variable, and loading a local variable.</p>LocalBuilder_Sample_SetLocalSymInfo#1"
  syntax:
    content: 'public sealed class LocalBuilder : LocalVariableInfo'
    content.vb: >-
      Public NotInheritable Class LocalBuilder
          Inherits LocalVariableInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.LocalBuilder.IsPinned
  commentId: P:System.Reflection.Emit.LocalBuilder.IsPinned
  id: IsPinned
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  - vb
  name: IsPinned
  fullName: System.Reflection.Emit.LocalBuilder.IsPinned
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPinned
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 78
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a value indicating whether the object referred to by the local variable is pinned in memory.</p>\n"
  remarks: "\n<p>In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.</p>\n"
  syntax:
    content: public override bool IsPinned { get; }
    content.vb: Public Overrides ReadOnly Property IsPinned As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the object referred to by the local variable is pinned in memory; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.LocalBuilder.LocalIndex
  commentId: P:System.Reflection.Emit.LocalBuilder.LocalIndex
  id: LocalIndex
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  - vb
  name: LocalIndex
  fullName: System.Reflection.Emit.LocalBuilder.LocalIndex
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalIndex
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 79
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the zero-based index of the local variable within the method body.</p>\n"
  remarks: "\n<p>Index numbers are assigned to local variables in the order in which they are declared or emitted, beginning with zero.</p>\n"
  syntax:
    content: public override int LocalIndex { get; }
    content.vb: Public Overrides ReadOnly Property LocalIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An integer value that represents the order of declaration of the local variable within the method body.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.LocalBuilder.LocalType
  commentId: P:System.Reflection.Emit.LocalBuilder.LocalType
  id: LocalType
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  - vb
  name: LocalType
  fullName: System.Reflection.Emit.LocalBuilder.LocalType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalType
    path: src/System.Reflection.Emit.ILGeneration/ref/System.Reflection.Emit.ILGeneration.cs
    startLine: 80
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the type of the local variable.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>LocalType</strong>. This code is part of a larger example for the <xref href=\"System.Reflection.Emit.LocalBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>LocalBuilder_Sample_SetLocalSymInfo#2"
  syntax:
    content: public override Type LocalType { get; }
    content.vb: Public Overrides ReadOnly Property LocalType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the local variable.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
