items:
- uid: System.Collections.Generic.Comparer`1
  commentId: T:System.Collections.Generic.Comparer`1
  id: Comparer`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Comparer`1.#ctor
  - System.Collections.Generic.Comparer`1.Compare(`0,`0)
  - System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})
  - System.Collections.Generic.Comparer`1.Default
  langs:
  - csharp
  - vb
  name: Comparer<T>
  fullName: System.Collections.Generic.Comparer<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comparer
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 41
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Provides a base class for implementations of the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  remarks: "\n<p>Derive from this class to provide a custom implementation of the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> interface for use with collection classes such as the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> generic classes.</p>\n<p>The difference between deriving from the <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> class and implementing the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface is as follows:</p>\n<ul><li>\n<p>To specify how two objects should be compared by default, implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface in your class. This ensures that sort operations will use the default comparison code that you provided.</p>\n</li><li>\n<p>To define a comparer to use instead of the default comparer, derive from the <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> class. You can then use this comparer in sort operations that take a comparer as a parameter.</p>\n</li></ul>\n<p>The object returned by the <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property uses the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface (<code>IComparable<T></code> in C#, <code>IComparable(Of T)</code> in Visual Basic) to compare two objects. If type <em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> that uses the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example derives a class, <code>BoxLengthFirst</code>, from the <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> class. This comparer compares two objects of type <code>Box</code>. It sorts them first by length, then by height, and then by width. The <code>Box</code> class implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface to control the default comparison between two <code>Box</code> objects. This default implementation sorts first by height, then by length, and then by width. The example shows the differences between the two comparisons by sorting a list of <code>Box</code> objects first by using the <code>BoxLengthFirst</code> comparer and then by using the default comparer.  </p>System.Collections.Generic.BoxCompare#1"
  syntax:
    content: 'public abstract class Comparer<T> : IComparer<T>, IComparer'
    content.vb: >-
      Public MustInherit Class Comparer(Of T)
          Inherits IComparer(Of T)
          Implements IComparer
    typeParameters:
    - id: T
      description: "\n<p>The type of objects to compare.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.StringComparer
    commentId: T:System.StringComparer
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  inheritance:
  - System.Object
  implements:
  - System.Collections.IComparer
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: System.Collections.Generic.Comparer(Of T)
  name.vb: Comparer(Of T)
- uid: System.Collections.Generic.Comparer`1.#ctor
  commentId: M:System.Collections.Generic.Comparer`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Comparer()
  fullName: System.Collections.Generic.Comparer<T>.Comparer()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 43
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected Comparer()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.Generic.Comparer(Of T).Comparer()
- uid: System.Collections.Generic.Comparer`1.Default
  commentId: P:System.Collections.Generic.Comparer`1.Default
  id: Default
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Default
  fullName: System.Collections.Generic.Comparer<T>.Default
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 44
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns a default sort order comparer for the type specified by the generic argument.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> returned by this property uses the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface (<code>IComparable<T></code> in C#, <code>IComparable(Of T)</code> in Visual Basic) to compare two objects. If type <em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, this property returns a <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> that uses the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property to get an object that performs the default comparison. This example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> class. </p>System.Collections.Generic.BoxCompare#3"
  syntax:
    content: public static Comparer<T> Default { get; }
    content.vb: Public Shared ReadOnly Property Default As Comparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.Comparer`1
      description: "\n<p>An object that inherits <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> and serves as a sort order comparer for type <em>T</em>.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.StringComparer
    commentId: T:System.StringComparer
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: System.Collections.Generic.Comparer(Of T).Default
- uid: System.Collections.Generic.Comparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.Comparer`1.Compare(`0,`0)
  id: Compare(`0,`0)
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Compare(T, T)
  fullName: System.Collections.Generic.Comparer<T>.Compare(T, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 45
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</p>\n"
  remarks: "\n<p>Implement this method to provide a customized sort order comparison for type <em>T</em>. </p>\n"
  example:
  - "\n<p>The following example defines a comparer of <code>Box</code> objects that can be used instead of the default comparer. This example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> class. </p>System.Collections.Generic.BoxCompare#5"
  syntax:
    content: public abstract int Compare(T x, T y)
    content.vb: Public MustOverride Function Compare(x As T, y As T) As Integer
    parameters:
    - id: x
      type: '{T}'
      description: "\n<p>The first object to compare.</p>\n"
    - id: y
      type: '{T}'
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>x</em> is less than <em>y</em>.</p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>x</em> equals <em>y</em>.</p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>x</em> is greater than <em>y</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Type <em>T</em> does not implement either the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.StringComparer
    commentId: T:System.StringComparer
  - type: System.Object
    commentId: T:System.Object
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Collections.Generic.Comparer(Of T).Compare(T, T)
- uid: System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})
  commentId: M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})
  id: Create(System.Comparison{`0})
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Create(Comparison<T>)
  fullName: System.Collections.Generic.Comparer<T>.Create(System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 46
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Creates a comparer by using the specified comparison.</p>\n"
  syntax:
    content: public static Comparer<T> Create(Comparison<T> comparison)
    content.vb: Public Shared Function Create(comparison As Comparison(Of T)) As Comparer(Of T)
    parameters:
    - id: comparison
      type: System.Comparison{{T}}
      description: "\n<p>The comparison to use.</p>\n"
    return:
      type: System.Collections.Generic.Comparer`1
      description: "\n<p>The new comparer.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Generic.Comparer(Of T).Create(System.Comparison(Of T))
  name.vb: Create(Comparison(Of T))
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.Comparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Comparer<T>
  fullName: System.Collections.Generic.Comparer<T>
  fullname.vb: System.Collections.Generic.Comparer(Of T)
  name.vb: Comparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Comparer`1
    name: Comparer
    fullName: System.Collections.Generic.Comparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Comparer`1
    name: Comparer
    fullName: System.Collections.Generic.Comparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Comparison{{T}}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
