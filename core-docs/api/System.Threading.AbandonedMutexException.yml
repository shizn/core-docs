items:
- uid: System.Threading.AbandonedMutexException
  commentId: T:System.Threading.AbandonedMutexException
  id: AbandonedMutexException
  parent: System.Threading
  children:
  - System.Threading.AbandonedMutexException.#ctor
  - System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)
  - System.Threading.AbandonedMutexException.#ctor(System.String)
  - System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)
  - System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)
  - System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)
  - System.Threading.AbandonedMutexException.Mutex
  - System.Threading.AbandonedMutexException.MutexIndex
  langs:
  - csharp
  - vb
  name: AbandonedMutexException
  fullName: System.Threading.AbandonedMutexException
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AbandonedMutexException
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 10
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>The exception that is thrown when one thread acquires a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that another thread has abandoned by exiting without releasing it.</p>\n"
  remarks: "\n<p>When a thread abandons a mutex, the exception is thrown in the next thread that acquires the mutex. The thread might acquire the mutex because it was already waiting on the mutex or because it enters the mutex at a later time.</p>\n<p>An abandoned mutex indicates a serious programming error. When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state. Prior to version 2.0 of the .NET Framework, such problems were hard to discover because no exception was thrown if a wait completed as the result of an abandoned mutex. For more information, see the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The next thread to request ownership of the mutex can handle this exception and proceed, provided that the integrity of the data structures can be verified.</p>\n"
  example:
  - "\n<p>The following code example executes a thread that abandons five mutexes, demonstrating their effects on the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see>, <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see>, and <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> methods. The value of the <xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref> property is displayed for the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> call.</p>\n<p>The call to the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> method is interrupted by one of the abandoned mutexes. The other abandoned mutex could still cause an <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown by subsequent wait methods.</p>System.Threading.AbandonedMutexException#1"
  syntax:
    content: 'public class AbandonedMutexException : Exception'
    content.vb: >-
      Public Class AbandonedMutexException
          Inherits Exception
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.AbandonedMutexException.#ctor
  commentId: M:System.Threading.AbandonedMutexException.#ctor
  id: '#ctor'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException()
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException()
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 12
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with default values.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"The wait completed due to an abandoned mutex.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The system-supplied error message string. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.Mutex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>–1 (minus one).</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public AbandonedMutexException()
    content.vb: Public Sub New
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)
  id: '#ctor(System.Int32,System.Threading.WaitHandle)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(Int32, WaitHandle)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.Int32, System.Threading.WaitHandle)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 13
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified index for the abandoned mutex, if applicable, and a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the mutex.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"The wait completed due to an abandoned mutex.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> initialized with this constructor.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A system-supplied error message string.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.Mutex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>handle</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>location</em>.</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public AbandonedMutexException(int location, WaitHandle handle)
    content.vb: Public Sub New(location As Integer, handle As WaitHandle)
    parameters:
    - id: location
      type: System.Int32
      description: "\n<p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> method, or –1 if the exception is thrown for the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> methods.</p>\n"
    - id: handle
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.AbandonedMutexException.#ctor(System.String)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 14
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The content of <em>message</em> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> initialized with this constructor.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>message</em>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.Mutex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>–1 (minus one).</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public AbandonedMutexException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String, Exception)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 15
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and inner exception. </p>\n"
  remarks: "\n<p>The content of <em>message</em> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> initialized with this constructor.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>inner</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>message</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.Mutex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>–1 (minus one).</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public AbandonedMutexException(string message, Exception inner)
    content.vb: Public Sub New(message As String, inner As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)
  id: '#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String, Exception, Int32, WaitHandle)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String, System.Exception, System.Int32, System.Threading.WaitHandle)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 16
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message, the inner exception, the index for the abandoned mutex, if applicable, and a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the mutex.</p>\n"
  remarks: "\n<p>The content of <em>message</em> is a text string intended to inform the user about the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> initialized with this constructor.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>inner</em>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>message</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.Mutex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>handle</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>location</em>.</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public AbandonedMutexException(string message, Exception inner, int location, WaitHandle handle)
    content.vb: Public Sub New(message As String, inner As Exception, location As Integer, handle As WaitHandle)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception.</p>\n"
    - id: location
      type: System.Int32
      description: "\n<p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> method, or –1 if the exception is thrown for the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> methods.</p>\n"
    - id: handle
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)
  id: '#ctor(System.String,System.Int32,System.Threading.WaitHandle)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String, Int32, WaitHandle)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String, System.Int32, System.Threading.WaitHandle)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 17
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message, the index of the abandoned mutex, if applicable, and the abandoned mutex. </p>\n"
  remarks: "\n<p>The content of <em>message</em> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> initialized with this constructor.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>message</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.Mutex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>handle</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>location</em>.</p>\n</td></tr></tbody></table>\n"
  example:
  - 
  syntax:
    content: public AbandonedMutexException(string message, int location, WaitHandle handle)
    content.vb: Public Sub New(message As String, location As Integer, handle As WaitHandle)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
    - id: location
      type: System.Int32
      description: "\n<p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> method, or –1 if the exception is thrown for the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> methods.</p>\n"
    - id: handle
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.AbandonedMutexException.Mutex
  commentId: P:System.Threading.AbandonedMutexException.Mutex
  id: Mutex
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: Mutex
  fullName: System.Threading.AbandonedMutexException.Mutex
  type: Property
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Mutex
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 18
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the abandoned mutex that caused the exception, if known.</p>\n"
  remarks: "\n<p>If the exception is thrown on a call to the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> method, the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> returned is the abandoned mutex with the lowest index in the array of <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> objects that was passed to <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see>, or <strong>null</strong> if the abandoned mutex could not be identified. If the exception is thrown on a call to <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see>, this property always returns <strong>null</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public Mutex Mutex { get; }
    content.vb: Public ReadOnly Property Mutex As Mutex
    parameters: []
    return:
      type: System.Threading.Mutex
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex, or <strong>null</strong> if the abandoned mutex could not be identified.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.AbandonedMutexException.MutexIndex
  commentId: P:System.Threading.AbandonedMutexException.MutexIndex
  id: MutexIndex
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: MutexIndex
  fullName: System.Threading.AbandonedMutexException.MutexIndex
  type: Property
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MutexIndex
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 19
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the index of the abandoned mutex that caused the exception, if known.</p>\n"
  remarks: "\n<p>If the exception is thrown on a call to the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> method, this property returns the index of the abandoned mutex with the lowest index in the array of <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> objects that was passed to <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see>, or –1 if the abandoned mutex could not be identified. If the exception is thrown on a call to <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see>, this property always returns –1.</p>\n"
  example:
  - "\n<p>The following code example executes a thread that abandons five mutexes. The abandoned mutexes are used to demonstrate the effects on the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see>, <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see>, and <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> method calls. The value of the <xref href=\"System.Threading.AbandonedMutexException.MutexIndex\" data-throw-if-not-resolved=\"false\"></xref> property is displayed for the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> call.</p>\n<p>The call to <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> is interrupted by one of the abandoned mutexes. The other abandoned mutex could still cause an <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown by subsequent wait methods.</p>System.Threading.AbandonedMutexException#1"
  syntax:
    content: public int MutexIndex { get; }
    content.vb: Public ReadOnly Property MutexIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The index, in the array of wait handles passed to the <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> method, of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex, or –1 if the index of the abandoned mutex could not be determined.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  fullName: System.Threading.Mutex
