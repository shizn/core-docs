items:
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeRegistryHandle
  id: SafeRegistryHandle
  parent: Microsoft.Win32.SafeHandles
  children:
  - Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)
  - Microsoft.Win32.SafeHandles.SafeRegistryHandle.IsInvalid
  - Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle
  langs:
  - csharp
  - vb
  name: SafeRegistryHandle
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  type: Class
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/SafeHandles/SafeRegistryHandle.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeRegistryHandle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/SafeHandles/SafeRegistryHandle.cs
    startLine: 9
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Represents a safe handle to the Windows registry.</p>\n"
  remarks: "\n<p>You can use platform invoke on the native <strong>RegCreateKeyEx</strong> Windows function to obtain a <xref href=\"Microsoft.Win32.SafeHandles.SafeRegistryHandle\" data-throw-if-not-resolved=\"false\"></xref> object, and then use it to create registry keys with the <xref href=\"Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)\" data-throw-if-not-resolved=\"false\"></xref> method.  </p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class SafeRegistryHandle : SafeHandle'
    content.vb: >-
      Public NotInheritable Class SafeRegistryHandle
          Inherits SafeHandle
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)
  commentId: M:Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  langs:
  - csharp
  - vb
  name: SafeRegistryHandle(IntPtr, Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.SafeRegistryHandle(System.IntPtr, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/Microsoft.Win32.Registry/ref/Microsoft.Win32.Registry.cs
    startLine: 103
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeRegistryHandle\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>Specifying <strong>false</strong> for <em>ownsHandle</em> is not recommended.</p>\n"
  example:
  - 
  syntax:
    content: public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle)
    content.vb: Public Sub New(preexistingHandle As IntPtr, ownsHandle As Boolean)
    parameters:
    - id: preexistingHandle
      type: System.IntPtr
      description: "\n<p>An object that represents the pre-existing handle to use.</p>\n"
    - id: ownsHandle
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to reliably release the handle during the finalization phase; <strong>false</strong> to prevent reliable release.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle
  commentId: M:Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/SafeHandles/SafeRegistryHandle.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReleaseHandle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/SafeHandles/SafeRegistryHandle.cs
    startLine: 28
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle()
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.IsInvalid
  commentId: P:Microsoft.Win32.SafeHandles.SafeRegistryHandle.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  langs:
  - csharp
  - vb
  name: IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.IsInvalid
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/SafeHandles/SafeRegistryHandle.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInvalid
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/SafeHandles/SafeRegistryHandle.cs
    startLine: 21
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: public override bool IsInvalid { get; }
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
