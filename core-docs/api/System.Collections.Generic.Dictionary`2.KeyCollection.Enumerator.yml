items:
- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator
  commentId: T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator
  id: Dictionary`2.KeyCollection.Enumerator
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current
  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose
  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext
  langs:
  - csharp
  - vb
  name: Dictionary<TKey, TValue>.KeyCollection.Enumerator
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator
  type: Struct
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 120
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Enumerates the elements of a <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n"
  syntax:
    content: 'public struct Enumerator : IEnumerator<TKey>, IEnumerator, IDisposable'
    content.vb: >-
      Public Structure Enumerator
          Implements IEnumerator(Of TKey), IEnumerator, IDisposable
  seealso:
  - type: System.Collections.Generic.Dictionary`2.Enumerator
    commentId: T:System.Collections.Generic.Dictionary`2.Enumerator
  - type: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
    commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
  - type: System.Collections.Generic.IEnumerable`1
    commentId: T:System.Collections.Generic.IEnumerable`1
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  implements:
  - System.Collections.Generic.IEnumerator{{TKey}}
  - System.Collections.IEnumerator
  - System.IDisposable
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator
  name.vb: Dictionary(Of TKey, TValue).KeyCollection.Enumerator
- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current
  commentId: P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current
  id: Current
  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.Current
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 123
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the element at the current position of the enumerator.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined under any of the following conditions:</p>\n<ul><li>\n<p>The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.   <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>The last call to <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the collection.</p>\n</li></ul>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>For better performance, this property does not throw an exception if the enumerator is positioned before the first element or after the last element; the value of the property is undefined. </p>\n"
  syntax:
    content: public TKey Current { get; }
    content.vb: Public ReadOnly Property Current As TKey
    parameters: []
    return:
      type: '{TKey}'
      description: "\n<p>The element in the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> at the current position of the enumerator.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext
    commentId: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.Current
- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose
  commentId: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose
  id: Dispose
  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 125
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Releases all resources used by the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is called by the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  seealso:
  - type: System.IDisposable.Dispose
    commentId: M:System.IDisposable.Dispose
  - type: System.Object.Finalize
    commentId: M:System.Object.Finalize
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.Dispose()
- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext
  commentId: M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext
  id: MoveNext
  parent: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveNext
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 126
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Advances the enumerator to the next element of the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>After an enumerator is created, the enumerator is positioned before the first element in the collection, and the first call to <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> advances the enumerator to the first element of the collection.</p>\n<p>If <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated.</p>\n"
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created. </p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current
    commentId: P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection.Enumerator.MoveNext()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerator{{TKey}}
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<TKey>
  fullName: System.Collections.Generic.IEnumerator<TKey>
  fullname.vb: System.Collections.Generic.IEnumerator(Of TKey)
  name.vb: Generic.IEnumerator(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
