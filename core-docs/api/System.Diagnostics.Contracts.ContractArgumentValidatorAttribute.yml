items:
- uid: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute
  commentId: T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute
  id: ContractArgumentValidatorAttribute
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor
  langs:
  - csharp
  - vb
  name: ContractArgumentValidatorAttribute
  fullName: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContractArgumentValidatorAttribute
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 59
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Enables the factoring of legacy <strong>if-then-throw</strong> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</p>\n"
  remarks: "\n<p>If your code uses explicit <strong>if-then-throw</strong> code to validate parameters, you may be employing helper methods that perform checks and throw particular exceptions on failure, as shown in the following example.</p>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1<p>In this example, <code>Execute</code> has an elective precondition specifying that the parameter value should not be <strong>null</strong>. To enable the contract tools to recognize that the call to <code>ValidationHelper.NotNull</code> represents a contract, you can mark the called method with the  <xref href=\"System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute. The <xref href=\"System.Diagnostics.Contracts.Contract.EndContractBlock\" data-throw-if-not-resolved=\"false\"></xref> method call should be used to enable the tools to extract the proper specifications for document generation and static checking, as follows.</p>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2<p>In addition to <strong>if-then-throw</strong> statements, the contract section of contract validator methods may contain calls to other contract validator methods. However, no other contracts (such as <xref href=\"System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>) are allowed. Code that follows the <xref href=\"System.Diagnostics.Contracts.Contract.EndContractBlock\" data-throw-if-not-resolved=\"false\"></xref> call is ignored by all contract tools. </p><p>The following example shows a range argument validator written in terms of an existing <code>NotNull</code> validator method. </p>System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3<p>From a specification point of view, the <code>Execute</code> method has the following three contracts:</p><pre><code>Contract.Requires<ArgumentNullException>(data != null);\nContract.Requires<ArgumentOutOfRangeException>(position >= 0);\nContract.Requires<ArgumentOutOfRangeException>(position < data.Length);</code></pre><p>In standard methods, calls to contract validator methods can be freely mixed with other contracts such as <xref href=\"System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  syntax:
    content: 'public sealed class ContractArgumentValidatorAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class ContractArgumentValidatorAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor
  commentId: M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute
  langs:
  - csharp
  - vb
  name: ContractArgumentValidatorAttribute()
  fullName: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.ContractArgumentValidatorAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 63
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public ContractArgumentValidatorAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics.Contracts
  isExternal: false
  name: System.Diagnostics.Contracts
  fullName: System.Diagnostics.Contracts
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
